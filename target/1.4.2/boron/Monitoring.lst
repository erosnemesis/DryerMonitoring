
c:/Users/erosn/ownCloud/ParticleProjects/Monitoring/target/1.4.2/boron/Monitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003f50  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d7f70  000d7f70  00007f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000000  2003f400  2003f400  00018018  2**0
                  CONTENTS
  5 .data         00000070  2003e14c  000d7f78  0000e14c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000634  2003e1c0  2003e1c0  0001e1c0  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000d7fe8  000d7fe8  00017fe8  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000d8014  000d8014  00018014  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000e17fd  00000000  00000000  00018018  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00012461  00000000  00000000  000f9815  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001f8f5  00000000  00000000  0010bc76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002868  00000000  00000000  0012b56b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004a60  00000000  00000000  0012ddd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00038a39  00000000  00000000  00132833  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002d41f  00000000  00000000  0016b26c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001054d5  00000000  00000000  0019868b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000d718  00000000  00000000  0029db60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fbd5 	bl	d77e0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fbda 	bl	d77f6 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e14c 	.word	0x2003e14c
   d404c:	000d7f78 	.word	0x000d7f78
   d4050:	2003e1bc 	.word	0x2003e1bc
   d4054:	2003e1c0 	.word	0x2003e1c0
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 fb81 	bl	d5764 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d7f64 	.word	0x000d7f64
   d4084:	000d7f20 	.word	0x000d7f20

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b85e 	b.w	d4148 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f9e3 	bl	d4458 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 bb33 	b.w	d5700 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 be27 	b.w	d4cec <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 be2d 	b.w	d4cfc <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 be2b 	b.w	d4cfc <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   d40b6:	6810      	ldr	r0, [r2, #0]
   d40b8:	4770      	bx	lr
	...

000d40bc <__tcf_2>:
const uint8_t ALARM[alarmCount] = {D4, D5, D6, D8};
int alarmValues[alarmCount] = {0, 0, 0, 0};
byte alarmState[alarmCount] = {0, 0, 0, 0};
String ampValue[ampCount];
String powerValue[ampCount];
String names[alarmCount];
   d40bc:	b510      	push	{r4, lr}
   d40be:	4c09      	ldr	r4, [pc, #36]	; (d40e4 <__tcf_2+0x28>)
   d40c0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d40c4:	f001 f822 	bl	d510c <_ZN6StringD1Ev>
   d40c8:	f104 0020 	add.w	r0, r4, #32
   d40cc:	f001 f81e 	bl	d510c <_ZN6StringD1Ev>
   d40d0:	f104 0010 	add.w	r0, r4, #16
   d40d4:	f001 f81a 	bl	d510c <_ZN6StringD1Ev>
   d40d8:	4620      	mov	r0, r4
   d40da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d40de:	f001 b815 	b.w	d510c <_ZN6StringD1Ev>
   d40e2:	bf00      	nop
   d40e4:	2003e234 	.word	0x2003e234

000d40e8 <__tcf_1>:
const uint16_t rPins[relayCount] = {D3, D2, D1, D0};
const uint8_t ALARM[alarmCount] = {D4, D5, D6, D8};
int alarmValues[alarmCount] = {0, 0, 0, 0};
byte alarmState[alarmCount] = {0, 0, 0, 0};
String ampValue[ampCount];
String powerValue[ampCount];
   d40e8:	b538      	push	{r3, r4, r5, lr}
   d40ea:	4d06      	ldr	r5, [pc, #24]	; (d4104 <__tcf_1+0x1c>)
   d40ec:	2400      	movs	r4, #0
   d40ee:	f104 0070 	add.w	r0, r4, #112	; 0x70
   d40f2:	4428      	add	r0, r5
   d40f4:	3c10      	subs	r4, #16
   d40f6:	f001 f809 	bl	d510c <_ZN6StringD1Ev>
   d40fa:	f114 0f80 	cmn.w	r4, #128	; 0x80
   d40fe:	d1f6      	bne.n	d40ee <__tcf_1+0x6>
   d4100:	bd38      	pop	{r3, r4, r5, pc}
   d4102:	bf00      	nop
   d4104:	2003e304 	.word	0x2003e304

000d4108 <__tcf_0>:
const String PUBLISH_NAME = "Dryer_Alarms"; // DO NOT MODIFY THIS. GOOGLE CLOUD PUBSUB DEPENDS ON THIS
const uint16_t rPins[relayCount] = {D3, D2, D1, D0};
const uint8_t ALARM[alarmCount] = {D4, D5, D6, D8};
int alarmValues[alarmCount] = {0, 0, 0, 0};
byte alarmState[alarmCount] = {0, 0, 0, 0};
String ampValue[ampCount];
   d4108:	b538      	push	{r3, r4, r5, lr}
   d410a:	4d06      	ldr	r5, [pc, #24]	; (d4124 <__tcf_0+0x1c>)
   d410c:	2400      	movs	r4, #0
   d410e:	f104 0070 	add.w	r0, r4, #112	; 0x70
   d4112:	4428      	add	r0, r5
   d4114:	3c10      	subs	r4, #16
   d4116:	f000 fff9 	bl	d510c <_ZN6StringD1Ev>
   d411a:	f114 0f80 	cmn.w	r4, #128	; 0x80
   d411e:	d1f6      	bne.n	d410e <__tcf_0+0x6>
   d4120:	bd38      	pop	{r3, r4, r5, pc}
   d4122:	bf00      	nop
   d4124:	2003e284 	.word	0x2003e284

000d4128 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK23CloudVariableTypeString.isra.2>:
        static_assert(sizeof(T)==0, "\n\nUse Particle.variable(\"name\", myVar, STRING); without & in front of myVar\n\n");
        return false;
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
   d4128:	b507      	push	{r0, r1, r2, lr}
    {
        spark_variable_t extra;
        extra.size = sizeof(extra);
   d412a:	2308      	movs	r3, #8
   d412c:	f8ad 3000 	strh.w	r3, [sp]
        extra.update = update_string_variable;
   d4130:	4b04      	ldr	r3, [pc, #16]	; (d4144 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK23CloudVariableTypeString.isra.2+0x1c>)
   d4132:	9301      	str	r3, [sp, #4]
        return CLOUD_FN(spark_variable(varKey, userVar, CloudVariableTypeString::value(), &extra), false);
   d4134:	2204      	movs	r2, #4
   d4136:	466b      	mov	r3, sp
   d4138:	f000 fdb0 	bl	d4c9c <spark_variable>
    }
   d413c:	b003      	add	sp, #12
   d413e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4142:	bf00      	nop
   d4144:	000d40b7 	.word	0x000d40b7

000d4148 <setup>:
void setAlarm(bool inAlarm, int alarmNum);
int alarmReset(String alarmNum);
void setAmpReadings();

// setup() runs once, when the device is first turned on.
void setup() {
   d4148:	b5f0      	push	{r4, r5, r6, r7, lr}
  #if MONITOR_DEBUG
    Serial.begin();
  #endif

  for(int i = 0; i < alarmCount; i++){
    pinMode(ALARM[i], INPUT);
   d414a:	4f3d      	ldr	r7, [pc, #244]	; (d4240 <setup+0xf8>)
    names[i] = "Dryer_Alarm_" + String(i+1);
   d414c:	4d3d      	ldr	r5, [pc, #244]	; (d4244 <setup+0xfc>)
void setAlarm(bool inAlarm, int alarmNum);
int alarmReset(String alarmNum);
void setAmpReadings();

// setup() runs once, when the device is first turned on.
void setup() {
   d414e:	b089      	sub	sp, #36	; 0x24

  #if MONITOR_DEBUG
    Serial.begin();
  #endif

  for(int i = 0; i < alarmCount; i++){
   d4150:	2400      	movs	r4, #0
    pinMode(ALARM[i], INPUT);
   d4152:	5d38      	ldrb	r0, [r7, r4]
   d4154:	2100      	movs	r1, #0
   d4156:	f002 f9f5 	bl	d6544 <pinMode>
   d415a:	4626      	mov	r6, r4

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d415c:	493a      	ldr	r1, [pc, #232]	; (d4248 <setup+0x100>)
    names[i] = "Dryer_Alarm_" + String(i+1);
   d415e:	3401      	adds	r4, #1
   d4160:	a804      	add	r0, sp, #16
   d4162:	f001 f81a 	bl	d519a <_ZN6StringC1EPK19__FlashStringHelper>
   d4166:	220a      	movs	r2, #10
   d4168:	4621      	mov	r1, r4
   d416a:	4668      	mov	r0, sp
   d416c:	f001 f88a 	bl	d5284 <_ZN6StringC1Eih>
   d4170:	4669      	mov	r1, sp
   d4172:	a804      	add	r0, sp, #16
   d4174:	f001 f8dd 	bl	d5332 <_ZplRK15StringSumHelperRK6String>
   d4178:	4601      	mov	r1, r0
   d417a:	eb05 1006 	add.w	r0, r5, r6, lsl #4
   d417e:	f001 f83c 	bl	d51fa <_ZN6StringaSERKS_>
   d4182:	4668      	mov	r0, sp
   d4184:	f000 ffc2 	bl	d510c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4188:	a804      	add	r0, sp, #16
   d418a:	f000 ffbf 	bl	d510c <_ZN6StringD1Ev>

  #if MONITOR_DEBUG
    Serial.begin();
  #endif

  for(int i = 0; i < alarmCount; i++){
   d418e:	2c04      	cmp	r4, #4
   d4190:	d1df      	bne.n	d4152 <setup+0xa>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d4192:	4a2e      	ldr	r2, [pc, #184]	; (d424c <setup+0x104>)
   d4194:	492e      	ldr	r1, [pc, #184]	; (d4250 <setup+0x108>)
   d4196:	482f      	ldr	r0, [pc, #188]	; (d4254 <setup+0x10c>)
  }

  Particle.function("Reset_Dryer", alarmReset);

  for(int i = 0; i < relayCount; i++){
    pinMode(rPins[i], OUTPUT);
   d4198:	4e2f      	ldr	r6, [pc, #188]	; (d4258 <setup+0x110>)
   d419a:	f001 fb5b 	bl	d5854 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    names[i] = "Dryer_Alarm_" + String(i+1);
  }

  Particle.function("Reset_Dryer", alarmReset);

  for(int i = 0; i < relayCount; i++){
   d419e:	2400      	movs	r4, #0
    pinMode(rPins[i], OUTPUT);
   d41a0:	f836 5014 	ldrh.w	r5, [r6, r4, lsl #1]
   d41a4:	2101      	movs	r1, #1
   d41a6:	4628      	mov	r0, r5
   d41a8:	f002 f9cc 	bl	d6544 <pinMode>
    names[i] = "Dryer_Alarm_" + String(i+1);
  }

  Particle.function("Reset_Dryer", alarmReset);

  for(int i = 0; i < relayCount; i++){
   d41ac:	3401      	adds	r4, #1
    pinMode(rPins[i], OUTPUT);
    digitalWrite(rPins[i], HIGH);
   d41ae:	2101      	movs	r1, #1
   d41b0:	4628      	mov	r0, r5
   d41b2:	f002 f9d8 	bl	d6566 <digitalWrite>
    names[i] = "Dryer_Alarm_" + String(i+1);
  }

  Particle.function("Reset_Dryer", alarmReset);

  for(int i = 0; i < relayCount; i++){
   d41b6:	2c04      	cmp	r4, #4
   d41b8:	d1f2      	bne.n	d41a0 <setup+0x58>
    pinMode(rPins[i], OUTPUT);
    digitalWrite(rPins[i], HIGH);
  }

  monitor.begin();
   d41ba:	4828      	ldr	r0, [pc, #160]	; (d425c <setup+0x114>)
        return _variable(varKey, &var, DOUBLE);
    }

    static inline bool _variable(const char* varKey, const String& var)
    {
        return _variable(varKey, &var, STRING);
   d41bc:	4f28      	ldr	r7, [pc, #160]	; (d4260 <setup+0x118>)
   d41be:	f000 fb07 	bl	d47d0 <_ZN14CurrentMonitor5beginEv>
   d41c2:	4928      	ldr	r1, [pc, #160]	; (d4264 <setup+0x11c>)
   d41c4:	4828      	ldr	r0, [pc, #160]	; (d4268 <setup+0x120>)
   d41c6:	f7ff ffaf 	bl	d4128 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK23CloudVariableTypeString.isra.2>
   d41ca:	4928      	ldr	r1, [pc, #160]	; (d426c <setup+0x124>)
   d41cc:	4828      	ldr	r0, [pc, #160]	; (d4270 <setup+0x128>)
   d41ce:	f7ff ffab 	bl	d4128 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK23CloudVariableTypeString.isra.2>
   d41d2:	2400      	movs	r4, #0
   d41d4:	b2e6      	uxtb	r6, r4
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d41d6:	4927      	ldr	r1, [pc, #156]	; (d4274 <setup+0x12c>)
   d41d8:	a804      	add	r0, sp, #16
   d41da:	f000 ffde 	bl	d519a <_ZN6StringC1EPK19__FlashStringHelper>

  Particle.variable("Signal_Strength", signalStrength);
  Particle.variable("Signal_Quality", signalQuality);
  for(uint8_t i = 0; i < ampCount; i++){
    Particle.variable("Amp_" + String(i), ampValue[i]);
   d41de:	220a      	movs	r2, #10
   d41e0:	4631      	mov	r1, r6
   d41e2:	4668      	mov	r0, sp
   d41e4:	f001 f83c 	bl	d5260 <_ZN6StringC1Ehh>
   d41e8:	4669      	mov	r1, sp
   d41ea:	a804      	add	r0, sp, #16
   d41ec:	f001 f8a1 	bl	d5332 <_ZplRK15StringSumHelperRK6String>
   d41f0:	0125      	lsls	r5, r4, #4
   d41f2:	1979      	adds	r1, r7, r5
   d41f4:	6800      	ldr	r0, [r0, #0]
   d41f6:	f7ff ff97 	bl	d4128 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK23CloudVariableTypeString.isra.2>
   d41fa:	4668      	mov	r0, sp
   d41fc:	f000 ff86 	bl	d510c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4200:	a804      	add	r0, sp, #16
   d4202:	f000 ff83 	bl	d510c <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4206:	491c      	ldr	r1, [pc, #112]	; (d4278 <setup+0x130>)
   d4208:	a804      	add	r0, sp, #16
   d420a:	f000 ffc6 	bl	d519a <_ZN6StringC1EPK19__FlashStringHelper>
    Particle.variable("Power_" + String(i), powerValue[i]);
   d420e:	220a      	movs	r2, #10
   d4210:	4631      	mov	r1, r6
   d4212:	4668      	mov	r0, sp
   d4214:	f001 f824 	bl	d5260 <_ZN6StringC1Ehh>
   d4218:	4669      	mov	r1, sp
   d421a:	a804      	add	r0, sp, #16
   d421c:	f001 f889 	bl	d5332 <_ZplRK15StringSumHelperRK6String>
   d4220:	4916      	ldr	r1, [pc, #88]	; (d427c <setup+0x134>)
   d4222:	6800      	ldr	r0, [r0, #0]
   d4224:	4429      	add	r1, r5
   d4226:	f7ff ff7f 	bl	d4128 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK23CloudVariableTypeString.isra.2>
   d422a:	4668      	mov	r0, sp
   d422c:	f000 ff6e 	bl	d510c <_ZN6StringD1Ev>
   d4230:	3401      	adds	r4, #1

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4232:	a804      	add	r0, sp, #16
   d4234:	f000 ff6a 	bl	d510c <_ZN6StringD1Ev>

  monitor.begin();

  Particle.variable("Signal_Strength", signalStrength);
  Particle.variable("Signal_Quality", signalQuality);
  for(uint8_t i = 0; i < ampCount; i++){
   d4238:	2c08      	cmp	r4, #8
   d423a:	d1cb      	bne.n	d41d4 <setup+0x8c>
    Particle.variable("Amp_" + String(i), ampValue[i]);
    Particle.variable("Power_" + String(i), powerValue[i]);
  }

}
   d423c:	b009      	add	sp, #36	; 0x24
   d423e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4240:	000d7a6f 	.word	0x000d7a6f
   d4244:	2003e234 	.word	0x2003e234
   d4248:	000d79e4 	.word	0x000d79e4
   d424c:	000d79f1 	.word	0x000d79f1
   d4250:	000d44dd 	.word	0x000d44dd
   d4254:	000d5829 	.word	0x000d5829
   d4258:	000d7a74 	.word	0x000d7a74
   d425c:	2003e1e0 	.word	0x2003e1e0
   d4260:	2003e284 	.word	0x2003e284
   d4264:	2003e1c8 	.word	0x2003e1c8
   d4268:	000d79fd 	.word	0x000d79fd
   d426c:	2003e384 	.word	0x2003e384
   d4270:	000d7a0d 	.word	0x000d7a0d
   d4274:	000d7a1c 	.word	0x000d7a1c
   d4278:	000d7a21 	.word	0x000d7a21
   d427c:	2003e304 	.word	0x2003e304

000d4280 <_Z14setAmpReadingsv>:
  }
  Serial.println();
  #endif
}

void setAmpReadings(){
   d4280:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4282:	2400      	movs	r4, #0
   d4284:	b085      	sub	sp, #20
  for(uint8_t i = 0; i < ampCount; i++){
    double amp, power;
    amp = monitor.processAdc(i);
   d4286:	b2e1      	uxtb	r1, r4
   d4288:	4815      	ldr	r0, [pc, #84]	; (d42e0 <_Z14setAmpReadingsv+0x60>)
   d428a:	f000 fb0d 	bl	d48a8 <_ZN14CurrentMonitor10processAdcEh>
    power = amp * knownVoltage;
    ampValue[i] = String(amp);
   d428e:	2106      	movs	r1, #6
   d4290:	4668      	mov	r0, sp
}

void setAmpReadings(){
  for(uint8_t i = 0; i < ampCount; i++){
    double amp, power;
    amp = monitor.processAdc(i);
   d4292:	ec57 6b10 	vmov	r6, r7, d0
    power = amp * knownVoltage;
    ampValue[i] = String(amp);
   d4296:	f001 f822 	bl	d52de <_ZN6StringC1Edi>
   d429a:	4812      	ldr	r0, [pc, #72]	; (d42e4 <_Z14setAmpReadingsv+0x64>)
   d429c:	0125      	lsls	r5, r4, #4
   d429e:	4669      	mov	r1, sp
   d42a0:	4428      	add	r0, r5
   d42a2:	f000 ffc4 	bl	d522e <_ZN6StringaSEOS_>
   d42a6:	4668      	mov	r0, sp
   d42a8:	f000 ff30 	bl	d510c <_ZN6StringD1Ev>
    powerValue[i] = String(power);
   d42ac:	2200      	movs	r2, #0
   d42ae:	4b0e      	ldr	r3, [pc, #56]	; (d42e8 <_Z14setAmpReadingsv+0x68>)
   d42b0:	4630      	mov	r0, r6
   d42b2:	4639      	mov	r1, r7
   d42b4:	f002 fe02 	bl	d6ebc <__aeabi_dmul>
   d42b8:	ec41 0b10 	vmov	d0, r0, r1
   d42bc:	2106      	movs	r1, #6
   d42be:	4668      	mov	r0, sp
   d42c0:	f001 f80d 	bl	d52de <_ZN6StringC1Edi>
   d42c4:	4809      	ldr	r0, [pc, #36]	; (d42ec <_Z14setAmpReadingsv+0x6c>)
   d42c6:	4669      	mov	r1, sp
   d42c8:	4428      	add	r0, r5
   d42ca:	f000 ffb0 	bl	d522e <_ZN6StringaSEOS_>
   d42ce:	3401      	adds	r4, #1
   d42d0:	4668      	mov	r0, sp
   d42d2:	f000 ff1b 	bl	d510c <_ZN6StringD1Ev>
  Serial.println();
  #endif
}

void setAmpReadings(){
  for(uint8_t i = 0; i < ampCount; i++){
   d42d6:	2c08      	cmp	r4, #8
   d42d8:	d1d5      	bne.n	d4286 <_Z14setAmpReadingsv+0x6>
    amp = monitor.processAdc(i);
    power = amp * knownVoltage;
    ampValue[i] = String(amp);
    powerValue[i] = String(power);
  }
}
   d42da:	b005      	add	sp, #20
   d42dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d42de:	bf00      	nop
   d42e0:	2003e1e0 	.word	0x2003e1e0
   d42e4:	2003e284 	.word	0x2003e284
   d42e8:	405d8000 	.word	0x405d8000
   d42ec:	2003e304 	.word	0x2003e304

000d42f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d42f0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d42f2:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d42f4:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d42f6:	b17c      	cbz	r4, d4318 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d42f8:	6863      	ldr	r3, [r4, #4]
   d42fa:	3b01      	subs	r3, #1
   d42fc:	6063      	str	r3, [r4, #4]
   d42fe:	b95b      	cbnz	r3, d4318 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4300:	6823      	ldr	r3, [r4, #0]
   d4302:	4620      	mov	r0, r4
   d4304:	689b      	ldr	r3, [r3, #8]
   d4306:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4308:	68a3      	ldr	r3, [r4, #8]
   d430a:	3b01      	subs	r3, #1
   d430c:	60a3      	str	r3, [r4, #8]
   d430e:	b91b      	cbnz	r3, d4318 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4310:	6823      	ldr	r3, [r4, #0]
   d4312:	4620      	mov	r0, r4
   d4314:	68db      	ldr	r3, [r3, #12]
   d4316:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4318:	4628      	mov	r0, r5
   d431a:	bd38      	pop	{r3, r4, r5, pc}

000d431c <_Z8setAlarmbi>:

void setAlarm(bool inAlarm, int alarmNum){
   d431c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d431e:	460c      	mov	r4, r1
   d4320:	b097      	sub	sp, #92	; 0x5c
   d4322:	4d45      	ldr	r5, [pc, #276]	; (d4438 <_Z8setAlarmbi+0x11c>)
   d4324:	4e45      	ldr	r6, [pc, #276]	; (d443c <_Z8setAlarmbi+0x120>)
  
  if(inAlarm){
   d4326:	2800      	cmp	r0, #0
   d4328:	d037      	beq.n	d439a <_Z8setAlarmbi+0x7e>
    String alarmStr = String("Dryer ") + String(alarmNum+1) + String(" in Alarm");
   d432a:	4945      	ldr	r1, [pc, #276]	; (d4440 <_Z8setAlarmbi+0x124>)
   d432c:	a806      	add	r0, sp, #24
   d432e:	f000 ff34 	bl	d519a <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4332:	a906      	add	r1, sp, #24
   d4334:	a80e      	add	r0, sp, #56	; 0x38
   d4336:	f000 ff6f 	bl	d5218 <_ZN6StringC1ERKS_>
   d433a:	220a      	movs	r2, #10
   d433c:	1c61      	adds	r1, r4, #1
   d433e:	a80a      	add	r0, sp, #40	; 0x28
   d4340:	f000 ffa0 	bl	d5284 <_ZN6StringC1Eih>
   d4344:	a90a      	add	r1, sp, #40	; 0x28
   d4346:	a80e      	add	r0, sp, #56	; 0x38
   d4348:	f000 fff3 	bl	d5332 <_ZplRK15StringSumHelperRK6String>
   d434c:	493d      	ldr	r1, [pc, #244]	; (d4444 <_Z8setAlarmbi+0x128>)
   d434e:	4607      	mov	r7, r0
   d4350:	a812      	add	r0, sp, #72	; 0x48
   d4352:	f000 ff22 	bl	d519a <_ZN6StringC1EPK19__FlashStringHelper>
   d4356:	a912      	add	r1, sp, #72	; 0x48
   d4358:	4638      	mov	r0, r7
   d435a:	f000 ffea 	bl	d5332 <_ZplRK15StringSumHelperRK6String>
   d435e:	4601      	mov	r1, r0
   d4360:	a802      	add	r0, sp, #8
   d4362:	f000 ff59 	bl	d5218 <_ZN6StringC1ERKS_>
   d4366:	a812      	add	r0, sp, #72	; 0x48
   d4368:	f000 fed0 	bl	d510c <_ZN6StringD1Ev>
   d436c:	a80a      	add	r0, sp, #40	; 0x28
   d436e:	f000 fecd 	bl	d510c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4372:	a80e      	add	r0, sp, #56	; 0x38
   d4374:	f000 feca 	bl	d510c <_ZN6StringD1Ev>
   d4378:	a806      	add	r0, sp, #24
   d437a:	f000 fec7 	bl	d510c <_ZN6StringD1Ev>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d437e:	f000 fb19 	bl	d49b4 <HAL_Timer_Get_Milli_Seconds>

    if(((millis() - debounceTime) > DEBOUNCE_DELAY) && alarmState[alarmNum] == 0){
   d4382:	682b      	ldr	r3, [r5, #0]
   d4384:	1ac0      	subs	r0, r0, r3
   d4386:	28c8      	cmp	r0, #200	; 0xc8
   d4388:	d901      	bls.n	d438e <_Z8setAlarmbi+0x72>
   d438a:	5d33      	ldrb	r3, [r6, r4]
   d438c:	b18b      	cbz	r3, d43b2 <_Z8setAlarmbi+0x96>
      debounceTime = millis();
      #if MONITOR_DEBUG
      Serial.println(alarmStr);
      #endif
    }
    alarmState[alarmNum] = 1;
   d438e:	2301      	movs	r3, #1
}

void setAlarm(bool inAlarm, int alarmNum){
  
  if(inAlarm){
    String alarmStr = String("Dryer ") + String(alarmNum+1) + String(" in Alarm");
   d4390:	a802      	add	r0, sp, #8
      debounceTime = millis();
      #if MONITOR_DEBUG
      Serial.println(alarmStr);
      #endif
    }
    alarmState[alarmNum] = 1;
   d4392:	5533      	strb	r3, [r6, r4]
}

void setAlarm(bool inAlarm, int alarmNum){
  
  if(inAlarm){
    String alarmStr = String("Dryer ") + String(alarmNum+1) + String(" in Alarm");
   d4394:	f000 feba 	bl	d510c <_ZN6StringD1Ev>
   d4398:	e04c      	b.n	d4434 <_Z8setAlarmbi+0x118>
   d439a:	f000 fb0b 	bl	d49b4 <HAL_Timer_Get_Milli_Seconds>
    }
    alarmState[alarmNum] = 1;
    return;
  }

  if(((millis() - debounceTime) > DEBOUNCE_DELAY) && alarmState[alarmNum] == 1){
   d439e:	682b      	ldr	r3, [r5, #0]
   d43a0:	1ac0      	subs	r0, r0, r3
   d43a2:	28c8      	cmp	r0, #200	; 0xc8
   d43a4:	d902      	bls.n	d43ac <_Z8setAlarmbi+0x90>
   d43a6:	5d33      	ldrb	r3, [r6, r4]
   d43a8:	2b01      	cmp	r3, #1
   d43aa:	d014      	beq.n	d43d6 <_Z8setAlarmbi+0xba>
    debounceTime = millis();
    #if MONITOR_DEBUG
    Serial.println(resetStr);
    #endif
  }
  alarmState[alarmNum] = 0;
   d43ac:	2300      	movs	r3, #0
   d43ae:	5533      	strb	r3, [r6, r4]
   d43b0:	e040      	b.n	d4434 <_Z8setAlarmbi+0x118>
   d43b2:	4b25      	ldr	r3, [pc, #148]	; (d4448 <_Z8setAlarmbi+0x12c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d43b4:	9a02      	ldr	r2, [sp, #8]
   d43b6:	6819      	ldr	r1, [r3, #0]
   d43b8:	4b24      	ldr	r3, [pc, #144]	; (d444c <_Z8setAlarmbi+0x130>)
   d43ba:	781b      	ldrb	r3, [r3, #0]
   d43bc:	f88d 3000 	strb.w	r3, [sp]
   d43c0:	a812      	add	r0, sp, #72	; 0x48
   d43c2:	233c      	movs	r3, #60	; 0x3c
   d43c4:	f001 fb56 	bl	d5a74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d43c8:	a813      	add	r0, sp, #76	; 0x4c
   d43ca:	f7ff ff91 	bl	d42f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43ce:	f000 faf1 	bl	d49b4 <HAL_Timer_Get_Milli_Seconds>
  if(inAlarm){
    String alarmStr = String("Dryer ") + String(alarmNum+1) + String(" in Alarm");

    if(((millis() - debounceTime) > DEBOUNCE_DELAY) && alarmState[alarmNum] == 0){
      Particle.publish(PUBLISH_NAME, alarmStr, PRIVATE);
      debounceTime = millis();
   d43d2:	6028      	str	r0, [r5, #0]
   d43d4:	e7db      	b.n	d438e <_Z8setAlarmbi+0x72>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d43d6:	491e      	ldr	r1, [pc, #120]	; (d4450 <_Z8setAlarmbi+0x134>)
   d43d8:	a812      	add	r0, sp, #72	; 0x48
   d43da:	f000 fede 	bl	d519a <_ZN6StringC1EPK19__FlashStringHelper>
    alarmState[alarmNum] = 1;
    return;
  }

  if(((millis() - debounceTime) > DEBOUNCE_DELAY) && alarmState[alarmNum] == 1){
    String resetStr = String("Dryer Alarm " + String(alarmNum+1) + " Reset");
   d43de:	220a      	movs	r2, #10
   d43e0:	1c61      	adds	r1, r4, #1
   d43e2:	a80e      	add	r0, sp, #56	; 0x38
   d43e4:	f000 ff4e 	bl	d5284 <_ZN6StringC1Eih>
   d43e8:	a90e      	add	r1, sp, #56	; 0x38
   d43ea:	a812      	add	r0, sp, #72	; 0x48
   d43ec:	f000 ffa1 	bl	d5332 <_ZplRK15StringSumHelperRK6String>
   d43f0:	4918      	ldr	r1, [pc, #96]	; (d4454 <_Z8setAlarmbi+0x138>)
   d43f2:	f000 ffaa 	bl	d534a <_ZplRK15StringSumHelperPKc>
   d43f6:	4601      	mov	r1, r0
   d43f8:	a80a      	add	r0, sp, #40	; 0x28
   d43fa:	f000 ff0d 	bl	d5218 <_ZN6StringC1ERKS_>
   d43fe:	a80e      	add	r0, sp, #56	; 0x38
   d4400:	f000 fe84 	bl	d510c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4404:	a812      	add	r0, sp, #72	; 0x48
   d4406:	f000 fe81 	bl	d510c <_ZN6StringD1Ev>
   d440a:	4b0f      	ldr	r3, [pc, #60]	; (d4448 <_Z8setAlarmbi+0x12c>)
   d440c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d440e:	6819      	ldr	r1, [r3, #0]
   d4410:	4b0e      	ldr	r3, [pc, #56]	; (d444c <_Z8setAlarmbi+0x130>)
   d4412:	781b      	ldrb	r3, [r3, #0]
   d4414:	f88d 3000 	strb.w	r3, [sp]
   d4418:	a812      	add	r0, sp, #72	; 0x48
   d441a:	233c      	movs	r3, #60	; 0x3c
   d441c:	f001 fb2a 	bl	d5a74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4420:	a813      	add	r0, sp, #76	; 0x4c
   d4422:	f7ff ff65 	bl	d42f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4426:	f000 fac5 	bl	d49b4 <HAL_Timer_Get_Milli_Seconds>
    Particle.publish(PUBLISH_NAME, resetStr, PRIVATE);
    debounceTime = millis();
   d442a:	6028      	str	r0, [r5, #0]
    alarmState[alarmNum] = 1;
    return;
  }

  if(((millis() - debounceTime) > DEBOUNCE_DELAY) && alarmState[alarmNum] == 1){
    String resetStr = String("Dryer Alarm " + String(alarmNum+1) + " Reset");
   d442c:	a80a      	add	r0, sp, #40	; 0x28
   d442e:	f000 fe6d 	bl	d510c <_ZN6StringD1Ev>
   d4432:	e7bb      	b.n	d43ac <_Z8setAlarmbi+0x90>
    #if MONITOR_DEBUG
    Serial.println(resetStr);
    #endif
  }
  alarmState[alarmNum] = 0;
}
   d4434:	b017      	add	sp, #92	; 0x5c
   d4436:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4438:	2003e1d8 	.word	0x2003e1d8
   d443c:	2003e1c4 	.word	0x2003e1c4
   d4440:	000d7a28 	.word	0x000d7a28
   d4444:	000d7a2f 	.word	0x000d7a2f
   d4448:	2003e274 	.word	0x2003e274
   d444c:	2003e230 	.word	0x2003e230
   d4450:	000d7a47 	.word	0x000d7a47
   d4454:	000d7a39 	.word	0x000d7a39

000d4458 <loop>:
  }

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4458:	b570      	push	{r4, r5, r6, lr}

  for(int i = 0; i < alarmCount; i++){
    alarmValues[i] = digitalRead(ALARM[i]);
   d445a:	4d1b      	ldr	r5, [pc, #108]	; (d44c8 <loop+0x70>)
   d445c:	4e1b      	ldr	r6, [pc, #108]	; (d44cc <loop+0x74>)
  }

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d445e:	b08e      	sub	sp, #56	; 0x38

  for(int i = 0; i < alarmCount; i++){
   d4460:	2400      	movs	r4, #0
    alarmValues[i] = digitalRead(ALARM[i]);
   d4462:	5d28      	ldrb	r0, [r5, r4]
   d4464:	f002 f898 	bl	d6598 <digitalRead>
    alarmValues[i] == HIGH ? setAlarm(true, i) : setAlarm(false, i);
   d4468:	2801      	cmp	r0, #1

// loop() runs over and over again, as quickly as it can execute.
void loop() {

  for(int i = 0; i < alarmCount; i++){
    alarmValues[i] = digitalRead(ALARM[i]);
   d446a:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
    alarmValues[i] == HIGH ? setAlarm(true, i) : setAlarm(false, i);
   d446e:	4621      	mov	r1, r4
   d4470:	bf18      	it	ne
   d4472:	2000      	movne	r0, #0
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {

  for(int i = 0; i < alarmCount; i++){
   d4474:	3401      	adds	r4, #1
    alarmValues[i] = digitalRead(ALARM[i]);
    alarmValues[i] == HIGH ? setAlarm(true, i) : setAlarm(false, i);
   d4476:	f7ff ff51 	bl	d431c <_Z8setAlarmbi>
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {

  for(int i = 0; i < alarmCount; i++){
   d447a:	2c04      	cmp	r4, #4
   d447c:	d1f1      	bne.n	d4462 <loop+0xa>
  }
  #if MONITOR_DEBUG
  Serial.println();
  #endif

  CellularSignal sig = Cellular.RSSI();
   d447e:	4914      	ldr	r1, [pc, #80]	; (d44d0 <loop+0x78>)
   d4480:	a804      	add	r0, sp, #16
   d4482:	f001 fda3 	bl	d5fcc <_ZN5spark13CellularClass4RSSIEv>
  signalStrength = String(sig.getStrength());
   d4486:	a804      	add	r0, sp, #16
   d4488:	f001 f8f6 	bl	d5678 <_ZNK14CellularSignal11getStrengthEv>
   d448c:	2106      	movs	r1, #6
   d448e:	4668      	mov	r0, sp
   d4490:	f000 ff0b 	bl	d52aa <_ZN6StringC1Efi>
   d4494:	4669      	mov	r1, sp
   d4496:	480f      	ldr	r0, [pc, #60]	; (d44d4 <loop+0x7c>)
   d4498:	f000 fec9 	bl	d522e <_ZN6StringaSEOS_>
   d449c:	4668      	mov	r0, sp
   d449e:	f000 fe35 	bl	d510c <_ZN6StringD1Ev>
  signalQuality = String(sig.getQuality());
   d44a2:	a804      	add	r0, sp, #16
   d44a4:	f001 f8ce 	bl	d5644 <_ZNK14CellularSignal10getQualityEv>
   d44a8:	2106      	movs	r1, #6
   d44aa:	4668      	mov	r0, sp
   d44ac:	f000 fefd 	bl	d52aa <_ZN6StringC1Efi>
   d44b0:	4669      	mov	r1, sp
   d44b2:	4809      	ldr	r0, [pc, #36]	; (d44d8 <loop+0x80>)
   d44b4:	f000 febb 	bl	d522e <_ZN6StringaSEOS_>
   d44b8:	4668      	mov	r0, sp
   d44ba:	f000 fe27 	bl	d510c <_ZN6StringD1Ev>

  setAmpReadings();
   d44be:	f7ff fedf 	bl	d4280 <_Z14setAmpReadingsv>
    Serial.print(": ");
    Serial.print(powerValue[i]);
  }
  Serial.println();
  #endif
}
   d44c2:	b00e      	add	sp, #56	; 0x38
   d44c4:	bd70      	pop	{r4, r5, r6, pc}
   d44c6:	bf00      	nop
   d44c8:	000d7a6f 	.word	0x000d7a6f
   d44cc:	2003e394 	.word	0x2003e394
   d44d0:	2003e3ec 	.word	0x2003e3ec
   d44d4:	2003e1c8 	.word	0x2003e1c8
   d44d8:	2003e384 	.word	0x2003e384

000d44dc <_Z10alarmReset6String>:
    #endif
  }
  alarmState[alarmNum] = 0;
}

int alarmReset(String alarmNum){
   d44dc:	b570      	push	{r4, r5, r6, lr}
   d44de:	b08c      	sub	sp, #48	; 0x30
   d44e0:	4605      	mov	r5, r0
  int alarm = alarmNum.toInt();
   d44e2:	f000 ff44 	bl	d536e <_ZNK6String5toIntEv>
  if(alarm < 1 || alarm > relayCount){
   d44e6:	3801      	subs	r0, #1
   d44e8:	2803      	cmp	r0, #3
   d44ea:	d839      	bhi.n	d4560 <_Z10alarmReset6String+0x84>
    return 0;
  }

  digitalWrite(rPins[alarm-1], LOW);
   d44ec:	4b1e      	ldr	r3, [pc, #120]	; (d4568 <_Z10alarmReset6String+0x8c>)
   d44ee:	f833 4010 	ldrh.w	r4, [r3, r0, lsl #1]
   d44f2:	2100      	movs	r1, #0
   d44f4:	4620      	mov	r0, r4
   d44f6:	f002 f836 	bl	d6566 <digitalWrite>
   d44fa:	f000 fa5b 	bl	d49b4 <HAL_Timer_Get_Milli_Seconds>
   d44fe:	4606      	mov	r6, r0
   d4500:	f000 fa58 	bl	d49b4 <HAL_Timer_Get_Milli_Seconds>
  long resetDelay = millis();
  while(millis() - resetDelay < RELAY_DELAY){
   d4504:	1b80      	subs	r0, r0, r6
   d4506:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   d450a:	d3f9      	bcc.n	d4500 <_Z10alarmReset6String+0x24>
    //wait (this is here instead to delay() so interrupts can occur)
  }
  digitalWrite(rPins[alarm-1], HIGH);
   d450c:	4620      	mov	r0, r4
   d450e:	2101      	movs	r1, #1
   d4510:	f002 f829 	bl	d6566 <digitalWrite>
   d4514:	4b15      	ldr	r3, [pc, #84]	; (d456c <_Z10alarmReset6String+0x90>)
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4516:	4916      	ldr	r1, [pc, #88]	; (d4570 <_Z10alarmReset6String+0x94>)
   d4518:	681c      	ldr	r4, [r3, #0]
   d451a:	a804      	add	r0, sp, #16
   d451c:	f000 fe3d 	bl	d519a <_ZN6StringC1EPK19__FlashStringHelper>

  Particle.publish(PUBLISH_NAME, String("Remote Dryer Alarm " + alarmNum + " Reset Sent"), PRIVATE);
   d4520:	4629      	mov	r1, r5
   d4522:	a804      	add	r0, sp, #16
   d4524:	f000 ff05 	bl	d5332 <_ZplRK15StringSumHelperRK6String>
   d4528:	4912      	ldr	r1, [pc, #72]	; (d4574 <_Z10alarmReset6String+0x98>)
   d452a:	f000 ff0e 	bl	d534a <_ZplRK15StringSumHelperPKc>
   d452e:	4601      	mov	r1, r0
   d4530:	a808      	add	r0, sp, #32
   d4532:	f000 fe71 	bl	d5218 <_ZN6StringC1ERKS_>
   d4536:	4b10      	ldr	r3, [pc, #64]	; (d4578 <_Z10alarmReset6String+0x9c>)
   d4538:	9a08      	ldr	r2, [sp, #32]
   d453a:	781b      	ldrb	r3, [r3, #0]
   d453c:	f88d 3000 	strb.w	r3, [sp]
   d4540:	4621      	mov	r1, r4
   d4542:	233c      	movs	r3, #60	; 0x3c
   d4544:	a802      	add	r0, sp, #8
   d4546:	f001 fa95 	bl	d5a74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d454a:	a803      	add	r0, sp, #12
   d454c:	f7ff fed0 	bl	d42f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4550:	a808      	add	r0, sp, #32
   d4552:	f000 fddb 	bl	d510c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4556:	a804      	add	r0, sp, #16
   d4558:	f000 fdd8 	bl	d510c <_ZN6StringD1Ev>

  #if MONITOR_DEBUG
  Serial.println("Remote Dryer Alarm " + alarmNum + " Reset Sent");
  #endif
  return 1;
   d455c:	2001      	movs	r0, #1
   d455e:	e000      	b.n	d4562 <_Z10alarmReset6String+0x86>
}

int alarmReset(String alarmNum){
  int alarm = alarmNum.toInt();
  if(alarm < 1 || alarm > relayCount){
    return 0;
   d4560:	2000      	movs	r0, #0

  #if MONITOR_DEBUG
  Serial.println("Remote Dryer Alarm " + alarmNum + " Reset Sent");
  #endif
  return 1;
   d4562:	b00c      	add	sp, #48	; 0x30
   d4564:	bd70      	pop	{r4, r5, r6, pc}
   d4566:	bf00      	nop
   d4568:	000d7a74 	.word	0x000d7a74
   d456c:	2003e274 	.word	0x2003e274
   d4570:	000d7a40 	.word	0x000d7a40
   d4574:	000d7a54 	.word	0x000d7a54
   d4578:	2003e230 	.word	0x2003e230

000d457c <_GLOBAL__sub_I___appProductID>:
   d457c:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d457e:	4b34      	ldr	r3, [pc, #208]	; (d4650 <_GLOBAL__sub_I___appProductID+0xd4>)
const String PUBLISH_NAME = "Dryer_Alarms"; // DO NOT MODIFY THIS. GOOGLE CLOUD PUBSUB DEPENDS ON THIS
const uint16_t rPins[relayCount] = {D3, D2, D1, D0};
const uint8_t ALARM[alarmCount] = {D4, D5, D6, D8};
int alarmValues[alarmCount] = {0, 0, 0, 0};
byte alarmState[alarmCount] = {0, 0, 0, 0};
String ampValue[ampCount];
   d4580:	4d34      	ldr	r5, [pc, #208]	; (d4654 <_GLOBAL__sub_I___appProductID+0xd8>)
   d4582:	2401      	movs	r4, #1
   d4584:	701c      	strb	r4, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4586:	f000 f9ad 	bl	d48e4 <HAL_Pin_Map>
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d458a:	f001 ff9f 	bl	d64cc <spark_protocol_instance>
   d458e:	2300      	movs	r3, #0
   d4590:	461a      	mov	r2, r3
   d4592:	f642 0144 	movw	r1, #10308	; 0x2844
   d4596:	f001 ffa1 	bl	d64dc <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d459a:	f001 ff97 	bl	d64cc <spark_protocol_instance>
   d459e:	2300      	movs	r3, #0
   d45a0:	461a      	mov	r2, r3
   d45a2:	4621      	mov	r1, r4
   d45a4:	f001 ffa2 	bl	d64ec <spark_protocol_set_product_firmware_version>
   d45a8:	f000 fa04 	bl	d49b4 <HAL_Timer_Get_Milli_Seconds>
#define MONITOR_DEBUG false

const uint8_t relayCount = 4;
const uint8_t alarmCount = 4;
const uint8_t ampCount = 8;
unsigned long debounceTime = millis();
   d45ac:	4b2a      	ldr	r3, [pc, #168]	; (d4658 <_GLOBAL__sub_I___appProductID+0xdc>)
const uint8_t DEBOUNCE_DELAY = 200;
const uint16_t RELAY_DELAY = 500;
const uint16_t knownVoltage = 118;
String signalStrength = "0";
   d45ae:	492b      	ldr	r1, [pc, #172]	; (d465c <_GLOBAL__sub_I___appProductID+0xe0>)
#define MONITOR_DEBUG false

const uint8_t relayCount = 4;
const uint8_t alarmCount = 4;
const uint8_t ampCount = 8;
unsigned long debounceTime = millis();
   d45b0:	6018      	str	r0, [r3, #0]
const uint8_t DEBOUNCE_DELAY = 200;
const uint16_t RELAY_DELAY = 500;
const uint16_t knownVoltage = 118;
String signalStrength = "0";
   d45b2:	482b      	ldr	r0, [pc, #172]	; (d4660 <_GLOBAL__sub_I___appProductID+0xe4>)
   d45b4:	f000 fdf1 	bl	d519a <_ZN6StringC1EPK19__FlashStringHelper>
   d45b8:	4a2a      	ldr	r2, [pc, #168]	; (d4664 <_GLOBAL__sub_I___appProductID+0xe8>)
   d45ba:	492b      	ldr	r1, [pc, #172]	; (d4668 <_GLOBAL__sub_I___appProductID+0xec>)
   d45bc:	4828      	ldr	r0, [pc, #160]	; (d4660 <_GLOBAL__sub_I___appProductID+0xe4>)
   d45be:	f002 f841 	bl	d6644 <__aeabi_atexit>
String signalQuality = "0";
   d45c2:	4926      	ldr	r1, [pc, #152]	; (d465c <_GLOBAL__sub_I___appProductID+0xe0>)
   d45c4:	4829      	ldr	r0, [pc, #164]	; (d466c <_GLOBAL__sub_I___appProductID+0xf0>)
   d45c6:	f000 fde8 	bl	d519a <_ZN6StringC1EPK19__FlashStringHelper>
   d45ca:	4a26      	ldr	r2, [pc, #152]	; (d4664 <_GLOBAL__sub_I___appProductID+0xe8>)
   d45cc:	4926      	ldr	r1, [pc, #152]	; (d4668 <_GLOBAL__sub_I___appProductID+0xec>)
   d45ce:	4827      	ldr	r0, [pc, #156]	; (d466c <_GLOBAL__sub_I___appProductID+0xf0>)
   d45d0:	f002 f838 	bl	d6644 <__aeabi_atexit>

const String PUBLISH_NAME = "Dryer_Alarms"; // DO NOT MODIFY THIS. GOOGLE CLOUD PUBSUB DEPENDS ON THIS
   d45d4:	4926      	ldr	r1, [pc, #152]	; (d4670 <_GLOBAL__sub_I___appProductID+0xf4>)
   d45d6:	4827      	ldr	r0, [pc, #156]	; (d4674 <_GLOBAL__sub_I___appProductID+0xf8>)
   d45d8:	f000 fddf 	bl	d519a <_ZN6StringC1EPK19__FlashStringHelper>
   d45dc:	4a21      	ldr	r2, [pc, #132]	; (d4664 <_GLOBAL__sub_I___appProductID+0xe8>)
   d45de:	4922      	ldr	r1, [pc, #136]	; (d4668 <_GLOBAL__sub_I___appProductID+0xec>)
   d45e0:	4824      	ldr	r0, [pc, #144]	; (d4674 <_GLOBAL__sub_I___appProductID+0xf8>)
   d45e2:	f002 f82f 	bl	d6644 <__aeabi_atexit>
   d45e6:	2400      	movs	r4, #0
const uint16_t rPins[relayCount] = {D3, D2, D1, D0};
const uint8_t ALARM[alarmCount] = {D4, D5, D6, D8};
int alarmValues[alarmCount] = {0, 0, 0, 0};
byte alarmState[alarmCount] = {0, 0, 0, 0};
String ampValue[ampCount];
   d45e8:	1928      	adds	r0, r5, r4
   d45ea:	4923      	ldr	r1, [pc, #140]	; (d4678 <_GLOBAL__sub_I___appProductID+0xfc>)
   d45ec:	3410      	adds	r4, #16
   d45ee:	f000 fdd4 	bl	d519a <_ZN6StringC1EPK19__FlashStringHelper>
   d45f2:	2c80      	cmp	r4, #128	; 0x80
   d45f4:	d1f8      	bne.n	d45e8 <_GLOBAL__sub_I___appProductID+0x6c>
   d45f6:	4a1b      	ldr	r2, [pc, #108]	; (d4664 <_GLOBAL__sub_I___appProductID+0xe8>)
   d45f8:	4920      	ldr	r1, [pc, #128]	; (d467c <_GLOBAL__sub_I___appProductID+0x100>)
String powerValue[ampCount];
   d45fa:	4d21      	ldr	r5, [pc, #132]	; (d4680 <_GLOBAL__sub_I___appProductID+0x104>)
const String PUBLISH_NAME = "Dryer_Alarms"; // DO NOT MODIFY THIS. GOOGLE CLOUD PUBSUB DEPENDS ON THIS
const uint16_t rPins[relayCount] = {D3, D2, D1, D0};
const uint8_t ALARM[alarmCount] = {D4, D5, D6, D8};
int alarmValues[alarmCount] = {0, 0, 0, 0};
byte alarmState[alarmCount] = {0, 0, 0, 0};
String ampValue[ampCount];
   d45fc:	2000      	movs	r0, #0
   d45fe:	f002 f821 	bl	d6644 <__aeabi_atexit>
   d4602:	2400      	movs	r4, #0
String powerValue[ampCount];
   d4604:	1928      	adds	r0, r5, r4
   d4606:	491c      	ldr	r1, [pc, #112]	; (d4678 <_GLOBAL__sub_I___appProductID+0xfc>)
   d4608:	3410      	adds	r4, #16
   d460a:	f000 fdc6 	bl	d519a <_ZN6StringC1EPK19__FlashStringHelper>
   d460e:	2c80      	cmp	r4, #128	; 0x80
   d4610:	d1f8      	bne.n	d4604 <_GLOBAL__sub_I___appProductID+0x88>
   d4612:	4a14      	ldr	r2, [pc, #80]	; (d4664 <_GLOBAL__sub_I___appProductID+0xe8>)
   d4614:	491b      	ldr	r1, [pc, #108]	; (d4684 <_GLOBAL__sub_I___appProductID+0x108>)
   d4616:	2000      	movs	r0, #0
   d4618:	f002 f814 	bl	d6644 <__aeabi_atexit>
String names[alarmCount];
   d461c:	4916      	ldr	r1, [pc, #88]	; (d4678 <_GLOBAL__sub_I___appProductID+0xfc>)
   d461e:	481a      	ldr	r0, [pc, #104]	; (d4688 <_GLOBAL__sub_I___appProductID+0x10c>)
   d4620:	f000 fdbb 	bl	d519a <_ZN6StringC1EPK19__FlashStringHelper>
   d4624:	4914      	ldr	r1, [pc, #80]	; (d4678 <_GLOBAL__sub_I___appProductID+0xfc>)
   d4626:	4819      	ldr	r0, [pc, #100]	; (d468c <_GLOBAL__sub_I___appProductID+0x110>)
   d4628:	f000 fdb7 	bl	d519a <_ZN6StringC1EPK19__FlashStringHelper>
   d462c:	4912      	ldr	r1, [pc, #72]	; (d4678 <_GLOBAL__sub_I___appProductID+0xfc>)
   d462e:	4818      	ldr	r0, [pc, #96]	; (d4690 <_GLOBAL__sub_I___appProductID+0x114>)
   d4630:	f000 fdb3 	bl	d519a <_ZN6StringC1EPK19__FlashStringHelper>
   d4634:	4910      	ldr	r1, [pc, #64]	; (d4678 <_GLOBAL__sub_I___appProductID+0xfc>)
   d4636:	4817      	ldr	r0, [pc, #92]	; (d4694 <_GLOBAL__sub_I___appProductID+0x118>)
   d4638:	f000 fdaf 	bl	d519a <_ZN6StringC1EPK19__FlashStringHelper>
   d463c:	4a09      	ldr	r2, [pc, #36]	; (d4664 <_GLOBAL__sub_I___appProductID+0xe8>)
   d463e:	4916      	ldr	r1, [pc, #88]	; (d4698 <_GLOBAL__sub_I___appProductID+0x11c>)
   d4640:	2000      	movs	r0, #0
   d4642:	f001 ffff 	bl	d6644 <__aeabi_atexit>

//current adc chip
CurrentMonitor monitor;
   d4646:	4815      	ldr	r0, [pc, #84]	; (d469c <_GLOBAL__sub_I___appProductID+0x120>)

  #if MONITOR_DEBUG
  Serial.println("Remote Dryer Alarm " + alarmNum + " Reset Sent");
  #endif
  return 1;
   d4648:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
String ampValue[ampCount];
String powerValue[ampCount];
String names[alarmCount];

//current adc chip
CurrentMonitor monitor;
   d464c:	f000 b8a4 	b.w	d4798 <_ZN14CurrentMonitorC1Ev>
   d4650:	2003e230 	.word	0x2003e230
   d4654:	2003e284 	.word	0x2003e284
   d4658:	2003e1d8 	.word	0x2003e1d8
   d465c:	000d7a60 	.word	0x000d7a60
   d4660:	2003e1c8 	.word	0x2003e1c8
   d4664:	2003e1c0 	.word	0x2003e1c0
   d4668:	000d510d 	.word	0x000d510d
   d466c:	2003e384 	.word	0x2003e384
   d4670:	000d7a62 	.word	0x000d7a62
   d4674:	2003e274 	.word	0x2003e274
   d4678:	000d7bc3 	.word	0x000d7bc3
   d467c:	000d4109 	.word	0x000d4109
   d4680:	2003e304 	.word	0x2003e304
   d4684:	000d40e9 	.word	0x000d40e9
   d4688:	2003e234 	.word	0x2003e234
   d468c:	2003e244 	.word	0x2003e244
   d4690:	2003e254 	.word	0x2003e254
   d4694:	2003e264 	.word	0x2003e264
   d4698:	000d40bd 	.word	0x000d40bd
   d469c:	2003e1e0 	.word	0x2003e1e0

000d46a0 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d46a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d46a2:	4602      	mov	r2, r0
   d46a4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d46a6:	7913      	ldrb	r3, [r2, #4]
   d46a8:	6895      	ldr	r5, [r2, #8]
   d46aa:	b133      	cbz	r3, d46ba <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d46ac:	b93d      	cbnz	r5, d46be <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d46ae:	490c      	ldr	r1, [pc, #48]	; (d46e0 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d46b0:	b004      	add	sp, #16
   d46b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d46b6:	f000 be95 	b.w	d53e4 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d46ba:	4b0a      	ldr	r3, [pc, #40]	; (d46e4 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d46bc:	e000      	b.n	d46c0 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d46be:	4b0a      	ldr	r3, [pc, #40]	; (d46e8 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d46c0:	7b16      	ldrb	r6, [r2, #12]
   d46c2:	4c0a      	ldr	r4, [pc, #40]	; (d46ec <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d46c4:	490a      	ldr	r1, [pc, #40]	; (d46f0 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d46c6:	7b52      	ldrb	r2, [r2, #13]
   d46c8:	9202      	str	r2, [sp, #8]
   d46ca:	2e01      	cmp	r6, #1
   d46cc:	bf08      	it	eq
   d46ce:	4621      	moveq	r1, r4
   d46d0:	9101      	str	r1, [sp, #4]
   d46d2:	9500      	str	r5, [sp, #0]
   d46d4:	4a07      	ldr	r2, [pc, #28]	; (d46f4 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d46d6:	2100      	movs	r1, #0
   d46d8:	f000 feea 	bl	d54b0 <_ZN5Print11printf_implEbPKcz>
  }
   d46dc:	b004      	add	sp, #16
   d46de:	bd70      	pop	{r4, r5, r6, pc}
   d46e0:	000d7a99 	.word	0x000d7a99
   d46e4:	000d7bc3 	.word	0x000d7bc3
   d46e8:	000d7a88 	.word	0x000d7a88
   d46ec:	000d7a91 	.word	0x000d7a91
   d46f0:	000d7a95 	.word	0x000d7a95
   d46f4:	000d7aaf 	.word	0x000d7aaf

000d46f8 <_ZN10ADC128S102C1Ev>:
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d46f8:	4a05      	ldr	r2, [pc, #20]	; (d4710 <_ZN10ADC128S102C1Ev+0x18>)
   d46fa:	6002      	str	r2, [r0, #0]
   d46fc:	2200      	movs	r2, #0
   d46fe:	7102      	strb	r2, [r0, #4]
   d4700:	4a04      	ldr	r2, [pc, #16]	; (d4714 <_ZN10ADC128S102C1Ev+0x1c>)
   d4702:	6082      	str	r2, [r0, #8]
   d4704:	2201      	movs	r2, #1
   d4706:	7302      	strb	r2, [r0, #12]
   d4708:	2202      	movs	r2, #2
   d470a:	7342      	strb	r2, [r0, #13]

/**
 * Constructor.
 */
ADC128S102::ADC128S102()
{}
   d470c:	4770      	bx	lr
   d470e:	bf00      	nop
   d4710:	000d7a84 	.word	0x000d7a84
   d4714:	00d59f80 	.word	0x00d59f80

000d4718 <_ZN10ADC128S1025beginEv>:

/**
 * Use this in the setup() method to initialize the hardware and begin SPI if it hasn't already.
 */
void ADC128S102::begin()
{
   d4718:	b510      	push	{r4, lr}
    // initialize hardware
    pinMode(SS, OUTPUT);
    SPI.begin();
   d471a:	4c07      	ldr	r4, [pc, #28]	; (d4738 <_ZN10ADC128S1025beginEv+0x20>)
 * Use this in the setup() method to initialize the hardware and begin SPI if it hasn't already.
 */
void ADC128S102::begin()
{
    // initialize hardware
    pinMode(SS, OUTPUT);
   d471c:	2101      	movs	r1, #1
   d471e:	200e      	movs	r0, #14
   d4720:	f001 ff10 	bl	d6544 <pinMode>
    SPI.begin();
   d4724:	4620      	mov	r0, r4
   d4726:	f000 fb73 	bl	d4e10 <_ZN8SPIClass5beginEv>
    SPI.setClockSpeed(16, MHZ);
   d472a:	4620      	mov	r0, r4
   d472c:	4a03      	ldr	r2, [pc, #12]	; (d473c <_ZN10ADC128S1025beginEv+0x24>)
   d472e:	2110      	movs	r1, #16
}
   d4730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void ADC128S102::begin()
{
    // initialize hardware
    pinMode(SS, OUTPUT);
    SPI.begin();
    SPI.setClockSpeed(16, MHZ);
   d4734:	f000 bbfa 	b.w	d4f2c <_ZN8SPIClass13setClockSpeedEjj>
   d4738:	2003e718 	.word	0x2003e718
   d473c:	000f4240 	.word	0x000f4240

000d4740 <_ZN10ADC128S1027readADCEa>:
}

/**
 * Supply the channel number to read the Analog value converted to 12-bit
 */
int16_t ADC128S102::readADC(int8_t channel){
   d4740:	b570      	push	{r4, r5, r6, lr}

    SPI.beginTransaction(settings);
   d4742:	4e12      	ldr	r6, [pc, #72]	; (d478c <_ZN10ADC128S1027readADCEa+0x4c>)
}

/**
 * Supply the channel number to read the Analog value converted to 12-bit
 */
int16_t ADC128S102::readADC(int8_t channel){
   d4744:	4605      	mov	r5, r0
   d4746:	460c      	mov	r4, r1

    SPI.beginTransaction(settings);
   d4748:	4601      	mov	r1, r0
   d474a:	4630      	mov	r0, r6
   d474c:	f000 fb7e 	bl	d4e4c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
    digitalWrite(SS, LOW); // Drive Slave Select LOW to select chip
   d4750:	2100      	movs	r1, #0
   d4752:	200e      	movs	r0, #14
   d4754:	f001 ff07 	bl	d6566 <digitalWrite>
    
    byte control = channel << 3; // DONTC DONTC ADD2 ADD1 ADD0 DONTC DONTC DONTC
    buffer = SPI.transfer(control);
   d4758:	00e1      	lsls	r1, r4, #3
   d475a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
   d475e:	4630      	mov	r0, r6
   d4760:	f000 fc06 	bl	d4f70 <_ZN8SPIClass8transferEh>
    buffer = buffer << 8;
   d4764:	0200      	lsls	r0, r0, #8
   d4766:	b204      	sxth	r4, r0
   d4768:	822c      	strh	r4, [r5, #16]
    buffer = buffer | SPI.transfer(0);
   d476a:	2100      	movs	r1, #0
   d476c:	4630      	mov	r0, r6
   d476e:	f000 fbff 	bl	d4f70 <_ZN8SPIClass8transferEh>
   d4772:	4320      	orrs	r0, r4
   d4774:	8228      	strh	r0, [r5, #16]

    digitalWrite(SS, HIGH); // Drive Slave Select HIGH so other hardware can use SPI
   d4776:	2101      	movs	r1, #1
   d4778:	200e      	movs	r0, #14
   d477a:	f001 fef4 	bl	d6566 <digitalWrite>
    SPI.endTransaction();
   d477e:	4630      	mov	r0, r6
   d4780:	f000 fb4b 	bl	d4e1a <_ZN8SPIClass14endTransactionEv>

    return buffer;
}
   d4784:	f9b5 0010 	ldrsh.w	r0, [r5, #16]
   d4788:	bd70      	pop	{r4, r5, r6, pc}
   d478a:	bf00      	nop
   d478c:	2003e718 	.word	0x2003e718

000d4790 <_GLOBAL__sub_I__ZN10ADC128S102C2Ev>:
   d4790:	f000 b8a8 	b.w	d48e4 <HAL_Pin_Map>
   d4794:	0000      	movs	r0, r0
	...

000d4798 <_ZN14CurrentMonitorC1Ev>:
#include "CurrentMonitor.h"

/**
 * Constructor.
 */
CurrentMonitor::CurrentMonitor()
   d4798:	b510      	push	{r4, lr}
   d479a:	4604      	mov	r4, r0
   d479c:	f7ff ffac 	bl	d46f8 <_ZN10ADC128S102C1Ev>
   d47a0:	a307      	add	r3, pc, #28	; (adr r3, d47c0 <_ZN14CurrentMonitorC1Ev+0x28>)
   d47a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47a6:	e9c4 2306 	strd	r2, r3, [r4, #24]
   d47aa:	a307      	add	r3, pc, #28	; (adr r3, d47c8 <_ZN14CurrentMonitorC1Ev+0x30>)
   d47ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47b0:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
   d47b4:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
   d47b8:	64a3      	str	r3, [r4, #72]	; 0x48
{
  // be sure not to call anything that requires hardware be initialized here, put those in begin()
}
   d47ba:	4620      	mov	r0, r4
   d47bc:	bd10      	pop	{r4, pc}
   d47be:	bf00      	nop
   d47c0:	00000000 	.word	0x00000000
   d47c4:	40a00400 	.word	0x40a00400
   d47c8:	66666666 	.word	0x66666666
   d47cc:	40460666 	.word	0x40460666

000d47d0 <_ZN14CurrentMonitor5beginEv>:
 * Example method.
 */
void CurrentMonitor::begin()
{
    // initialize hardware
    adc.begin();
   d47d0:	f7ff bfa2 	b.w	d4718 <_ZN10ADC128S1025beginEv>
   d47d4:	0000      	movs	r0, r0
	...

000d47d8 <_ZN14CurrentMonitor13calculateIrmsEh>:
/**
 * Private: Receives analog reading from given channel and calculates Irms.
 * The Irms is calculated from a numberOfSamples to receive a more accurate number
 */
double CurrentMonitor::calculateIrms(uint8_t channel)
{
   d47d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d47dc:	4604      	mov	r4, r0
    int SupplyVoltage = readVcc();


  for (unsigned int n = 0; n < numberOfSamples; n++)
   d47de:	2500      	movs	r5, #0
  {
    sampleI = adc.readADC(channel);
   d47e0:	fa4f fa81 	sxtb.w	sl, r1
double CurrentMonitor::calculateIrms(uint8_t channel)
{
    int SupplyVoltage = readVcc();


  for (unsigned int n = 0; n < numberOfSamples; n++)
   d47e4:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   d47e6:	42b5      	cmp	r5, r6
   d47e8:	d230      	bcs.n	d484c <_ZN14CurrentMonitor13calculateIrmsEh+0x74>
  {
    sampleI = adc.readADC(channel);
   d47ea:	4651      	mov	r1, sl
   d47ec:	4620      	mov	r0, r4
   d47ee:	f7ff ffa7 	bl	d4740 <_ZN10ADC128S1027readADCEa>
   d47f2:	6160      	str	r0, [r4, #20]

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset,
    //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (double)((double)(sampleI-offsetI))/1024);
   d47f4:	f002 fafc 	bl	d6df0 <__aeabi_i2d>
   d47f8:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
   d47fc:	4632      	mov	r2, r6
   d47fe:	463b      	mov	r3, r7
   d4800:	4680      	mov	r8, r0
   d4802:	4689      	mov	r9, r1
   d4804:	f002 f9a6 	bl	d6b54 <__aeabi_dsub>
   d4808:	2200      	movs	r2, #0
   d480a:	4b25      	ldr	r3, [pc, #148]	; (d48a0 <_ZN14CurrentMonitor13calculateIrmsEh+0xc8>)
   d480c:	f002 fb56 	bl	d6ebc <__aeabi_dmul>
   d4810:	4632      	mov	r2, r6
   d4812:	463b      	mov	r3, r7
   d4814:	f002 f9a0 	bl	d6b58 <__adddf3>
   d4818:	4602      	mov	r2, r0
   d481a:	460b      	mov	r3, r1
   d481c:	e9c4 2306 	strd	r2, r3, [r4, #24]
    filteredI = sampleI - offsetI;
   d4820:	4640      	mov	r0, r8
   d4822:	4649      	mov	r1, r9
   d4824:	f002 f996 	bl	d6b54 <__aeabi_dsub>
   d4828:	4602      	mov	r2, r0
   d482a:	460b      	mov	r3, r1
   d482c:	e9c4 2308 	strd	r2, r3, [r4, #32]

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
   d4830:	f002 fb44 	bl	d6ebc <__aeabi_dmul>
   d4834:	4602      	mov	r2, r0
   d4836:	460b      	mov	r3, r1
   d4838:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
    // 2) sum
    sumI += sqI;
   d483c:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
   d4840:	f002 f98a 	bl	d6b58 <__adddf3>
double CurrentMonitor::calculateIrms(uint8_t channel)
{
    int SupplyVoltage = readVcc();


  for (unsigned int n = 0; n < numberOfSamples; n++)
   d4844:	3501      	adds	r5, #1

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
    // 2) sum
    sumI += sqI;
   d4846:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
double CurrentMonitor::calculateIrms(uint8_t channel)
{
    int SupplyVoltage = readVcc();


  for (unsigned int n = 0; n < numberOfSamples; n++)
   d484a:	e7cb      	b.n	d47e4 <_ZN14CurrentMonitor13calculateIrmsEh+0xc>
    sqI = filteredI * filteredI;
    // 2) sum
    sumI += sqI;
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d484c:	a312      	add	r3, pc, #72	; (adr r3, d4898 <_ZN14CurrentMonitor13calculateIrmsEh+0xc0>)
   d484e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4852:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
   d4856:	f002 fb31 	bl	d6ebc <__aeabi_dmul>
   d485a:	4680      	mov	r8, r0
  Irms = I_RATIO * sqrt(sumI / numberOfSamples);
   d485c:	4630      	mov	r0, r6
    sqI = filteredI * filteredI;
    // 2) sum
    sumI += sqI;
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d485e:	4689      	mov	r9, r1
  Irms = I_RATIO * sqrt(sumI / numberOfSamples);
   d4860:	f002 fab6 	bl	d6dd0 <__aeabi_ui2d>
   d4864:	4602      	mov	r2, r0
   d4866:	460b      	mov	r3, r1
   d4868:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
   d486c:	f002 fc50 	bl	d7110 <__aeabi_ddiv>
   d4870:	ec41 0b10 	vmov	d0, r0, r1
   d4874:	f002 f838 	bl	d68e8 <sqrt>
   d4878:	4640      	mov	r0, r8
   d487a:	ec53 2b10 	vmov	r2, r3, d0
   d487e:	4649      	mov	r1, r9
   d4880:	f002 fb1c 	bl	d6ebc <__aeabi_dmul>

  //Reset accumulators
  sumI = 0;
   d4884:	2200      	movs	r2, #0
   d4886:	2300      	movs	r3, #0
    // 2) sum
    sumI += sqI;
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
  Irms = I_RATIO * sqrt(sumI / numberOfSamples);
   d4888:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38

  //Reset accumulators
  sumI = 0;
   d488c:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
  //--------------------------------------------------------------------------------------
  return Irms;
}
   d4890:	ec41 0b10 	vmov	d0, r0, r1
   d4894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4898:	66666666 	.word	0x66666666
   d489c:	3f4a6666 	.word	0x3f4a6666
   d48a0:	3f500000 	.word	0x3f500000
   d48a4:	00000000 	.word	0x00000000

000d48a8 <_ZN14CurrentMonitor10processAdcEh>:
 * Processes the given channel and returns the calculated Irms value.
 */
double CurrentMonitor::processAdc(uint8_t adcChannel)
{

    if(adcChannel < 0 || adcChannel > 7){
   d48a8:	2907      	cmp	r1, #7
   d48aa:	d801      	bhi.n	d48b0 <_ZN14CurrentMonitor10processAdcEh+0x8>
        return -1;
    }
    return calculateIrms(adcChannel);
   d48ac:	f7ff bf94 	b.w	d47d8 <_ZN14CurrentMonitor13calculateIrmsEh>
}
   d48b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; d48b8 <_ZN14CurrentMonitor10processAdcEh+0x10>
   d48b4:	4770      	bx	lr
   d48b6:	bf00      	nop
   d48b8:	00000000 	.word	0x00000000
   d48bc:	bff00000 	.word	0xbff00000

000d48c0 <_GLOBAL__sub_I__ZN14CurrentMonitorC2Ev>:
   d48c0:	f000 b810 	b.w	d48e4 <HAL_Pin_Map>

000d48c4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d48c4:	b508      	push	{r3, lr}
   d48c6:	4b02      	ldr	r3, [pc, #8]	; (d48d0 <netdb_freeaddrinfo+0xc>)
   d48c8:	681b      	ldr	r3, [r3, #0]
   d48ca:	689b      	ldr	r3, [r3, #8]
   d48cc:	9301      	str	r3, [sp, #4]
   d48ce:	bd08      	pop	{r3, pc}
   d48d0:	00030268 	.word	0x00030268

000d48d4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d48d4:	b508      	push	{r3, lr}
   d48d6:	4b02      	ldr	r3, [pc, #8]	; (d48e0 <netdb_getaddrinfo+0xc>)
   d48d8:	681b      	ldr	r3, [r3, #0]
   d48da:	68db      	ldr	r3, [r3, #12]
   d48dc:	9301      	str	r3, [sp, #4]
   d48de:	bd08      	pop	{r3, pc}
   d48e0:	00030268 	.word	0x00030268

000d48e4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d48e4:	b508      	push	{r3, lr}
   d48e6:	4b02      	ldr	r3, [pc, #8]	; (d48f0 <HAL_Pin_Map+0xc>)
   d48e8:	681b      	ldr	r3, [r3, #0]
   d48ea:	681b      	ldr	r3, [r3, #0]
   d48ec:	9301      	str	r3, [sp, #4]
   d48ee:	bd08      	pop	{r3, pc}
   d48f0:	0003022c 	.word	0x0003022c

000d48f4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d48f4:	b508      	push	{r3, lr}
   d48f6:	4b02      	ldr	r3, [pc, #8]	; (d4900 <HAL_Pin_Mode+0xc>)
   d48f8:	681b      	ldr	r3, [r3, #0]
   d48fa:	689b      	ldr	r3, [r3, #8]
   d48fc:	9301      	str	r3, [sp, #4]
   d48fe:	bd08      	pop	{r3, pc}
   d4900:	0003022c 	.word	0x0003022c

000d4904 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4904:	b508      	push	{r3, lr}
   d4906:	4b02      	ldr	r3, [pc, #8]	; (d4910 <HAL_Get_Pin_Mode+0xc>)
   d4908:	681b      	ldr	r3, [r3, #0]
   d490a:	68db      	ldr	r3, [r3, #12]
   d490c:	9301      	str	r3, [sp, #4]
   d490e:	bd08      	pop	{r3, pc}
   d4910:	0003022c 	.word	0x0003022c

000d4914 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4914:	b508      	push	{r3, lr}
   d4916:	4b02      	ldr	r3, [pc, #8]	; (d4920 <HAL_GPIO_Write+0xc>)
   d4918:	681b      	ldr	r3, [r3, #0]
   d491a:	691b      	ldr	r3, [r3, #16]
   d491c:	9301      	str	r3, [sp, #4]
   d491e:	bd08      	pop	{r3, pc}
   d4920:	0003022c 	.word	0x0003022c

000d4924 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <HAL_GPIO_Read+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	695b      	ldr	r3, [r3, #20]
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	0003022c 	.word	0x0003022c

000d4934 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <HAL_SPI_Begin+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	681b      	ldr	r3, [r3, #0]
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	00030230 	.word	0x00030230

000d4944 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b02      	ldr	r3, [pc, #8]	; (d4950 <HAL_SPI_Set_Clock_Divider+0xc>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	691b      	ldr	r3, [r3, #16]
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	bd08      	pop	{r3, pc}
   d4950:	00030230 	.word	0x00030230

000d4954 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b02      	ldr	r3, [pc, #8]	; (d4960 <HAL_SPI_Send_Receive_Data+0xc>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	695b      	ldr	r3, [r3, #20]
   d495c:	9301      	str	r3, [sp, #4]
   d495e:	bd08      	pop	{r3, pc}
   d4960:	00030230 	.word	0x00030230

000d4964 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b02      	ldr	r3, [pc, #8]	; (d4970 <HAL_SPI_Init+0xc>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	69db      	ldr	r3, [r3, #28]
   d496c:	9301      	str	r3, [sp, #4]
   d496e:	bd08      	pop	{r3, pc}
   d4970:	00030230 	.word	0x00030230

000d4974 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b02      	ldr	r3, [pc, #8]	; (d4980 <HAL_SPI_Is_Enabled+0xc>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	6a1b      	ldr	r3, [r3, #32]
   d497c:	9301      	str	r3, [sp, #4]
   d497e:	bd08      	pop	{r3, pc}
   d4980:	00030230 	.word	0x00030230

000d4984 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b02      	ldr	r3, [pc, #8]	; (d4990 <HAL_SPI_Info+0xc>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d498c:	9301      	str	r3, [sp, #4]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	00030230 	.word	0x00030230

000d4994 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <HAL_SPI_Set_Settings+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	00030230 	.word	0x00030230

000d49a4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <HAL_RNG_GetRandomNumber+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	685b      	ldr	r3, [r3, #4]
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	00030218 	.word	0x00030218

000d49b4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	695b      	ldr	r3, [r3, #20]
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	00030218 	.word	0x00030218

000d49c4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <os_thread_is_current+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	689b      	ldr	r3, [r3, #8]
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	00030248 	.word	0x00030248

000d49d4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <os_thread_join+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	691b      	ldr	r3, [r3, #16]
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	00030248 	.word	0x00030248

000d49e4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <os_thread_cleanup+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	695b      	ldr	r3, [r3, #20]
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	00030248 	.word	0x00030248

000d49f4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <os_mutex_create+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	00030248 	.word	0x00030248

000d4a04 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <os_mutex_lock+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	00030248 	.word	0x00030248

000d4a14 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <os_mutex_unlock+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	00030248 	.word	0x00030248

000d4a24 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <os_mutex_recursive_create+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	00030248 	.word	0x00030248

000d4a34 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <inet_inet_ntop+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	695b      	ldr	r3, [r3, #20]
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	00030264 	.word	0x00030264

000d4a44 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <HAL_USART_Init+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	681b      	ldr	r3, [r3, #0]
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	0003023c 	.word	0x0003023c

000d4a54 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <HAL_USART_Write_Data+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	68db      	ldr	r3, [r3, #12]
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	0003023c 	.word	0x0003023c

000d4a64 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <HAL_USART_Available_Data+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	691b      	ldr	r3, [r3, #16]
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	0003023c 	.word	0x0003023c

000d4a74 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <HAL_USART_Read_Data+0xc>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	695b      	ldr	r3, [r3, #20]
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	0003023c 	.word	0x0003023c

000d4a84 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4a84:	b508      	push	{r3, lr}
   d4a86:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <HAL_USART_Peek_Data+0xc>)
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	699b      	ldr	r3, [r3, #24]
   d4a8c:	9301      	str	r3, [sp, #4]
   d4a8e:	bd08      	pop	{r3, pc}
   d4a90:	0003023c 	.word	0x0003023c

000d4a94 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4a94:	b508      	push	{r3, lr}
   d4a96:	4b02      	ldr	r3, [pc, #8]	; (d4aa0 <HAL_USART_Flush_Data+0xc>)
   d4a98:	681b      	ldr	r3, [r3, #0]
   d4a9a:	69db      	ldr	r3, [r3, #28]
   d4a9c:	9301      	str	r3, [sp, #4]
   d4a9e:	bd08      	pop	{r3, pc}
   d4aa0:	0003023c 	.word	0x0003023c

000d4aa4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <HAL_USART_Is_Enabled+0xc>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	6a1b      	ldr	r3, [r3, #32]
   d4aac:	9301      	str	r3, [sp, #4]
   d4aae:	bd08      	pop	{r3, pc}
   d4ab0:	0003023c 	.word	0x0003023c

000d4ab4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4ab4:	b508      	push	{r3, lr}
   d4ab6:	4b02      	ldr	r3, [pc, #8]	; (d4ac0 <HAL_USART_Available_Data_For_Write+0xc>)
   d4ab8:	681b      	ldr	r3, [r3, #0]
   d4aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4abc:	9301      	str	r3, [sp, #4]
   d4abe:	bd08      	pop	{r3, pc}
   d4ac0:	0003023c 	.word	0x0003023c

000d4ac4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <HAL_I2C_Write_Data+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	6a1b      	ldr	r3, [r3, #32]
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	00030228 	.word	0x00030228

000d4ad4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4ad4:	b508      	push	{r3, lr}
   d4ad6:	4b02      	ldr	r3, [pc, #8]	; (d4ae0 <HAL_I2C_Available_Data+0xc>)
   d4ad8:	681b      	ldr	r3, [r3, #0]
   d4ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4adc:	9301      	str	r3, [sp, #4]
   d4ade:	bd08      	pop	{r3, pc}
   d4ae0:	00030228 	.word	0x00030228

000d4ae4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4ae4:	b508      	push	{r3, lr}
   d4ae6:	4b02      	ldr	r3, [pc, #8]	; (d4af0 <HAL_I2C_Read_Data+0xc>)
   d4ae8:	681b      	ldr	r3, [r3, #0]
   d4aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4aec:	9301      	str	r3, [sp, #4]
   d4aee:	bd08      	pop	{r3, pc}
   d4af0:	00030228 	.word	0x00030228

000d4af4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4af4:	b508      	push	{r3, lr}
   d4af6:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <HAL_I2C_Peek_Data+0xc>)
   d4af8:	681b      	ldr	r3, [r3, #0]
   d4afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4afc:	9301      	str	r3, [sp, #4]
   d4afe:	bd08      	pop	{r3, pc}
   d4b00:	00030228 	.word	0x00030228

000d4b04 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4b04:	b508      	push	{r3, lr}
   d4b06:	4b02      	ldr	r3, [pc, #8]	; (d4b10 <HAL_I2C_Flush_Data+0xc>)
   d4b08:	681b      	ldr	r3, [r3, #0]
   d4b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b0c:	9301      	str	r3, [sp, #4]
   d4b0e:	bd08      	pop	{r3, pc}
   d4b10:	00030228 	.word	0x00030228

000d4b14 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4b14:	b508      	push	{r3, lr}
   d4b16:	4b02      	ldr	r3, [pc, #8]	; (d4b20 <HAL_I2C_Is_Enabled+0xc>)
   d4b18:	681b      	ldr	r3, [r3, #0]
   d4b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4b1c:	9301      	str	r3, [sp, #4]
   d4b1e:	bd08      	pop	{r3, pc}
   d4b20:	00030228 	.word	0x00030228

000d4b24 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4b24:	b508      	push	{r3, lr}
   d4b26:	4b02      	ldr	r3, [pc, #8]	; (d4b30 <HAL_I2C_Init+0xc>)
   d4b28:	681b      	ldr	r3, [r3, #0]
   d4b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4b2c:	9301      	str	r3, [sp, #4]
   d4b2e:	bd08      	pop	{r3, pc}
   d4b30:	00030228 	.word	0x00030228

000d4b34 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d4b34:	b508      	push	{r3, lr}
   d4b36:	4b02      	ldr	r3, [pc, #8]	; (d4b40 <cellular_signal+0xc>)
   d4b38:	681b      	ldr	r3, [r3, #0]
   d4b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4b3c:	9301      	str	r3, [sp, #4]
   d4b3e:	bd08      	pop	{r3, pc}
   d4b40:	00030274 	.word	0x00030274

000d4b44 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4b44:	b508      	push	{r3, lr}
   d4b46:	4b02      	ldr	r3, [pc, #8]	; (d4b50 <HAL_USB_USART_Init+0xc>)
   d4b48:	681b      	ldr	r3, [r3, #0]
   d4b4a:	681b      	ldr	r3, [r3, #0]
   d4b4c:	9301      	str	r3, [sp, #4]
   d4b4e:	bd08      	pop	{r3, pc}
   d4b50:	0003024c 	.word	0x0003024c

000d4b54 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4b54:	b508      	push	{r3, lr}
   d4b56:	4b02      	ldr	r3, [pc, #8]	; (d4b60 <HAL_USB_USART_Available_Data+0xc>)
   d4b58:	681b      	ldr	r3, [r3, #0]
   d4b5a:	691b      	ldr	r3, [r3, #16]
   d4b5c:	9301      	str	r3, [sp, #4]
   d4b5e:	bd08      	pop	{r3, pc}
   d4b60:	0003024c 	.word	0x0003024c

000d4b64 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4b64:	b508      	push	{r3, lr}
   d4b66:	4b02      	ldr	r3, [pc, #8]	; (d4b70 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4b68:	681b      	ldr	r3, [r3, #0]
   d4b6a:	695b      	ldr	r3, [r3, #20]
   d4b6c:	9301      	str	r3, [sp, #4]
   d4b6e:	bd08      	pop	{r3, pc}
   d4b70:	0003024c 	.word	0x0003024c

000d4b74 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b02      	ldr	r3, [pc, #8]	; (d4b80 <HAL_USB_USART_Receive_Data+0xc>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	699b      	ldr	r3, [r3, #24]
   d4b7c:	9301      	str	r3, [sp, #4]
   d4b7e:	bd08      	pop	{r3, pc}
   d4b80:	0003024c 	.word	0x0003024c

000d4b84 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b84:	b508      	push	{r3, lr}
   d4b86:	4b02      	ldr	r3, [pc, #8]	; (d4b90 <HAL_USB_USART_Send_Data+0xc>)
   d4b88:	681b      	ldr	r3, [r3, #0]
   d4b8a:	69db      	ldr	r3, [r3, #28]
   d4b8c:	9301      	str	r3, [sp, #4]
   d4b8e:	bd08      	pop	{r3, pc}
   d4b90:	0003024c 	.word	0x0003024c

000d4b94 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4b94:	b508      	push	{r3, lr}
   d4b96:	4b02      	ldr	r3, [pc, #8]	; (d4ba0 <HAL_USB_USART_Flush_Data+0xc>)
   d4b98:	681b      	ldr	r3, [r3, #0]
   d4b9a:	6a1b      	ldr	r3, [r3, #32]
   d4b9c:	9301      	str	r3, [sp, #4]
   d4b9e:	bd08      	pop	{r3, pc}
   d4ba0:	0003024c 	.word	0x0003024c

000d4ba4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4ba4:	b508      	push	{r3, lr}
   d4ba6:	4b02      	ldr	r3, [pc, #8]	; (d4bb0 <set_system_mode+0xc>)
   d4ba8:	681b      	ldr	r3, [r3, #0]
   d4baa:	685b      	ldr	r3, [r3, #4]
   d4bac:	9301      	str	r3, [sp, #4]
   d4bae:	bd08      	pop	{r3, pc}
   d4bb0:	00030220 	.word	0x00030220

000d4bb4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4bb4:	b508      	push	{r3, lr}
   d4bb6:	4b02      	ldr	r3, [pc, #8]	; (d4bc0 <application_thread_current+0xc>)
   d4bb8:	681b      	ldr	r3, [r3, #0]
   d4bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4bbc:	9301      	str	r3, [sp, #4]
   d4bbe:	bd08      	pop	{r3, pc}
   d4bc0:	00030220 	.word	0x00030220

000d4bc4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4bc4:	b508      	push	{r3, lr}
   d4bc6:	4b02      	ldr	r3, [pc, #8]	; (d4bd0 <application_thread_invoke+0xc>)
   d4bc8:	681b      	ldr	r3, [r3, #0]
   d4bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4bcc:	9301      	str	r3, [sp, #4]
   d4bce:	bd08      	pop	{r3, pc}
   d4bd0:	00030220 	.word	0x00030220

000d4bd4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4bd4:	b508      	push	{r3, lr}
   d4bd6:	4b03      	ldr	r3, [pc, #12]	; (d4be4 <system_ctrl_set_app_request_handler+0x10>)
   d4bd8:	681b      	ldr	r3, [r3, #0]
   d4bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4bde:	9301      	str	r3, [sp, #4]
   d4be0:	bd08      	pop	{r3, pc}
   d4be2:	0000      	.short	0x0000
   d4be4:	00030220 	.word	0x00030220

000d4be8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4be8:	b508      	push	{r3, lr}
   d4bea:	4b03      	ldr	r3, [pc, #12]	; (d4bf8 <system_ctrl_set_result+0x10>)
   d4bec:	681b      	ldr	r3, [r3, #0]
   d4bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4bf2:	9301      	str	r3, [sp, #4]
   d4bf4:	bd08      	pop	{r3, pc}
   d4bf6:	0000      	.short	0x0000
   d4bf8:	00030220 	.word	0x00030220

000d4bfc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bfc:	b508      	push	{r3, lr}
   d4bfe:	4b02      	ldr	r3, [pc, #8]	; (d4c08 <network_connect+0xc>)
   d4c00:	681b      	ldr	r3, [r3, #0]
   d4c02:	685b      	ldr	r3, [r3, #4]
   d4c04:	9301      	str	r3, [sp, #4]
   d4c06:	bd08      	pop	{r3, pc}
   d4c08:	00030240 	.word	0x00030240

000d4c0c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4c0c:	b508      	push	{r3, lr}
   d4c0e:	4b02      	ldr	r3, [pc, #8]	; (d4c18 <network_connecting+0xc>)
   d4c10:	681b      	ldr	r3, [r3, #0]
   d4c12:	689b      	ldr	r3, [r3, #8]
   d4c14:	9301      	str	r3, [sp, #4]
   d4c16:	bd08      	pop	{r3, pc}
   d4c18:	00030240 	.word	0x00030240

000d4c1c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4c1c:	b508      	push	{r3, lr}
   d4c1e:	4b02      	ldr	r3, [pc, #8]	; (d4c28 <network_disconnect+0xc>)
   d4c20:	681b      	ldr	r3, [r3, #0]
   d4c22:	68db      	ldr	r3, [r3, #12]
   d4c24:	9301      	str	r3, [sp, #4]
   d4c26:	bd08      	pop	{r3, pc}
   d4c28:	00030240 	.word	0x00030240

000d4c2c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4c2c:	b508      	push	{r3, lr}
   d4c2e:	4b02      	ldr	r3, [pc, #8]	; (d4c38 <network_ready+0xc>)
   d4c30:	681b      	ldr	r3, [r3, #0]
   d4c32:	691b      	ldr	r3, [r3, #16]
   d4c34:	9301      	str	r3, [sp, #4]
   d4c36:	bd08      	pop	{r3, pc}
   d4c38:	00030240 	.word	0x00030240

000d4c3c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <network_on+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	695b      	ldr	r3, [r3, #20]
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	00030240 	.word	0x00030240

000d4c4c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <network_off+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	699b      	ldr	r3, [r3, #24]
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	00030240 	.word	0x00030240

000d4c5c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <network_listen+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	69db      	ldr	r3, [r3, #28]
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	00030240 	.word	0x00030240

000d4c6c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <network_listening+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	6a1b      	ldr	r3, [r3, #32]
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	00030240 	.word	0x00030240

000d4c7c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <network_set_listen_timeout+0xc>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c84:	9301      	str	r3, [sp, #4]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	00030240 	.word	0x00030240

000d4c8c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4c8c:	b508      	push	{r3, lr}
   d4c8e:	4b02      	ldr	r3, [pc, #8]	; (d4c98 <network_get_listen_timeout+0xc>)
   d4c90:	681b      	ldr	r3, [r3, #0]
   d4c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c94:	9301      	str	r3, [sp, #4]
   d4c96:	bd08      	pop	{r3, pc}
   d4c98:	00030240 	.word	0x00030240

000d4c9c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4c9c:	b508      	push	{r3, lr}
   d4c9e:	4b02      	ldr	r3, [pc, #8]	; (d4ca8 <spark_variable+0xc>)
   d4ca0:	681b      	ldr	r3, [r3, #0]
   d4ca2:	681b      	ldr	r3, [r3, #0]
   d4ca4:	9301      	str	r3, [sp, #4]
   d4ca6:	bd08      	pop	{r3, pc}
   d4ca8:	00030244 	.word	0x00030244

000d4cac <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4cac:	b508      	push	{r3, lr}
   d4cae:	4b02      	ldr	r3, [pc, #8]	; (d4cb8 <spark_function+0xc>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	685b      	ldr	r3, [r3, #4]
   d4cb4:	9301      	str	r3, [sp, #4]
   d4cb6:	bd08      	pop	{r3, pc}
   d4cb8:	00030244 	.word	0x00030244

000d4cbc <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4cbc:	b508      	push	{r3, lr}
   d4cbe:	4b02      	ldr	r3, [pc, #8]	; (d4cc8 <spark_cloud_flag_connected+0xc>)
   d4cc0:	681b      	ldr	r3, [r3, #0]
   d4cc2:	695b      	ldr	r3, [r3, #20]
   d4cc4:	9301      	str	r3, [sp, #4]
   d4cc6:	bd08      	pop	{r3, pc}
   d4cc8:	00030244 	.word	0x00030244

000d4ccc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4ccc:	b508      	push	{r3, lr}
   d4cce:	4b02      	ldr	r3, [pc, #8]	; (d4cd8 <spark_send_event+0xc>)
   d4cd0:	681b      	ldr	r3, [r3, #0]
   d4cd2:	6a1b      	ldr	r3, [r3, #32]
   d4cd4:	9301      	str	r3, [sp, #4]
   d4cd6:	bd08      	pop	{r3, pc}
   d4cd8:	00030244 	.word	0x00030244

000d4cdc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4cdc:	b508      	push	{r3, lr}
   d4cde:	4b02      	ldr	r3, [pc, #8]	; (d4ce8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4ce0:	681b      	ldr	r3, [r3, #0]
   d4ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4ce4:	9301      	str	r3, [sp, #4]
   d4ce6:	bd08      	pop	{r3, pc}
   d4ce8:	00030244 	.word	0x00030244

000d4cec <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4cec:	b508      	push	{r3, lr}
   d4cee:	4b02      	ldr	r3, [pc, #8]	; (d4cf8 <malloc+0xc>)
   d4cf0:	681b      	ldr	r3, [r3, #0]
   d4cf2:	681b      	ldr	r3, [r3, #0]
   d4cf4:	9301      	str	r3, [sp, #4]
   d4cf6:	bd08      	pop	{r3, pc}
   d4cf8:	0003021c 	.word	0x0003021c

000d4cfc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4cfc:	b508      	push	{r3, lr}
   d4cfe:	4b02      	ldr	r3, [pc, #8]	; (d4d08 <free+0xc>)
   d4d00:	681b      	ldr	r3, [r3, #0]
   d4d02:	685b      	ldr	r3, [r3, #4]
   d4d04:	9301      	str	r3, [sp, #4]
   d4d06:	bd08      	pop	{r3, pc}
   d4d08:	0003021c 	.word	0x0003021c

000d4d0c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4d0c:	b508      	push	{r3, lr}
   d4d0e:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <realloc+0xc>)
   d4d10:	681b      	ldr	r3, [r3, #0]
   d4d12:	689b      	ldr	r3, [r3, #8]
   d4d14:	9301      	str	r3, [sp, #4]
   d4d16:	bd08      	pop	{r3, pc}
   d4d18:	0003021c 	.word	0x0003021c

000d4d1c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b02      	ldr	r3, [pc, #8]	; (d4d28 <vsnprintf+0xc>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4d24:	9301      	str	r3, [sp, #4]
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	0003021c 	.word	0x0003021c

000d4d2c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4d2c:	b508      	push	{r3, lr}
   d4d2e:	4b02      	ldr	r3, [pc, #8]	; (d4d38 <abort+0xc>)
   d4d30:	681b      	ldr	r3, [r3, #0]
   d4d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d34:	9301      	str	r3, [sp, #4]
   d4d36:	bd08      	pop	{r3, pc}
   d4d38:	0003021c 	.word	0x0003021c

000d4d3c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4d3c:	b508      	push	{r3, lr}
   d4d3e:	4b02      	ldr	r3, [pc, #8]	; (d4d48 <_malloc_r+0xc>)
   d4d40:	681b      	ldr	r3, [r3, #0]
   d4d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d44:	9301      	str	r3, [sp, #4]
   d4d46:	bd08      	pop	{r3, pc}
   d4d48:	0003021c 	.word	0x0003021c

000d4d4c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4d4c:	b508      	push	{r3, lr}
   d4d4e:	4b02      	ldr	r3, [pc, #8]	; (d4d58 <__errno+0xc>)
   d4d50:	681b      	ldr	r3, [r3, #0]
   d4d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4d54:	9301      	str	r3, [sp, #4]
   d4d56:	bd08      	pop	{r3, pc}
   d4d58:	0003021c 	.word	0x0003021c

000d4d5c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4d5c:	2200      	movs	r2, #0
   d4d5e:	4611      	mov	r1, r2
   d4d60:	6840      	ldr	r0, [r0, #4]
   d4d62:	f7ff bf83 	b.w	d4c6c <network_listening>

000d4d66 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4d66:	2200      	movs	r2, #0
   d4d68:	4611      	mov	r1, r2
   d4d6a:	6840      	ldr	r0, [r0, #4]
   d4d6c:	f7ff bf8e 	b.w	d4c8c <network_get_listen_timeout>

000d4d70 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4d70:	2200      	movs	r2, #0
   d4d72:	6840      	ldr	r0, [r0, #4]
   d4d74:	f7ff bf82 	b.w	d4c7c <network_set_listen_timeout>

000d4d78 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4d78:	2200      	movs	r2, #0
   d4d7a:	f081 0101 	eor.w	r1, r1, #1
   d4d7e:	6840      	ldr	r0, [r0, #4]
   d4d80:	f7ff bf6c 	b.w	d4c5c <network_listen>

000d4d84 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4d84:	2300      	movs	r3, #0
   d4d86:	461a      	mov	r2, r3
   d4d88:	4619      	mov	r1, r3
   d4d8a:	6840      	ldr	r0, [r0, #4]
   d4d8c:	f7ff bf5e 	b.w	d4c4c <network_off>

000d4d90 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4d90:	2300      	movs	r3, #0
   d4d92:	461a      	mov	r2, r3
   d4d94:	4619      	mov	r1, r3
   d4d96:	6840      	ldr	r0, [r0, #4]
   d4d98:	f7ff bf50 	b.w	d4c3c <network_on>

000d4d9c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4d9c:	2200      	movs	r2, #0
   d4d9e:	4611      	mov	r1, r2
   d4da0:	6840      	ldr	r0, [r0, #4]
   d4da2:	f7ff bf43 	b.w	d4c2c <network_ready>

000d4da6 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4da6:	2200      	movs	r2, #0
   d4da8:	4611      	mov	r1, r2
   d4daa:	6840      	ldr	r0, [r0, #4]
   d4dac:	f7ff bf2e 	b.w	d4c0c <network_connecting>

000d4db0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4db0:	2200      	movs	r2, #0
   d4db2:	2102      	movs	r1, #2
   d4db4:	6840      	ldr	r0, [r0, #4]
   d4db6:	f7ff bf31 	b.w	d4c1c <network_disconnect>

000d4dba <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4dba:	2300      	movs	r3, #0
   d4dbc:	461a      	mov	r2, r3
   d4dbe:	6840      	ldr	r0, [r0, #4]
   d4dc0:	f7ff bf1c 	b.w	d4bfc <network_connect>

000d4dc4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4dc4:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4dc6:	2203      	movs	r2, #3
   d4dc8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4dca:	4a02      	ldr	r2, [pc, #8]	; (d4dd4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4dcc:	601a      	str	r2, [r3, #0]
   d4dce:	4770      	bx	lr
   d4dd0:	2003e3a4 	.word	0x2003e3a4
   d4dd4:	000d7ad8 	.word	0x000d7ad8

000d4dd8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4dd8:	4770      	bx	lr

000d4dda <_ZN8SPIClassD0Ev>:
   d4dda:	b510      	push	{r4, lr}
   d4ddc:	2110      	movs	r1, #16
   d4dde:	4604      	mov	r4, r0
   d4de0:	f001 fc35 	bl	d664e <_ZdlPvj>
   d4de4:	4620      	mov	r0, r4
   d4de6:	bd10      	pop	{r4, pc}

000d4de8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4de8:	b570      	push	{r4, r5, r6, lr}
   d4dea:	4b08      	ldr	r3, [pc, #32]	; (d4e0c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4dec:	6003      	str	r3, [r0, #0]
   d4dee:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4df0:	2500      	movs	r5, #0
   d4df2:	460e      	mov	r6, r1
   d4df4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4df8:	f7ff fdfc 	bl	d49f4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4dfc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4dfe:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4e00:	f7ff fdb0 	bl	d4964 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4e04:	60a5      	str	r5, [r4, #8]
}
   d4e06:	4620      	mov	r0, r4
   d4e08:	bd70      	pop	{r4, r5, r6, pc}
   d4e0a:	bf00      	nop
   d4e0c:	000d7b0c 	.word	0x000d7b0c

000d4e10 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d4e10:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d4e14:	7900      	ldrb	r0, [r0, #4]
   d4e16:	f7ff bd8d 	b.w	d4934 <HAL_SPI_Begin>

000d4e1a <_ZN8SPIClass14endTransactionEv>:
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
    void unlock() { os_mutex_unlock(handle_); }
   d4e1a:	68c0      	ldr	r0, [r0, #12]
   d4e1c:	f7ff bdfa 	b.w	d4a14 <os_mutex_unlock>

000d4e20 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d4e20:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
   d4e22:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d4e24:	6018      	str	r0, [r3, #0]
   d4e26:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
   d4e28:	6818      	ldr	r0, [r3, #0]
   d4e2a:	4288      	cmp	r0, r1
   d4e2c:	b2e5      	uxtb	r5, r4
   d4e2e:	d906      	bls.n	d4e3e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d4e30:	3401      	adds	r4, #1
   d4e32:	2c08      	cmp	r4, #8
   d4e34:	d002      	beq.n	d4e3c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
   d4e36:	0840      	lsrs	r0, r0, #1
   d4e38:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
   d4e3a:	e7f5      	b.n	d4e28 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d4e3c:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d4e3e:	4b02      	ldr	r3, [pc, #8]	; (d4e48 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d4e40:	5d5b      	ldrb	r3, [r3, r5]
   d4e42:	7013      	strb	r3, [r2, #0]
   d4e44:	bd30      	pop	{r4, r5, pc}
   d4e46:	bf00      	nop
   d4e48:	000d7b14 	.word	0x000d7b14

000d4e4c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
  lock();
  return 0;
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d4e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4e50:	4680      	mov	r8, r0
   d4e52:	b08f      	sub	sp, #60	; 0x3c
            os_mutex_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
   d4e54:	68c0      	ldr	r0, [r0, #12]
   d4e56:	460f      	mov	r7, r1
   d4e58:	f7ff fdd4 	bl	d4a04 <os_mutex_lock>
  lock();
  // Get Current SPISettings
  hal_spi_info_t info;
  querySpiInfo(_spi, &info);
   d4e5c:	f898 4004 	ldrb.w	r4, [r8, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   d4e60:	2214      	movs	r2, #20
   d4e62:	2100      	movs	r1, #0
   d4e64:	a809      	add	r0, sp, #36	; 0x24
   d4e66:	f002 fcc6 	bl	d77f6 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   d4e6a:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   d4e6c:	4620      	mov	r0, r4
   d4e6e:	2200      	movs	r2, #0
   d4e70:	a909      	add	r1, sp, #36	; 0x24
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   d4e72:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  HAL_SPI_Info(spi, info, nullptr);
   d4e76:	f7ff fd85 	bl	d4984 <HAL_SPI_Info>
}

static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
  if (!info->enabled || info->default_settings)
   d4e7a:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d4e7e:	b14c      	cbz	r4, d4e94 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
   d4e80:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d4e84:	b92d      	cbnz	r5, d4e92 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d4e86:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   d4e88:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d4e8c:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d4e90:	e003      	b.n	d4e9a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d4e92:	2400      	movs	r4, #0
   d4e94:	46a1      	mov	r9, r4
   d4e96:	4626      	mov	r6, r4
   d4e98:	2501      	movs	r5, #1
   d4e9a:	793b      	ldrb	r3, [r7, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d4e9c:	b10d      	cbz	r5, d4ea2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
   d4e9e:	2b00      	cmp	r3, #0
   d4ea0:	d140      	bne.n	d4f24 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
      return true;

    if (default_ == other.default_ &&
   d4ea2:	429d      	cmp	r5, r3
   d4ea4:	d10b      	bne.n	d4ebe <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
   d4ea6:	68ba      	ldr	r2, [r7, #8]
   d4ea8:	42b2      	cmp	r2, r6
   d4eaa:	d108      	bne.n	d4ebe <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d4eac:	f88d 9020 	strb.w	r9, [sp, #32]
   d4eb0:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d4eb4:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d4eb8:	89ba      	ldrh	r2, [r7, #12]
   d4eba:	4291      	cmp	r1, r2
   d4ebc:	d032      	beq.n	d4f24 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
  querySpiInfo(_spi, &info);
  particle::__SPISettings current = spiSettingsFromSpiInfo(&info);
  // If they differ, reconfigure SPI peripheral
  if (settings != current)
  {
    if (!settings.default_) {
   d4ebe:	bb23      	cbnz	r3, d4f0a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xbe>
      uint8_t divisor = 0;
   d4ec0:	f88d 300f 	strb.w	r3, [sp, #15]
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);
   d4ec4:	f10d 020f 	add.w	r2, sp, #15
   d4ec8:	ab04      	add	r3, sp, #16
   d4eca:	68b9      	ldr	r1, [r7, #8]
   d4ecc:	980a      	ldr	r0, [sp, #40]	; 0x28
   d4ece:	f7ff ffa7 	bl	d4e20 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d4ed2:	793b      	ldrb	r3, [r7, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d4ed4:	b105      	cbz	r5, d4ed8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
   d4ed6:	bb13      	cbnz	r3, d4f1e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d4ed8:	42ab      	cmp	r3, r5
   d4eda:	d009      	beq.n	d4ef0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>

      if (!(current <= settings && clock == current.clock_)) {
        HAL_SPI_Set_Settings(_spi, 0, divisor, settings.bitOrder_, settings.dataMode_, nullptr);
   d4edc:	2100      	movs	r1, #0
   d4ede:	7b3b      	ldrb	r3, [r7, #12]
   d4ee0:	9101      	str	r1, [sp, #4]
   d4ee2:	7b7c      	ldrb	r4, [r7, #13]
   d4ee4:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d4ee8:	f898 0004 	ldrb.w	r0, [r8, #4]
   d4eec:	9400      	str	r4, [sp, #0]
   d4eee:	e013      	b.n	d4f18 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xcc>
   d4ef0:	68bb      	ldr	r3, [r7, #8]
   d4ef2:	42b3      	cmp	r3, r6
   d4ef4:	d3f2      	bcc.n	d4edc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d4ef6:	f88d 9020 	strb.w	r9, [sp, #32]
   d4efa:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d4efe:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d4f02:	89bb      	ldrh	r3, [r7, #12]
   d4f04:	429a      	cmp	r2, r3
   d4f06:	d1e9      	bne.n	d4edc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
   d4f08:	e009      	b.n	d4f1e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      }
    } else {
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
   d4f0a:	2300      	movs	r3, #0
   d4f0c:	f898 0004 	ldrb.w	r0, [r8, #4]
   d4f10:	9301      	str	r3, [sp, #4]
   d4f12:	9300      	str	r3, [sp, #0]
   d4f14:	461a      	mov	r2, r3
   d4f16:	2101      	movs	r1, #1
   d4f18:	f7ff fd3c 	bl	d4994 <HAL_SPI_Set_Settings>
   d4f1c:	e002      	b.n	d4f24 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
    if (!settings.default_) {
      uint8_t divisor = 0;
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);

      if (!(current <= settings && clock == current.clock_)) {
   d4f1e:	9b04      	ldr	r3, [sp, #16]
   d4f20:	42b3      	cmp	r3, r6
   d4f22:	d1db      	bne.n	d4edc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
    }
  }

  return 0;
}
   d4f24:	2000      	movs	r0, #0
   d4f26:	b00f      	add	sp, #60	; 0x3c
   d4f28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4f2c <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d4f2c:	b570      	push	{r4, r5, r6, lr}
   d4f2e:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
   d4f30:	7906      	ldrb	r6, [r0, #4]
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
   d4f32:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d4f36:	4604      	mov	r4, r0
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   d4f38:	2214      	movs	r2, #20
   d4f3a:	2100      	movs	r1, #0
   d4f3c:	a803      	add	r0, sp, #12
   d4f3e:	f002 fc5a 	bl	d77f6 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   d4f42:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   d4f44:	a903      	add	r1, sp, #12
   d4f46:	4630      	mov	r0, r6
   d4f48:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   d4f4a:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
   d4f4e:	f7ff fd19 	bl	d4984 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
   d4f52:	ab02      	add	r3, sp, #8
   d4f54:	f10d 0207 	add.w	r2, sp, #7
   d4f58:	4629      	mov	r1, r5
   d4f5a:	9804      	ldr	r0, [sp, #16]
   d4f5c:	f7ff ff60 	bl	d4e20 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
   d4f60:	7920      	ldrb	r0, [r4, #4]
   d4f62:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d4f66:	f7ff fced 	bl	d4944 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
   d4f6a:	9802      	ldr	r0, [sp, #8]
   d4f6c:	b008      	add	sp, #32
   d4f6e:	bd70      	pop	{r4, r5, r6, pc}

000d4f70 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d4f70:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   d4f72:	7900      	ldrb	r0, [r0, #4]
   d4f74:	f7ff fcee 	bl	d4954 <HAL_SPI_Send_Receive_Data>
}
   d4f78:	b2c0      	uxtb	r0, r0
   d4f7a:	bd08      	pop	{r3, pc}

000d4f7c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d4f7c:	7900      	ldrb	r0, [r0, #4]
   d4f7e:	f7ff bcf9 	b.w	d4974 <HAL_SPI_Is_Enabled>
	...

000d4f84 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4f84:	4b04      	ldr	r3, [pc, #16]	; (d4f98 <_GLOBAL__sub_I_System+0x14>)
   d4f86:	2000      	movs	r0, #0
   d4f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4f8c:	7018      	strb	r0, [r3, #0]
   d4f8e:	8058      	strh	r0, [r3, #2]
   d4f90:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4f92:	f7ff be07 	b.w	d4ba4 <set_system_mode>
   d4f96:	bf00      	nop
   d4f98:	2003e3ac 	.word	0x2003e3ac

000d4f9c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d4f9c:	b510      	push	{r4, lr}
   d4f9e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d4fa0:	f002 fc7d 	bl	d789e <strlen>
   d4fa4:	3801      	subs	r0, #1
   d4fa6:	1823      	adds	r3, r4, r0
   d4fa8:	4620      	mov	r0, r4
	while(i<j){
   d4faa:	4298      	cmp	r0, r3
   d4fac:	d206      	bcs.n	d4fbc <_Z11str_reversePc+0x20>
		c = *i;
   d4fae:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d4fb0:	7819      	ldrb	r1, [r3, #0]
   d4fb2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d4fb6:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d4fba:	e7f6      	b.n	d4faa <_Z11str_reversePc+0xe>
   d4fbc:	bd10      	pop	{r4, pc}

000d4fbe <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4fbe:	b570      	push	{r4, r5, r6, lr}
   d4fc0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d4fc2:	1e91      	subs	r1, r2, #2
   d4fc4:	2922      	cmp	r1, #34	; 0x22
   d4fc6:	d820      	bhi.n	d500a <ultoa+0x4c>
   d4fc8:	4625      	mov	r5, r4
   d4fca:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4fcc:	b910      	cbnz	r0, d4fd4 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4fce:	4423      	add	r3, r4
            *ptr++ = '0';
   d4fd0:	2230      	movs	r2, #48	; 0x30
   d4fd2:	e00e      	b.n	d4ff2 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d4fd4:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d4fd8:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d4fdc:	b2c1      	uxtb	r1, r0
   d4fde:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d4fe2:	2809      	cmp	r0, #9
                *ptr += '0';
   d4fe4:	bf94      	ite	ls
   d4fe6:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d4fe8:	3157      	addhi	r1, #87	; 0x57
   d4fea:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d4fee:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4ff0:	e7eb      	b.n	d4fca <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4ff2:	4299      	cmp	r1, r3
   d4ff4:	d202      	bcs.n	d4ffc <ultoa+0x3e>
            *ptr++ = '0';
   d4ff6:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4ffa:	e7fa      	b.n	d4ff2 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d4ffc:	2300      	movs	r3, #0
	str_reverse(buffer);
   d4ffe:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d5000:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d5002:	f7ff ffcb 	bl	d4f9c <_Z11str_reversePc>
	return buffer;
   d5006:	4620      	mov	r0, r4
   d5008:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d500a:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d500c:	bd70      	pop	{r4, r5, r6, pc}

000d500e <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d500e:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d5010:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5012:	460c      	mov	r4, r1
   d5014:	4615      	mov	r5, r2
	if(a<0){
   d5016:	da0b      	bge.n	d5030 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5018:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d501c:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5020:	bf14      	ite	ne
   d5022:	4258      	negne	r0, r3
   d5024:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d5026:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d5028:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d502a:	462a      	mov	r2, r5
   d502c:	4419      	add	r1, r3
   d502e:	e000      	b.n	d5032 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d5030:	2301      	movs	r3, #1
   d5032:	f7ff ffc4 	bl	d4fbe <ultoa>
	}
	return buffer;
}
   d5036:	4620      	mov	r0, r4
   d5038:	bd38      	pop	{r3, r4, r5, pc}

000d503a <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   d503a:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   d503c:	2301      	movs	r3, #1
   d503e:	f7ff ffbe 	bl	d4fbe <ultoa>
}
   d5042:	bd08      	pop	{r3, pc}

000d5044 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d5044:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5048:	ec59 8b10 	vmov	r8, r9, d0
   d504c:	4607      	mov	r7, r0
   d504e:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d5050:	2200      	movs	r2, #0
   d5052:	2300      	movs	r3, #0
   d5054:	ee10 0a10 	vmov	r0, s0
   d5058:	4649      	mov	r1, r9
   d505a:	f002 f9a1 	bl	d73a0 <__aeabi_dcmplt>
   d505e:	b128      	cbz	r0, d506c <_Z4dtoadhPc+0x28>
        val = -val;
   d5060:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d5064:	4699      	mov	r9, r3
        *sout++ = '-';
   d5066:	232d      	movs	r3, #45	; 0x2d
   d5068:	7033      	strb	r3, [r6, #0]
   d506a:	3601      	adds	r6, #1
   d506c:	2300      	movs	r3, #0
    }
    long scale = 1;
   d506e:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d5070:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d5072:	b2d9      	uxtb	r1, r3
   d5074:	428f      	cmp	r7, r1
   d5076:	d902      	bls.n	d507e <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d5078:	4354      	muls	r4, r2
   d507a:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d507c:	e7f9      	b.n	d5072 <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d507e:	4620      	mov	r0, r4
   d5080:	f001 feb6 	bl	d6df0 <__aeabi_i2d>
   d5084:	4642      	mov	r2, r8
   d5086:	464b      	mov	r3, r9
   d5088:	f001 ff18 	bl	d6ebc <__aeabi_dmul>
   d508c:	4682      	mov	sl, r0
   d508e:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d5090:	f002 f9fc 	bl	d748c <__aeabi_d2ulz>
   d5094:	4680      	mov	r8, r0
   d5096:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d5098:	f001 feda 	bl	d6e50 <__aeabi_ul2d>
   d509c:	4602      	mov	r2, r0
   d509e:	460b      	mov	r3, r1
   d50a0:	4650      	mov	r0, sl
   d50a2:	4659      	mov	r1, fp
   d50a4:	f001 fd56 	bl	d6b54 <__aeabi_dsub>
   d50a8:	2200      	movs	r2, #0
   d50aa:	4b17      	ldr	r3, [pc, #92]	; (d5108 <_Z4dtoadhPc+0xc4>)
   d50ac:	f002 f98c 	bl	d73c8 <__aeabi_dcmpge>
   d50b0:	b118      	cbz	r0, d50ba <_Z4dtoadhPc+0x76>
        fixed++;
   d50b2:	f118 0801 	adds.w	r8, r8, #1
   d50b6:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d50ba:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d50bc:	4622      	mov	r2, r4
   d50be:	462b      	mov	r3, r5
   d50c0:	4640      	mov	r0, r8
   d50c2:	4649      	mov	r1, r9
   d50c4:	f002 f9ca 	bl	d745c <__aeabi_uldivmod>
   d50c8:	2301      	movs	r3, #1
   d50ca:	220a      	movs	r2, #10
   d50cc:	4631      	mov	r1, r6
   d50ce:	f7ff ff76 	bl	d4fbe <ultoa>
    if (prec) {
   d50d2:	b1af      	cbz	r7, d5100 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d50d4:	4630      	mov	r0, r6
   d50d6:	f002 fbe2 	bl	d789e <strlen>
        *sout++ = '.';
   d50da:	232e      	movs	r3, #46	; 0x2e
   d50dc:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d50de:	3001      	adds	r0, #1
   d50e0:	4406      	add	r6, r0
   d50e2:	4622      	mov	r2, r4
   d50e4:	462b      	mov	r3, r5
   d50e6:	4640      	mov	r0, r8
   d50e8:	4649      	mov	r1, r9
   d50ea:	f002 f9b7 	bl	d745c <__aeabi_uldivmod>
   d50ee:	463b      	mov	r3, r7
   d50f0:	4610      	mov	r0, r2
   d50f2:	4631      	mov	r1, r6
   d50f4:	220a      	movs	r2, #10
    }
}
   d50f6:	b001      	add	sp, #4
   d50f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d50fc:	f7ff bf5f 	b.w	d4fbe <ultoa>
    }
}
   d5100:	b001      	add	sp, #4
   d5102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5106:	bf00      	nop
   d5108:	3fe00000 	.word	0x3fe00000

000d510c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d510c:	b510      	push	{r4, lr}
   d510e:	4604      	mov	r4, r0
{
	free(buffer);
   d5110:	6800      	ldr	r0, [r0, #0]
   d5112:	f7ff fdf3 	bl	d4cfc <free>
}
   d5116:	4620      	mov	r0, r4
   d5118:	bd10      	pop	{r4, pc}

000d511a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d511a:	b510      	push	{r4, lr}
   d511c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d511e:	6800      	ldr	r0, [r0, #0]
   d5120:	b108      	cbz	r0, d5126 <_ZN6String10invalidateEv+0xc>
   d5122:	f7ff fdeb 	bl	d4cfc <free>
	buffer = NULL;
   d5126:	2300      	movs	r3, #0
   d5128:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d512a:	60a3      	str	r3, [r4, #8]
   d512c:	6063      	str	r3, [r4, #4]
   d512e:	bd10      	pop	{r4, pc}

000d5130 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5130:	b538      	push	{r3, r4, r5, lr}
   d5132:	4604      	mov	r4, r0
   d5134:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5136:	6800      	ldr	r0, [r0, #0]
   d5138:	3101      	adds	r1, #1
   d513a:	f7ff fde7 	bl	d4d0c <realloc>
	if (newbuffer) {
   d513e:	b110      	cbz	r0, d5146 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5140:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5144:	2001      	movs	r0, #1
	}
	return 0;
}
   d5146:	bd38      	pop	{r3, r4, r5, pc}

000d5148 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5148:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d514a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d514c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d514e:	b113      	cbz	r3, d5156 <_ZN6String7reserveEj+0xe>
   d5150:	6843      	ldr	r3, [r0, #4]
   d5152:	428b      	cmp	r3, r1
   d5154:	d207      	bcs.n	d5166 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5156:	4620      	mov	r0, r4
   d5158:	f7ff ffea 	bl	d5130 <_ZN6String12changeBufferEj>
   d515c:	b120      	cbz	r0, d5168 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d515e:	68a3      	ldr	r3, [r4, #8]
   d5160:	b90b      	cbnz	r3, d5166 <_ZN6String7reserveEj+0x1e>
   d5162:	6822      	ldr	r2, [r4, #0]
   d5164:	7013      	strb	r3, [r2, #0]
   d5166:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5168:	bd10      	pop	{r4, pc}

000d516a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d516a:	b570      	push	{r4, r5, r6, lr}
   d516c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d516e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5170:	4604      	mov	r4, r0
   d5172:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5174:	f7ff ffe8 	bl	d5148 <_ZN6String7reserveEj>
   d5178:	b918      	cbnz	r0, d5182 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d517a:	4620      	mov	r0, r4
   d517c:	f7ff ffcd 	bl	d511a <_ZN6String10invalidateEv>
		return *this;
   d5180:	e009      	b.n	d5196 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5182:	462a      	mov	r2, r5
   d5184:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5186:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5188:	6820      	ldr	r0, [r4, #0]
   d518a:	f002 fb29 	bl	d77e0 <memcpy>
	buffer[len] = 0;
   d518e:	6822      	ldr	r2, [r4, #0]
   d5190:	68a3      	ldr	r3, [r4, #8]
   d5192:	2100      	movs	r1, #0
   d5194:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5196:	4620      	mov	r0, r4
   d5198:	bd70      	pop	{r4, r5, r6, pc}

000d519a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d519a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d519c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d519e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d51a0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d51a2:	6043      	str	r3, [r0, #4]
	len = 0;
   d51a4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d51a6:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d51a8:	460d      	mov	r5, r1
   d51aa:	b139      	cbz	r1, d51bc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d51ac:	4608      	mov	r0, r1
   d51ae:	f002 fb76 	bl	d789e <strlen>
   d51b2:	4629      	mov	r1, r5
   d51b4:	4602      	mov	r2, r0
   d51b6:	4620      	mov	r0, r4
   d51b8:	f7ff ffd7 	bl	d516a <_ZN6String4copyEPKcj>
}
   d51bc:	4620      	mov	r0, r4
   d51be:	bd38      	pop	{r3, r4, r5, pc}

000d51c0 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d51c0:	b538      	push	{r3, r4, r5, lr}
   d51c2:	4605      	mov	r5, r0
	if (buffer) {
   d51c4:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d51c6:	460c      	mov	r4, r1
	if (buffer) {
   d51c8:	b160      	cbz	r0, d51e4 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d51ca:	686a      	ldr	r2, [r5, #4]
   d51cc:	688b      	ldr	r3, [r1, #8]
   d51ce:	429a      	cmp	r2, r3
   d51d0:	d306      	bcc.n	d51e0 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d51d2:	6809      	ldr	r1, [r1, #0]
   d51d4:	f002 fb40 	bl	d7858 <strcpy>
			len = rhs.len;
   d51d8:	68a3      	ldr	r3, [r4, #8]
   d51da:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d51dc:	2300      	movs	r3, #0
   d51de:	e00a      	b.n	d51f6 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d51e0:	f7ff fd8c 	bl	d4cfc <free>
		}
	}
	buffer = rhs.buffer;
   d51e4:	6823      	ldr	r3, [r4, #0]
   d51e6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d51e8:	6863      	ldr	r3, [r4, #4]
   d51ea:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d51ec:	68a3      	ldr	r3, [r4, #8]
   d51ee:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d51f0:	2300      	movs	r3, #0
   d51f2:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d51f4:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d51f6:	60a3      	str	r3, [r4, #8]
   d51f8:	bd38      	pop	{r3, r4, r5, pc}

000d51fa <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d51fa:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d51fc:	b510      	push	{r4, lr}
   d51fe:	460b      	mov	r3, r1
   d5200:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5202:	d007      	beq.n	d5214 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5204:	6809      	ldr	r1, [r1, #0]
   d5206:	b119      	cbz	r1, d5210 <_ZN6StringaSERKS_+0x16>
   d5208:	689a      	ldr	r2, [r3, #8]
   d520a:	f7ff ffae 	bl	d516a <_ZN6String4copyEPKcj>
   d520e:	e001      	b.n	d5214 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d5210:	f7ff ff83 	bl	d511a <_ZN6String10invalidateEv>

	return *this;
}
   d5214:	4620      	mov	r0, r4
   d5216:	bd10      	pop	{r4, pc}

000d5218 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5218:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d521a:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d521c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d521e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5220:	6043      	str	r3, [r0, #4]
	len = 0;
   d5222:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5224:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5226:	f7ff ffe8 	bl	d51fa <_ZN6StringaSERKS_>
}
   d522a:	4620      	mov	r0, r4
   d522c:	bd10      	pop	{r4, pc}

000d522e <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d522e:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d5230:	b510      	push	{r4, lr}
   d5232:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d5234:	d001      	beq.n	d523a <_ZN6StringaSEOS_+0xc>
   d5236:	f7ff ffc3 	bl	d51c0 <_ZN6String4moveERS_>
	return *this;
}
   d523a:	4620      	mov	r0, r4
   d523c:	bd10      	pop	{r4, pc}

000d523e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d523e:	b538      	push	{r3, r4, r5, lr}
   d5240:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5242:	460c      	mov	r4, r1
   d5244:	b141      	cbz	r1, d5258 <_ZN6StringaSEPKc+0x1a>
   d5246:	4608      	mov	r0, r1
   d5248:	f002 fb29 	bl	d789e <strlen>
   d524c:	4621      	mov	r1, r4
   d524e:	4602      	mov	r2, r0
   d5250:	4628      	mov	r0, r5
   d5252:	f7ff ff8a 	bl	d516a <_ZN6String4copyEPKcj>
   d5256:	e001      	b.n	d525c <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5258:	f7ff ff5f 	bl	d511a <_ZN6String10invalidateEv>

	return *this;
}
   d525c:	4628      	mov	r0, r5
   d525e:	bd38      	pop	{r3, r4, r5, pc}

000d5260 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   d5260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5262:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5264:	2300      	movs	r3, #0
   d5266:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d5268:	6063      	str	r3, [r4, #4]
	len = 0;
   d526a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d526c:	7323      	strb	r3, [r4, #12]
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   d526e:	4608      	mov	r0, r1
{
	init();
	char buf[9];
	utoa(value, buf, base);
   d5270:	a901      	add	r1, sp, #4
   d5272:	f7ff fee2 	bl	d503a <utoa>
	*this = buf;
   d5276:	a901      	add	r1, sp, #4
   d5278:	4620      	mov	r0, r4
   d527a:	f7ff ffe0 	bl	d523e <_ZN6StringaSEPKc>
}
   d527e:	4620      	mov	r0, r4
   d5280:	b004      	add	sp, #16
   d5282:	bd10      	pop	{r4, pc}

000d5284 <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
   d5284:	b510      	push	{r4, lr}
   d5286:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5288:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d528a:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d528c:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d528e:	6063      	str	r3, [r4, #4]
	len = 0;
   d5290:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5292:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5294:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d5296:	a901      	add	r1, sp, #4
   d5298:	f7ff feb9 	bl	d500e <itoa>
	*this = buf;
   d529c:	a901      	add	r1, sp, #4
   d529e:	4620      	mov	r0, r4
   d52a0:	f7ff ffcd 	bl	d523e <_ZN6StringaSEPKc>
}
   d52a4:	4620      	mov	r0, r4
   d52a6:	b00a      	add	sp, #40	; 0x28
   d52a8:	bd10      	pop	{r4, pc}

000d52aa <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d52aa:	b530      	push	{r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d52ac:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d52ae:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d52b0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d52b2:	6043      	str	r3, [r0, #4]
	len = 0;
   d52b4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d52b6:	7303      	strb	r3, [r0, #12]
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d52b8:	4604      	mov	r4, r0
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d52ba:	ee10 0a10 	vmov	r0, s0
   d52be:	b2cd      	uxtb	r5, r1
   d52c0:	f001 fda8 	bl	d6e14 <__aeabi_f2d>
   d52c4:	ec41 0b10 	vmov	d0, r0, r1
   d52c8:	a901      	add	r1, sp, #4
   d52ca:	4628      	mov	r0, r5
   d52cc:	f7ff feba 	bl	d5044 <_Z4dtoadhPc>
        *this = buf;
   d52d0:	a901      	add	r1, sp, #4
   d52d2:	4620      	mov	r0, r4
   d52d4:	f7ff ffb3 	bl	d523e <_ZN6StringaSEPKc>
}
   d52d8:	4620      	mov	r0, r4
   d52da:	b00b      	add	sp, #44	; 0x2c
   d52dc:	bd30      	pop	{r4, r5, pc}

000d52de <_ZN6StringC1Edi>:

String::String(double value, int decimalPlaces)
   d52de:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d52e0:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d52e2:	b08a      	sub	sp, #40	; 0x28
   d52e4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d52e6:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d52e8:	6043      	str	r3, [r0, #4]
	len = 0;
   d52ea:	6083      	str	r3, [r0, #8]
	flags = 0;
   d52ec:	7303      	strb	r3, [r0, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d52ee:	b2c8      	uxtb	r0, r1
   d52f0:	a901      	add	r1, sp, #4
   d52f2:	f7ff fea7 	bl	d5044 <_Z4dtoadhPc>
        *this = buf;
   d52f6:	a901      	add	r1, sp, #4
   d52f8:	4620      	mov	r0, r4
   d52fa:	f7ff ffa0 	bl	d523e <_ZN6StringaSEPKc>
}
   d52fe:	4620      	mov	r0, r4
   d5300:	b00a      	add	sp, #40	; 0x28
   d5302:	bd10      	pop	{r4, pc}

000d5304 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5304:	b570      	push	{r4, r5, r6, lr}
   d5306:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5308:	460e      	mov	r6, r1
   d530a:	b909      	cbnz	r1, d5310 <_ZN6String6concatEPKcj+0xc>
   d530c:	2000      	movs	r0, #0
   d530e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5310:	b16a      	cbz	r2, d532e <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d5312:	6883      	ldr	r3, [r0, #8]
   d5314:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d5316:	4629      	mov	r1, r5
   d5318:	f7ff ff16 	bl	d5148 <_ZN6String7reserveEj>
   d531c:	2800      	cmp	r0, #0
   d531e:	d0f5      	beq.n	d530c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5320:	6820      	ldr	r0, [r4, #0]
   d5322:	68a3      	ldr	r3, [r4, #8]
   d5324:	4631      	mov	r1, r6
   d5326:	4418      	add	r0, r3
   d5328:	f002 fa96 	bl	d7858 <strcpy>
	len = newlen;
   d532c:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d532e:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5330:	bd70      	pop	{r4, r5, r6, pc}

000d5332 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d5332:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d5334:	688a      	ldr	r2, [r1, #8]
   d5336:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d5338:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d533a:	f7ff ffe3 	bl	d5304 <_ZN6String6concatEPKcj>
   d533e:	b910      	cbnz	r0, d5346 <_ZplRK15StringSumHelperRK6String+0x14>
   d5340:	4620      	mov	r0, r4
   d5342:	f7ff feea 	bl	d511a <_ZN6String10invalidateEv>
	return a;
}
   d5346:	4620      	mov	r0, r4
   d5348:	bd10      	pop	{r4, pc}

000d534a <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d534a:	b538      	push	{r3, r4, r5, lr}
   d534c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d534e:	460d      	mov	r5, r1
   d5350:	b141      	cbz	r1, d5364 <_ZplRK15StringSumHelperPKc+0x1a>
   d5352:	4608      	mov	r0, r1
   d5354:	f002 faa3 	bl	d789e <strlen>
   d5358:	4629      	mov	r1, r5
   d535a:	4602      	mov	r2, r0
   d535c:	4620      	mov	r0, r4
   d535e:	f7ff ffd1 	bl	d5304 <_ZN6String6concatEPKcj>
   d5362:	b910      	cbnz	r0, d536a <_ZplRK15StringSumHelperPKc+0x20>
   d5364:	4620      	mov	r0, r4
   d5366:	f7ff fed8 	bl	d511a <_ZN6String10invalidateEv>
	return a;
}
   d536a:	4620      	mov	r0, r4
   d536c:	bd38      	pop	{r3, r4, r5, pc}

000d536e <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d536e:	6800      	ldr	r0, [r0, #0]
   d5370:	b108      	cbz	r0, d5376 <_ZNK6String5toIntEv+0x8>
   d5372:	f002 ba23 	b.w	d77bc <atol>
	return 0;
}
   d5376:	4770      	bx	lr

000d5378 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5378:	680b      	ldr	r3, [r1, #0]
   d537a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d537c:	b113      	cbz	r3, d5384 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d537e:	685a      	ldr	r2, [r3, #4]
   d5380:	3201      	adds	r2, #1
   d5382:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5384:	4770      	bx	lr
	...

000d5388 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5388:	4802      	ldr	r0, [pc, #8]	; (d5394 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d538a:	2300      	movs	r3, #0
   d538c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d538e:	f7ff bb49 	b.w	d4a24 <os_mutex_recursive_create>
   d5392:	bf00      	nop
   d5394:	2003e3b4 	.word	0x2003e3b4

000d5398 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d539a:	4606      	mov	r6, r0
   d539c:	460d      	mov	r5, r1
   d539e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d53a0:	2400      	movs	r4, #0
  while (size--) {
   d53a2:	42bd      	cmp	r5, r7
   d53a4:	d00c      	beq.n	d53c0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d53a6:	6833      	ldr	r3, [r6, #0]
   d53a8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d53ac:	689b      	ldr	r3, [r3, #8]
   d53ae:	4630      	mov	r0, r6
   d53b0:	4798      	blx	r3
     if (chunk>=0)
   d53b2:	2800      	cmp	r0, #0
   d53b4:	db01      	blt.n	d53ba <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d53b6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d53b8:	e7f3      	b.n	d53a2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d53ba:	2c00      	cmp	r4, #0
   d53bc:	bf08      	it	eq
   d53be:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d53c0:	4620      	mov	r0, r4
   d53c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53c4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d53c4:	b570      	push	{r4, r5, r6, lr}
   d53c6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d53c8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d53ca:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d53cc:	b149      	cbz	r1, d53e2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d53ce:	f002 fa66 	bl	d789e <strlen>
   d53d2:	682b      	ldr	r3, [r5, #0]
   d53d4:	4602      	mov	r2, r0
   d53d6:	4621      	mov	r1, r4
   d53d8:	4628      	mov	r0, r5
   d53da:	68db      	ldr	r3, [r3, #12]
    }
   d53dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d53e0:	4718      	bx	r3
    }
   d53e2:	bd70      	pop	{r4, r5, r6, pc}

000d53e4 <_ZN5Print5printEPKc>:
   d53e4:	b508      	push	{r3, lr}
   d53e6:	f7ff ffed 	bl	d53c4 <_ZN5Print5writeEPKc>
   d53ea:	bd08      	pop	{r3, pc}

000d53ec <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d53ec:	6803      	ldr	r3, [r0, #0]
   d53ee:	689b      	ldr	r3, [r3, #8]
   d53f0:	4718      	bx	r3

000d53f2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d53f2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d53f4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d53f6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d53f8:	f7ff fff8 	bl	d53ec <_ZN5Print5printEc>
  n += print('\n');
   d53fc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d53fe:	4604      	mov	r4, r0
  n += print('\n');
   d5400:	4628      	mov	r0, r5
   d5402:	f7ff fff3 	bl	d53ec <_ZN5Print5printEc>
  return n;
}
   d5406:	4420      	add	r0, r4
   d5408:	bd38      	pop	{r3, r4, r5, pc}

000d540a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d540a:	b530      	push	{r4, r5, lr}
   d540c:	b08b      	sub	sp, #44	; 0x2c
   d540e:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5410:	2100      	movs	r1, #0
   d5412:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5416:	2a01      	cmp	r2, #1
   d5418:	bf98      	it	ls
   d541a:	220a      	movls	r2, #10
   d541c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5420:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5424:	fb05 3312 	mls	r3, r5, r2, r3
   d5428:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d542c:	2b09      	cmp	r3, #9
   d542e:	bf94      	ite	ls
   d5430:	3330      	addls	r3, #48	; 0x30
   d5432:	3337      	addhi	r3, #55	; 0x37
   d5434:	b2db      	uxtb	r3, r3
   d5436:	4621      	mov	r1, r4
   d5438:	f804 3901 	strb.w	r3, [r4], #-1
   d543c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d543e:	2d00      	cmp	r5, #0
   d5440:	d1ee      	bne.n	d5420 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5442:	f7ff ffbf 	bl	d53c4 <_ZN5Print5writeEPKc>
}
   d5446:	b00b      	add	sp, #44	; 0x2c
   d5448:	bd30      	pop	{r4, r5, pc}

000d544a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d544a:	b410      	push	{r4}
  if (base == 0) return write(n);
   d544c:	b92a      	cbnz	r2, d545a <_ZN5Print5printEmi+0x10>
   d544e:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5450:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5454:	689b      	ldr	r3, [r3, #8]
   d5456:	b2c9      	uxtb	r1, r1
   d5458:	4718      	bx	r3
  else return printNumber(n, base);
   d545a:	b2d2      	uxtb	r2, r2
}
   d545c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5460:	f7ff bfd3 	b.w	d540a <_ZN5Print11printNumberEmh>

000d5464 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5464:	f7ff bff1 	b.w	d544a <_ZN5Print5printEmi>

000d5468 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d5468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d546c:	4607      	mov	r7, r0
   d546e:	460e      	mov	r6, r1
  if (base == 0) {
   d5470:	4615      	mov	r5, r2
   d5472:	b92a      	cbnz	r2, d5480 <_ZN5Print5printEli+0x18>
    return write(n);
   d5474:	6803      	ldr	r3, [r0, #0]
   d5476:	b2c9      	uxtb	r1, r1
   d5478:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d547a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d547e:	4718      	bx	r3
  } else if (base == 10) {
   d5480:	2a0a      	cmp	r2, #10
   d5482:	d102      	bne.n	d548a <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d5484:	2900      	cmp	r1, #0
   d5486:	da01      	bge.n	d548c <_ZN5Print5printEli+0x24>
   d5488:	e004      	b.n	d5494 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d548a:	b2d2      	uxtb	r2, r2
  }
}
   d548c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5490:	f7ff bfbb 	b.w	d540a <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5494:	212d      	movs	r1, #45	; 0x2d
   d5496:	f7ff ffa9 	bl	d53ec <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d549a:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d549c:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d549e:	4271      	negs	r1, r6
   d54a0:	4638      	mov	r0, r7
   d54a2:	f7ff ffb2 	bl	d540a <_ZN5Print11printNumberEmh>
   d54a6:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d54a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d54ac <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d54ac:	f7ff bfdc 	b.w	d5468 <_ZN5Print5printEli>

000d54b0 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d54b0:	b40c      	push	{r2, r3}
   d54b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d54b6:	b087      	sub	sp, #28
   d54b8:	af00      	add	r7, sp, #0
   d54ba:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d54be:	4605      	mov	r5, r0
   d54c0:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d54c4:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d54c6:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d54c8:	4623      	mov	r3, r4
   d54ca:	464a      	mov	r2, r9
   d54cc:	2114      	movs	r1, #20
   d54ce:	1d38      	adds	r0, r7, #4
   d54d0:	f7ff fc24 	bl	d4d1c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d54d4:	2813      	cmp	r0, #19
   d54d6:	d805      	bhi.n	d54e4 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d54d8:	1d39      	adds	r1, r7, #4
   d54da:	4628      	mov	r0, r5
   d54dc:	f7ff ff72 	bl	d53c4 <_ZN5Print5writeEPKc>
   d54e0:	4604      	mov	r4, r0
   d54e2:	e013      	b.n	d550c <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d54e4:	f100 0308 	add.w	r3, r0, #8
   d54e8:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d54ec:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d54ee:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d54f2:	1c41      	adds	r1, r0, #1
   d54f4:	4623      	mov	r3, r4
   d54f6:	464a      	mov	r2, r9
   d54f8:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d54fa:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d54fc:	f7ff fc0e 	bl	d4d1c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5500:	4669      	mov	r1, sp
   d5502:	4628      	mov	r0, r5
   d5504:	f7ff ff5e 	bl	d53c4 <_ZN5Print5writeEPKc>
   d5508:	4604      	mov	r4, r0
   d550a:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d550c:	b11e      	cbz	r6, d5516 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d550e:	4628      	mov	r0, r5
   d5510:	f7ff ff6f 	bl	d53f2 <_ZN5Print7printlnEv>
   d5514:	4404      	add	r4, r0
    return n;
}
   d5516:	4620      	mov	r0, r4
   d5518:	371c      	adds	r7, #28
   d551a:	46bd      	mov	sp, r7
   d551c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5520:	b002      	add	sp, #8
   d5522:	4770      	bx	lr

000d5524 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5524:	4b01      	ldr	r3, [pc, #4]	; (d552c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5526:	4a02      	ldr	r2, [pc, #8]	; (d5530 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5528:	601a      	str	r2, [r3, #0]
   d552a:	4770      	bx	lr
   d552c:	2003e3b8 	.word	0x2003e3b8
   d5530:	000d7b8f 	.word	0x000d7b8f

000d5534 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5534:	4b02      	ldr	r3, [pc, #8]	; (d5540 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5536:	681a      	ldr	r2, [r3, #0]
   d5538:	4b02      	ldr	r3, [pc, #8]	; (d5544 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d553a:	601a      	str	r2, [r3, #0]
   d553c:	4770      	bx	lr
   d553e:	bf00      	nop
   d5540:	2003e14c 	.word	0x2003e14c
   d5544:	2003e3bc 	.word	0x2003e3bc

000d5548 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5548:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d554a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d554c:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d554e:	b113      	cbz	r3, d5556 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5550:	2203      	movs	r2, #3
   d5552:	4601      	mov	r1, r0
   d5554:	4798      	blx	r3
    }
   d5556:	4620      	mov	r0, r4
   d5558:	bd10      	pop	{r4, pc}

000d555a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d555a:	b510      	push	{r4, lr}
   d555c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d555e:	f7ff fff3 	bl	d5548 <_ZNSt14_Function_baseD1Ev>
   d5562:	4620      	mov	r0, r4
   d5564:	bd10      	pop	{r4, pc}

000d5566 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5566:	b513      	push	{r0, r1, r4, lr}
   d5568:	460b      	mov	r3, r1
   d556a:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d556c:	c803      	ldmia	r0, {r0, r1}
   d556e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5572:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5576:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d557a:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d557e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5582:	b002      	add	sp, #8
   d5584:	bd10      	pop	{r4, pc}
	...

000d5588 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5588:	4803      	ldr	r0, [pc, #12]	; (d5598 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d558a:	4a04      	ldr	r2, [pc, #16]	; (d559c <_GLOBAL__sub_I_RGB+0x14>)
   d558c:	4904      	ldr	r1, [pc, #16]	; (d55a0 <_GLOBAL__sub_I_RGB+0x18>)
   d558e:	2300      	movs	r3, #0
   d5590:	6083      	str	r3, [r0, #8]
   d5592:	f001 b857 	b.w	d6644 <__aeabi_atexit>
   d5596:	bf00      	nop
   d5598:	2003e3c0 	.word	0x2003e3c0
   d559c:	2003e1c0 	.word	0x2003e1c0
   d55a0:	000d555b 	.word	0x000d555b

000d55a4 <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d55a4:	4770      	bx	lr

000d55a6 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d55a6:	7d00      	ldrb	r0, [r0, #20]
   d55a8:	4770      	bx	lr
	...

000d55ac <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d55ac:	7d03      	ldrb	r3, [r0, #20]
   d55ae:	b11b      	cbz	r3, d55b8 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d55b0:	6983      	ldr	r3, [r0, #24]
   d55b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d55b6:	d102      	bne.n	d55be <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d55b8:	ed9f 0a05 	vldr	s0, [pc, #20]	; d55d0 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d55bc:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d55be:	ee07 3a90 	vmov	s15, r3
   d55c2:	ed9f 7a04 	vldr	s14, [pc, #16]	; d55d4 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d55c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d55ca:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d55ce:	4770      	bx	lr
   d55d0:	00000000 	.word	0x00000000
   d55d4:	42c80000 	.word	0x42c80000

000d55d8 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d55d8:	7d03      	ldrb	r3, [r0, #20]
   d55da:	b11b      	cbz	r3, d55e4 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d55dc:	6a03      	ldr	r3, [r0, #32]
   d55de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d55e2:	d102      	bne.n	d55ea <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d55e4:	ed9f 0a05 	vldr	s0, [pc, #20]	; d55fc <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d55e8:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d55ea:	ee07 3a90 	vmov	s15, r3
   d55ee:	ed9f 7a04 	vldr	s14, [pc, #16]	; d5600 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d55f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d55f6:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d55fa:	4770      	bx	lr
   d55fc:	00000000 	.word	0x00000000
   d5600:	42c80000 	.word	0x42c80000

000d5604 <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
   d5604:	b570      	push	{r4, r5, r6, lr}
   d5606:	460d      	mov	r5, r1
   d5608:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d560a:	220a      	movs	r2, #10
   d560c:	6881      	ldr	r1, [r0, #8]
   d560e:	4628      	mov	r0, r5
   d5610:	f7ff ff4c 	bl	d54ac <_ZN5Print5printEii>
    n += p.print(',');
   d5614:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d5616:	4604      	mov	r4, r0
    n += p.print(',');
   d5618:	4628      	mov	r0, r5
   d561a:	f7ff fee7 	bl	d53ec <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d561e:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d5620:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d5622:	68f1      	ldr	r1, [r6, #12]
   d5624:	4628      	mov	r0, r5
   d5626:	f7ff ff41 	bl	d54ac <_ZN5Print5printEii>
    return n;
}
   d562a:	4420      	add	r0, r4
   d562c:	bd70      	pop	{r4, r5, r6, pc}

000d562e <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d562e:	f1a0 0004 	sub.w	r0, r0, #4
   d5632:	f7ff bfe7 	b.w	d5604 <_ZNK14CellularSignal7printToER5Print>

000d5636 <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d5636:	b510      	push	{r4, lr}
   d5638:	2128      	movs	r1, #40	; 0x28
   d563a:	4604      	mov	r4, r0
   d563c:	f001 f807 	bl	d664e <_ZdlPvj>
   d5640:	4620      	mov	r0, r4
   d5642:	bd10      	pop	{r4, pc}

000d5644 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d5644:	7d03      	ldrb	r3, [r0, #20]
   d5646:	b17b      	cbz	r3, d5668 <_ZNK14CellularSignal10getQualityEv+0x24>
   d5648:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d564a:	2b00      	cmp	r3, #0
   d564c:	db0c      	blt.n	d5668 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d564e:	ee07 3a90 	vmov	s15, r3
   d5652:	eddf 6a07 	vldr	s13, [pc, #28]	; d5670 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d5656:	ed9f 0a07 	vldr	s0, [pc, #28]	; d5674 <_ZNK14CellularSignal10getQualityEv+0x30>
   d565a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d565e:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d5662:	ee27 0a80 	vmul.f32	s0, s15, s0
   d5666:	4770      	bx	lr
    }

    return -1.0f;
   d5668:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d566c:	4770      	bx	lr
   d566e:	bf00      	nop
   d5670:	477fff00 	.word	0x477fff00
   d5674:	42c80000 	.word	0x42c80000

000d5678 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d5678:	7d03      	ldrb	r3, [r0, #20]
   d567a:	b17b      	cbz	r3, d569c <_ZNK14CellularSignal11getStrengthEv+0x24>
   d567c:	69c3      	ldr	r3, [r0, #28]
   d567e:	2b00      	cmp	r3, #0
   d5680:	db0c      	blt.n	d569c <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d5682:	ee07 3a90 	vmov	s15, r3
   d5686:	eddf 6a07 	vldr	s13, [pc, #28]	; d56a4 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d568a:	ed9f 0a07 	vldr	s0, [pc, #28]	; d56a8 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d568e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d5692:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d5696:	ee27 0a80 	vmul.f32	s0, s15, s0
   d569a:	4770      	bx	lr
    }

    return -1.0f;
   d569c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d56a0:	4770      	bx	lr
   d56a2:	bf00      	nop
   d56a4:	477fff00 	.word	0x477fff00
   d56a8:	42c80000 	.word	0x42c80000

000d56ac <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d56ac:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d56ae:	460d      	mov	r5, r1
   d56b0:	f100 0410 	add.w	r4, r0, #16
   d56b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d56b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d56b8:	e895 0003 	ldmia.w	r5, {r0, r1}
   d56bc:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d56c0:	2001      	movs	r0, #1
   d56c2:	bd30      	pop	{r4, r5, pc}

000d56c4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d56c4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d56c6:	4b0c      	ldr	r3, [pc, #48]	; (d56f8 <serialEventRun+0x34>)
   d56c8:	b133      	cbz	r3, d56d8 <serialEventRun+0x14>
   d56ca:	f000 fc25 	bl	d5f18 <_Z16_fetch_usbserialv>
   d56ce:	6803      	ldr	r3, [r0, #0]
   d56d0:	691b      	ldr	r3, [r3, #16]
   d56d2:	4798      	blx	r3
   d56d4:	2800      	cmp	r0, #0
   d56d6:	dc09      	bgt.n	d56ec <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d56d8:	4b08      	ldr	r3, [pc, #32]	; (d56fc <serialEventRun+0x38>)
   d56da:	b163      	cbz	r3, d56f6 <serialEventRun+0x32>
   d56dc:	f000 fd24 	bl	d6128 <_Z22__fetch_global_Serial1v>
   d56e0:	6803      	ldr	r3, [r0, #0]
   d56e2:	691b      	ldr	r3, [r3, #16]
   d56e4:	4798      	blx	r3
   d56e6:	2800      	cmp	r0, #0
   d56e8:	dc03      	bgt.n	d56f2 <serialEventRun+0x2e>
   d56ea:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d56ec:	f3af 8000 	nop.w
   d56f0:	e7f2      	b.n	d56d8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d56f2:	f3af 8000 	nop.w
   d56f6:	bd08      	pop	{r3, pc}
	...

000d5700 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5700:	b508      	push	{r3, lr}
	serialEventRun();
   d5702:	f7ff ffdf 	bl	d56c4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5706:	f7ff f955 	bl	d49b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d570a:	4b01      	ldr	r3, [pc, #4]	; (d5710 <_post_loop+0x10>)
   d570c:	6018      	str	r0, [r3, #0]
   d570e:	bd08      	pop	{r3, pc}
   d5710:	2003e738 	.word	0x2003e738

000d5714 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5714:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5716:	2300      	movs	r3, #0
   d5718:	9300      	str	r3, [sp, #0]
   d571a:	461a      	mov	r2, r3
   d571c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5720:	f7ff fa62 	bl	d4be8 <system_ctrl_set_result>
}
   d5724:	b003      	add	sp, #12
   d5726:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d572c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d572c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d572e:	8843      	ldrh	r3, [r0, #2]
   d5730:	2b0a      	cmp	r3, #10
   d5732:	d008      	beq.n	d5746 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5734:	2b50      	cmp	r3, #80	; 0x50
   d5736:	d109      	bne.n	d574c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5738:	4b09      	ldr	r3, [pc, #36]	; (d5760 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d573a:	681b      	ldr	r3, [r3, #0]
   d573c:	b13b      	cbz	r3, d574e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d573e:	b003      	add	sp, #12
   d5740:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5744:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5746:	f7ff ffe5 	bl	d5714 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d574a:	e006      	b.n	d575a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d574c:	2300      	movs	r3, #0
   d574e:	9300      	str	r3, [sp, #0]
   d5750:	461a      	mov	r2, r3
   d5752:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5756:	f7ff fa47 	bl	d4be8 <system_ctrl_set_result>
        break;
    }
}
   d575a:	b003      	add	sp, #12
   d575c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5760:	2003e3d0 	.word	0x2003e3d0

000d5764 <module_user_init_hook>:

void module_user_init_hook()
{
   d5764:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5766:	f7ff f91d 	bl	d49a4 <HAL_RNG_GetRandomNumber>
   d576a:	4604      	mov	r4, r0
    srand(seed);
   d576c:	f002 f84c 	bl	d7808 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5770:	4b07      	ldr	r3, [pc, #28]	; (d5790 <module_user_init_hook+0x2c>)
   d5772:	b113      	cbz	r3, d577a <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5774:	4620      	mov	r0, r4
   d5776:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d577a:	2100      	movs	r1, #0
   d577c:	4804      	ldr	r0, [pc, #16]	; (d5790 <module_user_init_hook+0x2c>)
   d577e:	f7ff faad 	bl	d4cdc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5782:	2100      	movs	r1, #0
   d5784:	4803      	ldr	r0, [pc, #12]	; (d5794 <module_user_init_hook+0x30>)
}
   d5786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d578a:	f7ff ba23 	b.w	d4bd4 <system_ctrl_set_app_request_handler>
   d578e:	bf00      	nop
   d5790:	00000000 	.word	0x00000000
   d5794:	000d572d 	.word	0x000d572d

000d5798 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5798:	4770      	bx	lr

000d579a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d579a:	2000      	movs	r0, #0
   d579c:	4770      	bx	lr

000d579e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d579e:	b510      	push	{r4, lr}
   d57a0:	2110      	movs	r1, #16
   d57a2:	4604      	mov	r4, r0
   d57a4:	f000 ff53 	bl	d664e <_ZdlPvj>
   d57a8:	4620      	mov	r0, r4
   d57aa:	bd10      	pop	{r4, pc}

000d57ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d57ac:	b508      	push	{r3, lr}
      { delete this; }
   d57ae:	b108      	cbz	r0, d57b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d57b0:	f7ff fff5 	bl	d579e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d57b4:	bd08      	pop	{r3, pc}

000d57b6 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d57b6:	2200      	movs	r2, #0
   d57b8:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d57ba:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d57bc:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d57c0:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d57c2:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d57c6:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d57c8:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57ca:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d57cc:	680c      	ldr	r4, [r1, #0]
   d57ce:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d57d0:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d57d2:	bd10      	pop	{r4, pc}

000d57d4 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d57d4:	b510      	push	{r4, lr}
   d57d6:	4604      	mov	r4, r0
    free((void*)msg_);
   d57d8:	6800      	ldr	r0, [r0, #0]
   d57da:	f7ff fa8f 	bl	d4cfc <free>
}
   d57de:	4620      	mov	r0, r4
   d57e0:	bd10      	pop	{r4, pc}

000d57e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d57e2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d57e4:	68c4      	ldr	r4, [r0, #12]
   d57e6:	b1f4      	cbz	r4, d5826 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d57e8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d57ea:	2b02      	cmp	r3, #2
   d57ec:	d103      	bne.n	d57f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d57ee:	f104 000c 	add.w	r0, r4, #12
   d57f2:	f7ff ffef 	bl	d57d4 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d57f6:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d57f8:	b135      	cbz	r5, d5808 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d57fa:	4628      	mov	r0, r5
   d57fc:	f7ff fea4 	bl	d5548 <_ZNSt14_Function_baseD1Ev>
   d5800:	2110      	movs	r1, #16
   d5802:	4628      	mov	r0, r5
   d5804:	f000 ff23 	bl	d664e <_ZdlPvj>
   d5808:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d580a:	b135      	cbz	r5, d581a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d580c:	4628      	mov	r0, r5
   d580e:	f7ff fe9b 	bl	d5548 <_ZNSt14_Function_baseD1Ev>
   d5812:	2110      	movs	r1, #16
   d5814:	4628      	mov	r0, r5
   d5816:	f000 ff1a 	bl	d664e <_ZdlPvj>
   d581a:	4620      	mov	r0, r4
   d581c:	2114      	movs	r1, #20
   d581e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5822:	f000 bf14 	b.w	d664e <_ZdlPvj>
   d5826:	bd38      	pop	{r3, r4, r5, pc}

000d5828 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d5828:	b510      	push	{r4, lr}
   d582a:	b088      	sub	sp, #32
   d582c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d582e:	4668      	mov	r0, sp
   d5830:	f7ff fcb3 	bl	d519a <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d5834:	4669      	mov	r1, sp
   d5836:	a804      	add	r0, sp, #16
   d5838:	f7ff fcee 	bl	d5218 <_ZN6StringC1ERKS_>
   d583c:	a804      	add	r0, sp, #16
   d583e:	47a0      	blx	r4
   d5840:	4604      	mov	r4, r0
   d5842:	a804      	add	r0, sp, #16
   d5844:	f7ff fc62 	bl	d510c <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5848:	4668      	mov	r0, sp
   d584a:	f7ff fc5f 	bl	d510c <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d584e:	4620      	mov	r0, r4
   d5850:	b008      	add	sp, #32
   d5852:	bd10      	pop	{r4, pc}

000d5854 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d5854:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d5856:	2410      	movs	r4, #16
   d5858:	b085      	sub	sp, #20
   d585a:	4607      	mov	r7, r0
   d585c:	460e      	mov	r6, r1
   d585e:	4615      	mov	r5, r2
   d5860:	2100      	movs	r1, #0
   d5862:	4622      	mov	r2, r4
   d5864:	4668      	mov	r0, sp
   d5866:	f001 ffc6 	bl	d77f6 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d586a:	2200      	movs	r2, #0
   d586c:	4669      	mov	r1, sp
   d586e:	4610      	mov	r0, r2
         size = sizeof(*this);
   d5870:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d5874:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d5876:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d5878:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d587a:	f7ff fa17 	bl	d4cac <spark_function>
}
   d587e:	b005      	add	sp, #20
   d5880:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5882 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d5882:	b513      	push	{r0, r1, r4, lr}
   d5884:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5886:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d588a:	2300      	movs	r3, #0
   d588c:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d588e:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5890:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5892:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5894:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5896:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5898:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d589a:	f7fe fd29 	bl	d42f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d589e:	4620      	mov	r0, r4
   d58a0:	b002      	add	sp, #8
   d58a2:	bd10      	pop	{r4, pc}

000d58a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d58a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d58a6:	460c      	mov	r4, r1
   d58a8:	ad02      	add	r5, sp, #8
   d58aa:	f854 3b04 	ldr.w	r3, [r4], #4
   d58ae:	f845 3d08 	str.w	r3, [r5, #-8]!
   d58b2:	4606      	mov	r6, r0
   d58b4:	460f      	mov	r7, r1
   d58b6:	a801      	add	r0, sp, #4
   d58b8:	4621      	mov	r1, r4
   d58ba:	f7ff fd5d 	bl	d5378 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d58be:	4629      	mov	r1, r5
   d58c0:	4630      	mov	r0, r6
   d58c2:	f7ff ffde 	bl	d5882 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d58c6:	a801      	add	r0, sp, #4
   d58c8:	f7fe fd12 	bl	d42f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d58cc:	4620      	mov	r0, r4
   d58ce:	f7fe fd0f 	bl	d42f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d58d2:	4638      	mov	r0, r7
   d58d4:	2108      	movs	r1, #8
   d58d6:	f000 feba 	bl	d664e <_ZdlPvj>
        return p;
    }
   d58da:	4630      	mov	r0, r6
   d58dc:	b003      	add	sp, #12
   d58de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d58e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d58e0:	b538      	push	{r3, r4, r5, lr}
   d58e2:	2300      	movs	r3, #0
   d58e4:	4604      	mov	r4, r0
   d58e6:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d58e8:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d58ea:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d58ec:	f7fe fbd5 	bl	d409a <_Znwj>
   d58f0:	b128      	cbz	r0, d58fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d58f2:	2301      	movs	r3, #1
   d58f4:	6043      	str	r3, [r0, #4]
   d58f6:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d58f8:	4b02      	ldr	r3, [pc, #8]	; (d5904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d58fa:	6003      	str	r3, [r0, #0]
   d58fc:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d58fe:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d5900:	4620      	mov	r0, r4
   d5902:	bd38      	pop	{r3, r4, r5, pc}
   d5904:	000d7c64 	.word	0x000d7c64

000d5908 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5908:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d590a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d590c:	b90a      	cbnz	r2, d5912 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d590e:	f000 fea0 	bl	d6652 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5912:	68c3      	ldr	r3, [r0, #12]
    }
   d5914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5918:	4718      	bx	r3

000d591a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d591a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d591c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d591e:	f100 0110 	add.w	r1, r0, #16
   d5922:	f7ff fff1 	bl	d5908 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5926:	bd08      	pop	{r3, pc}

000d5928 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5928:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d592a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d592c:	b90a      	cbnz	r2, d5932 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d592e:	f000 fe90 	bl	d6652 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5932:	68c3      	ldr	r3, [r0, #12]
    }
   d5934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5938:	4718      	bx	r3

000d593a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d593a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d593c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d593e:	f100 0110 	add.w	r1, r0, #16
   d5942:	f7ff fff1 	bl	d5928 <_ZNKSt8functionIFvRKbEEclES1_>
   d5946:	bd08      	pop	{r3, pc}

000d5948 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5948:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d594a:	2300      	movs	r3, #0
   d594c:	6083      	str	r3, [r0, #8]
   d594e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5950:	4604      	mov	r4, r0
   d5952:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5954:	b12b      	cbz	r3, d5962 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5956:	2202      	movs	r2, #2
   d5958:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d595a:	68eb      	ldr	r3, [r5, #12]
   d595c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d595e:	68ab      	ldr	r3, [r5, #8]
   d5960:	60a3      	str	r3, [r4, #8]
	}
    }
   d5962:	4620      	mov	r0, r4
   d5964:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5968 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5968:	b5f0      	push	{r4, r5, r6, r7, lr}
   d596a:	b089      	sub	sp, #36	; 0x24
   d596c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d596e:	4668      	mov	r0, sp
   d5970:	f7ff ff21 	bl	d57b6 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5974:	2300      	movs	r3, #0
   d5976:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d597a:	f04f 0202 	mov.w	r2, #2
   d597e:	e8d4 3f4f 	ldrexb	r3, [r4]
   d5982:	2b00      	cmp	r3, #0
   d5984:	d103      	bne.n	d598e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d5986:	e8c4 2f41 	strexb	r1, r2, [r4]
   d598a:	2900      	cmp	r1, #0
   d598c:	d1f7      	bne.n	d597e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d598e:	d002      	beq.n	d5996 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d5990:	f88d 3008 	strb.w	r3, [sp, #8]
   d5994:	e063      	b.n	d5a5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5996:	f114 050c 	adds.w	r5, r4, #12
   d599a:	d003      	beq.n	d59a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d599c:	4669      	mov	r1, sp
   d599e:	4628      	mov	r0, r5
   d59a0:	f7ff ff09 	bl	d57b6 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d59a4:	f3bf 8f5f 	dmb	sy
   d59a8:	2301      	movs	r3, #1
   d59aa:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d59ac:	2000      	movs	r0, #0
   d59ae:	f104 0308 	add.w	r3, r4, #8
   d59b2:	f3bf 8f5f 	dmb	sy
   d59b6:	e853 6f00 	ldrex	r6, [r3]
   d59ba:	e843 0200 	strex	r2, r0, [r3]
   d59be:	2a00      	cmp	r2, #0
   d59c0:	d1f9      	bne.n	d59b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d59c2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d59c6:	2e00      	cmp	r6, #0
   d59c8:	d049      	beq.n	d5a5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d59ca:	f7ff f8f3 	bl	d4bb4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d59ce:	b120      	cbz	r0, d59da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d59d0:	4629      	mov	r1, r5
   d59d2:	4630      	mov	r0, r6
   d59d4:	f7ff ff98 	bl	d5908 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d59d8:	e03a      	b.n	d5a50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d59da:	4631      	mov	r1, r6
   d59dc:	a802      	add	r0, sp, #8
   d59de:	f7ff ffb3 	bl	d5948 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d59e2:	68e0      	ldr	r0, [r4, #12]
   d59e4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d59e8:	b108      	cbz	r0, d59ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d59ea:	f001 ff3d 	bl	d7868 <strdup>
   d59ee:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d59f0:	2010      	movs	r0, #16
   d59f2:	f8ad 501c 	strh.w	r5, [sp, #28]
   d59f6:	f7fe fb50 	bl	d409a <_Znwj>
   d59fa:	4605      	mov	r5, r0
   d59fc:	b1e8      	cbz	r0, d5a3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d59fe:	2700      	movs	r7, #0
   d5a00:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5a02:	2018      	movs	r0, #24
   d5a04:	f7fe fb49 	bl	d409a <_Znwj>
   d5a08:	4604      	mov	r4, r0
   d5a0a:	b188      	cbz	r0, d5a30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5a0c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5a0e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5a10:	a802      	add	r0, sp, #8
   d5a12:	f7ff fda8 	bl	d5566 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a16:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5a18:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a1a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a1c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5a1e:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5a20:	a906      	add	r1, sp, #24
   d5a22:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a24:	60e3      	str	r3, [r4, #12]
   d5a26:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5a2a:	9205      	str	r2, [sp, #20]
   d5a2c:	f7ff fec3 	bl	d57b6 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5a30:	4b0d      	ldr	r3, [pc, #52]	; (d5a68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d5a32:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5a34:	4b0d      	ldr	r3, [pc, #52]	; (d5a6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5a36:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5a38:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5a3a:	a806      	add	r0, sp, #24
   d5a3c:	f7ff feca 	bl	d57d4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a40:	a802      	add	r0, sp, #8
   d5a42:	f7ff fd81 	bl	d5548 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5a46:	2200      	movs	r2, #0
   d5a48:	4629      	mov	r1, r5
   d5a4a:	4809      	ldr	r0, [pc, #36]	; (d5a70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5a4c:	f7ff f8ba 	bl	d4bc4 <application_thread_invoke>
   d5a50:	4630      	mov	r0, r6
   d5a52:	f7ff fd79 	bl	d5548 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5a56:	2110      	movs	r1, #16
   d5a58:	4630      	mov	r0, r6
   d5a5a:	f000 fdf8 	bl	d664e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d5a5e:	4668      	mov	r0, sp
   d5a60:	f7ff feb8 	bl	d57d4 <_ZN8particle5ErrorD1Ev>
    }
   d5a64:	b009      	add	sp, #36	; 0x24
   d5a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5a68:	000d591b 	.word	0x000d591b
   d5a6c:	000d5b91 	.word	0x000d5b91
   d5a70:	000d6175 	.word	0x000d6175

000d5a74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5a78:	b08b      	sub	sp, #44	; 0x2c
   d5a7a:	4606      	mov	r6, r0
   d5a7c:	460f      	mov	r7, r1
   d5a7e:	4690      	mov	r8, r2
   d5a80:	4699      	mov	r9, r3
   d5a82:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5a86:	f7ff f919 	bl	d4cbc <spark_cloud_flag_connected>
   d5a8a:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d5a8c:	4683      	mov	fp, r0
   d5a8e:	bb30      	cbnz	r0, d5ade <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5a90:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5a94:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5a96:	a905      	add	r1, sp, #20
   d5a98:	4628      	mov	r0, r5
   d5a9a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5a9e:	f7ff fe8a 	bl	d57b6 <_ZN8particle5ErrorC1EOS0_>
   d5aa2:	2014      	movs	r0, #20
   d5aa4:	f7fe faf9 	bl	d409a <_Znwj>
   d5aa8:	4604      	mov	r4, r0
   d5aaa:	b158      	cbz	r0, d5ac4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5aac:	2302      	movs	r3, #2
   d5aae:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5ab0:	2301      	movs	r3, #1
   d5ab2:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5ab4:	f8c0 b004 	str.w	fp, [r0, #4]
   d5ab8:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5abc:	4629      	mov	r1, r5
   d5abe:	300c      	adds	r0, #12
   d5ac0:	f7ff fe79 	bl	d57b6 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5ac4:	4630      	mov	r0, r6
   d5ac6:	4621      	mov	r1, r4
   d5ac8:	f840 4b04 	str.w	r4, [r0], #4
   d5acc:	f7ff ff08 	bl	d58e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5ad0:	4628      	mov	r0, r5
   d5ad2:	f7ff fe7f 	bl	d57d4 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5ad6:	a805      	add	r0, sp, #20
   d5ad8:	f7ff fe7c 	bl	d57d4 <_ZN8particle5ErrorD1Ev>
   d5adc:	e052      	b.n	d5b84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5ade:	2400      	movs	r4, #0
   d5ae0:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5ae2:	2014      	movs	r0, #20
   d5ae4:	606c      	str	r4, [r5, #4]
   d5ae6:	60ac      	str	r4, [r5, #8]
   d5ae8:	9307      	str	r3, [sp, #28]
   d5aea:	f7fe fad6 	bl	d409a <_Znwj>
   d5aee:	4601      	mov	r1, r0
   d5af0:	b118      	cbz	r0, d5afa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d5af2:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5af4:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5af6:	6044      	str	r4, [r0, #4]
   d5af8:	6084      	str	r4, [r0, #8]
   d5afa:	a804      	add	r0, sp, #16
   d5afc:	9103      	str	r1, [sp, #12]
   d5afe:	f7ff feef 	bl	d58e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5b02:	4b22      	ldr	r3, [pc, #136]	; (d5b8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5b04:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5b06:	2008      	movs	r0, #8
   d5b08:	f7fe fac7 	bl	d409a <_Znwj>
   d5b0c:	4604      	mov	r4, r0
   d5b0e:	b128      	cbz	r0, d5b1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5b10:	9b03      	ldr	r3, [sp, #12]
   d5b12:	f840 3b04 	str.w	r3, [r0], #4
   d5b16:	a904      	add	r1, sp, #16
   d5b18:	f7ff fc2e 	bl	d5378 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5b1c:	9500      	str	r5, [sp, #0]
   d5b1e:	fa5f f38a 	uxtb.w	r3, sl
   d5b22:	464a      	mov	r2, r9
   d5b24:	4641      	mov	r1, r8
   d5b26:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5b28:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5b2a:	f7ff f8cf 	bl	d4ccc <spark_send_event>
   d5b2e:	b920      	cbnz	r0, d5b3a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5b30:	9b03      	ldr	r3, [sp, #12]
   d5b32:	785b      	ldrb	r3, [r3, #1]
   d5b34:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5b38:	b183      	cbz	r3, d5b5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5b3a:	9b03      	ldr	r3, [sp, #12]
   d5b3c:	9305      	str	r3, [sp, #20]
   d5b3e:	a904      	add	r1, sp, #16
   d5b40:	a806      	add	r0, sp, #24
   d5b42:	f7ff fc19 	bl	d5378 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5b46:	a905      	add	r1, sp, #20
   d5b48:	4630      	mov	r0, r6
   d5b4a:	f7ff fe9a 	bl	d5882 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5b4e:	a806      	add	r0, sp, #24
   d5b50:	f7fe fbce 	bl	d42f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b54:	a804      	add	r0, sp, #16
   d5b56:	f7fe fbcb 	bl	d42f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b5a:	e013      	b.n	d5b84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5b5c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5b60:	a905      	add	r1, sp, #20
   d5b62:	a803      	add	r0, sp, #12
   d5b64:	9205      	str	r2, [sp, #20]
   d5b66:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5b6a:	f7ff fefd 	bl	d5968 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5b6e:	a805      	add	r0, sp, #20
   d5b70:	f7ff fe30 	bl	d57d4 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5b74:	a805      	add	r0, sp, #20
   d5b76:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5b78:	f7ff fe94 	bl	d58a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d5b7c:	a806      	add	r0, sp, #24
   d5b7e:	f7fe fbb7 	bl	d42f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b82:	e7da      	b.n	d5b3a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d5b84:	4630      	mov	r0, r6
   d5b86:	b00b      	add	sp, #44	; 0x2c
   d5b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5b8c:	000d5d01 	.word	0x000d5d01

000d5b90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5b90:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b94:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5b96:	d006      	beq.n	d5ba6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5b98:	2a03      	cmp	r2, #3
   d5b9a:	d017      	beq.n	d5bcc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5b9c:	2a01      	cmp	r2, #1
   d5b9e:	d122      	bne.n	d5be6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5ba0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5ba2:	6003      	str	r3, [r0, #0]
	      break;
   d5ba4:	e01f      	b.n	d5be6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5ba6:	2018      	movs	r0, #24
   d5ba8:	680e      	ldr	r6, [r1, #0]
   d5baa:	f7fe fa76 	bl	d409a <_Znwj>
   d5bae:	4605      	mov	r5, r0
   d5bb0:	b150      	cbz	r0, d5bc8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5bb2:	4631      	mov	r1, r6
   d5bb4:	f7ff fec8 	bl	d5948 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5bb8:	6930      	ldr	r0, [r6, #16]
   d5bba:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5bbe:	b108      	cbz	r0, d5bc4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5bc0:	f001 fe52 	bl	d7868 <strdup>
   d5bc4:	6128      	str	r0, [r5, #16]
   d5bc6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5bc8:	6025      	str	r5, [r4, #0]
   d5bca:	e00c      	b.n	d5be6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5bcc:	6804      	ldr	r4, [r0, #0]
   d5bce:	b154      	cbz	r4, d5be6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5bd0:	f104 0010 	add.w	r0, r4, #16
   d5bd4:	f7ff fdfe 	bl	d57d4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5bd8:	4620      	mov	r0, r4
   d5bda:	f7ff fcb5 	bl	d5548 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5bde:	2118      	movs	r1, #24
   d5be0:	4620      	mov	r0, r4
   d5be2:	f000 fd34 	bl	d664e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5be6:	2000      	movs	r0, #0
   d5be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5bea <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5bea:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5bec:	2300      	movs	r3, #0
   d5bee:	6083      	str	r3, [r0, #8]
   d5bf0:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5bf2:	4604      	mov	r4, r0
   d5bf4:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5bf6:	b12b      	cbz	r3, d5c04 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5bf8:	2202      	movs	r2, #2
   d5bfa:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5bfc:	68eb      	ldr	r3, [r5, #12]
   d5bfe:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5c00:	68ab      	ldr	r3, [r5, #8]
   d5c02:	60a3      	str	r3, [r4, #8]
	}
    }
   d5c04:	4620      	mov	r0, r4
   d5c06:	bd38      	pop	{r3, r4, r5, pc}

000d5c08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5c08:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5c0a:	b570      	push	{r4, r5, r6, lr}
   d5c0c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5c0e:	d006      	beq.n	d5c1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5c10:	2a03      	cmp	r2, #3
   d5c12:	d011      	beq.n	d5c38 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5c14:	2a01      	cmp	r2, #1
   d5c16:	d118      	bne.n	d5c4a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5c18:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5c1a:	6003      	str	r3, [r0, #0]
	      break;
   d5c1c:	e015      	b.n	d5c4a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5c1e:	2014      	movs	r0, #20
   d5c20:	680e      	ldr	r6, [r1, #0]
   d5c22:	f7fe fa3a 	bl	d409a <_Znwj>
   d5c26:	4605      	mov	r5, r0
   d5c28:	b120      	cbz	r0, d5c34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5c2a:	4631      	mov	r1, r6
   d5c2c:	f7ff ffdd 	bl	d5bea <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5c30:	7c33      	ldrb	r3, [r6, #16]
   d5c32:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5c34:	6025      	str	r5, [r4, #0]
   d5c36:	e008      	b.n	d5c4a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5c38:	6804      	ldr	r4, [r0, #0]
   d5c3a:	b134      	cbz	r4, d5c4a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5c3c:	4620      	mov	r0, r4
   d5c3e:	f7ff fc83 	bl	d5548 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5c42:	2114      	movs	r1, #20
   d5c44:	4620      	mov	r0, r4
   d5c46:	f000 fd02 	bl	d664e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5c4a:	2000      	movs	r0, #0
   d5c4c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5c50 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5c50:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5c52:	2300      	movs	r3, #0
   d5c54:	b087      	sub	sp, #28
   d5c56:	460c      	mov	r4, r1
   d5c58:	f3bf 8f5f 	dmb	sy
   d5c5c:	e850 6f00 	ldrex	r6, [r0]
   d5c60:	e840 3200 	strex	r2, r3, [r0]
   d5c64:	2a00      	cmp	r2, #0
   d5c66:	d1f9      	bne.n	d5c5c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5c68:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5c6c:	2e00      	cmp	r6, #0
   d5c6e:	d03f      	beq.n	d5cf0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5c70:	4618      	mov	r0, r3
   d5c72:	f7fe ff9f 	bl	d4bb4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5c76:	4607      	mov	r7, r0
   d5c78:	b120      	cbz	r0, d5c84 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5c7a:	4621      	mov	r1, r4
   d5c7c:	4630      	mov	r0, r6
   d5c7e:	f7ff fe53 	bl	d5928 <_ZNKSt8functionIFvRKbEEclES1_>
   d5c82:	e02e      	b.n	d5ce2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5c84:	4631      	mov	r1, r6
   d5c86:	a801      	add	r0, sp, #4
   d5c88:	f7ff ffaf 	bl	d5bea <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5c8c:	7823      	ldrb	r3, [r4, #0]
   d5c8e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5c92:	2010      	movs	r0, #16
   d5c94:	f7fe fa01 	bl	d409a <_Znwj>
   d5c98:	4605      	mov	r5, r0
   d5c9a:	b1d0      	cbz	r0, d5cd2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5c9c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5c9e:	2014      	movs	r0, #20
   d5ca0:	f7fe f9fb 	bl	d409a <_Znwj>
   d5ca4:	4604      	mov	r4, r0
   d5ca6:	b178      	cbz	r0, d5cc8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5ca8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5caa:	4601      	mov	r1, r0
   d5cac:	a801      	add	r0, sp, #4
   d5cae:	f7ff fc5a 	bl	d5566 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5cb2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5cb4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5cb6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5cb8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5cba:	9203      	str	r2, [sp, #12]
   d5cbc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5cbe:	60e3      	str	r3, [r4, #12]
   d5cc0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5cc4:	9204      	str	r2, [sp, #16]
   d5cc6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5cc8:	4b0a      	ldr	r3, [pc, #40]	; (d5cf4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5cca:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5ccc:	4b0a      	ldr	r3, [pc, #40]	; (d5cf8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5cce:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5cd0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5cd2:	a801      	add	r0, sp, #4
   d5cd4:	f7ff fc38 	bl	d5548 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5cd8:	2200      	movs	r2, #0
   d5cda:	4629      	mov	r1, r5
   d5cdc:	4807      	ldr	r0, [pc, #28]	; (d5cfc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5cde:	f7fe ff71 	bl	d4bc4 <application_thread_invoke>
   d5ce2:	4630      	mov	r0, r6
   d5ce4:	f7ff fc30 	bl	d5548 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5ce8:	2110      	movs	r1, #16
   d5cea:	4630      	mov	r0, r6
   d5cec:	f000 fcaf 	bl	d664e <_ZdlPvj>
        }
    }
   d5cf0:	b007      	add	sp, #28
   d5cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5cf4:	000d593b 	.word	0x000d593b
   d5cf8:	000d5c09 	.word	0x000d5c09
   d5cfc:	000d6175 	.word	0x000d6175

000d5d00 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5d00:	b530      	push	{r4, r5, lr}
   d5d02:	b085      	sub	sp, #20
   d5d04:	4604      	mov	r4, r0
   d5d06:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5d08:	4668      	mov	r0, sp
   d5d0a:	4611      	mov	r1, r2
   d5d0c:	f7ff fdca 	bl	d58a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5d10:	b17c      	cbz	r4, d5d32 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5d12:	b224      	sxth	r4, r4
   d5d14:	4628      	mov	r0, r5
   d5d16:	b10d      	cbz	r5, d5d1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5d18:	f001 fda6 	bl	d7868 <strdup>
   d5d1c:	9002      	str	r0, [sp, #8]
   d5d1e:	a902      	add	r1, sp, #8
   d5d20:	4668      	mov	r0, sp
   d5d22:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5d26:	f7ff fe1f 	bl	d5968 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5d2a:	a802      	add	r0, sp, #8
   d5d2c:	f7ff fd52 	bl	d57d4 <_ZN8particle5ErrorD1Ev>
   d5d30:	e01d      	b.n	d5d6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5d32:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5d34:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5d38:	f04f 0201 	mov.w	r2, #1
   d5d3c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5d40:	42a3      	cmp	r3, r4
   d5d42:	d103      	bne.n	d5d4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5d44:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5d48:	2900      	cmp	r1, #0
   d5d4a:	d1f7      	bne.n	d5d3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5d4c:	d002      	beq.n	d5d54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5d4e:	f88d 3008 	strb.w	r3, [sp, #8]
   d5d52:	e00c      	b.n	d5d6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5d54:	f110 010c 	adds.w	r1, r0, #12
   d5d58:	f04f 0301 	mov.w	r3, #1
   d5d5c:	bf18      	it	ne
   d5d5e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5d60:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5d64:	3004      	adds	r0, #4
   d5d66:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5d6a:	f7ff ff71 	bl	d5c50 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5d6e:	a801      	add	r0, sp, #4
   d5d70:	f7fe fabe 	bl	d42f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5d74:	b005      	add	sp, #20
   d5d76:	bd30      	pop	{r4, r5, pc}

000d5d78 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5d78:	4770      	bx	lr

000d5d7a <_ZN9IPAddressD0Ev>:
   d5d7a:	b510      	push	{r4, lr}
   d5d7c:	2118      	movs	r1, #24
   d5d7e:	4604      	mov	r4, r0
   d5d80:	f000 fc65 	bl	d664e <_ZdlPvj>
   d5d84:	4620      	mov	r0, r4
   d5d86:	bd10      	pop	{r4, pc}

000d5d88 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5d88:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5d8a:	7d03      	ldrb	r3, [r0, #20]
   d5d8c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5d8e:	b08d      	sub	sp, #52	; 0x34
   d5d90:	460e      	mov	r6, r1
   d5d92:	f100 0704 	add.w	r7, r0, #4
   d5d96:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5d9a:	d002      	beq.n	d5da2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5d9c:	f100 0508 	add.w	r5, r0, #8
   d5da0:	e018      	b.n	d5dd4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5da2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5da4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5da6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5daa:	232f      	movs	r3, #47	; 0x2f
   d5dac:	462a      	mov	r2, r5
   d5dae:	200a      	movs	r0, #10
   d5db0:	f7fe fe40 	bl	d4a34 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5db4:	4628      	mov	r0, r5
   d5db6:	f001 fd72 	bl	d789e <strlen>
   d5dba:	6833      	ldr	r3, [r6, #0]
   d5dbc:	4602      	mov	r2, r0
   d5dbe:	68db      	ldr	r3, [r3, #12]
   d5dc0:	4629      	mov	r1, r5
   d5dc2:	4630      	mov	r0, r6
   d5dc4:	4798      	blx	r3
   d5dc6:	e00f      	b.n	d5de8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5dc8:	b124      	cbz	r4, d5dd4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5dca:	212e      	movs	r1, #46	; 0x2e
   d5dcc:	4630      	mov	r0, r6
   d5dce:	f7ff fb0d 	bl	d53ec <_ZN5Print5printEc>
   d5dd2:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5dd4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5dd8:	220a      	movs	r2, #10
   d5dda:	4630      	mov	r0, r6
   d5ddc:	f7ff fb42 	bl	d5464 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5de0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5de2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5de4:	d1f0      	bne.n	d5dc8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5de6:	4620      	mov	r0, r4
    }
    return n;
}
   d5de8:	b00d      	add	sp, #52	; 0x34
   d5dea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5dec <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5dec:	b510      	push	{r4, lr}
   d5dee:	4b05      	ldr	r3, [pc, #20]	; (d5e04 <_ZN9IPAddressC1Ev+0x18>)
   d5df0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5df2:	2211      	movs	r2, #17
   d5df4:	f840 3b04 	str.w	r3, [r0], #4
   d5df8:	2100      	movs	r1, #0
   d5dfa:	f001 fcfc 	bl	d77f6 <memset>
{
    clear();
}
   d5dfe:	4620      	mov	r0, r4
   d5e00:	bd10      	pop	{r4, pc}
   d5e02:	bf00      	nop
   d5e04:	000d7c80 	.word	0x000d7c80

000d5e08 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5e08:	4603      	mov	r3, r0
   d5e0a:	4a07      	ldr	r2, [pc, #28]	; (d5e28 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5e0c:	b510      	push	{r4, lr}
   d5e0e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5e12:	f101 0210 	add.w	r2, r1, #16
   d5e16:	f851 4b04 	ldr.w	r4, [r1], #4
   d5e1a:	f843 4b04 	str.w	r4, [r3], #4
   d5e1e:	4291      	cmp	r1, r2
   d5e20:	d1f9      	bne.n	d5e16 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5e22:	780a      	ldrb	r2, [r1, #0]
   d5e24:	701a      	strb	r2, [r3, #0]
}
   d5e26:	bd10      	pop	{r4, pc}
   d5e28:	000d7c80 	.word	0x000d7c80

000d5e2c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5e2c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5e2e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5e32:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5e36:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5e3a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5e3e:	2304      	movs	r3, #4
   d5e40:	6041      	str	r1, [r0, #4]
   d5e42:	7503      	strb	r3, [r0, #20]
   d5e44:	bd10      	pop	{r4, pc}

000d5e46 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5e46:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5e48:	780d      	ldrb	r5, [r1, #0]
   d5e4a:	788b      	ldrb	r3, [r1, #2]
   d5e4c:	784a      	ldrb	r2, [r1, #1]
   d5e4e:	78c9      	ldrb	r1, [r1, #3]
   d5e50:	9100      	str	r1, [sp, #0]
   d5e52:	4629      	mov	r1, r5
   d5e54:	f7ff ffea 	bl	d5e2c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5e58:	b003      	add	sp, #12
   d5e5a:	bd30      	pop	{r4, r5, pc}

000d5e5c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5e5c:	7441      	strb	r1, [r0, #17]
   d5e5e:	4770      	bx	lr

000d5e60 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5e60:	4770      	bx	lr

000d5e62 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5e62:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5e64:	2100      	movs	r1, #0
   d5e66:	7c00      	ldrb	r0, [r0, #16]
   d5e68:	f7fe fe84 	bl	d4b74 <HAL_USB_USART_Receive_Data>
}
   d5e6c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5e70:	bf28      	it	cs
   d5e72:	f04f 30ff 	movcs.w	r0, #4294967295
   d5e76:	bd08      	pop	{r3, pc}

000d5e78 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5e78:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5e7a:	2101      	movs	r1, #1
   d5e7c:	7c00      	ldrb	r0, [r0, #16]
   d5e7e:	f7fe fe79 	bl	d4b74 <HAL_USB_USART_Receive_Data>
}
   d5e82:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5e86:	bf28      	it	cs
   d5e88:	f04f 30ff 	movcs.w	r0, #4294967295
   d5e8c:	bd08      	pop	{r3, pc}

000d5e8e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5e8e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5e90:	7c00      	ldrb	r0, [r0, #16]
   d5e92:	f7fe fe67 	bl	d4b64 <HAL_USB_USART_Available_Data_For_Write>
}
   d5e96:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5e9a:	bd08      	pop	{r3, pc}

000d5e9c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5e9c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5e9e:	7c00      	ldrb	r0, [r0, #16]
   d5ea0:	f7fe fe58 	bl	d4b54 <HAL_USB_USART_Available_Data>
}
   d5ea4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ea8:	bd08      	pop	{r3, pc}

000d5eaa <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5eaa:	7c00      	ldrb	r0, [r0, #16]
   d5eac:	f7fe be72 	b.w	d4b94 <HAL_USB_USART_Flush_Data>

000d5eb0 <_ZN9USBSerialD0Ev>:
   d5eb0:	b510      	push	{r4, lr}
   d5eb2:	2114      	movs	r1, #20
   d5eb4:	4604      	mov	r4, r0
   d5eb6:	f000 fbca 	bl	d664e <_ZdlPvj>
   d5eba:	4620      	mov	r0, r4
   d5ebc:	bd10      	pop	{r4, pc}

000d5ebe <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5ebe:	b538      	push	{r3, r4, r5, lr}
   d5ec0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5ec2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5ec4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5ec6:	f7fe fe4d 	bl	d4b64 <HAL_USB_USART_Available_Data_For_Write>
   d5eca:	2800      	cmp	r0, #0
   d5ecc:	dc01      	bgt.n	d5ed2 <_ZN9USBSerial5writeEh+0x14>
   d5ece:	7c60      	ldrb	r0, [r4, #17]
   d5ed0:	b128      	cbz	r0, d5ede <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5ed2:	4629      	mov	r1, r5
   d5ed4:	7c20      	ldrb	r0, [r4, #16]
   d5ed6:	f7fe fe55 	bl	d4b84 <HAL_USB_USART_Send_Data>
   d5eda:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5ede:	bd38      	pop	{r3, r4, r5, pc}

000d5ee0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5ee0:	b510      	push	{r4, lr}
   d5ee2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5ee4:	2300      	movs	r3, #0
   d5ee6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5ee8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5eec:	60a3      	str	r3, [r4, #8]
   d5eee:	4b05      	ldr	r3, [pc, #20]	; (d5f04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5ef0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5ef2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5ef4:	4608      	mov	r0, r1
{
  _serial = serial;
   d5ef6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5ef8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5efa:	4611      	mov	r1, r2
   d5efc:	f7fe fe22 	bl	d4b44 <HAL_USB_USART_Init>
}
   d5f00:	4620      	mov	r0, r4
   d5f02:	bd10      	pop	{r4, pc}
   d5f04:	000d7c94 	.word	0x000d7c94

000d5f08 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5f08:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5f0a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5f0c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5f0e:	2100      	movs	r1, #0
   d5f10:	f001 fc71 	bl	d77f6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5f14:	4620      	mov	r0, r4
   d5f16:	bd10      	pop	{r4, pc}

000d5f18 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5f18:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5f1a:	4d0e      	ldr	r5, [pc, #56]	; (d5f54 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5f1c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5f1e:	a801      	add	r0, sp, #4
   d5f20:	f7ff fff2 	bl	d5f08 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5f24:	6829      	ldr	r1, [r5, #0]
   d5f26:	f011 0401 	ands.w	r4, r1, #1
   d5f2a:	d110      	bne.n	d5f4e <_Z16_fetch_usbserialv+0x36>
   d5f2c:	4628      	mov	r0, r5
   d5f2e:	f7fe f8ba 	bl	d40a6 <__cxa_guard_acquire>
   d5f32:	b160      	cbz	r0, d5f4e <_Z16_fetch_usbserialv+0x36>
   d5f34:	aa01      	add	r2, sp, #4
   d5f36:	4621      	mov	r1, r4
   d5f38:	4807      	ldr	r0, [pc, #28]	; (d5f58 <_Z16_fetch_usbserialv+0x40>)
   d5f3a:	f7ff ffd1 	bl	d5ee0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5f3e:	4628      	mov	r0, r5
   d5f40:	f7fe f8b6 	bl	d40b0 <__cxa_guard_release>
   d5f44:	4a05      	ldr	r2, [pc, #20]	; (d5f5c <_Z16_fetch_usbserialv+0x44>)
   d5f46:	4906      	ldr	r1, [pc, #24]	; (d5f60 <_Z16_fetch_usbserialv+0x48>)
   d5f48:	4803      	ldr	r0, [pc, #12]	; (d5f58 <_Z16_fetch_usbserialv+0x40>)
   d5f4a:	f000 fb7b 	bl	d6644 <__aeabi_atexit>
	return _usbserial;
}
   d5f4e:	4802      	ldr	r0, [pc, #8]	; (d5f58 <_Z16_fetch_usbserialv+0x40>)
   d5f50:	b007      	add	sp, #28
   d5f52:	bd30      	pop	{r4, r5, pc}
   d5f54:	2003e3d4 	.word	0x2003e3d4
   d5f58:	2003e3d8 	.word	0x2003e3d8
   d5f5c:	2003e1c0 	.word	0x2003e1c0
   d5f60:	000d5e61 	.word	0x000d5e61

000d5f64 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5f64:	2200      	movs	r2, #0
   d5f66:	4611      	mov	r1, r2
   d5f68:	6840      	ldr	r0, [r0, #4]
   d5f6a:	f7fe be5f 	b.w	d4c2c <network_ready>

000d5f6e <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5f6e:	2200      	movs	r2, #0
   d5f70:	4611      	mov	r1, r2
   d5f72:	6840      	ldr	r0, [r0, #4]
   d5f74:	f7fe be7a 	b.w	d4c6c <network_listening>

000d5f78 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5f78:	2200      	movs	r2, #0
   d5f7a:	4611      	mov	r1, r2
   d5f7c:	6840      	ldr	r0, [r0, #4]
   d5f7e:	f7fe be85 	b.w	d4c8c <network_get_listen_timeout>

000d5f82 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5f82:	2200      	movs	r2, #0
   d5f84:	6840      	ldr	r0, [r0, #4]
   d5f86:	f7fe be79 	b.w	d4c7c <network_set_listen_timeout>

000d5f8a <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5f8a:	2200      	movs	r2, #0
   d5f8c:	f081 0101 	eor.w	r1, r1, #1
   d5f90:	6840      	ldr	r0, [r0, #4]
   d5f92:	f7fe be63 	b.w	d4c5c <network_listen>

000d5f96 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5f96:	2300      	movs	r3, #0
   d5f98:	461a      	mov	r2, r3
   d5f9a:	4619      	mov	r1, r3
   d5f9c:	6840      	ldr	r0, [r0, #4]
   d5f9e:	f7fe be55 	b.w	d4c4c <network_off>

000d5fa2 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d5fa2:	2300      	movs	r3, #0
   d5fa4:	461a      	mov	r2, r3
   d5fa6:	4619      	mov	r1, r3
   d5fa8:	6840      	ldr	r0, [r0, #4]
   d5faa:	f7fe be47 	b.w	d4c3c <network_on>

000d5fae <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5fae:	2200      	movs	r2, #0
   d5fb0:	4611      	mov	r1, r2
   d5fb2:	6840      	ldr	r0, [r0, #4]
   d5fb4:	f7fe be2a 	b.w	d4c0c <network_connecting>

000d5fb8 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5fb8:	2200      	movs	r2, #0
   d5fba:	2102      	movs	r1, #2
   d5fbc:	6840      	ldr	r0, [r0, #4]
   d5fbe:	f7fe be2d 	b.w	d4c1c <network_disconnect>

000d5fc2 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5fc2:	2300      	movs	r3, #0
   d5fc4:	461a      	mov	r2, r3
   d5fc6:	6840      	ldr	r0, [r0, #4]
   d5fc8:	f7fe be18 	b.w	d4bfc <network_connect>

000d5fcc <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d5fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d5fce:	4b1b      	ldr	r3, [pc, #108]	; (d603c <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d5fd0:	6003      	str	r3, [r0, #0]
   d5fd2:	2500      	movs	r5, #0
   d5fd4:	460f      	mov	r7, r1
   d5fd6:	3328      	adds	r3, #40	; 0x28
   d5fd8:	2618      	movs	r6, #24
   d5fda:	b089      	sub	sp, #36	; 0x24
   d5fdc:	6043      	str	r3, [r0, #4]
   d5fde:	6085      	str	r5, [r0, #8]
   d5fe0:	60c5      	str	r5, [r0, #12]
   d5fe2:	4632      	mov	r2, r6
   d5fe4:	4629      	mov	r1, r5
   d5fe6:	4604      	mov	r4, r0
   d5fe8:	3010      	adds	r0, #16
   d5fea:	f001 fc04 	bl	d77f6 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d5fee:	462a      	mov	r2, r5
   d5ff0:	4629      	mov	r1, r5
   d5ff2:	6878      	ldr	r0, [r7, #4]
   d5ff4:	f7fe fe1a 	bl	d4c2c <network_ready>
   d5ff8:	b908      	cbnz	r0, d5ffe <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d5ffa:	60a0      	str	r0, [r4, #8]
            return sig;
   d5ffc:	e01b      	b.n	d6036 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d5ffe:	4629      	mov	r1, r5
   d6000:	4632      	mov	r2, r6
   d6002:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d6004:	9500      	str	r5, [sp, #0]
   d6006:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d6008:	f001 fbf5 	bl	d77f6 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d600c:	a902      	add	r1, sp, #8
   d600e:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d6010:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d6014:	f7fe fd8e 	bl	d4b34 <cellular_signal>
   d6018:	b110      	cbz	r0, d6020 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d601a:	2301      	movs	r3, #1
   d601c:	60a3      	str	r3, [r4, #8]
            return sig;
   d601e:	e00a      	b.n	d6036 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d6020:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d6022:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d6024:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d6026:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d6028:	b90b      	cbnz	r3, d602e <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d602a:	2302      	movs	r3, #2
   d602c:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d602e:	a902      	add	r1, sp, #8
   d6030:	4620      	mov	r0, r4
   d6032:	f7ff fb3b 	bl	d56ac <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d6036:	4620      	mov	r0, r4
   d6038:	b009      	add	sp, #36	; 0x24
   d603a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d603c:	000d7c30 	.word	0x000d7c30

000d6040 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d6040:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d6042:	4c08      	ldr	r4, [pc, #32]	; (d6064 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d6044:	2528      	movs	r5, #40	; 0x28
   d6046:	462a      	mov	r2, r5
   d6048:	2100      	movs	r1, #0
   d604a:	4620      	mov	r0, r4
   d604c:	f001 fbd3 	bl	d77f6 <memset>
        cid = -1;
   d6050:	f04f 33ff 	mov.w	r3, #4294967295
   d6054:	6063      	str	r3, [r4, #4]
   d6056:	4b04      	ldr	r3, [pc, #16]	; (d6068 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d6058:	8025      	strh	r5, [r4, #0]
   d605a:	2204      	movs	r2, #4
   d605c:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d605e:	4a03      	ldr	r2, [pc, #12]	; (d606c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d6060:	601a      	str	r2, [r3, #0]
   d6062:	bd38      	pop	{r3, r4, r5, pc}
   d6064:	2003e3f4 	.word	0x2003e3f4
   d6068:	2003e3ec 	.word	0x2003e3ec
   d606c:	000d7cc4 	.word	0x000d7cc4

000d6070 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6070:	4770      	bx	lr

000d6072 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6072:	7441      	strb	r1, [r0, #17]
   d6074:	4770      	bx	lr

000d6076 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6076:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6078:	7c00      	ldrb	r0, [r0, #16]
   d607a:	f7fe fd1b 	bl	d4ab4 <HAL_USART_Available_Data_For_Write>
}
   d607e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6082:	bd08      	pop	{r3, pc}

000d6084 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6084:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6086:	7c00      	ldrb	r0, [r0, #16]
   d6088:	f7fe fcec 	bl	d4a64 <HAL_USART_Available_Data>
}
   d608c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6090:	bd08      	pop	{r3, pc}

000d6092 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6092:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6094:	7c00      	ldrb	r0, [r0, #16]
   d6096:	f7fe fcf5 	bl	d4a84 <HAL_USART_Peek_Data>
}
   d609a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d609e:	bf28      	it	cs
   d60a0:	f04f 30ff 	movcs.w	r0, #4294967295
   d60a4:	bd08      	pop	{r3, pc}

000d60a6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d60a6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d60a8:	7c00      	ldrb	r0, [r0, #16]
   d60aa:	f7fe fce3 	bl	d4a74 <HAL_USART_Read_Data>
}
   d60ae:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d60b2:	bf28      	it	cs
   d60b4:	f04f 30ff 	movcs.w	r0, #4294967295
   d60b8:	bd08      	pop	{r3, pc}

000d60ba <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d60ba:	7c00      	ldrb	r0, [r0, #16]
   d60bc:	f7fe bcea 	b.w	d4a94 <HAL_USART_Flush_Data>

000d60c0 <_ZN11USARTSerialD0Ev>:
   d60c0:	b510      	push	{r4, lr}
   d60c2:	2114      	movs	r1, #20
   d60c4:	4604      	mov	r4, r0
   d60c6:	f000 fac2 	bl	d664e <_ZdlPvj>
   d60ca:	4620      	mov	r0, r4
   d60cc:	bd10      	pop	{r4, pc}

000d60ce <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d60ce:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d60d0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d60d2:	4604      	mov	r4, r0
   d60d4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d60d6:	b925      	cbnz	r5, d60e2 <_ZN11USARTSerial5writeEh+0x14>
   d60d8:	7c00      	ldrb	r0, [r0, #16]
   d60da:	f7fe fceb 	bl	d4ab4 <HAL_USART_Available_Data_For_Write>
   d60de:	2800      	cmp	r0, #0
   d60e0:	dd05      	ble.n	d60ee <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d60e2:	4631      	mov	r1, r6
   d60e4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d60e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d60ea:	f7fe bcb3 	b.w	d4a54 <HAL_USART_Write_Data>
  }
  return 0;
}
   d60ee:	4628      	mov	r0, r5
   d60f0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d60f4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d60f4:	b510      	push	{r4, lr}
   d60f6:	4604      	mov	r4, r0
   d60f8:	4608      	mov	r0, r1
   d60fa:	4611      	mov	r1, r2
   d60fc:	2200      	movs	r2, #0
   d60fe:	6062      	str	r2, [r4, #4]
   d6100:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6104:	60a2      	str	r2, [r4, #8]
   d6106:	4a05      	ldr	r2, [pc, #20]	; (d611c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6108:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d610a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d610c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d610e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6110:	461a      	mov	r2, r3
   d6112:	f7fe fc97 	bl	d4a44 <HAL_USART_Init>
}
   d6116:	4620      	mov	r0, r4
   d6118:	bd10      	pop	{r4, pc}
   d611a:	bf00      	nop
   d611c:	000d7cf8 	.word	0x000d7cf8

000d6120 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6120:	7c00      	ldrb	r0, [r0, #16]
   d6122:	f7fe bcbf 	b.w	d4aa4 <HAL_USART_Is_Enabled>
	...

000d6128 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6128:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d612a:	4d0c      	ldr	r5, [pc, #48]	; (d615c <_Z22__fetch_global_Serial1v+0x34>)
   d612c:	6829      	ldr	r1, [r5, #0]
   d612e:	f011 0401 	ands.w	r4, r1, #1
   d6132:	d111      	bne.n	d6158 <_Z22__fetch_global_Serial1v+0x30>
   d6134:	4628      	mov	r0, r5
   d6136:	f7fd ffb6 	bl	d40a6 <__cxa_guard_acquire>
   d613a:	b168      	cbz	r0, d6158 <_Z22__fetch_global_Serial1v+0x30>
   d613c:	4a08      	ldr	r2, [pc, #32]	; (d6160 <_Z22__fetch_global_Serial1v+0x38>)
   d613e:	4b09      	ldr	r3, [pc, #36]	; (d6164 <_Z22__fetch_global_Serial1v+0x3c>)
   d6140:	4809      	ldr	r0, [pc, #36]	; (d6168 <_Z22__fetch_global_Serial1v+0x40>)
   d6142:	4621      	mov	r1, r4
   d6144:	f7ff ffd6 	bl	d60f4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6148:	4628      	mov	r0, r5
   d614a:	f7fd ffb1 	bl	d40b0 <__cxa_guard_release>
   d614e:	4a07      	ldr	r2, [pc, #28]	; (d616c <_Z22__fetch_global_Serial1v+0x44>)
   d6150:	4907      	ldr	r1, [pc, #28]	; (d6170 <_Z22__fetch_global_Serial1v+0x48>)
   d6152:	4805      	ldr	r0, [pc, #20]	; (d6168 <_Z22__fetch_global_Serial1v+0x40>)
   d6154:	f000 fa76 	bl	d6644 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6158:	4803      	ldr	r0, [pc, #12]	; (d6168 <_Z22__fetch_global_Serial1v+0x40>)
   d615a:	bd38      	pop	{r3, r4, r5, pc}
   d615c:	2003e4b4 	.word	0x2003e4b4
   d6160:	2003e4b8 	.word	0x2003e4b8
   d6164:	2003e430 	.word	0x2003e430
   d6168:	2003e41c 	.word	0x2003e41c
   d616c:	2003e1c0 	.word	0x2003e1c0
   d6170:	000d6071 	.word	0x000d6071

000d6174 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6174:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6176:	6883      	ldr	r3, [r0, #8]
   d6178:	4604      	mov	r4, r0
   d617a:	b90b      	cbnz	r3, d6180 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d617c:	f000 fa69 	bl	d6652 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6180:	68c3      	ldr	r3, [r0, #12]
   d6182:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6184:	68a3      	ldr	r3, [r4, #8]
   d6186:	b11b      	cbz	r3, d6190 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6188:	2203      	movs	r2, #3
   d618a:	4621      	mov	r1, r4
   d618c:	4620      	mov	r0, r4
   d618e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6190:	4620      	mov	r0, r4
   d6192:	2110      	movs	r1, #16
}
   d6194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6198:	f000 ba59 	b.w	d664e <_ZdlPvj>

000d619c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d619c:	4770      	bx	lr

000d619e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d619e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d61a0:	4606      	mov	r6, r0
   d61a2:	4615      	mov	r5, r2
   d61a4:	460c      	mov	r4, r1
   d61a6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d61a8:	42bc      	cmp	r4, r7
   d61aa:	d006      	beq.n	d61ba <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d61ac:	6833      	ldr	r3, [r6, #0]
   d61ae:	f814 1b01 	ldrb.w	r1, [r4], #1
   d61b2:	689b      	ldr	r3, [r3, #8]
   d61b4:	4630      	mov	r0, r6
   d61b6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d61b8:	e7f6      	b.n	d61a8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d61ba:	4628      	mov	r0, r5
   d61bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d61be <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d61be:	2200      	movs	r2, #0
   d61c0:	7c00      	ldrb	r0, [r0, #16]
   d61c2:	f7fe bc7f 	b.w	d4ac4 <HAL_I2C_Write_Data>

000d61c6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d61c6:	2100      	movs	r1, #0
   d61c8:	7c00      	ldrb	r0, [r0, #16]
   d61ca:	f7fe bc83 	b.w	d4ad4 <HAL_I2C_Available_Data>

000d61ce <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d61ce:	2100      	movs	r1, #0
   d61d0:	7c00      	ldrb	r0, [r0, #16]
   d61d2:	f7fe bc87 	b.w	d4ae4 <HAL_I2C_Read_Data>

000d61d6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d61d6:	2100      	movs	r1, #0
   d61d8:	7c00      	ldrb	r0, [r0, #16]
   d61da:	f7fe bc8b 	b.w	d4af4 <HAL_I2C_Peek_Data>

000d61de <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d61de:	2100      	movs	r1, #0
   d61e0:	7c00      	ldrb	r0, [r0, #16]
   d61e2:	f7fe bc8f 	b.w	d4b04 <HAL_I2C_Flush_Data>

000d61e6 <_ZN7TwoWireD0Ev>:
   d61e6:	b510      	push	{r4, lr}
   d61e8:	2114      	movs	r1, #20
   d61ea:	4604      	mov	r4, r0
   d61ec:	f000 fa2f 	bl	d664e <_ZdlPvj>
   d61f0:	4620      	mov	r0, r4
   d61f2:	bd10      	pop	{r4, pc}

000d61f4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d61f4:	b510      	push	{r4, lr}
   d61f6:	4604      	mov	r4, r0
   d61f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d61fc:	4608      	mov	r0, r1
   d61fe:	60a3      	str	r3, [r4, #8]
   d6200:	2100      	movs	r1, #0
   d6202:	4b04      	ldr	r3, [pc, #16]	; (d6214 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d6204:	7420      	strb	r0, [r4, #16]
   d6206:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6208:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d620a:	f7fe fc8b 	bl	d4b24 <HAL_I2C_Init>

}
   d620e:	4620      	mov	r0, r4
   d6210:	bd10      	pop	{r4, pc}
   d6212:	bf00      	nop
   d6214:	000d7d28 	.word	0x000d7d28

000d6218 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6218:	2100      	movs	r1, #0
   d621a:	7c00      	ldrb	r0, [r0, #16]
   d621c:	f7fe bc7a 	b.w	d4b14 <HAL_I2C_Is_Enabled>

000d6220 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6220:	2200      	movs	r2, #0
   d6222:	4611      	mov	r1, r2
   d6224:	6840      	ldr	r0, [r0, #4]
   d6226:	f7fe bd21 	b.w	d4c6c <network_listening>

000d622a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d622a:	2200      	movs	r2, #0
   d622c:	4611      	mov	r1, r2
   d622e:	6840      	ldr	r0, [r0, #4]
   d6230:	f7fe bd2c 	b.w	d4c8c <network_get_listen_timeout>

000d6234 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6234:	2200      	movs	r2, #0
   d6236:	6840      	ldr	r0, [r0, #4]
   d6238:	f7fe bd20 	b.w	d4c7c <network_set_listen_timeout>

000d623c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d623c:	2200      	movs	r2, #0
   d623e:	f081 0101 	eor.w	r1, r1, #1
   d6242:	6840      	ldr	r0, [r0, #4]
   d6244:	f7fe bd0a 	b.w	d4c5c <network_listen>

000d6248 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6248:	2300      	movs	r3, #0
   d624a:	461a      	mov	r2, r3
   d624c:	2101      	movs	r1, #1
   d624e:	6840      	ldr	r0, [r0, #4]
   d6250:	f7fe bcfc 	b.w	d4c4c <network_off>

000d6254 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6254:	2300      	movs	r3, #0
   d6256:	461a      	mov	r2, r3
   d6258:	4619      	mov	r1, r3
   d625a:	6840      	ldr	r0, [r0, #4]
   d625c:	f7fe bcee 	b.w	d4c3c <network_on>

000d6260 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6260:	2200      	movs	r2, #0
   d6262:	4611      	mov	r1, r2
   d6264:	6840      	ldr	r0, [r0, #4]
   d6266:	f7fe bce1 	b.w	d4c2c <network_ready>

000d626a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d626a:	2200      	movs	r2, #0
   d626c:	4611      	mov	r1, r2
   d626e:	6840      	ldr	r0, [r0, #4]
   d6270:	f7fe bccc 	b.w	d4c0c <network_connecting>

000d6274 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6274:	2200      	movs	r2, #0
   d6276:	2102      	movs	r1, #2
   d6278:	6840      	ldr	r0, [r0, #4]
   d627a:	f7fe bccf 	b.w	d4c1c <network_disconnect>

000d627e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d627e:	2300      	movs	r3, #0
   d6280:	461a      	mov	r2, r3
   d6282:	6840      	ldr	r0, [r0, #4]
   d6284:	f7fe bcba 	b.w	d4bfc <network_connect>

000d6288 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6288:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d628a:	4605      	mov	r5, r0
   d628c:	b188      	cbz	r0, d62b2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d628e:	6804      	ldr	r4, [r0, #0]
   d6290:	b14c      	cbz	r4, d62a6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6292:	68a3      	ldr	r3, [r4, #8]
   d6294:	b11b      	cbz	r3, d629e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6296:	2203      	movs	r2, #3
   d6298:	4621      	mov	r1, r4
   d629a:	4620      	mov	r0, r4
   d629c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d629e:	2110      	movs	r1, #16
   d62a0:	4620      	mov	r0, r4
   d62a2:	f000 f9d4 	bl	d664e <_ZdlPvj>
   d62a6:	4628      	mov	r0, r5
   d62a8:	2114      	movs	r1, #20
      }
   d62aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d62ae:	f000 b9ce 	b.w	d664e <_ZdlPvj>
   d62b2:	bd38      	pop	{r3, r4, r5, pc}

000d62b4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d62b4:	b110      	cbz	r0, d62bc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d62b6:	6803      	ldr	r3, [r0, #0]
   d62b8:	685b      	ldr	r3, [r3, #4]
   d62ba:	4718      	bx	r3
   d62bc:	4770      	bx	lr

000d62be <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d62be:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d62c0:	6803      	ldr	r3, [r0, #0]
   d62c2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d62c4:	b1bb      	cbz	r3, d62f6 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d62c6:	6858      	ldr	r0, [r3, #4]
   d62c8:	f7fe fb7c 	bl	d49c4 <os_thread_is_current>
   d62cc:	b978      	cbnz	r0, d62ee <_ZN6ThreadD1Ev+0x30>
   d62ce:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d62d0:	7c5a      	ldrb	r2, [r3, #17]
   d62d2:	b912      	cbnz	r2, d62da <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d62d4:	6858      	ldr	r0, [r3, #4]
   d62d6:	f7fe fb7d 	bl	d49d4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d62da:	6823      	ldr	r3, [r4, #0]
   d62dc:	6858      	ldr	r0, [r3, #4]
   d62de:	f7fe fb81 	bl	d49e4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d62e2:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d62e4:	2300      	movs	r3, #0
   d62e6:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d62e8:	b128      	cbz	r0, d62f6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d62ea:	f7ff ffcd 	bl	d6288 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d62ee:	6820      	ldr	r0, [r4, #0]
   d62f0:	b108      	cbz	r0, d62f6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d62f2:	f7ff ffc9 	bl	d6288 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d62f6:	4620      	mov	r0, r4
   d62f8:	bd10      	pop	{r4, pc}
	...

000d62fc <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d62fc:	b538      	push	{r3, r4, r5, lr}
   d62fe:	4b0c      	ldr	r3, [pc, #48]	; (d6330 <_ZN5spark9MeshClassD1Ev+0x34>)
   d6300:	6003      	str	r3, [r0, #0]
   d6302:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6304:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d6308:	b108      	cbz	r0, d630e <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d630a:	f7fd feca 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d630e:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d6312:	b135      	cbz	r5, d6322 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6314:	4628      	mov	r0, r5
   d6316:	f7ff ffd2 	bl	d62be <_ZN6ThreadD1Ev>
   d631a:	2104      	movs	r1, #4
   d631c:	4628      	mov	r0, r5
   d631e:	f000 f996 	bl	d664e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6322:	68a0      	ldr	r0, [r4, #8]
   d6324:	b108      	cbz	r0, d632a <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d6326:	f7ff ffc5 	bl	d62b4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d632a:	4620      	mov	r0, r4
   d632c:	bd38      	pop	{r3, r4, r5, pc}
   d632e:	bf00      	nop
   d6330:	000d7d50 	.word	0x000d7d50

000d6334 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6334:	b538      	push	{r3, r4, r5, lr}
   d6336:	4c0e      	ldr	r4, [pc, #56]	; (d6370 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6338:	4b0e      	ldr	r3, [pc, #56]	; (d6374 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d633a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d633c:	2500      	movs	r5, #0
   d633e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6340:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6344:	6063      	str	r3, [r4, #4]
   d6346:	60a5      	str	r5, [r4, #8]
   d6348:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d634c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6350:	f7fe fb68 	bl	d4a24 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6354:	4b08      	ldr	r3, [pc, #32]	; (d6378 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6356:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d635a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d635e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6360:	4620      	mov	r0, r4
   d6362:	4a06      	ldr	r2, [pc, #24]	; (d637c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6364:	4906      	ldr	r1, [pc, #24]	; (d6380 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d636a:	f000 b96b 	b.w	d6644 <__aeabi_atexit>
   d636e:	bf00      	nop
   d6370:	2003e53c 	.word	0x2003e53c
   d6374:	000d7d84 	.word	0x000d7d84
   d6378:	000d7d50 	.word	0x000d7d50
   d637c:	2003e1c0 	.word	0x2003e1c0
   d6380:	000d62fd 	.word	0x000d62fd

000d6384 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6384:	2300      	movs	r3, #0
   d6386:	461a      	mov	r2, r3
   d6388:	6840      	ldr	r0, [r0, #4]
   d638a:	f7fe bc37 	b.w	d4bfc <network_connect>

000d638e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d638e:	2200      	movs	r2, #0
   d6390:	2102      	movs	r1, #2
   d6392:	6840      	ldr	r0, [r0, #4]
   d6394:	f7fe bc42 	b.w	d4c1c <network_disconnect>

000d6398 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6398:	2200      	movs	r2, #0
   d639a:	4611      	mov	r1, r2
   d639c:	6840      	ldr	r0, [r0, #4]
   d639e:	f7fe bc35 	b.w	d4c0c <network_connecting>

000d63a2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d63a2:	2200      	movs	r2, #0
   d63a4:	4611      	mov	r1, r2
   d63a6:	6840      	ldr	r0, [r0, #4]
   d63a8:	f7fe bc40 	b.w	d4c2c <network_ready>

000d63ac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d63ac:	2300      	movs	r3, #0
   d63ae:	461a      	mov	r2, r3
   d63b0:	4619      	mov	r1, r3
   d63b2:	6840      	ldr	r0, [r0, #4]
   d63b4:	f7fe bc42 	b.w	d4c3c <network_on>

000d63b8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d63b8:	2300      	movs	r3, #0
   d63ba:	461a      	mov	r2, r3
   d63bc:	4619      	mov	r1, r3
   d63be:	6840      	ldr	r0, [r0, #4]
   d63c0:	f7fe bc44 	b.w	d4c4c <network_off>

000d63c4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d63c4:	2200      	movs	r2, #0
   d63c6:	f081 0101 	eor.w	r1, r1, #1
   d63ca:	6840      	ldr	r0, [r0, #4]
   d63cc:	f7fe bc46 	b.w	d4c5c <network_listen>

000d63d0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d63d0:	2200      	movs	r2, #0
   d63d2:	6840      	ldr	r0, [r0, #4]
   d63d4:	f7fe bc52 	b.w	d4c7c <network_set_listen_timeout>

000d63d8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d63d8:	2200      	movs	r2, #0
   d63da:	4611      	mov	r1, r2
   d63dc:	6840      	ldr	r0, [r0, #4]
   d63de:	f7fe bc55 	b.w	d4c8c <network_get_listen_timeout>

000d63e2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d63e2:	2200      	movs	r2, #0
   d63e4:	4611      	mov	r1, r2
   d63e6:	6840      	ldr	r0, [r0, #4]
   d63e8:	f7fe bc40 	b.w	d4c6c <network_listening>

000d63ec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d63ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d63f0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d63f2:	b095      	sub	sp, #84	; 0x54
   d63f4:	4616      	mov	r6, r2
   d63f6:	460d      	mov	r5, r1
   d63f8:	4607      	mov	r7, r0
    IPAddress addr;
   d63fa:	f7ff fcf7 	bl	d5dec <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d63fe:	4621      	mov	r1, r4
   d6400:	2220      	movs	r2, #32
   d6402:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6404:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6406:	f001 f9f6 	bl	d77f6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d640a:	2340      	movs	r3, #64	; 0x40
   d640c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d640e:	4621      	mov	r1, r4
   d6410:	466b      	mov	r3, sp
   d6412:	aa0c      	add	r2, sp, #48	; 0x30
   d6414:	4630      	mov	r0, r6
   d6416:	f7fe fa5d 	bl	d48d4 <netdb_getaddrinfo>
    if (!r) {
   d641a:	4604      	mov	r4, r0
   d641c:	2800      	cmp	r0, #0
   d641e:	d144      	bne.n	d64aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6420:	4602      	mov	r2, r0
   d6422:	2101      	movs	r1, #1
   d6424:	6868      	ldr	r0, [r5, #4]
   d6426:	f7fe fc01 	bl	d4c2c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d642a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d642c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d642e:	4622      	mov	r2, r4
   d6430:	6868      	ldr	r0, [r5, #4]
   d6432:	f7fe fbfb 	bl	d4c2c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6436:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6438:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d643a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d643c:	2e00      	cmp	r6, #0
   d643e:	d034      	beq.n	d64aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6440:	2900      	cmp	r1, #0
   d6442:	d132      	bne.n	d64aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6444:	6873      	ldr	r3, [r6, #4]
   d6446:	2b02      	cmp	r3, #2
   d6448:	d002      	beq.n	d6450 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d644a:	2b0a      	cmp	r3, #10
   d644c:	d009      	beq.n	d6462 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d644e:	e02a      	b.n	d64a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6450:	f1b8 0f00 	cmp.w	r8, #0
   d6454:	d027      	beq.n	d64a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6456:	6971      	ldr	r1, [r6, #20]
   d6458:	4638      	mov	r0, r7
   d645a:	3104      	adds	r1, #4
   d645c:	f7ff fcf3 	bl	d5e46 <_ZN9IPAddressaSEPKh>
   d6460:	e020      	b.n	d64a4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6462:	f1b9 0f00 	cmp.w	r9, #0
   d6466:	d01e      	beq.n	d64a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6468:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d646a:	2211      	movs	r2, #17
   d646c:	a801      	add	r0, sp, #4
   d646e:	f001 f9c2 	bl	d77f6 <memset>
                    a.v = 6;
   d6472:	2306      	movs	r3, #6
   d6474:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6478:	ad01      	add	r5, sp, #4
   d647a:	f104 0308 	add.w	r3, r4, #8
   d647e:	3418      	adds	r4, #24
   d6480:	6818      	ldr	r0, [r3, #0]
   d6482:	6859      	ldr	r1, [r3, #4]
   d6484:	462a      	mov	r2, r5
   d6486:	c203      	stmia	r2!, {r0, r1}
   d6488:	3308      	adds	r3, #8
   d648a:	42a3      	cmp	r3, r4
   d648c:	4615      	mov	r5, r2
   d648e:	d1f7      	bne.n	d6480 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6490:	a901      	add	r1, sp, #4
   d6492:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6494:	ad07      	add	r5, sp, #28
   d6496:	f7ff fcb7 	bl	d5e08 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d649a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d649c:	1d3c      	adds	r4, r7, #4
   d649e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d64a0:	682b      	ldr	r3, [r5, #0]
   d64a2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d64a4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d64a6:	69f6      	ldr	r6, [r6, #28]
   d64a8:	e7c8      	b.n	d643c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d64aa:	9800      	ldr	r0, [sp, #0]
   d64ac:	f7fe fa0a 	bl	d48c4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d64b0:	4638      	mov	r0, r7
   d64b2:	b015      	add	sp, #84	; 0x54
   d64b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d64b8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d64b8:	4b02      	ldr	r3, [pc, #8]	; (d64c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d64ba:	4a03      	ldr	r2, [pc, #12]	; (d64c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d64bc:	601a      	str	r2, [r3, #0]
   d64be:	2200      	movs	r2, #0
   d64c0:	605a      	str	r2, [r3, #4]
   d64c2:	4770      	bx	lr
   d64c4:	2003e710 	.word	0x2003e710
   d64c8:	000d7d84 	.word	0x000d7d84

000d64cc <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d64cc:	b508      	push	{r3, lr}
   d64ce:	4b02      	ldr	r3, [pc, #8]	; (d64d8 <spark_protocol_instance+0xc>)
   d64d0:	681b      	ldr	r3, [r3, #0]
   d64d2:	681b      	ldr	r3, [r3, #0]
   d64d4:	9301      	str	r3, [sp, #4]
   d64d6:	bd08      	pop	{r3, pc}
   d64d8:	0003025c 	.word	0x0003025c

000d64dc <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d64dc:	b508      	push	{r3, lr}
   d64de:	4b02      	ldr	r3, [pc, #8]	; (d64e8 <spark_protocol_set_product_id+0xc>)
   d64e0:	681b      	ldr	r3, [r3, #0]
   d64e2:	685b      	ldr	r3, [r3, #4]
   d64e4:	9301      	str	r3, [sp, #4]
   d64e6:	bd08      	pop	{r3, pc}
   d64e8:	0003025c 	.word	0x0003025c

000d64ec <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d64ec:	b508      	push	{r3, lr}
   d64ee:	4b02      	ldr	r3, [pc, #8]	; (d64f8 <spark_protocol_set_product_firmware_version+0xc>)
   d64f0:	681b      	ldr	r3, [r3, #0]
   d64f2:	689b      	ldr	r3, [r3, #8]
   d64f4:	9301      	str	r3, [sp, #4]
   d64f6:	bd08      	pop	{r3, pc}
   d64f8:	0003025c 	.word	0x0003025c

000d64fc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d64fc:	b510      	push	{r4, lr}
   d64fe:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6500:	480f      	ldr	r0, [pc, #60]	; (d6540 <pinAvailable+0x44>)
   d6502:	f7fe fd3b 	bl	d4f7c <_ZN8SPIClass9isEnabledEv>
   d6506:	b128      	cbz	r0, d6514 <pinAvailable+0x18>
   d6508:	f1a4 030b 	sub.w	r3, r4, #11
   d650c:	2b02      	cmp	r3, #2
   d650e:	d801      	bhi.n	d6514 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6510:	2000      	movs	r0, #0
   d6512:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6514:	f000 f876 	bl	d6604 <_Z19__fetch_global_Wirev>
   d6518:	f7ff fe7e 	bl	d6218 <_ZN7TwoWire9isEnabledEv>
   d651c:	b108      	cbz	r0, d6522 <pinAvailable+0x26>
   d651e:	2c01      	cmp	r4, #1
   d6520:	d9f6      	bls.n	d6510 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6522:	f7ff fe01 	bl	d6128 <_Z22__fetch_global_Serial1v>
   d6526:	f7ff fdfb 	bl	d6120 <_ZN11USARTSerial9isEnabledEv>
   d652a:	b118      	cbz	r0, d6534 <pinAvailable+0x38>
   d652c:	f1a4 0309 	sub.w	r3, r4, #9
   d6530:	2b01      	cmp	r3, #1
   d6532:	d9ed      	bls.n	d6510 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6534:	2c23      	cmp	r4, #35	; 0x23
   d6536:	bf8c      	ite	hi
   d6538:	2000      	movhi	r0, #0
   d653a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d653c:	bd10      	pop	{r4, pc}
   d653e:	bf00      	nop
   d6540:	2003e718 	.word	0x2003e718

000d6544 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6544:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6546:	b538      	push	{r3, r4, r5, lr}
   d6548:	4604      	mov	r4, r0
   d654a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d654c:	d80a      	bhi.n	d6564 <pinMode+0x20>
   d654e:	29ff      	cmp	r1, #255	; 0xff
   d6550:	d008      	beq.n	d6564 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6552:	f7ff ffd3 	bl	d64fc <pinAvailable>
   d6556:	b128      	cbz	r0, d6564 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6558:	4629      	mov	r1, r5
   d655a:	4620      	mov	r0, r4
}
   d655c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6560:	f7fe b9c8 	b.w	d48f4 <HAL_Pin_Mode>
   d6564:	bd38      	pop	{r3, r4, r5, pc}

000d6566 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6566:	b538      	push	{r3, r4, r5, lr}
   d6568:	4604      	mov	r4, r0
   d656a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d656c:	f7fe f9ca 	bl	d4904 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6570:	28ff      	cmp	r0, #255	; 0xff
   d6572:	d010      	beq.n	d6596 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6574:	2806      	cmp	r0, #6
   d6576:	d804      	bhi.n	d6582 <digitalWrite+0x1c>
   d6578:	234d      	movs	r3, #77	; 0x4d
   d657a:	fa23 f000 	lsr.w	r0, r3, r0
   d657e:	07c3      	lsls	r3, r0, #31
   d6580:	d409      	bmi.n	d6596 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6582:	4620      	mov	r0, r4
   d6584:	f7ff ffba 	bl	d64fc <pinAvailable>
   d6588:	b128      	cbz	r0, d6596 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d658a:	4629      	mov	r1, r5
   d658c:	4620      	mov	r0, r4
}
   d658e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6592:	f7fe b9bf 	b.w	d4914 <HAL_GPIO_Write>
   d6596:	bd38      	pop	{r3, r4, r5, pc}

000d6598 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6598:	b510      	push	{r4, lr}
   d659a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d659c:	f7fe f9b2 	bl	d4904 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d65a0:	3804      	subs	r0, #4
   d65a2:	b2c0      	uxtb	r0, r0
   d65a4:	2801      	cmp	r0, #1
   d65a6:	d908      	bls.n	d65ba <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d65a8:	4620      	mov	r0, r4
   d65aa:	f7ff ffa7 	bl	d64fc <pinAvailable>
   d65ae:	b120      	cbz	r0, d65ba <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d65b0:	4620      	mov	r0, r4
}
   d65b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d65b6:	f7fe b9b5 	b.w	d4924 <HAL_GPIO_Read>
}
   d65ba:	2000      	movs	r0, #0
   d65bc:	bd10      	pop	{r4, pc}
	...

000d65c0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d65c0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d65c2:	4c0c      	ldr	r4, [pc, #48]	; (d65f4 <_GLOBAL__sub_I_SPI+0x34>)
   d65c4:	4e0c      	ldr	r6, [pc, #48]	; (d65f8 <_GLOBAL__sub_I_SPI+0x38>)
   d65c6:	4d0d      	ldr	r5, [pc, #52]	; (d65fc <_GLOBAL__sub_I_SPI+0x3c>)
   d65c8:	2100      	movs	r1, #0
   d65ca:	4620      	mov	r0, r4
   d65cc:	f7fe fc0c 	bl	d4de8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d65d0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d65d2:	4c0b      	ldr	r4, [pc, #44]	; (d6600 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d65d4:	4632      	mov	r2, r6
   d65d6:	4629      	mov	r1, r5
   d65d8:	f000 f834 	bl	d6644 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d65dc:	2101      	movs	r1, #1
   d65de:	4620      	mov	r0, r4
   d65e0:	f7fe fc02 	bl	d4de8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d65e4:	4632      	mov	r2, r6
   d65e6:	4629      	mov	r1, r5
   d65e8:	4620      	mov	r0, r4
   d65ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d65ee:	f000 b829 	b.w	d6644 <__aeabi_atexit>
   d65f2:	bf00      	nop
   d65f4:	2003e718 	.word	0x2003e718
   d65f8:	2003e1c0 	.word	0x2003e1c0
   d65fc:	000d4dd9 	.word	0x000d4dd9
   d6600:	2003e728 	.word	0x2003e728

000d6604 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6604:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6606:	4d0b      	ldr	r5, [pc, #44]	; (d6634 <_Z19__fetch_global_Wirev+0x30>)
   d6608:	6829      	ldr	r1, [r5, #0]
   d660a:	f011 0401 	ands.w	r4, r1, #1
   d660e:	d10f      	bne.n	d6630 <_Z19__fetch_global_Wirev+0x2c>
   d6610:	4628      	mov	r0, r5
   d6612:	f7fd fd48 	bl	d40a6 <__cxa_guard_acquire>
   d6616:	b158      	cbz	r0, d6630 <_Z19__fetch_global_Wirev+0x2c>
   d6618:	4621      	mov	r1, r4
   d661a:	4807      	ldr	r0, [pc, #28]	; (d6638 <_Z19__fetch_global_Wirev+0x34>)
   d661c:	f7ff fdea 	bl	d61f4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6620:	4628      	mov	r0, r5
   d6622:	f7fd fd45 	bl	d40b0 <__cxa_guard_release>
   d6626:	4a05      	ldr	r2, [pc, #20]	; (d663c <_Z19__fetch_global_Wirev+0x38>)
   d6628:	4905      	ldr	r1, [pc, #20]	; (d6640 <_Z19__fetch_global_Wirev+0x3c>)
   d662a:	4803      	ldr	r0, [pc, #12]	; (d6638 <_Z19__fetch_global_Wirev+0x34>)
   d662c:	f000 f80a 	bl	d6644 <__aeabi_atexit>
	return wire;
}
   d6630:	4801      	ldr	r0, [pc, #4]	; (d6638 <_Z19__fetch_global_Wirev+0x34>)
   d6632:	bd38      	pop	{r3, r4, r5, pc}
   d6634:	2003e73c 	.word	0x2003e73c
   d6638:	2003e740 	.word	0x2003e740
   d663c:	2003e1c0 	.word	0x2003e1c0
   d6640:	000d619d 	.word	0x000d619d

000d6644 <__aeabi_atexit>:
   d6644:	460b      	mov	r3, r1
   d6646:	4601      	mov	r1, r0
   d6648:	4618      	mov	r0, r3
   d664a:	f001 b8bb 	b.w	d77c4 <__cxa_atexit>

000d664e <_ZdlPvj>:
   d664e:	f7fd bd26 	b.w	d409e <_ZdlPv>

000d6652 <_ZSt25__throw_bad_function_callv>:
   d6652:	b508      	push	{r3, lr}
   d6654:	f7fe fb6a 	bl	d4d2c <abort>

000d6658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6658:	4b18      	ldr	r3, [pc, #96]	; (d66bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d665a:	681a      	ldr	r2, [r3, #0]
   d665c:	07d1      	lsls	r1, r2, #31
   d665e:	bf5c      	itt	pl
   d6660:	2201      	movpl	r2, #1
   d6662:	601a      	strpl	r2, [r3, #0]
   d6664:	4b16      	ldr	r3, [pc, #88]	; (d66c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6666:	681a      	ldr	r2, [r3, #0]
   d6668:	07d2      	lsls	r2, r2, #31
   d666a:	bf5c      	itt	pl
   d666c:	2201      	movpl	r2, #1
   d666e:	601a      	strpl	r2, [r3, #0]
   d6670:	4b14      	ldr	r3, [pc, #80]	; (d66c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6672:	681a      	ldr	r2, [r3, #0]
   d6674:	07d0      	lsls	r0, r2, #31
   d6676:	bf5c      	itt	pl
   d6678:	2201      	movpl	r2, #1
   d667a:	601a      	strpl	r2, [r3, #0]
   d667c:	4b12      	ldr	r3, [pc, #72]	; (d66c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d667e:	681a      	ldr	r2, [r3, #0]
   d6680:	07d1      	lsls	r1, r2, #31
   d6682:	bf5c      	itt	pl
   d6684:	2201      	movpl	r2, #1
   d6686:	601a      	strpl	r2, [r3, #0]
   d6688:	4b10      	ldr	r3, [pc, #64]	; (d66cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d668a:	681a      	ldr	r2, [r3, #0]
   d668c:	07d2      	lsls	r2, r2, #31
   d668e:	bf5c      	itt	pl
   d6690:	2201      	movpl	r2, #1
   d6692:	601a      	strpl	r2, [r3, #0]
   d6694:	4b0e      	ldr	r3, [pc, #56]	; (d66d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6696:	681a      	ldr	r2, [r3, #0]
   d6698:	07d0      	lsls	r0, r2, #31
   d669a:	bf5c      	itt	pl
   d669c:	2201      	movpl	r2, #1
   d669e:	601a      	strpl	r2, [r3, #0]
   d66a0:	4b0c      	ldr	r3, [pc, #48]	; (d66d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d66a2:	681a      	ldr	r2, [r3, #0]
   d66a4:	07d1      	lsls	r1, r2, #31
   d66a6:	bf5c      	itt	pl
   d66a8:	2201      	movpl	r2, #1
   d66aa:	601a      	strpl	r2, [r3, #0]
   d66ac:	4b0a      	ldr	r3, [pc, #40]	; (d66d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d66ae:	681a      	ldr	r2, [r3, #0]
   d66b0:	07d2      	lsls	r2, r2, #31
   d66b2:	bf5c      	itt	pl
   d66b4:	2201      	movpl	r2, #1
   d66b6:	601a      	strpl	r2, [r3, #0]
   d66b8:	4770      	bx	lr
   d66ba:	bf00      	nop
   d66bc:	2003e770 	.word	0x2003e770
   d66c0:	2003e76c 	.word	0x2003e76c
   d66c4:	2003e768 	.word	0x2003e768
   d66c8:	2003e764 	.word	0x2003e764
   d66cc:	2003e760 	.word	0x2003e760
   d66d0:	2003e75c 	.word	0x2003e75c
   d66d4:	2003e758 	.word	0x2003e758
   d66d8:	2003e754 	.word	0x2003e754

000d66dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d66dc:	4b24      	ldr	r3, [pc, #144]	; (d6770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d66de:	681a      	ldr	r2, [r3, #0]
   d66e0:	07d0      	lsls	r0, r2, #31
   d66e2:	bf5c      	itt	pl
   d66e4:	2201      	movpl	r2, #1
   d66e6:	601a      	strpl	r2, [r3, #0]
   d66e8:	4b22      	ldr	r3, [pc, #136]	; (d6774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d66ea:	681a      	ldr	r2, [r3, #0]
   d66ec:	07d1      	lsls	r1, r2, #31
   d66ee:	bf5c      	itt	pl
   d66f0:	2201      	movpl	r2, #1
   d66f2:	601a      	strpl	r2, [r3, #0]
   d66f4:	4b20      	ldr	r3, [pc, #128]	; (d6778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d66f6:	681a      	ldr	r2, [r3, #0]
   d66f8:	07d2      	lsls	r2, r2, #31
   d66fa:	bf5c      	itt	pl
   d66fc:	2201      	movpl	r2, #1
   d66fe:	601a      	strpl	r2, [r3, #0]
   d6700:	4b1e      	ldr	r3, [pc, #120]	; (d677c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6702:	681a      	ldr	r2, [r3, #0]
   d6704:	07d0      	lsls	r0, r2, #31
   d6706:	bf5c      	itt	pl
   d6708:	2201      	movpl	r2, #1
   d670a:	601a      	strpl	r2, [r3, #0]
   d670c:	4b1c      	ldr	r3, [pc, #112]	; (d6780 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d670e:	681a      	ldr	r2, [r3, #0]
   d6710:	07d1      	lsls	r1, r2, #31
   d6712:	bf5c      	itt	pl
   d6714:	2201      	movpl	r2, #1
   d6716:	601a      	strpl	r2, [r3, #0]
   d6718:	4b1a      	ldr	r3, [pc, #104]	; (d6784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d671a:	681a      	ldr	r2, [r3, #0]
   d671c:	07d2      	lsls	r2, r2, #31
   d671e:	bf5c      	itt	pl
   d6720:	2201      	movpl	r2, #1
   d6722:	601a      	strpl	r2, [r3, #0]
   d6724:	4b18      	ldr	r3, [pc, #96]	; (d6788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6726:	681a      	ldr	r2, [r3, #0]
   d6728:	07d0      	lsls	r0, r2, #31
   d672a:	bf5c      	itt	pl
   d672c:	2201      	movpl	r2, #1
   d672e:	601a      	strpl	r2, [r3, #0]
   d6730:	4b16      	ldr	r3, [pc, #88]	; (d678c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6732:	681a      	ldr	r2, [r3, #0]
   d6734:	07d1      	lsls	r1, r2, #31
   d6736:	bf5c      	itt	pl
   d6738:	2201      	movpl	r2, #1
   d673a:	601a      	strpl	r2, [r3, #0]
   d673c:	4b14      	ldr	r3, [pc, #80]	; (d6790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d673e:	681a      	ldr	r2, [r3, #0]
   d6740:	07d2      	lsls	r2, r2, #31
   d6742:	bf5c      	itt	pl
   d6744:	2201      	movpl	r2, #1
   d6746:	601a      	strpl	r2, [r3, #0]
   d6748:	4b12      	ldr	r3, [pc, #72]	; (d6794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d674a:	681a      	ldr	r2, [r3, #0]
   d674c:	07d0      	lsls	r0, r2, #31
   d674e:	bf5c      	itt	pl
   d6750:	2201      	movpl	r2, #1
   d6752:	601a      	strpl	r2, [r3, #0]
   d6754:	4b10      	ldr	r3, [pc, #64]	; (d6798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6756:	681a      	ldr	r2, [r3, #0]
   d6758:	07d1      	lsls	r1, r2, #31
   d675a:	bf5c      	itt	pl
   d675c:	2201      	movpl	r2, #1
   d675e:	601a      	strpl	r2, [r3, #0]
   d6760:	4b0e      	ldr	r3, [pc, #56]	; (d679c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6762:	681a      	ldr	r2, [r3, #0]
   d6764:	07d2      	lsls	r2, r2, #31
   d6766:	bf5c      	itt	pl
   d6768:	2201      	movpl	r2, #1
   d676a:	601a      	strpl	r2, [r3, #0]
   d676c:	4770      	bx	lr
   d676e:	bf00      	nop
   d6770:	2003e7a0 	.word	0x2003e7a0
   d6774:	2003e79c 	.word	0x2003e79c
   d6778:	2003e798 	.word	0x2003e798
   d677c:	2003e794 	.word	0x2003e794
   d6780:	2003e790 	.word	0x2003e790
   d6784:	2003e78c 	.word	0x2003e78c
   d6788:	2003e788 	.word	0x2003e788
   d678c:	2003e784 	.word	0x2003e784
   d6790:	2003e780 	.word	0x2003e780
   d6794:	2003e77c 	.word	0x2003e77c
   d6798:	2003e778 	.word	0x2003e778
   d679c:	2003e774 	.word	0x2003e774

000d67a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d67a0:	4b24      	ldr	r3, [pc, #144]	; (d6834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d67a2:	681a      	ldr	r2, [r3, #0]
   d67a4:	07d0      	lsls	r0, r2, #31
   d67a6:	bf5c      	itt	pl
   d67a8:	2201      	movpl	r2, #1
   d67aa:	601a      	strpl	r2, [r3, #0]
   d67ac:	4b22      	ldr	r3, [pc, #136]	; (d6838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d67ae:	681a      	ldr	r2, [r3, #0]
   d67b0:	07d1      	lsls	r1, r2, #31
   d67b2:	bf5c      	itt	pl
   d67b4:	2201      	movpl	r2, #1
   d67b6:	601a      	strpl	r2, [r3, #0]
   d67b8:	4b20      	ldr	r3, [pc, #128]	; (d683c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d67ba:	681a      	ldr	r2, [r3, #0]
   d67bc:	07d2      	lsls	r2, r2, #31
   d67be:	bf5c      	itt	pl
   d67c0:	2201      	movpl	r2, #1
   d67c2:	601a      	strpl	r2, [r3, #0]
   d67c4:	4b1e      	ldr	r3, [pc, #120]	; (d6840 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d67c6:	681a      	ldr	r2, [r3, #0]
   d67c8:	07d0      	lsls	r0, r2, #31
   d67ca:	bf5c      	itt	pl
   d67cc:	2201      	movpl	r2, #1
   d67ce:	601a      	strpl	r2, [r3, #0]
   d67d0:	4b1c      	ldr	r3, [pc, #112]	; (d6844 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d67d2:	681a      	ldr	r2, [r3, #0]
   d67d4:	07d1      	lsls	r1, r2, #31
   d67d6:	bf5c      	itt	pl
   d67d8:	2201      	movpl	r2, #1
   d67da:	601a      	strpl	r2, [r3, #0]
   d67dc:	4b1a      	ldr	r3, [pc, #104]	; (d6848 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d67de:	681a      	ldr	r2, [r3, #0]
   d67e0:	07d2      	lsls	r2, r2, #31
   d67e2:	bf5c      	itt	pl
   d67e4:	2201      	movpl	r2, #1
   d67e6:	601a      	strpl	r2, [r3, #0]
   d67e8:	4b18      	ldr	r3, [pc, #96]	; (d684c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d67ea:	681a      	ldr	r2, [r3, #0]
   d67ec:	07d0      	lsls	r0, r2, #31
   d67ee:	bf5c      	itt	pl
   d67f0:	2201      	movpl	r2, #1
   d67f2:	601a      	strpl	r2, [r3, #0]
   d67f4:	4b16      	ldr	r3, [pc, #88]	; (d6850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d67f6:	681a      	ldr	r2, [r3, #0]
   d67f8:	07d1      	lsls	r1, r2, #31
   d67fa:	bf5c      	itt	pl
   d67fc:	2201      	movpl	r2, #1
   d67fe:	601a      	strpl	r2, [r3, #0]
   d6800:	4b14      	ldr	r3, [pc, #80]	; (d6854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6802:	681a      	ldr	r2, [r3, #0]
   d6804:	07d2      	lsls	r2, r2, #31
   d6806:	bf5c      	itt	pl
   d6808:	2201      	movpl	r2, #1
   d680a:	601a      	strpl	r2, [r3, #0]
   d680c:	4b12      	ldr	r3, [pc, #72]	; (d6858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d680e:	681a      	ldr	r2, [r3, #0]
   d6810:	07d0      	lsls	r0, r2, #31
   d6812:	bf5c      	itt	pl
   d6814:	2201      	movpl	r2, #1
   d6816:	601a      	strpl	r2, [r3, #0]
   d6818:	4b10      	ldr	r3, [pc, #64]	; (d685c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d681a:	681a      	ldr	r2, [r3, #0]
   d681c:	07d1      	lsls	r1, r2, #31
   d681e:	bf5c      	itt	pl
   d6820:	2201      	movpl	r2, #1
   d6822:	601a      	strpl	r2, [r3, #0]
   d6824:	4b0e      	ldr	r3, [pc, #56]	; (d6860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6826:	681a      	ldr	r2, [r3, #0]
   d6828:	07d2      	lsls	r2, r2, #31
   d682a:	bf5c      	itt	pl
   d682c:	2201      	movpl	r2, #1
   d682e:	601a      	strpl	r2, [r3, #0]
   d6830:	4770      	bx	lr
   d6832:	bf00      	nop
   d6834:	2003e7d0 	.word	0x2003e7d0
   d6838:	2003e7cc 	.word	0x2003e7cc
   d683c:	2003e7c8 	.word	0x2003e7c8
   d6840:	2003e7c4 	.word	0x2003e7c4
   d6844:	2003e7c0 	.word	0x2003e7c0
   d6848:	2003e7bc 	.word	0x2003e7bc
   d684c:	2003e7b8 	.word	0x2003e7b8
   d6850:	2003e7b4 	.word	0x2003e7b4
   d6854:	2003e7b0 	.word	0x2003e7b0
   d6858:	2003e7ac 	.word	0x2003e7ac
   d685c:	2003e7a8 	.word	0x2003e7a8
   d6860:	2003e7a4 	.word	0x2003e7a4

000d6864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6864:	4b18      	ldr	r3, [pc, #96]	; (d68c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6866:	681a      	ldr	r2, [r3, #0]
   d6868:	07d1      	lsls	r1, r2, #31
   d686a:	bf5c      	itt	pl
   d686c:	2201      	movpl	r2, #1
   d686e:	601a      	strpl	r2, [r3, #0]
   d6870:	4b16      	ldr	r3, [pc, #88]	; (d68cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6872:	681a      	ldr	r2, [r3, #0]
   d6874:	07d2      	lsls	r2, r2, #31
   d6876:	bf5c      	itt	pl
   d6878:	2201      	movpl	r2, #1
   d687a:	601a      	strpl	r2, [r3, #0]
   d687c:	4b14      	ldr	r3, [pc, #80]	; (d68d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d687e:	681a      	ldr	r2, [r3, #0]
   d6880:	07d0      	lsls	r0, r2, #31
   d6882:	bf5c      	itt	pl
   d6884:	2201      	movpl	r2, #1
   d6886:	601a      	strpl	r2, [r3, #0]
   d6888:	4b12      	ldr	r3, [pc, #72]	; (d68d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d688a:	681a      	ldr	r2, [r3, #0]
   d688c:	07d1      	lsls	r1, r2, #31
   d688e:	bf5c      	itt	pl
   d6890:	2201      	movpl	r2, #1
   d6892:	601a      	strpl	r2, [r3, #0]
   d6894:	4b10      	ldr	r3, [pc, #64]	; (d68d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6896:	681a      	ldr	r2, [r3, #0]
   d6898:	07d2      	lsls	r2, r2, #31
   d689a:	bf5c      	itt	pl
   d689c:	2201      	movpl	r2, #1
   d689e:	601a      	strpl	r2, [r3, #0]
   d68a0:	4b0e      	ldr	r3, [pc, #56]	; (d68dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d68a2:	681a      	ldr	r2, [r3, #0]
   d68a4:	07d0      	lsls	r0, r2, #31
   d68a6:	bf5c      	itt	pl
   d68a8:	2201      	movpl	r2, #1
   d68aa:	601a      	strpl	r2, [r3, #0]
   d68ac:	4b0c      	ldr	r3, [pc, #48]	; (d68e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d68ae:	681a      	ldr	r2, [r3, #0]
   d68b0:	07d1      	lsls	r1, r2, #31
   d68b2:	bf5c      	itt	pl
   d68b4:	2201      	movpl	r2, #1
   d68b6:	601a      	strpl	r2, [r3, #0]
   d68b8:	4b0a      	ldr	r3, [pc, #40]	; (d68e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d68ba:	681a      	ldr	r2, [r3, #0]
   d68bc:	07d2      	lsls	r2, r2, #31
   d68be:	bf5c      	itt	pl
   d68c0:	2201      	movpl	r2, #1
   d68c2:	601a      	strpl	r2, [r3, #0]
   d68c4:	4770      	bx	lr
   d68c6:	bf00      	nop
   d68c8:	2003e7f0 	.word	0x2003e7f0
   d68cc:	2003e7ec 	.word	0x2003e7ec
   d68d0:	2003e7e8 	.word	0x2003e7e8
   d68d4:	2003e7e4 	.word	0x2003e7e4
   d68d8:	2003e7e0 	.word	0x2003e7e0
   d68dc:	2003e7dc 	.word	0x2003e7dc
   d68e0:	2003e7d8 	.word	0x2003e7d8
   d68e4:	2003e7d4 	.word	0x2003e7d4

000d68e8 <sqrt>:
   d68e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d68ec:	ed2d 8b02 	vpush	{d8}
   d68f0:	b08b      	sub	sp, #44	; 0x2c
   d68f2:	ec55 4b10 	vmov	r4, r5, d0
   d68f6:	f000 f857 	bl	d69a8 <__ieee754_sqrt>
   d68fa:	4b29      	ldr	r3, [pc, #164]	; (d69a0 <sqrt+0xb8>)
   d68fc:	eeb0 8a40 	vmov.f32	s16, s0
   d6900:	eef0 8a60 	vmov.f32	s17, s1
   d6904:	f993 6000 	ldrsb.w	r6, [r3]
   d6908:	1c73      	adds	r3, r6, #1
   d690a:	d012      	beq.n	d6932 <sqrt+0x4a>
   d690c:	4622      	mov	r2, r4
   d690e:	462b      	mov	r3, r5
   d6910:	4620      	mov	r0, r4
   d6912:	4629      	mov	r1, r5
   d6914:	f000 fd6c 	bl	d73f0 <__aeabi_dcmpun>
   d6918:	4607      	mov	r7, r0
   d691a:	b950      	cbnz	r0, d6932 <sqrt+0x4a>
   d691c:	f04f 0800 	mov.w	r8, #0
   d6920:	f04f 0900 	mov.w	r9, #0
   d6924:	4620      	mov	r0, r4
   d6926:	4629      	mov	r1, r5
   d6928:	4642      	mov	r2, r8
   d692a:	464b      	mov	r3, r9
   d692c:	f000 fd38 	bl	d73a0 <__aeabi_dcmplt>
   d6930:	b940      	cbnz	r0, d6944 <sqrt+0x5c>
   d6932:	eeb0 0a48 	vmov.f32	s0, s16
   d6936:	eef0 0a68 	vmov.f32	s1, s17
   d693a:	b00b      	add	sp, #44	; 0x2c
   d693c:	ecbd 8b02 	vpop	{d8}
   d6940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6944:	4b17      	ldr	r3, [pc, #92]	; (d69a4 <sqrt+0xbc>)
   d6946:	9708      	str	r7, [sp, #32]
   d6948:	2201      	movs	r2, #1
   d694a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d694e:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d6952:	e88d 000c 	stmia.w	sp, {r2, r3}
   d6956:	b1b6      	cbz	r6, d6986 <sqrt+0x9e>
   d6958:	4642      	mov	r2, r8
   d695a:	464b      	mov	r3, r9
   d695c:	4640      	mov	r0, r8
   d695e:	4649      	mov	r1, r9
   d6960:	f000 fbd6 	bl	d7110 <__aeabi_ddiv>
   d6964:	2e02      	cmp	r6, #2
   d6966:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d696a:	d10e      	bne.n	d698a <sqrt+0xa2>
   d696c:	f7fe f9ee 	bl	d4d4c <__errno>
   d6970:	2321      	movs	r3, #33	; 0x21
   d6972:	6003      	str	r3, [r0, #0]
   d6974:	9b08      	ldr	r3, [sp, #32]
   d6976:	b973      	cbnz	r3, d6996 <sqrt+0xae>
   d6978:	ed9d 0b06 	vldr	d0, [sp, #24]
   d697c:	b00b      	add	sp, #44	; 0x2c
   d697e:	ecbd 8b02 	vpop	{d8}
   d6982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6986:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d698a:	4668      	mov	r0, sp
   d698c:	f000 f8dc 	bl	d6b48 <matherr>
   d6990:	2800      	cmp	r0, #0
   d6992:	d1ef      	bne.n	d6974 <sqrt+0x8c>
   d6994:	e7ea      	b.n	d696c <sqrt+0x84>
   d6996:	f7fe f9d9 	bl	d4d4c <__errno>
   d699a:	9b08      	ldr	r3, [sp, #32]
   d699c:	6003      	str	r3, [r0, #0]
   d699e:	e7eb      	b.n	d6978 <sqrt+0x90>
   d69a0:	2003e150 	.word	0x2003e150
   d69a4:	000d7db0 	.word	0x000d7db0

000d69a8 <__ieee754_sqrt>:
   d69a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d69ac:	4965      	ldr	r1, [pc, #404]	; (d6b44 <__ieee754_sqrt+0x19c>)
   d69ae:	ec55 4b10 	vmov	r4, r5, d0
   d69b2:	460e      	mov	r6, r1
   d69b4:	4029      	ands	r1, r5
   d69b6:	42b1      	cmp	r1, r6
   d69b8:	f000 8097 	beq.w	d6aea <__ieee754_sqrt+0x142>
   d69bc:	2d00      	cmp	r5, #0
   d69be:	462b      	mov	r3, r5
   d69c0:	ee10 2a10 	vmov	r2, s0
   d69c4:	dd74      	ble.n	d6ab0 <__ieee754_sqrt+0x108>
   d69c6:	152f      	asrs	r7, r5, #20
   d69c8:	d07f      	beq.n	d6aca <__ieee754_sqrt+0x122>
   d69ca:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d69ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d69d2:	07f9      	lsls	r1, r7, #31
   d69d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d69d8:	d465      	bmi.n	d6aa6 <__ieee754_sqrt+0xfe>
   d69da:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d69de:	2600      	movs	r6, #0
   d69e0:	440b      	add	r3, r1
   d69e2:	107f      	asrs	r7, r7, #1
   d69e4:	0052      	lsls	r2, r2, #1
   d69e6:	46b6      	mov	lr, r6
   d69e8:	2016      	movs	r0, #22
   d69ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d69ee:	eb0e 0401 	add.w	r4, lr, r1
   d69f2:	429c      	cmp	r4, r3
   d69f4:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d69f8:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d69fc:	dc03      	bgt.n	d6a06 <__ieee754_sqrt+0x5e>
   d69fe:	1b1b      	subs	r3, r3, r4
   d6a00:	eb04 0e01 	add.w	lr, r4, r1
   d6a04:	440e      	add	r6, r1
   d6a06:	3801      	subs	r0, #1
   d6a08:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d6a0c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d6a10:	d1ed      	bne.n	d69ee <__ieee754_sqrt+0x46>
   d6a12:	4684      	mov	ip, r0
   d6a14:	2420      	movs	r4, #32
   d6a16:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d6a1a:	e009      	b.n	d6a30 <__ieee754_sqrt+0x88>
   d6a1c:	d020      	beq.n	d6a60 <__ieee754_sqrt+0xb8>
   d6a1e:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d6a22:	3c01      	subs	r4, #1
   d6a24:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d6a28:	442b      	add	r3, r5
   d6a2a:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d6a2e:	d020      	beq.n	d6a72 <__ieee754_sqrt+0xca>
   d6a30:	459e      	cmp	lr, r3
   d6a32:	eb01 050c 	add.w	r5, r1, ip
   d6a36:	daf1      	bge.n	d6a1c <__ieee754_sqrt+0x74>
   d6a38:	2d00      	cmp	r5, #0
   d6a3a:	eb05 0c01 	add.w	ip, r5, r1
   d6a3e:	db09      	blt.n	d6a54 <__ieee754_sqrt+0xac>
   d6a40:	46f0      	mov	r8, lr
   d6a42:	4295      	cmp	r5, r2
   d6a44:	ebce 0303 	rsb	r3, lr, r3
   d6a48:	d900      	bls.n	d6a4c <__ieee754_sqrt+0xa4>
   d6a4a:	3b01      	subs	r3, #1
   d6a4c:	1b52      	subs	r2, r2, r5
   d6a4e:	4408      	add	r0, r1
   d6a50:	46c6      	mov	lr, r8
   d6a52:	e7e4      	b.n	d6a1e <__ieee754_sqrt+0x76>
   d6a54:	f1bc 0f00 	cmp.w	ip, #0
   d6a58:	dbf2      	blt.n	d6a40 <__ieee754_sqrt+0x98>
   d6a5a:	f10e 0801 	add.w	r8, lr, #1
   d6a5e:	e7f0      	b.n	d6a42 <__ieee754_sqrt+0x9a>
   d6a60:	4295      	cmp	r5, r2
   d6a62:	d81e      	bhi.n	d6aa2 <__ieee754_sqrt+0xfa>
   d6a64:	2d00      	cmp	r5, #0
   d6a66:	eb05 0c01 	add.w	ip, r5, r1
   d6a6a:	db50      	blt.n	d6b0e <__ieee754_sqrt+0x166>
   d6a6c:	4698      	mov	r8, r3
   d6a6e:	2300      	movs	r3, #0
   d6a70:	e7ec      	b.n	d6a4c <__ieee754_sqrt+0xa4>
   d6a72:	4313      	orrs	r3, r2
   d6a74:	d004      	beq.n	d6a80 <__ieee754_sqrt+0xd8>
   d6a76:	1c42      	adds	r2, r0, #1
   d6a78:	d04d      	beq.n	d6b16 <__ieee754_sqrt+0x16e>
   d6a7a:	f000 0301 	and.w	r3, r0, #1
   d6a7e:	4418      	add	r0, r3
   d6a80:	0840      	lsrs	r0, r0, #1
   d6a82:	1071      	asrs	r1, r6, #1
   d6a84:	07f3      	lsls	r3, r6, #31
   d6a86:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d6a8a:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d6a8e:	bf48      	it	mi
   d6a90:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d6a94:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d6a98:	4602      	mov	r2, r0
   d6a9a:	ec43 2b10 	vmov	d0, r2, r3
   d6a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6aa2:	4673      	mov	r3, lr
   d6aa4:	e7bb      	b.n	d6a1e <__ieee754_sqrt+0x76>
   d6aa6:	005b      	lsls	r3, r3, #1
   d6aa8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d6aac:	0052      	lsls	r2, r2, #1
   d6aae:	e794      	b.n	d69da <__ieee754_sqrt+0x32>
   d6ab0:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d6ab4:	4321      	orrs	r1, r4
   d6ab6:	d028      	beq.n	d6b0a <__ieee754_sqrt+0x162>
   d6ab8:	bbad      	cbnz	r5, d6b26 <__ieee754_sqrt+0x17e>
   d6aba:	462f      	mov	r7, r5
   d6abc:	0ad3      	lsrs	r3, r2, #11
   d6abe:	3f15      	subs	r7, #21
   d6ac0:	0552      	lsls	r2, r2, #21
   d6ac2:	2b00      	cmp	r3, #0
   d6ac4:	d0fa      	beq.n	d6abc <__ieee754_sqrt+0x114>
   d6ac6:	02dd      	lsls	r5, r3, #11
   d6ac8:	d428      	bmi.n	d6b1c <__ieee754_sqrt+0x174>
   d6aca:	2100      	movs	r1, #0
   d6acc:	e000      	b.n	d6ad0 <__ieee754_sqrt+0x128>
   d6ace:	4601      	mov	r1, r0
   d6ad0:	005b      	lsls	r3, r3, #1
   d6ad2:	02dc      	lsls	r4, r3, #11
   d6ad4:	f101 0001 	add.w	r0, r1, #1
   d6ad8:	d5f9      	bpl.n	d6ace <__ieee754_sqrt+0x126>
   d6ada:	f1c0 0420 	rsb	r4, r0, #32
   d6ade:	fa22 f404 	lsr.w	r4, r2, r4
   d6ae2:	4323      	orrs	r3, r4
   d6ae4:	1a7f      	subs	r7, r7, r1
   d6ae6:	4082      	lsls	r2, r0
   d6ae8:	e76f      	b.n	d69ca <__ieee754_sqrt+0x22>
   d6aea:	ee10 2a10 	vmov	r2, s0
   d6aee:	462b      	mov	r3, r5
   d6af0:	ee10 0a10 	vmov	r0, s0
   d6af4:	4629      	mov	r1, r5
   d6af6:	f000 f9e1 	bl	d6ebc <__aeabi_dmul>
   d6afa:	4622      	mov	r2, r4
   d6afc:	462b      	mov	r3, r5
   d6afe:	f000 f82b 	bl	d6b58 <__adddf3>
   d6b02:	ec41 0b10 	vmov	d0, r0, r1
   d6b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6b0e:	f1bc 0f00 	cmp.w	ip, #0
   d6b12:	daa2      	bge.n	d6a5a <__ieee754_sqrt+0xb2>
   d6b14:	e7aa      	b.n	d6a6c <__ieee754_sqrt+0xc4>
   d6b16:	3601      	adds	r6, #1
   d6b18:	4620      	mov	r0, r4
   d6b1a:	e7b2      	b.n	d6a82 <__ieee754_sqrt+0xda>
   d6b1c:	2420      	movs	r4, #32
   d6b1e:	f04f 31ff 	mov.w	r1, #4294967295
   d6b22:	2000      	movs	r0, #0
   d6b24:	e7db      	b.n	d6ade <__ieee754_sqrt+0x136>
   d6b26:	ee10 2a10 	vmov	r2, s0
   d6b2a:	462b      	mov	r3, r5
   d6b2c:	4620      	mov	r0, r4
   d6b2e:	4629      	mov	r1, r5
   d6b30:	f000 f810 	bl	d6b54 <__aeabi_dsub>
   d6b34:	4602      	mov	r2, r0
   d6b36:	460b      	mov	r3, r1
   d6b38:	f000 faea 	bl	d7110 <__aeabi_ddiv>
   d6b3c:	ec41 0b10 	vmov	d0, r0, r1
   d6b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6b44:	7ff00000 	.word	0x7ff00000

000d6b48 <matherr>:
   d6b48:	2000      	movs	r0, #0
   d6b4a:	4770      	bx	lr

000d6b4c <__aeabi_drsub>:
   d6b4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6b50:	e002      	b.n	d6b58 <__adddf3>
   d6b52:	bf00      	nop

000d6b54 <__aeabi_dsub>:
   d6b54:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6b58 <__adddf3>:
   d6b58:	b530      	push	{r4, r5, lr}
   d6b5a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6b5e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6b62:	ea94 0f05 	teq	r4, r5
   d6b66:	bf08      	it	eq
   d6b68:	ea90 0f02 	teqeq	r0, r2
   d6b6c:	bf1f      	itttt	ne
   d6b6e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6b72:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6b76:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6b7a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6b7e:	f000 80e2 	beq.w	d6d46 <__adddf3+0x1ee>
   d6b82:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6b86:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6b8a:	bfb8      	it	lt
   d6b8c:	426d      	neglt	r5, r5
   d6b8e:	dd0c      	ble.n	d6baa <__adddf3+0x52>
   d6b90:	442c      	add	r4, r5
   d6b92:	ea80 0202 	eor.w	r2, r0, r2
   d6b96:	ea81 0303 	eor.w	r3, r1, r3
   d6b9a:	ea82 0000 	eor.w	r0, r2, r0
   d6b9e:	ea83 0101 	eor.w	r1, r3, r1
   d6ba2:	ea80 0202 	eor.w	r2, r0, r2
   d6ba6:	ea81 0303 	eor.w	r3, r1, r3
   d6baa:	2d36      	cmp	r5, #54	; 0x36
   d6bac:	bf88      	it	hi
   d6bae:	bd30      	pophi	{r4, r5, pc}
   d6bb0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6bb4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6bb8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6bbc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6bc0:	d002      	beq.n	d6bc8 <__adddf3+0x70>
   d6bc2:	4240      	negs	r0, r0
   d6bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6bc8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6bcc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6bd0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6bd4:	d002      	beq.n	d6bdc <__adddf3+0x84>
   d6bd6:	4252      	negs	r2, r2
   d6bd8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6bdc:	ea94 0f05 	teq	r4, r5
   d6be0:	f000 80a7 	beq.w	d6d32 <__adddf3+0x1da>
   d6be4:	f1a4 0401 	sub.w	r4, r4, #1
   d6be8:	f1d5 0e20 	rsbs	lr, r5, #32
   d6bec:	db0d      	blt.n	d6c0a <__adddf3+0xb2>
   d6bee:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6bf2:	fa22 f205 	lsr.w	r2, r2, r5
   d6bf6:	1880      	adds	r0, r0, r2
   d6bf8:	f141 0100 	adc.w	r1, r1, #0
   d6bfc:	fa03 f20e 	lsl.w	r2, r3, lr
   d6c00:	1880      	adds	r0, r0, r2
   d6c02:	fa43 f305 	asr.w	r3, r3, r5
   d6c06:	4159      	adcs	r1, r3
   d6c08:	e00e      	b.n	d6c28 <__adddf3+0xd0>
   d6c0a:	f1a5 0520 	sub.w	r5, r5, #32
   d6c0e:	f10e 0e20 	add.w	lr, lr, #32
   d6c12:	2a01      	cmp	r2, #1
   d6c14:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6c18:	bf28      	it	cs
   d6c1a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6c1e:	fa43 f305 	asr.w	r3, r3, r5
   d6c22:	18c0      	adds	r0, r0, r3
   d6c24:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6c28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6c2c:	d507      	bpl.n	d6c3e <__adddf3+0xe6>
   d6c2e:	f04f 0e00 	mov.w	lr, #0
   d6c32:	f1dc 0c00 	rsbs	ip, ip, #0
   d6c36:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6c3a:	eb6e 0101 	sbc.w	r1, lr, r1
   d6c3e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6c42:	d31b      	bcc.n	d6c7c <__adddf3+0x124>
   d6c44:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6c48:	d30c      	bcc.n	d6c64 <__adddf3+0x10c>
   d6c4a:	0849      	lsrs	r1, r1, #1
   d6c4c:	ea5f 0030 	movs.w	r0, r0, rrx
   d6c50:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6c54:	f104 0401 	add.w	r4, r4, #1
   d6c58:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6c5c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6c60:	f080 809a 	bcs.w	d6d98 <__adddf3+0x240>
   d6c64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6c68:	bf08      	it	eq
   d6c6a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6c6e:	f150 0000 	adcs.w	r0, r0, #0
   d6c72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6c76:	ea41 0105 	orr.w	r1, r1, r5
   d6c7a:	bd30      	pop	{r4, r5, pc}
   d6c7c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6c80:	4140      	adcs	r0, r0
   d6c82:	eb41 0101 	adc.w	r1, r1, r1
   d6c86:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6c8a:	f1a4 0401 	sub.w	r4, r4, #1
   d6c8e:	d1e9      	bne.n	d6c64 <__adddf3+0x10c>
   d6c90:	f091 0f00 	teq	r1, #0
   d6c94:	bf04      	itt	eq
   d6c96:	4601      	moveq	r1, r0
   d6c98:	2000      	moveq	r0, #0
   d6c9a:	fab1 f381 	clz	r3, r1
   d6c9e:	bf08      	it	eq
   d6ca0:	3320      	addeq	r3, #32
   d6ca2:	f1a3 030b 	sub.w	r3, r3, #11
   d6ca6:	f1b3 0220 	subs.w	r2, r3, #32
   d6caa:	da0c      	bge.n	d6cc6 <__adddf3+0x16e>
   d6cac:	320c      	adds	r2, #12
   d6cae:	dd08      	ble.n	d6cc2 <__adddf3+0x16a>
   d6cb0:	f102 0c14 	add.w	ip, r2, #20
   d6cb4:	f1c2 020c 	rsb	r2, r2, #12
   d6cb8:	fa01 f00c 	lsl.w	r0, r1, ip
   d6cbc:	fa21 f102 	lsr.w	r1, r1, r2
   d6cc0:	e00c      	b.n	d6cdc <__adddf3+0x184>
   d6cc2:	f102 0214 	add.w	r2, r2, #20
   d6cc6:	bfd8      	it	le
   d6cc8:	f1c2 0c20 	rsble	ip, r2, #32
   d6ccc:	fa01 f102 	lsl.w	r1, r1, r2
   d6cd0:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6cd4:	bfdc      	itt	le
   d6cd6:	ea41 010c 	orrle.w	r1, r1, ip
   d6cda:	4090      	lslle	r0, r2
   d6cdc:	1ae4      	subs	r4, r4, r3
   d6cde:	bfa2      	ittt	ge
   d6ce0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6ce4:	4329      	orrge	r1, r5
   d6ce6:	bd30      	popge	{r4, r5, pc}
   d6ce8:	ea6f 0404 	mvn.w	r4, r4
   d6cec:	3c1f      	subs	r4, #31
   d6cee:	da1c      	bge.n	d6d2a <__adddf3+0x1d2>
   d6cf0:	340c      	adds	r4, #12
   d6cf2:	dc0e      	bgt.n	d6d12 <__adddf3+0x1ba>
   d6cf4:	f104 0414 	add.w	r4, r4, #20
   d6cf8:	f1c4 0220 	rsb	r2, r4, #32
   d6cfc:	fa20 f004 	lsr.w	r0, r0, r4
   d6d00:	fa01 f302 	lsl.w	r3, r1, r2
   d6d04:	ea40 0003 	orr.w	r0, r0, r3
   d6d08:	fa21 f304 	lsr.w	r3, r1, r4
   d6d0c:	ea45 0103 	orr.w	r1, r5, r3
   d6d10:	bd30      	pop	{r4, r5, pc}
   d6d12:	f1c4 040c 	rsb	r4, r4, #12
   d6d16:	f1c4 0220 	rsb	r2, r4, #32
   d6d1a:	fa20 f002 	lsr.w	r0, r0, r2
   d6d1e:	fa01 f304 	lsl.w	r3, r1, r4
   d6d22:	ea40 0003 	orr.w	r0, r0, r3
   d6d26:	4629      	mov	r1, r5
   d6d28:	bd30      	pop	{r4, r5, pc}
   d6d2a:	fa21 f004 	lsr.w	r0, r1, r4
   d6d2e:	4629      	mov	r1, r5
   d6d30:	bd30      	pop	{r4, r5, pc}
   d6d32:	f094 0f00 	teq	r4, #0
   d6d36:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6d3a:	bf06      	itte	eq
   d6d3c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6d40:	3401      	addeq	r4, #1
   d6d42:	3d01      	subne	r5, #1
   d6d44:	e74e      	b.n	d6be4 <__adddf3+0x8c>
   d6d46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6d4a:	bf18      	it	ne
   d6d4c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6d50:	d029      	beq.n	d6da6 <__adddf3+0x24e>
   d6d52:	ea94 0f05 	teq	r4, r5
   d6d56:	bf08      	it	eq
   d6d58:	ea90 0f02 	teqeq	r0, r2
   d6d5c:	d005      	beq.n	d6d6a <__adddf3+0x212>
   d6d5e:	ea54 0c00 	orrs.w	ip, r4, r0
   d6d62:	bf04      	itt	eq
   d6d64:	4619      	moveq	r1, r3
   d6d66:	4610      	moveq	r0, r2
   d6d68:	bd30      	pop	{r4, r5, pc}
   d6d6a:	ea91 0f03 	teq	r1, r3
   d6d6e:	bf1e      	ittt	ne
   d6d70:	2100      	movne	r1, #0
   d6d72:	2000      	movne	r0, #0
   d6d74:	bd30      	popne	{r4, r5, pc}
   d6d76:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6d7a:	d105      	bne.n	d6d88 <__adddf3+0x230>
   d6d7c:	0040      	lsls	r0, r0, #1
   d6d7e:	4149      	adcs	r1, r1
   d6d80:	bf28      	it	cs
   d6d82:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6d86:	bd30      	pop	{r4, r5, pc}
   d6d88:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6d8c:	bf3c      	itt	cc
   d6d8e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6d92:	bd30      	popcc	{r4, r5, pc}
   d6d94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6d98:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6d9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6da0:	f04f 0000 	mov.w	r0, #0
   d6da4:	bd30      	pop	{r4, r5, pc}
   d6da6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6daa:	bf1a      	itte	ne
   d6dac:	4619      	movne	r1, r3
   d6dae:	4610      	movne	r0, r2
   d6db0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6db4:	bf1c      	itt	ne
   d6db6:	460b      	movne	r3, r1
   d6db8:	4602      	movne	r2, r0
   d6dba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6dbe:	bf06      	itte	eq
   d6dc0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6dc4:	ea91 0f03 	teqeq	r1, r3
   d6dc8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6dcc:	bd30      	pop	{r4, r5, pc}
   d6dce:	bf00      	nop

000d6dd0 <__aeabi_ui2d>:
   d6dd0:	f090 0f00 	teq	r0, #0
   d6dd4:	bf04      	itt	eq
   d6dd6:	2100      	moveq	r1, #0
   d6dd8:	4770      	bxeq	lr
   d6dda:	b530      	push	{r4, r5, lr}
   d6ddc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6de0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6de4:	f04f 0500 	mov.w	r5, #0
   d6de8:	f04f 0100 	mov.w	r1, #0
   d6dec:	e750      	b.n	d6c90 <__adddf3+0x138>
   d6dee:	bf00      	nop

000d6df0 <__aeabi_i2d>:
   d6df0:	f090 0f00 	teq	r0, #0
   d6df4:	bf04      	itt	eq
   d6df6:	2100      	moveq	r1, #0
   d6df8:	4770      	bxeq	lr
   d6dfa:	b530      	push	{r4, r5, lr}
   d6dfc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6e00:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6e04:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6e08:	bf48      	it	mi
   d6e0a:	4240      	negmi	r0, r0
   d6e0c:	f04f 0100 	mov.w	r1, #0
   d6e10:	e73e      	b.n	d6c90 <__adddf3+0x138>
   d6e12:	bf00      	nop

000d6e14 <__aeabi_f2d>:
   d6e14:	0042      	lsls	r2, r0, #1
   d6e16:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6e1a:	ea4f 0131 	mov.w	r1, r1, rrx
   d6e1e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6e22:	bf1f      	itttt	ne
   d6e24:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6e28:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6e2c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6e30:	4770      	bxne	lr
   d6e32:	f092 0f00 	teq	r2, #0
   d6e36:	bf14      	ite	ne
   d6e38:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6e3c:	4770      	bxeq	lr
   d6e3e:	b530      	push	{r4, r5, lr}
   d6e40:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6e44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6e48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6e4c:	e720      	b.n	d6c90 <__adddf3+0x138>
   d6e4e:	bf00      	nop

000d6e50 <__aeabi_ul2d>:
   d6e50:	ea50 0201 	orrs.w	r2, r0, r1
   d6e54:	bf08      	it	eq
   d6e56:	4770      	bxeq	lr
   d6e58:	b530      	push	{r4, r5, lr}
   d6e5a:	f04f 0500 	mov.w	r5, #0
   d6e5e:	e00a      	b.n	d6e76 <__aeabi_l2d+0x16>

000d6e60 <__aeabi_l2d>:
   d6e60:	ea50 0201 	orrs.w	r2, r0, r1
   d6e64:	bf08      	it	eq
   d6e66:	4770      	bxeq	lr
   d6e68:	b530      	push	{r4, r5, lr}
   d6e6a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6e6e:	d502      	bpl.n	d6e76 <__aeabi_l2d+0x16>
   d6e70:	4240      	negs	r0, r0
   d6e72:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6e76:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6e7a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6e7e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6e82:	f43f aedc 	beq.w	d6c3e <__adddf3+0xe6>
   d6e86:	f04f 0203 	mov.w	r2, #3
   d6e8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6e8e:	bf18      	it	ne
   d6e90:	3203      	addne	r2, #3
   d6e92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6e96:	bf18      	it	ne
   d6e98:	3203      	addne	r2, #3
   d6e9a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6e9e:	f1c2 0320 	rsb	r3, r2, #32
   d6ea2:	fa00 fc03 	lsl.w	ip, r0, r3
   d6ea6:	fa20 f002 	lsr.w	r0, r0, r2
   d6eaa:	fa01 fe03 	lsl.w	lr, r1, r3
   d6eae:	ea40 000e 	orr.w	r0, r0, lr
   d6eb2:	fa21 f102 	lsr.w	r1, r1, r2
   d6eb6:	4414      	add	r4, r2
   d6eb8:	e6c1      	b.n	d6c3e <__adddf3+0xe6>
   d6eba:	bf00      	nop

000d6ebc <__aeabi_dmul>:
   d6ebc:	b570      	push	{r4, r5, r6, lr}
   d6ebe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6ec2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6ec6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6eca:	bf1d      	ittte	ne
   d6ecc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6ed0:	ea94 0f0c 	teqne	r4, ip
   d6ed4:	ea95 0f0c 	teqne	r5, ip
   d6ed8:	f000 f8de 	bleq	d7098 <__aeabi_dmul+0x1dc>
   d6edc:	442c      	add	r4, r5
   d6ede:	ea81 0603 	eor.w	r6, r1, r3
   d6ee2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6ee6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6eea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6eee:	bf18      	it	ne
   d6ef0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6ef4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6ef8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6efc:	d038      	beq.n	d6f70 <__aeabi_dmul+0xb4>
   d6efe:	fba0 ce02 	umull	ip, lr, r0, r2
   d6f02:	f04f 0500 	mov.w	r5, #0
   d6f06:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6f0a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6f0e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6f12:	f04f 0600 	mov.w	r6, #0
   d6f16:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6f1a:	f09c 0f00 	teq	ip, #0
   d6f1e:	bf18      	it	ne
   d6f20:	f04e 0e01 	orrne.w	lr, lr, #1
   d6f24:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6f28:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6f2c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6f30:	d204      	bcs.n	d6f3c <__aeabi_dmul+0x80>
   d6f32:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6f36:	416d      	adcs	r5, r5
   d6f38:	eb46 0606 	adc.w	r6, r6, r6
   d6f3c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6f40:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6f44:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6f48:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6f4c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6f50:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6f54:	bf88      	it	hi
   d6f56:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6f5a:	d81e      	bhi.n	d6f9a <__aeabi_dmul+0xde>
   d6f5c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6f60:	bf08      	it	eq
   d6f62:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6f66:	f150 0000 	adcs.w	r0, r0, #0
   d6f6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6f6e:	bd70      	pop	{r4, r5, r6, pc}
   d6f70:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6f74:	ea46 0101 	orr.w	r1, r6, r1
   d6f78:	ea40 0002 	orr.w	r0, r0, r2
   d6f7c:	ea81 0103 	eor.w	r1, r1, r3
   d6f80:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6f84:	bfc2      	ittt	gt
   d6f86:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6f8a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6f8e:	bd70      	popgt	{r4, r5, r6, pc}
   d6f90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6f94:	f04f 0e00 	mov.w	lr, #0
   d6f98:	3c01      	subs	r4, #1
   d6f9a:	f300 80ab 	bgt.w	d70f4 <__aeabi_dmul+0x238>
   d6f9e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6fa2:	bfde      	ittt	le
   d6fa4:	2000      	movle	r0, #0
   d6fa6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6faa:	bd70      	pople	{r4, r5, r6, pc}
   d6fac:	f1c4 0400 	rsb	r4, r4, #0
   d6fb0:	3c20      	subs	r4, #32
   d6fb2:	da35      	bge.n	d7020 <__aeabi_dmul+0x164>
   d6fb4:	340c      	adds	r4, #12
   d6fb6:	dc1b      	bgt.n	d6ff0 <__aeabi_dmul+0x134>
   d6fb8:	f104 0414 	add.w	r4, r4, #20
   d6fbc:	f1c4 0520 	rsb	r5, r4, #32
   d6fc0:	fa00 f305 	lsl.w	r3, r0, r5
   d6fc4:	fa20 f004 	lsr.w	r0, r0, r4
   d6fc8:	fa01 f205 	lsl.w	r2, r1, r5
   d6fcc:	ea40 0002 	orr.w	r0, r0, r2
   d6fd0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6fd4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6fd8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6fdc:	fa21 f604 	lsr.w	r6, r1, r4
   d6fe0:	eb42 0106 	adc.w	r1, r2, r6
   d6fe4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6fe8:	bf08      	it	eq
   d6fea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6fee:	bd70      	pop	{r4, r5, r6, pc}
   d6ff0:	f1c4 040c 	rsb	r4, r4, #12
   d6ff4:	f1c4 0520 	rsb	r5, r4, #32
   d6ff8:	fa00 f304 	lsl.w	r3, r0, r4
   d6ffc:	fa20 f005 	lsr.w	r0, r0, r5
   d7000:	fa01 f204 	lsl.w	r2, r1, r4
   d7004:	ea40 0002 	orr.w	r0, r0, r2
   d7008:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d700c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7010:	f141 0100 	adc.w	r1, r1, #0
   d7014:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7018:	bf08      	it	eq
   d701a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d701e:	bd70      	pop	{r4, r5, r6, pc}
   d7020:	f1c4 0520 	rsb	r5, r4, #32
   d7024:	fa00 f205 	lsl.w	r2, r0, r5
   d7028:	ea4e 0e02 	orr.w	lr, lr, r2
   d702c:	fa20 f304 	lsr.w	r3, r0, r4
   d7030:	fa01 f205 	lsl.w	r2, r1, r5
   d7034:	ea43 0302 	orr.w	r3, r3, r2
   d7038:	fa21 f004 	lsr.w	r0, r1, r4
   d703c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7040:	fa21 f204 	lsr.w	r2, r1, r4
   d7044:	ea20 0002 	bic.w	r0, r0, r2
   d7048:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d704c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7050:	bf08      	it	eq
   d7052:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7056:	bd70      	pop	{r4, r5, r6, pc}
   d7058:	f094 0f00 	teq	r4, #0
   d705c:	d10f      	bne.n	d707e <__aeabi_dmul+0x1c2>
   d705e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7062:	0040      	lsls	r0, r0, #1
   d7064:	eb41 0101 	adc.w	r1, r1, r1
   d7068:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d706c:	bf08      	it	eq
   d706e:	3c01      	subeq	r4, #1
   d7070:	d0f7      	beq.n	d7062 <__aeabi_dmul+0x1a6>
   d7072:	ea41 0106 	orr.w	r1, r1, r6
   d7076:	f095 0f00 	teq	r5, #0
   d707a:	bf18      	it	ne
   d707c:	4770      	bxne	lr
   d707e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7082:	0052      	lsls	r2, r2, #1
   d7084:	eb43 0303 	adc.w	r3, r3, r3
   d7088:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d708c:	bf08      	it	eq
   d708e:	3d01      	subeq	r5, #1
   d7090:	d0f7      	beq.n	d7082 <__aeabi_dmul+0x1c6>
   d7092:	ea43 0306 	orr.w	r3, r3, r6
   d7096:	4770      	bx	lr
   d7098:	ea94 0f0c 	teq	r4, ip
   d709c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d70a0:	bf18      	it	ne
   d70a2:	ea95 0f0c 	teqne	r5, ip
   d70a6:	d00c      	beq.n	d70c2 <__aeabi_dmul+0x206>
   d70a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d70ac:	bf18      	it	ne
   d70ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d70b2:	d1d1      	bne.n	d7058 <__aeabi_dmul+0x19c>
   d70b4:	ea81 0103 	eor.w	r1, r1, r3
   d70b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d70bc:	f04f 0000 	mov.w	r0, #0
   d70c0:	bd70      	pop	{r4, r5, r6, pc}
   d70c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d70c6:	bf06      	itte	eq
   d70c8:	4610      	moveq	r0, r2
   d70ca:	4619      	moveq	r1, r3
   d70cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d70d0:	d019      	beq.n	d7106 <__aeabi_dmul+0x24a>
   d70d2:	ea94 0f0c 	teq	r4, ip
   d70d6:	d102      	bne.n	d70de <__aeabi_dmul+0x222>
   d70d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d70dc:	d113      	bne.n	d7106 <__aeabi_dmul+0x24a>
   d70de:	ea95 0f0c 	teq	r5, ip
   d70e2:	d105      	bne.n	d70f0 <__aeabi_dmul+0x234>
   d70e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d70e8:	bf1c      	itt	ne
   d70ea:	4610      	movne	r0, r2
   d70ec:	4619      	movne	r1, r3
   d70ee:	d10a      	bne.n	d7106 <__aeabi_dmul+0x24a>
   d70f0:	ea81 0103 	eor.w	r1, r1, r3
   d70f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d70f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d70fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7100:	f04f 0000 	mov.w	r0, #0
   d7104:	bd70      	pop	{r4, r5, r6, pc}
   d7106:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d710a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d710e:	bd70      	pop	{r4, r5, r6, pc}

000d7110 <__aeabi_ddiv>:
   d7110:	b570      	push	{r4, r5, r6, lr}
   d7112:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7116:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d711a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d711e:	bf1d      	ittte	ne
   d7120:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7124:	ea94 0f0c 	teqne	r4, ip
   d7128:	ea95 0f0c 	teqne	r5, ip
   d712c:	f000 f8a7 	bleq	d727e <__aeabi_ddiv+0x16e>
   d7130:	eba4 0405 	sub.w	r4, r4, r5
   d7134:	ea81 0e03 	eor.w	lr, r1, r3
   d7138:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d713c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7140:	f000 8088 	beq.w	d7254 <__aeabi_ddiv+0x144>
   d7144:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7148:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d714c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7150:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7154:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7158:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d715c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7160:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7164:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7168:	429d      	cmp	r5, r3
   d716a:	bf08      	it	eq
   d716c:	4296      	cmpeq	r6, r2
   d716e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7172:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7176:	d202      	bcs.n	d717e <__aeabi_ddiv+0x6e>
   d7178:	085b      	lsrs	r3, r3, #1
   d717a:	ea4f 0232 	mov.w	r2, r2, rrx
   d717e:	1ab6      	subs	r6, r6, r2
   d7180:	eb65 0503 	sbc.w	r5, r5, r3
   d7184:	085b      	lsrs	r3, r3, #1
   d7186:	ea4f 0232 	mov.w	r2, r2, rrx
   d718a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d718e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7192:	ebb6 0e02 	subs.w	lr, r6, r2
   d7196:	eb75 0e03 	sbcs.w	lr, r5, r3
   d719a:	bf22      	ittt	cs
   d719c:	1ab6      	subcs	r6, r6, r2
   d719e:	4675      	movcs	r5, lr
   d71a0:	ea40 000c 	orrcs.w	r0, r0, ip
   d71a4:	085b      	lsrs	r3, r3, #1
   d71a6:	ea4f 0232 	mov.w	r2, r2, rrx
   d71aa:	ebb6 0e02 	subs.w	lr, r6, r2
   d71ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   d71b2:	bf22      	ittt	cs
   d71b4:	1ab6      	subcs	r6, r6, r2
   d71b6:	4675      	movcs	r5, lr
   d71b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d71bc:	085b      	lsrs	r3, r3, #1
   d71be:	ea4f 0232 	mov.w	r2, r2, rrx
   d71c2:	ebb6 0e02 	subs.w	lr, r6, r2
   d71c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d71ca:	bf22      	ittt	cs
   d71cc:	1ab6      	subcs	r6, r6, r2
   d71ce:	4675      	movcs	r5, lr
   d71d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d71d4:	085b      	lsrs	r3, r3, #1
   d71d6:	ea4f 0232 	mov.w	r2, r2, rrx
   d71da:	ebb6 0e02 	subs.w	lr, r6, r2
   d71de:	eb75 0e03 	sbcs.w	lr, r5, r3
   d71e2:	bf22      	ittt	cs
   d71e4:	1ab6      	subcs	r6, r6, r2
   d71e6:	4675      	movcs	r5, lr
   d71e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d71ec:	ea55 0e06 	orrs.w	lr, r5, r6
   d71f0:	d018      	beq.n	d7224 <__aeabi_ddiv+0x114>
   d71f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d71f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d71fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d71fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7202:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7206:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d720a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d720e:	d1c0      	bne.n	d7192 <__aeabi_ddiv+0x82>
   d7210:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7214:	d10b      	bne.n	d722e <__aeabi_ddiv+0x11e>
   d7216:	ea41 0100 	orr.w	r1, r1, r0
   d721a:	f04f 0000 	mov.w	r0, #0
   d721e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7222:	e7b6      	b.n	d7192 <__aeabi_ddiv+0x82>
   d7224:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7228:	bf04      	itt	eq
   d722a:	4301      	orreq	r1, r0
   d722c:	2000      	moveq	r0, #0
   d722e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7232:	bf88      	it	hi
   d7234:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7238:	f63f aeaf 	bhi.w	d6f9a <__aeabi_dmul+0xde>
   d723c:	ebb5 0c03 	subs.w	ip, r5, r3
   d7240:	bf04      	itt	eq
   d7242:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7246:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d724a:	f150 0000 	adcs.w	r0, r0, #0
   d724e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7252:	bd70      	pop	{r4, r5, r6, pc}
   d7254:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7258:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d725c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7260:	bfc2      	ittt	gt
   d7262:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7266:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d726a:	bd70      	popgt	{r4, r5, r6, pc}
   d726c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7270:	f04f 0e00 	mov.w	lr, #0
   d7274:	3c01      	subs	r4, #1
   d7276:	e690      	b.n	d6f9a <__aeabi_dmul+0xde>
   d7278:	ea45 0e06 	orr.w	lr, r5, r6
   d727c:	e68d      	b.n	d6f9a <__aeabi_dmul+0xde>
   d727e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7282:	ea94 0f0c 	teq	r4, ip
   d7286:	bf08      	it	eq
   d7288:	ea95 0f0c 	teqeq	r5, ip
   d728c:	f43f af3b 	beq.w	d7106 <__aeabi_dmul+0x24a>
   d7290:	ea94 0f0c 	teq	r4, ip
   d7294:	d10a      	bne.n	d72ac <__aeabi_ddiv+0x19c>
   d7296:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d729a:	f47f af34 	bne.w	d7106 <__aeabi_dmul+0x24a>
   d729e:	ea95 0f0c 	teq	r5, ip
   d72a2:	f47f af25 	bne.w	d70f0 <__aeabi_dmul+0x234>
   d72a6:	4610      	mov	r0, r2
   d72a8:	4619      	mov	r1, r3
   d72aa:	e72c      	b.n	d7106 <__aeabi_dmul+0x24a>
   d72ac:	ea95 0f0c 	teq	r5, ip
   d72b0:	d106      	bne.n	d72c0 <__aeabi_ddiv+0x1b0>
   d72b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d72b6:	f43f aefd 	beq.w	d70b4 <__aeabi_dmul+0x1f8>
   d72ba:	4610      	mov	r0, r2
   d72bc:	4619      	mov	r1, r3
   d72be:	e722      	b.n	d7106 <__aeabi_dmul+0x24a>
   d72c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d72c4:	bf18      	it	ne
   d72c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d72ca:	f47f aec5 	bne.w	d7058 <__aeabi_dmul+0x19c>
   d72ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d72d2:	f47f af0d 	bne.w	d70f0 <__aeabi_dmul+0x234>
   d72d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d72da:	f47f aeeb 	bne.w	d70b4 <__aeabi_dmul+0x1f8>
   d72de:	e712      	b.n	d7106 <__aeabi_dmul+0x24a>

000d72e0 <__gedf2>:
   d72e0:	f04f 3cff 	mov.w	ip, #4294967295
   d72e4:	e006      	b.n	d72f4 <__cmpdf2+0x4>
   d72e6:	bf00      	nop

000d72e8 <__ledf2>:
   d72e8:	f04f 0c01 	mov.w	ip, #1
   d72ec:	e002      	b.n	d72f4 <__cmpdf2+0x4>
   d72ee:	bf00      	nop

000d72f0 <__cmpdf2>:
   d72f0:	f04f 0c01 	mov.w	ip, #1
   d72f4:	f84d cd04 	str.w	ip, [sp, #-4]!
   d72f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d72fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7300:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7304:	bf18      	it	ne
   d7306:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d730a:	d01b      	beq.n	d7344 <__cmpdf2+0x54>
   d730c:	b001      	add	sp, #4
   d730e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7312:	bf0c      	ite	eq
   d7314:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d7318:	ea91 0f03 	teqne	r1, r3
   d731c:	bf02      	ittt	eq
   d731e:	ea90 0f02 	teqeq	r0, r2
   d7322:	2000      	moveq	r0, #0
   d7324:	4770      	bxeq	lr
   d7326:	f110 0f00 	cmn.w	r0, #0
   d732a:	ea91 0f03 	teq	r1, r3
   d732e:	bf58      	it	pl
   d7330:	4299      	cmppl	r1, r3
   d7332:	bf08      	it	eq
   d7334:	4290      	cmpeq	r0, r2
   d7336:	bf2c      	ite	cs
   d7338:	17d8      	asrcs	r0, r3, #31
   d733a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d733e:	f040 0001 	orr.w	r0, r0, #1
   d7342:	4770      	bx	lr
   d7344:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7348:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d734c:	d102      	bne.n	d7354 <__cmpdf2+0x64>
   d734e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7352:	d107      	bne.n	d7364 <__cmpdf2+0x74>
   d7354:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7358:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d735c:	d1d6      	bne.n	d730c <__cmpdf2+0x1c>
   d735e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7362:	d0d3      	beq.n	d730c <__cmpdf2+0x1c>
   d7364:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7368:	4770      	bx	lr
   d736a:	bf00      	nop

000d736c <__aeabi_cdrcmple>:
   d736c:	4684      	mov	ip, r0
   d736e:	4610      	mov	r0, r2
   d7370:	4662      	mov	r2, ip
   d7372:	468c      	mov	ip, r1
   d7374:	4619      	mov	r1, r3
   d7376:	4663      	mov	r3, ip
   d7378:	e000      	b.n	d737c <__aeabi_cdcmpeq>
   d737a:	bf00      	nop

000d737c <__aeabi_cdcmpeq>:
   d737c:	b501      	push	{r0, lr}
   d737e:	f7ff ffb7 	bl	d72f0 <__cmpdf2>
   d7382:	2800      	cmp	r0, #0
   d7384:	bf48      	it	mi
   d7386:	f110 0f00 	cmnmi.w	r0, #0
   d738a:	bd01      	pop	{r0, pc}

000d738c <__aeabi_dcmpeq>:
   d738c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7390:	f7ff fff4 	bl	d737c <__aeabi_cdcmpeq>
   d7394:	bf0c      	ite	eq
   d7396:	2001      	moveq	r0, #1
   d7398:	2000      	movne	r0, #0
   d739a:	f85d fb08 	ldr.w	pc, [sp], #8
   d739e:	bf00      	nop

000d73a0 <__aeabi_dcmplt>:
   d73a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d73a4:	f7ff ffea 	bl	d737c <__aeabi_cdcmpeq>
   d73a8:	bf34      	ite	cc
   d73aa:	2001      	movcc	r0, #1
   d73ac:	2000      	movcs	r0, #0
   d73ae:	f85d fb08 	ldr.w	pc, [sp], #8
   d73b2:	bf00      	nop

000d73b4 <__aeabi_dcmple>:
   d73b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d73b8:	f7ff ffe0 	bl	d737c <__aeabi_cdcmpeq>
   d73bc:	bf94      	ite	ls
   d73be:	2001      	movls	r0, #1
   d73c0:	2000      	movhi	r0, #0
   d73c2:	f85d fb08 	ldr.w	pc, [sp], #8
   d73c6:	bf00      	nop

000d73c8 <__aeabi_dcmpge>:
   d73c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d73cc:	f7ff ffce 	bl	d736c <__aeabi_cdrcmple>
   d73d0:	bf94      	ite	ls
   d73d2:	2001      	movls	r0, #1
   d73d4:	2000      	movhi	r0, #0
   d73d6:	f85d fb08 	ldr.w	pc, [sp], #8
   d73da:	bf00      	nop

000d73dc <__aeabi_dcmpgt>:
   d73dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d73e0:	f7ff ffc4 	bl	d736c <__aeabi_cdrcmple>
   d73e4:	bf34      	ite	cc
   d73e6:	2001      	movcc	r0, #1
   d73e8:	2000      	movcs	r0, #0
   d73ea:	f85d fb08 	ldr.w	pc, [sp], #8
   d73ee:	bf00      	nop

000d73f0 <__aeabi_dcmpun>:
   d73f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d73f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d73f8:	d102      	bne.n	d7400 <__aeabi_dcmpun+0x10>
   d73fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d73fe:	d10a      	bne.n	d7416 <__aeabi_dcmpun+0x26>
   d7400:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7404:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7408:	d102      	bne.n	d7410 <__aeabi_dcmpun+0x20>
   d740a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d740e:	d102      	bne.n	d7416 <__aeabi_dcmpun+0x26>
   d7410:	f04f 0000 	mov.w	r0, #0
   d7414:	4770      	bx	lr
   d7416:	f04f 0001 	mov.w	r0, #1
   d741a:	4770      	bx	lr

000d741c <__aeabi_d2uiz>:
   d741c:	004a      	lsls	r2, r1, #1
   d741e:	d211      	bcs.n	d7444 <__aeabi_d2uiz+0x28>
   d7420:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7424:	d211      	bcs.n	d744a <__aeabi_d2uiz+0x2e>
   d7426:	d50d      	bpl.n	d7444 <__aeabi_d2uiz+0x28>
   d7428:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d742c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7430:	d40e      	bmi.n	d7450 <__aeabi_d2uiz+0x34>
   d7432:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7436:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d743a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d743e:	fa23 f002 	lsr.w	r0, r3, r2
   d7442:	4770      	bx	lr
   d7444:	f04f 0000 	mov.w	r0, #0
   d7448:	4770      	bx	lr
   d744a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d744e:	d102      	bne.n	d7456 <__aeabi_d2uiz+0x3a>
   d7450:	f04f 30ff 	mov.w	r0, #4294967295
   d7454:	4770      	bx	lr
   d7456:	f04f 0000 	mov.w	r0, #0
   d745a:	4770      	bx	lr

000d745c <__aeabi_uldivmod>:
   d745c:	b953      	cbnz	r3, d7474 <__aeabi_uldivmod+0x18>
   d745e:	b94a      	cbnz	r2, d7474 <__aeabi_uldivmod+0x18>
   d7460:	2900      	cmp	r1, #0
   d7462:	bf08      	it	eq
   d7464:	2800      	cmpeq	r0, #0
   d7466:	bf1c      	itt	ne
   d7468:	f04f 31ff 	movne.w	r1, #4294967295
   d746c:	f04f 30ff 	movne.w	r0, #4294967295
   d7470:	f000 b9a2 	b.w	d77b8 <__aeabi_idiv0>
   d7474:	f1ad 0c08 	sub.w	ip, sp, #8
   d7478:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d747c:	f000 f82a 	bl	d74d4 <__udivmoddi4>
   d7480:	f8dd e004 	ldr.w	lr, [sp, #4]
   d7484:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7488:	b004      	add	sp, #16
   d748a:	4770      	bx	lr

000d748c <__aeabi_d2ulz>:
   d748c:	b5d0      	push	{r4, r6, r7, lr}
   d748e:	2200      	movs	r2, #0
   d7490:	4b0e      	ldr	r3, [pc, #56]	; (d74cc <__aeabi_d2ulz+0x40>)
   d7492:	4606      	mov	r6, r0
   d7494:	460f      	mov	r7, r1
   d7496:	f7ff fd11 	bl	d6ebc <__aeabi_dmul>
   d749a:	f7ff ffbf 	bl	d741c <__aeabi_d2uiz>
   d749e:	4604      	mov	r4, r0
   d74a0:	f7ff fc96 	bl	d6dd0 <__aeabi_ui2d>
   d74a4:	2200      	movs	r2, #0
   d74a6:	4b0a      	ldr	r3, [pc, #40]	; (d74d0 <__aeabi_d2ulz+0x44>)
   d74a8:	f7ff fd08 	bl	d6ebc <__aeabi_dmul>
   d74ac:	4602      	mov	r2, r0
   d74ae:	460b      	mov	r3, r1
   d74b0:	4630      	mov	r0, r6
   d74b2:	4639      	mov	r1, r7
   d74b4:	f7ff fb4e 	bl	d6b54 <__aeabi_dsub>
   d74b8:	f7ff ffb0 	bl	d741c <__aeabi_d2uiz>
   d74bc:	4623      	mov	r3, r4
   d74be:	2200      	movs	r2, #0
   d74c0:	ea42 0200 	orr.w	r2, r2, r0
   d74c4:	4610      	mov	r0, r2
   d74c6:	4619      	mov	r1, r3
   d74c8:	bdd0      	pop	{r4, r6, r7, pc}
   d74ca:	bf00      	nop
   d74cc:	3df00000 	.word	0x3df00000
   d74d0:	41f00000 	.word	0x41f00000

000d74d4 <__udivmoddi4>:
   d74d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d74d8:	468c      	mov	ip, r1
   d74da:	460e      	mov	r6, r1
   d74dc:	4604      	mov	r4, r0
   d74de:	9d08      	ldr	r5, [sp, #32]
   d74e0:	2b00      	cmp	r3, #0
   d74e2:	d150      	bne.n	d7586 <__udivmoddi4+0xb2>
   d74e4:	428a      	cmp	r2, r1
   d74e6:	4617      	mov	r7, r2
   d74e8:	d96c      	bls.n	d75c4 <__udivmoddi4+0xf0>
   d74ea:	fab2 fe82 	clz	lr, r2
   d74ee:	f1be 0f00 	cmp.w	lr, #0
   d74f2:	d00b      	beq.n	d750c <__udivmoddi4+0x38>
   d74f4:	f1ce 0420 	rsb	r4, lr, #32
   d74f8:	fa20 f404 	lsr.w	r4, r0, r4
   d74fc:	fa01 f60e 	lsl.w	r6, r1, lr
   d7500:	ea44 0c06 	orr.w	ip, r4, r6
   d7504:	fa02 f70e 	lsl.w	r7, r2, lr
   d7508:	fa00 f40e 	lsl.w	r4, r0, lr
   d750c:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d7510:	0c22      	lsrs	r2, r4, #16
   d7512:	fbbc f0f9 	udiv	r0, ip, r9
   d7516:	fa1f f887 	uxth.w	r8, r7
   d751a:	fb09 c610 	mls	r6, r9, r0, ip
   d751e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d7522:	fb00 f308 	mul.w	r3, r0, r8
   d7526:	42b3      	cmp	r3, r6
   d7528:	d909      	bls.n	d753e <__udivmoddi4+0x6a>
   d752a:	19f6      	adds	r6, r6, r7
   d752c:	f100 32ff 	add.w	r2, r0, #4294967295
   d7530:	f080 8122 	bcs.w	d7778 <__udivmoddi4+0x2a4>
   d7534:	42b3      	cmp	r3, r6
   d7536:	f240 811f 	bls.w	d7778 <__udivmoddi4+0x2a4>
   d753a:	3802      	subs	r0, #2
   d753c:	443e      	add	r6, r7
   d753e:	1af6      	subs	r6, r6, r3
   d7540:	b2a2      	uxth	r2, r4
   d7542:	fbb6 f3f9 	udiv	r3, r6, r9
   d7546:	fb09 6613 	mls	r6, r9, r3, r6
   d754a:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d754e:	fb03 f808 	mul.w	r8, r3, r8
   d7552:	45a0      	cmp	r8, r4
   d7554:	d909      	bls.n	d756a <__udivmoddi4+0x96>
   d7556:	19e4      	adds	r4, r4, r7
   d7558:	f103 32ff 	add.w	r2, r3, #4294967295
   d755c:	f080 810a 	bcs.w	d7774 <__udivmoddi4+0x2a0>
   d7560:	45a0      	cmp	r8, r4
   d7562:	f240 8107 	bls.w	d7774 <__udivmoddi4+0x2a0>
   d7566:	3b02      	subs	r3, #2
   d7568:	443c      	add	r4, r7
   d756a:	ebc8 0404 	rsb	r4, r8, r4
   d756e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d7572:	2100      	movs	r1, #0
   d7574:	2d00      	cmp	r5, #0
   d7576:	d062      	beq.n	d763e <__udivmoddi4+0x16a>
   d7578:	fa24 f40e 	lsr.w	r4, r4, lr
   d757c:	2300      	movs	r3, #0
   d757e:	602c      	str	r4, [r5, #0]
   d7580:	606b      	str	r3, [r5, #4]
   d7582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7586:	428b      	cmp	r3, r1
   d7588:	d907      	bls.n	d759a <__udivmoddi4+0xc6>
   d758a:	2d00      	cmp	r5, #0
   d758c:	d055      	beq.n	d763a <__udivmoddi4+0x166>
   d758e:	2100      	movs	r1, #0
   d7590:	e885 0041 	stmia.w	r5, {r0, r6}
   d7594:	4608      	mov	r0, r1
   d7596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d759a:	fab3 f183 	clz	r1, r3
   d759e:	2900      	cmp	r1, #0
   d75a0:	f040 8090 	bne.w	d76c4 <__udivmoddi4+0x1f0>
   d75a4:	42b3      	cmp	r3, r6
   d75a6:	d302      	bcc.n	d75ae <__udivmoddi4+0xda>
   d75a8:	4282      	cmp	r2, r0
   d75aa:	f200 80f8 	bhi.w	d779e <__udivmoddi4+0x2ca>
   d75ae:	1a84      	subs	r4, r0, r2
   d75b0:	eb66 0603 	sbc.w	r6, r6, r3
   d75b4:	2001      	movs	r0, #1
   d75b6:	46b4      	mov	ip, r6
   d75b8:	2d00      	cmp	r5, #0
   d75ba:	d040      	beq.n	d763e <__udivmoddi4+0x16a>
   d75bc:	e885 1010 	stmia.w	r5, {r4, ip}
   d75c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d75c4:	b912      	cbnz	r2, d75cc <__udivmoddi4+0xf8>
   d75c6:	2701      	movs	r7, #1
   d75c8:	fbb7 f7f2 	udiv	r7, r7, r2
   d75cc:	fab7 fe87 	clz	lr, r7
   d75d0:	f1be 0f00 	cmp.w	lr, #0
   d75d4:	d135      	bne.n	d7642 <__udivmoddi4+0x16e>
   d75d6:	1bf3      	subs	r3, r6, r7
   d75d8:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d75dc:	fa1f fc87 	uxth.w	ip, r7
   d75e0:	2101      	movs	r1, #1
   d75e2:	fbb3 f0f8 	udiv	r0, r3, r8
   d75e6:	0c22      	lsrs	r2, r4, #16
   d75e8:	fb08 3610 	mls	r6, r8, r0, r3
   d75ec:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d75f0:	fb0c f300 	mul.w	r3, ip, r0
   d75f4:	42b3      	cmp	r3, r6
   d75f6:	d907      	bls.n	d7608 <__udivmoddi4+0x134>
   d75f8:	19f6      	adds	r6, r6, r7
   d75fa:	f100 32ff 	add.w	r2, r0, #4294967295
   d75fe:	d202      	bcs.n	d7606 <__udivmoddi4+0x132>
   d7600:	42b3      	cmp	r3, r6
   d7602:	f200 80ce 	bhi.w	d77a2 <__udivmoddi4+0x2ce>
   d7606:	4610      	mov	r0, r2
   d7608:	1af6      	subs	r6, r6, r3
   d760a:	b2a2      	uxth	r2, r4
   d760c:	fbb6 f3f8 	udiv	r3, r6, r8
   d7610:	fb08 6613 	mls	r6, r8, r3, r6
   d7614:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d7618:	fb0c fc03 	mul.w	ip, ip, r3
   d761c:	45a4      	cmp	ip, r4
   d761e:	d907      	bls.n	d7630 <__udivmoddi4+0x15c>
   d7620:	19e4      	adds	r4, r4, r7
   d7622:	f103 32ff 	add.w	r2, r3, #4294967295
   d7626:	d202      	bcs.n	d762e <__udivmoddi4+0x15a>
   d7628:	45a4      	cmp	ip, r4
   d762a:	f200 80b5 	bhi.w	d7798 <__udivmoddi4+0x2c4>
   d762e:	4613      	mov	r3, r2
   d7630:	ebcc 0404 	rsb	r4, ip, r4
   d7634:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d7638:	e79c      	b.n	d7574 <__udivmoddi4+0xa0>
   d763a:	4629      	mov	r1, r5
   d763c:	4628      	mov	r0, r5
   d763e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7642:	f1ce 0120 	rsb	r1, lr, #32
   d7646:	fa06 f30e 	lsl.w	r3, r6, lr
   d764a:	fa07 f70e 	lsl.w	r7, r7, lr
   d764e:	fa20 f901 	lsr.w	r9, r0, r1
   d7652:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d7656:	40ce      	lsrs	r6, r1
   d7658:	ea49 0903 	orr.w	r9, r9, r3
   d765c:	fbb6 faf8 	udiv	sl, r6, r8
   d7660:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d7664:	fb08 661a 	mls	r6, r8, sl, r6
   d7668:	fa1f fc87 	uxth.w	ip, r7
   d766c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d7670:	fb0a f20c 	mul.w	r2, sl, ip
   d7674:	429a      	cmp	r2, r3
   d7676:	fa00 f40e 	lsl.w	r4, r0, lr
   d767a:	d90a      	bls.n	d7692 <__udivmoddi4+0x1be>
   d767c:	19db      	adds	r3, r3, r7
   d767e:	f10a 31ff 	add.w	r1, sl, #4294967295
   d7682:	f080 8087 	bcs.w	d7794 <__udivmoddi4+0x2c0>
   d7686:	429a      	cmp	r2, r3
   d7688:	f240 8084 	bls.w	d7794 <__udivmoddi4+0x2c0>
   d768c:	f1aa 0a02 	sub.w	sl, sl, #2
   d7690:	443b      	add	r3, r7
   d7692:	1a9b      	subs	r3, r3, r2
   d7694:	fa1f f989 	uxth.w	r9, r9
   d7698:	fbb3 f1f8 	udiv	r1, r3, r8
   d769c:	fb08 3311 	mls	r3, r8, r1, r3
   d76a0:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d76a4:	fb01 f60c 	mul.w	r6, r1, ip
   d76a8:	429e      	cmp	r6, r3
   d76aa:	d907      	bls.n	d76bc <__udivmoddi4+0x1e8>
   d76ac:	19db      	adds	r3, r3, r7
   d76ae:	f101 32ff 	add.w	r2, r1, #4294967295
   d76b2:	d26b      	bcs.n	d778c <__udivmoddi4+0x2b8>
   d76b4:	429e      	cmp	r6, r3
   d76b6:	d969      	bls.n	d778c <__udivmoddi4+0x2b8>
   d76b8:	3902      	subs	r1, #2
   d76ba:	443b      	add	r3, r7
   d76bc:	1b9b      	subs	r3, r3, r6
   d76be:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d76c2:	e78e      	b.n	d75e2 <__udivmoddi4+0x10e>
   d76c4:	f1c1 0e20 	rsb	lr, r1, #32
   d76c8:	fa22 f40e 	lsr.w	r4, r2, lr
   d76cc:	408b      	lsls	r3, r1
   d76ce:	4323      	orrs	r3, r4
   d76d0:	fa20 f70e 	lsr.w	r7, r0, lr
   d76d4:	fa06 f401 	lsl.w	r4, r6, r1
   d76d8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d76dc:	fa26 f60e 	lsr.w	r6, r6, lr
   d76e0:	433c      	orrs	r4, r7
   d76e2:	fbb6 f9fc 	udiv	r9, r6, ip
   d76e6:	0c27      	lsrs	r7, r4, #16
   d76e8:	fb0c 6619 	mls	r6, ip, r9, r6
   d76ec:	fa1f f883 	uxth.w	r8, r3
   d76f0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d76f4:	fb09 f708 	mul.w	r7, r9, r8
   d76f8:	42b7      	cmp	r7, r6
   d76fa:	fa02 f201 	lsl.w	r2, r2, r1
   d76fe:	fa00 fa01 	lsl.w	sl, r0, r1
   d7702:	d908      	bls.n	d7716 <__udivmoddi4+0x242>
   d7704:	18f6      	adds	r6, r6, r3
   d7706:	f109 30ff 	add.w	r0, r9, #4294967295
   d770a:	d241      	bcs.n	d7790 <__udivmoddi4+0x2bc>
   d770c:	42b7      	cmp	r7, r6
   d770e:	d93f      	bls.n	d7790 <__udivmoddi4+0x2bc>
   d7710:	f1a9 0902 	sub.w	r9, r9, #2
   d7714:	441e      	add	r6, r3
   d7716:	1bf6      	subs	r6, r6, r7
   d7718:	b2a0      	uxth	r0, r4
   d771a:	fbb6 f4fc 	udiv	r4, r6, ip
   d771e:	fb0c 6614 	mls	r6, ip, r4, r6
   d7722:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d7726:	fb04 f808 	mul.w	r8, r4, r8
   d772a:	45b8      	cmp	r8, r7
   d772c:	d907      	bls.n	d773e <__udivmoddi4+0x26a>
   d772e:	18ff      	adds	r7, r7, r3
   d7730:	f104 30ff 	add.w	r0, r4, #4294967295
   d7734:	d228      	bcs.n	d7788 <__udivmoddi4+0x2b4>
   d7736:	45b8      	cmp	r8, r7
   d7738:	d926      	bls.n	d7788 <__udivmoddi4+0x2b4>
   d773a:	3c02      	subs	r4, #2
   d773c:	441f      	add	r7, r3
   d773e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d7742:	ebc8 0707 	rsb	r7, r8, r7
   d7746:	fba0 8902 	umull	r8, r9, r0, r2
   d774a:	454f      	cmp	r7, r9
   d774c:	4644      	mov	r4, r8
   d774e:	464e      	mov	r6, r9
   d7750:	d314      	bcc.n	d777c <__udivmoddi4+0x2a8>
   d7752:	d029      	beq.n	d77a8 <__udivmoddi4+0x2d4>
   d7754:	b365      	cbz	r5, d77b0 <__udivmoddi4+0x2dc>
   d7756:	ebba 0304 	subs.w	r3, sl, r4
   d775a:	eb67 0706 	sbc.w	r7, r7, r6
   d775e:	fa07 fe0e 	lsl.w	lr, r7, lr
   d7762:	40cb      	lsrs	r3, r1
   d7764:	40cf      	lsrs	r7, r1
   d7766:	ea4e 0303 	orr.w	r3, lr, r3
   d776a:	e885 0088 	stmia.w	r5, {r3, r7}
   d776e:	2100      	movs	r1, #0
   d7770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7774:	4613      	mov	r3, r2
   d7776:	e6f8      	b.n	d756a <__udivmoddi4+0x96>
   d7778:	4610      	mov	r0, r2
   d777a:	e6e0      	b.n	d753e <__udivmoddi4+0x6a>
   d777c:	ebb8 0402 	subs.w	r4, r8, r2
   d7780:	eb69 0603 	sbc.w	r6, r9, r3
   d7784:	3801      	subs	r0, #1
   d7786:	e7e5      	b.n	d7754 <__udivmoddi4+0x280>
   d7788:	4604      	mov	r4, r0
   d778a:	e7d8      	b.n	d773e <__udivmoddi4+0x26a>
   d778c:	4611      	mov	r1, r2
   d778e:	e795      	b.n	d76bc <__udivmoddi4+0x1e8>
   d7790:	4681      	mov	r9, r0
   d7792:	e7c0      	b.n	d7716 <__udivmoddi4+0x242>
   d7794:	468a      	mov	sl, r1
   d7796:	e77c      	b.n	d7692 <__udivmoddi4+0x1be>
   d7798:	3b02      	subs	r3, #2
   d779a:	443c      	add	r4, r7
   d779c:	e748      	b.n	d7630 <__udivmoddi4+0x15c>
   d779e:	4608      	mov	r0, r1
   d77a0:	e70a      	b.n	d75b8 <__udivmoddi4+0xe4>
   d77a2:	3802      	subs	r0, #2
   d77a4:	443e      	add	r6, r7
   d77a6:	e72f      	b.n	d7608 <__udivmoddi4+0x134>
   d77a8:	45c2      	cmp	sl, r8
   d77aa:	d3e7      	bcc.n	d777c <__udivmoddi4+0x2a8>
   d77ac:	463e      	mov	r6, r7
   d77ae:	e7d1      	b.n	d7754 <__udivmoddi4+0x280>
   d77b0:	4629      	mov	r1, r5
   d77b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d77b6:	bf00      	nop

000d77b8 <__aeabi_idiv0>:
   d77b8:	4770      	bx	lr
   d77ba:	bf00      	nop

000d77bc <atol>:
   d77bc:	220a      	movs	r2, #10
   d77be:	2100      	movs	r1, #0
   d77c0:	f000 b8fc 	b.w	d79bc <strtol>

000d77c4 <__cxa_atexit>:
   d77c4:	b510      	push	{r4, lr}
   d77c6:	4c05      	ldr	r4, [pc, #20]	; (d77dc <__cxa_atexit+0x18>)
   d77c8:	4613      	mov	r3, r2
   d77ca:	b12c      	cbz	r4, d77d8 <__cxa_atexit+0x14>
   d77cc:	460a      	mov	r2, r1
   d77ce:	4601      	mov	r1, r0
   d77d0:	2002      	movs	r0, #2
   d77d2:	f3af 8000 	nop.w
   d77d6:	bd10      	pop	{r4, pc}
   d77d8:	4620      	mov	r0, r4
   d77da:	bd10      	pop	{r4, pc}
   d77dc:	00000000 	.word	0x00000000

000d77e0 <memcpy>:
   d77e0:	b510      	push	{r4, lr}
   d77e2:	1e43      	subs	r3, r0, #1
   d77e4:	440a      	add	r2, r1
   d77e6:	4291      	cmp	r1, r2
   d77e8:	d004      	beq.n	d77f4 <memcpy+0x14>
   d77ea:	f811 4b01 	ldrb.w	r4, [r1], #1
   d77ee:	f803 4f01 	strb.w	r4, [r3, #1]!
   d77f2:	e7f8      	b.n	d77e6 <memcpy+0x6>
   d77f4:	bd10      	pop	{r4, pc}

000d77f6 <memset>:
   d77f6:	4402      	add	r2, r0
   d77f8:	4603      	mov	r3, r0
   d77fa:	4293      	cmp	r3, r2
   d77fc:	d002      	beq.n	d7804 <memset+0xe>
   d77fe:	f803 1b01 	strb.w	r1, [r3], #1
   d7802:	e7fa      	b.n	d77fa <memset+0x4>
   d7804:	4770      	bx	lr
	...

000d7808 <srand>:
   d7808:	b538      	push	{r3, r4, r5, lr}
   d780a:	4b12      	ldr	r3, [pc, #72]	; (d7854 <srand+0x4c>)
   d780c:	681c      	ldr	r4, [r3, #0]
   d780e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7810:	4605      	mov	r5, r0
   d7812:	b9d3      	cbnz	r3, d784a <srand+0x42>
   d7814:	2018      	movs	r0, #24
   d7816:	f7fd fa69 	bl	d4cec <malloc>
   d781a:	f243 330e 	movw	r3, #13070	; 0x330e
   d781e:	63a0      	str	r0, [r4, #56]	; 0x38
   d7820:	8003      	strh	r3, [r0, #0]
   d7822:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7826:	8043      	strh	r3, [r0, #2]
   d7828:	f241 2334 	movw	r3, #4660	; 0x1234
   d782c:	8083      	strh	r3, [r0, #4]
   d782e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7832:	80c3      	strh	r3, [r0, #6]
   d7834:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7838:	8103      	strh	r3, [r0, #8]
   d783a:	2305      	movs	r3, #5
   d783c:	8143      	strh	r3, [r0, #10]
   d783e:	230b      	movs	r3, #11
   d7840:	8183      	strh	r3, [r0, #12]
   d7842:	2201      	movs	r2, #1
   d7844:	2300      	movs	r3, #0
   d7846:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d784a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d784c:	2200      	movs	r2, #0
   d784e:	611d      	str	r5, [r3, #16]
   d7850:	615a      	str	r2, [r3, #20]
   d7852:	bd38      	pop	{r3, r4, r5, pc}
   d7854:	2003e1b8 	.word	0x2003e1b8

000d7858 <strcpy>:
   d7858:	4603      	mov	r3, r0
   d785a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d785e:	f803 2b01 	strb.w	r2, [r3], #1
   d7862:	2a00      	cmp	r2, #0
   d7864:	d1f9      	bne.n	d785a <strcpy+0x2>
   d7866:	4770      	bx	lr

000d7868 <strdup>:
   d7868:	4b02      	ldr	r3, [pc, #8]	; (d7874 <strdup+0xc>)
   d786a:	4601      	mov	r1, r0
   d786c:	6818      	ldr	r0, [r3, #0]
   d786e:	f000 b803 	b.w	d7878 <_strdup_r>
   d7872:	bf00      	nop
   d7874:	2003e1b8 	.word	0x2003e1b8

000d7878 <_strdup_r>:
   d7878:	b570      	push	{r4, r5, r6, lr}
   d787a:	4606      	mov	r6, r0
   d787c:	4608      	mov	r0, r1
   d787e:	460c      	mov	r4, r1
   d7880:	f000 f80d 	bl	d789e <strlen>
   d7884:	1c45      	adds	r5, r0, #1
   d7886:	4629      	mov	r1, r5
   d7888:	4630      	mov	r0, r6
   d788a:	f7fd fa57 	bl	d4d3c <_malloc_r>
   d788e:	4606      	mov	r6, r0
   d7890:	b118      	cbz	r0, d789a <_strdup_r+0x22>
   d7892:	462a      	mov	r2, r5
   d7894:	4621      	mov	r1, r4
   d7896:	f7ff ffa3 	bl	d77e0 <memcpy>
   d789a:	4630      	mov	r0, r6
   d789c:	bd70      	pop	{r4, r5, r6, pc}

000d789e <strlen>:
   d789e:	4603      	mov	r3, r0
   d78a0:	f813 2b01 	ldrb.w	r2, [r3], #1
   d78a4:	2a00      	cmp	r2, #0
   d78a6:	d1fb      	bne.n	d78a0 <strlen+0x2>
   d78a8:	1a18      	subs	r0, r3, r0
   d78aa:	3801      	subs	r0, #1
   d78ac:	4770      	bx	lr
	...

000d78b0 <_strtol_r>:
   d78b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d78b4:	4680      	mov	r8, r0
   d78b6:	4840      	ldr	r0, [pc, #256]	; (d79b8 <_strtol_r+0x108>)
   d78b8:	f8d0 9000 	ldr.w	r9, [r0]
   d78bc:	460f      	mov	r7, r1
   d78be:	463d      	mov	r5, r7
   d78c0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d78c4:	eb09 0004 	add.w	r0, r9, r4
   d78c8:	7840      	ldrb	r0, [r0, #1]
   d78ca:	f000 0008 	and.w	r0, r0, #8
   d78ce:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d78d2:	b108      	cbz	r0, d78d8 <_strtol_r+0x28>
   d78d4:	462f      	mov	r7, r5
   d78d6:	e7f2      	b.n	d78be <_strtol_r+0xe>
   d78d8:	2c2d      	cmp	r4, #45	; 0x2d
   d78da:	d103      	bne.n	d78e4 <_strtol_r+0x34>
   d78dc:	1cbd      	adds	r5, r7, #2
   d78de:	787c      	ldrb	r4, [r7, #1]
   d78e0:	2601      	movs	r6, #1
   d78e2:	e003      	b.n	d78ec <_strtol_r+0x3c>
   d78e4:	2c2b      	cmp	r4, #43	; 0x2b
   d78e6:	bf04      	itt	eq
   d78e8:	787c      	ldrbeq	r4, [r7, #1]
   d78ea:	1cbd      	addeq	r5, r7, #2
   d78ec:	b113      	cbz	r3, d78f4 <_strtol_r+0x44>
   d78ee:	2b10      	cmp	r3, #16
   d78f0:	d10a      	bne.n	d7908 <_strtol_r+0x58>
   d78f2:	e05b      	b.n	d79ac <_strtol_r+0xfc>
   d78f4:	2c30      	cmp	r4, #48	; 0x30
   d78f6:	d157      	bne.n	d79a8 <_strtol_r+0xf8>
   d78f8:	7828      	ldrb	r0, [r5, #0]
   d78fa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d78fe:	2858      	cmp	r0, #88	; 0x58
   d7900:	d14d      	bne.n	d799e <_strtol_r+0xee>
   d7902:	786c      	ldrb	r4, [r5, #1]
   d7904:	2310      	movs	r3, #16
   d7906:	3502      	adds	r5, #2
   d7908:	2e00      	cmp	r6, #0
   d790a:	bf14      	ite	ne
   d790c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d7910:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d7914:	2700      	movs	r7, #0
   d7916:	fbbc faf3 	udiv	sl, ip, r3
   d791a:	4638      	mov	r0, r7
   d791c:	fb03 cc1a 	mls	ip, r3, sl, ip
   d7920:	eb09 0e04 	add.w	lr, r9, r4
   d7924:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7928:	f01e 0f04 	tst.w	lr, #4
   d792c:	d001      	beq.n	d7932 <_strtol_r+0x82>
   d792e:	3c30      	subs	r4, #48	; 0x30
   d7930:	e00b      	b.n	d794a <_strtol_r+0x9a>
   d7932:	f01e 0e03 	ands.w	lr, lr, #3
   d7936:	d01b      	beq.n	d7970 <_strtol_r+0xc0>
   d7938:	f1be 0f01 	cmp.w	lr, #1
   d793c:	bf0c      	ite	eq
   d793e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d7942:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d7946:	ebce 0404 	rsb	r4, lr, r4
   d794a:	42a3      	cmp	r3, r4
   d794c:	dd10      	ble.n	d7970 <_strtol_r+0xc0>
   d794e:	f1b7 3fff 	cmp.w	r7, #4294967295
   d7952:	d00a      	beq.n	d796a <_strtol_r+0xba>
   d7954:	4550      	cmp	r0, sl
   d7956:	d806      	bhi.n	d7966 <_strtol_r+0xb6>
   d7958:	d101      	bne.n	d795e <_strtol_r+0xae>
   d795a:	4564      	cmp	r4, ip
   d795c:	dc03      	bgt.n	d7966 <_strtol_r+0xb6>
   d795e:	fb03 4000 	mla	r0, r3, r0, r4
   d7962:	2701      	movs	r7, #1
   d7964:	e001      	b.n	d796a <_strtol_r+0xba>
   d7966:	f04f 37ff 	mov.w	r7, #4294967295
   d796a:	f815 4b01 	ldrb.w	r4, [r5], #1
   d796e:	e7d7      	b.n	d7920 <_strtol_r+0x70>
   d7970:	1c7b      	adds	r3, r7, #1
   d7972:	d10c      	bne.n	d798e <_strtol_r+0xde>
   d7974:	2e00      	cmp	r6, #0
   d7976:	f04f 0322 	mov.w	r3, #34	; 0x22
   d797a:	bf14      	ite	ne
   d797c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d7980:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7984:	f8c8 3000 	str.w	r3, [r8]
   d7988:	b92a      	cbnz	r2, d7996 <_strtol_r+0xe6>
   d798a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d798e:	b106      	cbz	r6, d7992 <_strtol_r+0xe2>
   d7990:	4240      	negs	r0, r0
   d7992:	b172      	cbz	r2, d79b2 <_strtol_r+0x102>
   d7994:	b107      	cbz	r7, d7998 <_strtol_r+0xe8>
   d7996:	1e69      	subs	r1, r5, #1
   d7998:	6011      	str	r1, [r2, #0]
   d799a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d799e:	2430      	movs	r4, #48	; 0x30
   d79a0:	2b00      	cmp	r3, #0
   d79a2:	d1b1      	bne.n	d7908 <_strtol_r+0x58>
   d79a4:	2308      	movs	r3, #8
   d79a6:	e7af      	b.n	d7908 <_strtol_r+0x58>
   d79a8:	230a      	movs	r3, #10
   d79aa:	e7ad      	b.n	d7908 <_strtol_r+0x58>
   d79ac:	2c30      	cmp	r4, #48	; 0x30
   d79ae:	d0a3      	beq.n	d78f8 <_strtol_r+0x48>
   d79b0:	e7aa      	b.n	d7908 <_strtol_r+0x58>
   d79b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d79b6:	bf00      	nop
   d79b8:	2003e154 	.word	0x2003e154

000d79bc <strtol>:
   d79bc:	4613      	mov	r3, r2
   d79be:	460a      	mov	r2, r1
   d79c0:	4601      	mov	r1, r0
   d79c2:	4802      	ldr	r0, [pc, #8]	; (d79cc <strtol+0x10>)
   d79c4:	6800      	ldr	r0, [r0, #0]
   d79c6:	f7ff bf73 	b.w	d78b0 <_strtol_r>
   d79ca:	bf00      	nop
   d79cc:	2003e1b8 	.word	0x2003e1b8

000d79d0 <dynalib_user>:
   d79d0:	000d4021 000d405d 000d4089 000d408d     !@..]@...@...@..
   d79e0:	00000000 65797244 6c415f72 5f6d7261     ....Dryer_Alarm_
   d79f0:	73655200 445f7465 72657972 67695300     .Reset_Dryer.Sig
   d7a00:	5f6c616e 65727453 6874676e 67695300     nal_Strength.Sig
   d7a10:	5f6c616e 6c617551 00797469 5f706d41     nal_Quality.Amp_
   d7a20:	776f5000 005f7265 65797244 20002072     .Power_.Dryer . 
   d7a30:	41206e69 6d72616c 65522000 00746573     in Alarm. Reset.
   d7a40:	6f6d6552 44206574 72657972 616c4120     Remote Dryer Ala
   d7a50:	00206d72 73655220 53207465 00746e65     rm . Reset Sent.
   d7a60:	72440030 5f726579 72616c41 0400736d              0.Dryer_Alarms.

000d7a6f <_ZL5ALARM>:
   d7a6f:	08060504 02000300                                .....

000d7a74 <_ZL5rPins>:
   d7a74:	00020003 00000001                       ........

000d7a7c <_ZTVN8particle13__SPISettingsE>:
	...
   d7a84:	000d46a1 61666564 20746c75 42534d00     .F..default .MSB
   d7a94:	42534c00 50533c00 74655349 676e6974     .LSB.<SPISetting
   d7aa4:	65642073 6c756166 3c003e74 53495053     s default>.<SPIS
   d7ab4:	69747465 2073676e 6c257325 73252075     ettings %s%lu %s
   d7ac4:	444f4d20 3e642545 00000000               MODE%d>....

000d7ad0 <_ZTVN5spark13EthernetClassE>:
	...
   d7ad8:	000d4dbb 000d4db1 000d4da7 000d4d9d     .M...M...M...M..
   d7ae8:	000d4d91 000d4d85 000d4d79 000d4d71     .M...M..yM..qM..
   d7af8:	000d4d67 000d4d5d 000d63ed              gM..]M...c..

000d7b04 <_ZTV8SPIClass>:
	...
   d7b0c:	000d4dd9 000d4ddb                       .M...M..

000d7b14 <_ZL14clock_divisors>:
   d7b14:	18100800 38302820 64756162 72655300     .... (08baud.Ser
   d7b24:	006c6169 69726553 00316c61 65707974     ial.Serial1.type
   d7b34:	72617000 63006d61 6900646d 6e680064     .param.cmd.id.hn
   d7b44:	74730064 66006d72 00746c69 006c766c     d.strm.filt.lvl.
   d7b54:	48646461 6c646e61 72007265 766f6d65     addHandler.remov
   d7b64:	6e614865 72656c64 756e6500 6e61486d     eHandler.enumHan
   d7b74:	72656c64 534a0073 74534e4f 6d616572     dlers.JSONStream
   d7b84:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   d7b94:	75303130 205d0020 00642500 2800202c     010u .] .%d., .(
   d7ba4:	00203a29 63005b20 2065646f 2500203d     ): . [.code = .%
   d7bb4:	65640069 6c696174 203d2073 000a0d00     i.details = ....
   d7bc4:	6e6c0066 006e6600 65646f63 74656400     f.ln.fn.code.det
   d7bd4:	006c6961 656e6f6e 61727400 69006563     ail.none.trace.i
   d7be4:	006f666e 6e726177 72726500 7000726f     nfo.warn.error.p
   d7bf4:	63696e61 6c6c6100 25005a00 6433302b     anic.all.Z.%+03d
   d7c04:	3230253a 59250075 2d6d252d 25546425     :%02u.%Y-%m-%dT%
   d7c14:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
   d7c24:	00000065                                e...

000d7c28 <_ZTV14CellularSignal>:
	...
   d7c30:	000d55a5 000d5637 000d55a7 000d5679     .U..7V...U..yV..
   d7c40:	000d55ad 000d5645 000d55d9 000d5605     .U..EV...U...V..
   d7c50:	fffffffc 00000000 000d562f              ......../V..

000d7c5c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7c64:	000d5799 000d579f 000d57e3 000d57ad     .W...W...W...W..
   d7c74:	000d579b                                .W..

000d7c78 <_ZTV9IPAddress>:
	...
   d7c80:	000d5d89 000d5d79 000d5d7b              .]..y]..{]..

000d7c8c <_ZTV9USBSerial>:
	...
   d7c94:	000d5e61 000d5eb1 000d5ebf 000d5399     a^...^...^...S..
   d7ca4:	000d5e9d 000d5e63 000d5e79 000d5eab     .^..c^..y^...^..
   d7cb4:	000d5e8f 000d5e5d                       .^..]^..

000d7cbc <_ZTVN5spark13CellularClassE>:
	...
   d7cc4:	000d5fc3 000d5fb9 000d5faf 000d5f65     ._..._..._..e_..
   d7cd4:	000d5fa3 000d5f97 000d5f8b 000d5f83     ._..._..._..._..
   d7ce4:	000d5f79 000d5f6f 000d63ed              y_..o_...c..

000d7cf0 <_ZTV11USARTSerial>:
	...
   d7cf8:	000d6071 000d60c1 000d60cf 000d5399     q`...`...`...S..
   d7d08:	000d6085 000d60a7 000d6093 000d60bb     .`...`...`...`..
   d7d18:	000d6073 000d6077                       s`..w`..

000d7d20 <_ZTV7TwoWire>:
	...
   d7d28:	000d619d 000d61e7 000d61bf 000d619f     .a...a...a...a..
   d7d38:	000d61c7 000d61cf 000d61d7 000d61df     .a...a...a...a..

000d7d48 <_ZTVN5spark9MeshClassE>:
	...
   d7d50:	000d627f 000d6275 000d626b 000d6261     .b..ub..kb..ab..
   d7d60:	000d6255 000d6249 000d623d 000d6235     Ub..Ib..=b..5b..
   d7d70:	000d622b 000d6221 000d63ed              +b..!b...c..

000d7d7c <_ZTVN5spark12NetworkClassE>:
	...
   d7d84:	000d6385 000d638f 000d6399 000d63a3     .c...c...c...c..
   d7d94:	000d63ad 000d63b9 000d63c5 000d63d1     .c...c...c...c..
   d7da4:	000d63d9 000d63e3 000d63ed 74727173     .c...c...c..sqrt
   d7db4:	00000000                                ....

000d7db8 <_ctype_>:
   d7db8:	20202000 20202020 28282020 20282828     .         ((((( 
   d7dc8:	20202020 20202020 20202020 20202020                     
   d7dd8:	10108820 10101010 10101010 10101010      ...............
   d7de8:	04040410 04040404 10040404 10101010     ................
   d7df8:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d7e08:	01010101 01010101 01010101 10101010     ................
   d7e18:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d7e28:	02020202 02020202 02020202 10101010     ................
   d7e38:	00000020 00000000 00000000 00000000      ...............
	...

000d7ebc <__sf_fake_stdin>:
	...

000d7edc <__sf_fake_stdout>:
	...

000d7efc <__sf_fake_stderr>:
	...
   d7f1c:	00000043                                         C.

000d7f1e <link_const_variable_data_end>:
	...

000d7f20 <link_constructors_location>:
   d7f20:	000d457d 	.word	0x000d457d
   d7f24:	000d4791 	.word	0x000d4791
   d7f28:	000d48c1 	.word	0x000d48c1
   d7f2c:	000d4dc5 	.word	0x000d4dc5
   d7f30:	000d4f85 	.word	0x000d4f85
   d7f34:	000d5389 	.word	0x000d5389
   d7f38:	000d5525 	.word	0x000d5525
   d7f3c:	000d5535 	.word	0x000d5535
   d7f40:	000d5589 	.word	0x000d5589
   d7f44:	000d6041 	.word	0x000d6041
   d7f48:	000d6335 	.word	0x000d6335
   d7f4c:	000d64b9 	.word	0x000d64b9
   d7f50:	000d65c1 	.word	0x000d65c1
   d7f54:	000d6659 	.word	0x000d6659
   d7f58:	000d66dd 	.word	0x000d66dd
   d7f5c:	000d67a1 	.word	0x000d67a1
   d7f60:	000d6865 	.word	0x000d6865

000d7f64 <link_constructors_end>:
	...
