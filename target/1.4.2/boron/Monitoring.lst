
c:/Users/erosn/ownCloud/ParticleProjects/Monitoring/target/1.4.2/boron/Monitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003950  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00017a10  2**0
                  CONTENTS
  4 .data         00000070  2003e248  000d7970  0000e248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000538  2003e2b8  2003e2b8  0001e2b8  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000d79e0  000d79e0  000179e0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000d7a0c  000d7a0c  00017a0c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e156e  00000000  00000000  00017a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000123f6  00000000  00000000  000f8f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001f938  00000000  00000000  0010b374  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002850  00000000  00000000  0012acac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004a20  00000000  00000000  0012d4fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00038a39  00000000  00000000  00131f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002d3b3  00000000  00000000  0016a955  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105555  00000000  00000000  00197d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d638  00000000  00000000  0029d260  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 f8cf 	bl	d71d4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 f8d4 	bl	d71ea <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e248 	.word	0x2003e248
   d404c:	000d7970 	.word	0x000d7970
   d4050:	2003e2b8 	.word	0x2003e2b8
   d4054:	2003e2b8 	.word	0x2003e2b8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 fa4b 	bl	d54f8 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d7964 	.word	0x000d7964
   d4084:	000d7920 	.word	0x000d7920

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b836 	b.w	d40f8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f9a7 	bl	d43e0 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 b9fd 	b.w	d5494 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bda7 	b.w	d4bec <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bdad 	b.w	d4bfc <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bdab 	b.w	d4bfc <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <__tcf_0>:
const uint8_t ALARM[alarmCount] = {D4, D5, D6, D8};
int alarmValues[alarmCount] = {0, 0, 0, 0};
byte alarmState[alarmCount] = {0, 0, 0, 0};
double ampValue[ampCount];
double powerValue[ampCount];
String names[alarmCount];
   d40b8:	b510      	push	{r4, lr}
   d40ba:	4c09      	ldr	r4, [pc, #36]	; (d40e0 <__tcf_0+0x28>)
   d40bc:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d40c0:	f000 ff40 	bl	d4f44 <_ZN6StringD1Ev>
   d40c4:	f104 0020 	add.w	r0, r4, #32
   d40c8:	f000 ff3c 	bl	d4f44 <_ZN6StringD1Ev>
   d40cc:	f104 0010 	add.w	r0, r4, #16
   d40d0:	f000 ff38 	bl	d4f44 <_ZN6StringD1Ev>
   d40d4:	4620      	mov	r0, r4
   d40d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d40da:	f000 bf33 	b.w	d4f44 <_ZN6StringD1Ev>
   d40de:	bf00      	nop
   d40e0:	2003e324 	.word	0x2003e324

000d40e4 <_Z13setAlarmCount6String>:
  Serial.println("Remote Dryer Alarm " + alarmNum + " Reset Sent");
  #endif
  return 1;
}

int setAlarmCount(String count){
   d40e4:	b508      	push	{r3, lr}
  int aCount = count.toInt();
   d40e6:	f001 f80c 	bl	d5102 <_ZNK6String5toIntEv>
   d40ea:	3801      	subs	r0, #1
  if(aCount < 1 || aCount > 4){
    return 0;
  }

  return 1;
   d40ec:	2803      	cmp	r0, #3
   d40ee:	bf8c      	ite	hi
   d40f0:	2000      	movhi	r0, #0
   d40f2:	2001      	movls	r0, #1
   d40f4:	bd08      	pop	{r3, pc}
	...

000d40f8 <setup>:
int alarmReset(String alarmNum);
void setAmpReadings();
int setAlarmCount(String alarmCount);

// setup() runs once, when the device is first turned on.
void setup() {
   d40f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  #if MONITOR_DEBUG
    Serial.begin();
  #endif

  for(int i = 0; i < alarmCount; i++){
    pinMode(ALARM[i], INPUT);
   d40fa:	4f40      	ldr	r7, [pc, #256]	; (d41fc <setup+0x104>)
    names[i] = "Dryer_Alarm_" + String(i+1);
   d40fc:	4d40      	ldr	r5, [pc, #256]	; (d4200 <setup+0x108>)
int alarmReset(String alarmNum);
void setAmpReadings();
int setAlarmCount(String alarmCount);

// setup() runs once, when the device is first turned on.
void setup() {
   d40fe:	b089      	sub	sp, #36	; 0x24

  #if MONITOR_DEBUG
    Serial.begin();
  #endif

  for(int i = 0; i < alarmCount; i++){
   d4100:	2400      	movs	r4, #0
    pinMode(ALARM[i], INPUT);
   d4102:	5d38      	ldrb	r0, [r7, r4]
   d4104:	2100      	movs	r1, #0
   d4106:	f002 f8e7 	bl	d62d8 <pinMode>
   d410a:	4626      	mov	r6, r4

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d410c:	493d      	ldr	r1, [pc, #244]	; (d4204 <setup+0x10c>)
    names[i] = "Dryer_Alarm_" + String(i+1);
   d410e:	3401      	adds	r4, #1
   d4110:	a804      	add	r0, sp, #16
   d4112:	f000 ff5e 	bl	d4fd2 <_ZN6StringC1EPK19__FlashStringHelper>
   d4116:	220a      	movs	r2, #10
   d4118:	4621      	mov	r1, r4
   d411a:	4668      	mov	r0, sp
   d411c:	f000 ffa9 	bl	d5072 <_ZN6StringC1Eih>
   d4120:	4669      	mov	r1, sp
   d4122:	a804      	add	r0, sp, #16
   d4124:	f000 ffcf 	bl	d50c6 <_ZplRK15StringSumHelperRK6String>
   d4128:	4601      	mov	r1, r0
   d412a:	eb05 1006 	add.w	r0, r5, r6, lsl #4
   d412e:	f000 ff63 	bl	d4ff8 <_ZN6StringaSERKS_>
   d4132:	4668      	mov	r0, sp
   d4134:	f000 ff06 	bl	d4f44 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4138:	a804      	add	r0, sp, #16
   d413a:	f000 ff03 	bl	d4f44 <_ZN6StringD1Ev>

  #if MONITOR_DEBUG
    Serial.begin();
  #endif

  for(int i = 0; i < alarmCount; i++){
   d413e:	2c04      	cmp	r4, #4
   d4140:	d1df      	bne.n	d4102 <setup+0xa>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d4142:	4a31      	ldr	r2, [pc, #196]	; (d4208 <setup+0x110>)
   d4144:	4931      	ldr	r1, [pc, #196]	; (d420c <setup+0x114>)
   d4146:	4832      	ldr	r0, [pc, #200]	; (d4210 <setup+0x118>)

  Particle.function("Reset_Dryer", alarmReset);
  Particle.function("Alarm_Count", setAlarmCount);

  for(int i = 0; i < relayCount; i++){
    pinMode(rPins[i], OUTPUT);
   d4148:	4e32      	ldr	r6, [pc, #200]	; (d4214 <setup+0x11c>)
   d414a:	f001 fa4d 	bl	d55e8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d414e:	4a32      	ldr	r2, [pc, #200]	; (d4218 <setup+0x120>)
   d4150:	4932      	ldr	r1, [pc, #200]	; (d421c <setup+0x124>)
   d4152:	482f      	ldr	r0, [pc, #188]	; (d4210 <setup+0x118>)
   d4154:	f001 fa48 	bl	d55e8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  }

  Particle.function("Reset_Dryer", alarmReset);
  Particle.function("Alarm_Count", setAlarmCount);

  for(int i = 0; i < relayCount; i++){
   d4158:	2400      	movs	r4, #0
    pinMode(rPins[i], OUTPUT);
   d415a:	f836 5014 	ldrh.w	r5, [r6, r4, lsl #1]
   d415e:	2101      	movs	r1, #1
   d4160:	4628      	mov	r0, r5
   d4162:	f002 f8b9 	bl	d62d8 <pinMode>
  }

  Particle.function("Reset_Dryer", alarmReset);
  Particle.function("Alarm_Count", setAlarmCount);

  for(int i = 0; i < relayCount; i++){
   d4166:	3401      	adds	r4, #1
    pinMode(rPins[i], OUTPUT);
    digitalWrite(rPins[i], HIGH);
   d4168:	2101      	movs	r1, #1
   d416a:	4628      	mov	r0, r5
   d416c:	f002 f8c5 	bl	d62fa <digitalWrite>
  }

  Particle.function("Reset_Dryer", alarmReset);
  Particle.function("Alarm_Count", setAlarmCount);

  for(int i = 0; i < relayCount; i++){
   d4170:	2c04      	cmp	r4, #4
   d4172:	d1f2      	bne.n	d415a <setup+0x62>
    pinMode(rPins[i], OUTPUT);
    digitalWrite(rPins[i], HIGH);
  }

  monitor.begin();
   d4174:	482a      	ldr	r0, [pc, #168]	; (d4220 <setup+0x128>)
   d4176:	f000 faab 	bl	d46d0 <_ZN14CurrentMonitor5beginEv>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d417a:	2300      	movs	r3, #0
   d417c:	2209      	movs	r2, #9
   d417e:	4929      	ldr	r1, [pc, #164]	; (d4224 <setup+0x12c>)
   d4180:	4829      	ldr	r0, [pc, #164]	; (d4228 <setup+0x130>)
   d4182:	f000 fd0b 	bl	d4b9c <spark_variable>
   d4186:	2300      	movs	r3, #0
   d4188:	2209      	movs	r2, #9
   d418a:	4928      	ldr	r1, [pc, #160]	; (d422c <setup+0x134>)
   d418c:	4828      	ldr	r0, [pc, #160]	; (d4230 <setup+0x138>)
   d418e:	f000 fd05 	bl	d4b9c <spark_variable>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4192:	4928      	ldr	r1, [pc, #160]	; (d4234 <setup+0x13c>)
   d4194:	a804      	add	r0, sp, #16
   d4196:	f000 ff1c 	bl	d4fd2 <_ZN6StringC1EPK19__FlashStringHelper>

  Particle.variable("Signal_Strength", &signalStrength, DOUBLE);
  Particle.variable("Signal_Quality", &signalQuality, DOUBLE);
  for(uint8_t i = 0; i < ampCount; i++){
    Particle.variable("Amp_" + String(i), &ampValue[i], DOUBLE);
   d419a:	220a      	movs	r2, #10
   d419c:	2100      	movs	r1, #0
   d419e:	4668      	mov	r0, sp
   d41a0:	f000 ff55 	bl	d504e <_ZN6StringC1Ehh>
   d41a4:	4669      	mov	r1, sp
   d41a6:	a804      	add	r0, sp, #16
   d41a8:	f000 ff8d 	bl	d50c6 <_ZplRK15StringSumHelperRK6String>
   d41ac:	2300      	movs	r3, #0
   d41ae:	2209      	movs	r2, #9
   d41b0:	4921      	ldr	r1, [pc, #132]	; (d4238 <setup+0x140>)
   d41b2:	6800      	ldr	r0, [r0, #0]
   d41b4:	f000 fcf2 	bl	d4b9c <spark_variable>
   d41b8:	4668      	mov	r0, sp
   d41ba:	f000 fec3 	bl	d4f44 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d41be:	a804      	add	r0, sp, #16
   d41c0:	f000 fec0 	bl	d4f44 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d41c4:	491d      	ldr	r1, [pc, #116]	; (d423c <setup+0x144>)
   d41c6:	a804      	add	r0, sp, #16
   d41c8:	f000 ff03 	bl	d4fd2 <_ZN6StringC1EPK19__FlashStringHelper>
    Particle.variable("Power_" + String(i), &powerValue[i], DOUBLE);
   d41cc:	220a      	movs	r2, #10
   d41ce:	2100      	movs	r1, #0
   d41d0:	4668      	mov	r0, sp
   d41d2:	f000 ff3c 	bl	d504e <_ZN6StringC1Ehh>
   d41d6:	4669      	mov	r1, sp
   d41d8:	a804      	add	r0, sp, #16
   d41da:	f000 ff74 	bl	d50c6 <_ZplRK15StringSumHelperRK6String>
   d41de:	2300      	movs	r3, #0
   d41e0:	2209      	movs	r2, #9
   d41e2:	4917      	ldr	r1, [pc, #92]	; (d4240 <setup+0x148>)
   d41e4:	6800      	ldr	r0, [r0, #0]
   d41e6:	f000 fcd9 	bl	d4b9c <spark_variable>
   d41ea:	4668      	mov	r0, sp
   d41ec:	f000 feaa 	bl	d4f44 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d41f0:	a804      	add	r0, sp, #16
   d41f2:	f000 fea7 	bl	d4f44 <_ZN6StringD1Ev>
  }

}
   d41f6:	b009      	add	sp, #36	; 0x24
   d41f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d41fa:	bf00      	nop
   d41fc:	000d746d 	.word	0x000d746d
   d4200:	2003e324 	.word	0x2003e324
   d4204:	000d73d8 	.word	0x000d73d8
   d4208:	000d73e5 	.word	0x000d73e5
   d420c:	000d4455 	.word	0x000d4455
   d4210:	000d55bd 	.word	0x000d55bd
   d4214:	000d7472 	.word	0x000d7472
   d4218:	000d73f1 	.word	0x000d73f1
   d421c:	000d40e5 	.word	0x000d40e5
   d4220:	2003e2d0 	.word	0x2003e2d0
   d4224:	2003e2c0 	.word	0x2003e2c0
   d4228:	000d73fd 	.word	0x000d73fd
   d422c:	2003e388 	.word	0x2003e388
   d4230:	000d740d 	.word	0x000d740d
   d4234:	000d741c 	.word	0x000d741c
   d4238:	2003e378 	.word	0x2003e378
   d423c:	000d7421 	.word	0x000d7421
   d4240:	2003e380 	.word	0x2003e380

000d4244 <_Z14setAmpReadingsv>:
  }
  Serial.println();
  #endif
}

void setAmpReadings(){
   d4244:	b508      	push	{r3, lr}
  for(uint8_t i = 0; i < ampCount; i++){
    double amp, power;
    amp = monitor.processAdc(i);
   d4246:	2100      	movs	r1, #0
   d4248:	4807      	ldr	r0, [pc, #28]	; (d4268 <_Z14setAmpReadingsv+0x24>)
   d424a:	f000 faad 	bl	d47a8 <_ZN14CurrentMonitor10processAdcEh>
    power = amp * knownVoltage;
    ampValue[i] = amp;
   d424e:	4b07      	ldr	r3, [pc, #28]	; (d426c <_Z14setAmpReadingsv+0x28>)
}

void setAmpReadings(){
  for(uint8_t i = 0; i < ampCount; i++){
    double amp, power;
    amp = monitor.processAdc(i);
   d4250:	ec51 0b10 	vmov	r0, r1, d0
    power = amp * knownVoltage;
    ampValue[i] = amp;
   d4254:	ed83 0b00 	vstr	d0, [r3]
    powerValue[i] = power;
   d4258:	2200      	movs	r2, #0
   d425a:	4b05      	ldr	r3, [pc, #20]	; (d4270 <_Z14setAmpReadingsv+0x2c>)
   d425c:	f002 fcf8 	bl	d6c50 <__aeabi_dmul>
   d4260:	4b04      	ldr	r3, [pc, #16]	; (d4274 <_Z14setAmpReadingsv+0x30>)
   d4262:	e9c3 0100 	strd	r0, r1, [r3]
   d4266:	bd08      	pop	{r3, pc}
   d4268:	2003e2d0 	.word	0x2003e2d0
   d426c:	2003e378 	.word	0x2003e378
   d4270:	405d8000 	.word	0x405d8000
   d4274:	2003e380 	.word	0x2003e380

000d4278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4278:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d427a:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d427c:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d427e:	b17c      	cbz	r4, d42a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4280:	6863      	ldr	r3, [r4, #4]
   d4282:	3b01      	subs	r3, #1
   d4284:	6063      	str	r3, [r4, #4]
   d4286:	b95b      	cbnz	r3, d42a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4288:	6823      	ldr	r3, [r4, #0]
   d428a:	4620      	mov	r0, r4
   d428c:	689b      	ldr	r3, [r3, #8]
   d428e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4290:	68a3      	ldr	r3, [r4, #8]
   d4292:	3b01      	subs	r3, #1
   d4294:	60a3      	str	r3, [r4, #8]
   d4296:	b91b      	cbnz	r3, d42a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4298:	6823      	ldr	r3, [r4, #0]
   d429a:	4620      	mov	r0, r4
   d429c:	68db      	ldr	r3, [r3, #12]
   d429e:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d42a0:	4628      	mov	r0, r5
   d42a2:	bd38      	pop	{r3, r4, r5, pc}

000d42a4 <_Z8setAlarmbi>:
  }
}

void setAlarm(bool inAlarm, int alarmNum){
   d42a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d42a6:	460c      	mov	r4, r1
   d42a8:	b097      	sub	sp, #92	; 0x5c
   d42aa:	4d45      	ldr	r5, [pc, #276]	; (d43c0 <_Z8setAlarmbi+0x11c>)
   d42ac:	4e45      	ldr	r6, [pc, #276]	; (d43c4 <_Z8setAlarmbi+0x120>)
  
  if(inAlarm){
   d42ae:	2800      	cmp	r0, #0
   d42b0:	d037      	beq.n	d4322 <_Z8setAlarmbi+0x7e>
    String alarmStr = String("Dryer ") + String(alarmNum+1) + String(" in Alarm");
   d42b2:	4945      	ldr	r1, [pc, #276]	; (d43c8 <_Z8setAlarmbi+0x124>)
   d42b4:	a806      	add	r0, sp, #24
   d42b6:	f000 fe8c 	bl	d4fd2 <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d42ba:	a906      	add	r1, sp, #24
   d42bc:	a80e      	add	r0, sp, #56	; 0x38
   d42be:	f000 feaa 	bl	d5016 <_ZN6StringC1ERKS_>
   d42c2:	220a      	movs	r2, #10
   d42c4:	1c61      	adds	r1, r4, #1
   d42c6:	a80a      	add	r0, sp, #40	; 0x28
   d42c8:	f000 fed3 	bl	d5072 <_ZN6StringC1Eih>
   d42cc:	a90a      	add	r1, sp, #40	; 0x28
   d42ce:	a80e      	add	r0, sp, #56	; 0x38
   d42d0:	f000 fef9 	bl	d50c6 <_ZplRK15StringSumHelperRK6String>
   d42d4:	493d      	ldr	r1, [pc, #244]	; (d43cc <_Z8setAlarmbi+0x128>)
   d42d6:	4607      	mov	r7, r0
   d42d8:	a812      	add	r0, sp, #72	; 0x48
   d42da:	f000 fe7a 	bl	d4fd2 <_ZN6StringC1EPK19__FlashStringHelper>
   d42de:	a912      	add	r1, sp, #72	; 0x48
   d42e0:	4638      	mov	r0, r7
   d42e2:	f000 fef0 	bl	d50c6 <_ZplRK15StringSumHelperRK6String>
   d42e6:	4601      	mov	r1, r0
   d42e8:	a802      	add	r0, sp, #8
   d42ea:	f000 fe94 	bl	d5016 <_ZN6StringC1ERKS_>
   d42ee:	a812      	add	r0, sp, #72	; 0x48
   d42f0:	f000 fe28 	bl	d4f44 <_ZN6StringD1Ev>
   d42f4:	a80a      	add	r0, sp, #40	; 0x28
   d42f6:	f000 fe25 	bl	d4f44 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d42fa:	a80e      	add	r0, sp, #56	; 0x38
   d42fc:	f000 fe22 	bl	d4f44 <_ZN6StringD1Ev>
   d4300:	a806      	add	r0, sp, #24
   d4302:	f000 fe1f 	bl	d4f44 <_ZN6StringD1Ev>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4306:	f000 fad5 	bl	d48b4 <HAL_Timer_Get_Milli_Seconds>

    if(((millis() - debounceTime) > DEBOUNCE_DELAY) && alarmState[alarmNum] == 0){
   d430a:	682b      	ldr	r3, [r5, #0]
   d430c:	1ac0      	subs	r0, r0, r3
   d430e:	28c8      	cmp	r0, #200	; 0xc8
   d4310:	d901      	bls.n	d4316 <_Z8setAlarmbi+0x72>
   d4312:	5d33      	ldrb	r3, [r6, r4]
   d4314:	b18b      	cbz	r3, d433a <_Z8setAlarmbi+0x96>
      debounceTime = millis();
      #if MONITOR_DEBUG
      Serial.println(alarmStr);
      #endif
    }
    alarmState[alarmNum] = 1;
   d4316:	2301      	movs	r3, #1
}

void setAlarm(bool inAlarm, int alarmNum){
  
  if(inAlarm){
    String alarmStr = String("Dryer ") + String(alarmNum+1) + String(" in Alarm");
   d4318:	a802      	add	r0, sp, #8
      debounceTime = millis();
      #if MONITOR_DEBUG
      Serial.println(alarmStr);
      #endif
    }
    alarmState[alarmNum] = 1;
   d431a:	5533      	strb	r3, [r6, r4]
}

void setAlarm(bool inAlarm, int alarmNum){
  
  if(inAlarm){
    String alarmStr = String("Dryer ") + String(alarmNum+1) + String(" in Alarm");
   d431c:	f000 fe12 	bl	d4f44 <_ZN6StringD1Ev>
   d4320:	e04c      	b.n	d43bc <_Z8setAlarmbi+0x118>
   d4322:	f000 fac7 	bl	d48b4 <HAL_Timer_Get_Milli_Seconds>
    }
    alarmState[alarmNum] = 1;
    return;
  }

  if(((millis() - debounceTime) > DEBOUNCE_DELAY) && alarmState[alarmNum] == 1){
   d4326:	682b      	ldr	r3, [r5, #0]
   d4328:	1ac0      	subs	r0, r0, r3
   d432a:	28c8      	cmp	r0, #200	; 0xc8
   d432c:	d902      	bls.n	d4334 <_Z8setAlarmbi+0x90>
   d432e:	5d33      	ldrb	r3, [r6, r4]
   d4330:	2b01      	cmp	r3, #1
   d4332:	d014      	beq.n	d435e <_Z8setAlarmbi+0xba>
    debounceTime = millis();
    #if MONITOR_DEBUG
    Serial.println(resetStr);
    #endif
  }
  alarmState[alarmNum] = 0;
   d4334:	2300      	movs	r3, #0
   d4336:	5533      	strb	r3, [r6, r4]
   d4338:	e040      	b.n	d43bc <_Z8setAlarmbi+0x118>
   d433a:	4b25      	ldr	r3, [pc, #148]	; (d43d0 <_Z8setAlarmbi+0x12c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d433c:	9a02      	ldr	r2, [sp, #8]
   d433e:	6819      	ldr	r1, [r3, #0]
   d4340:	4b24      	ldr	r3, [pc, #144]	; (d43d4 <_Z8setAlarmbi+0x130>)
   d4342:	781b      	ldrb	r3, [r3, #0]
   d4344:	f88d 3000 	strb.w	r3, [sp]
   d4348:	a812      	add	r0, sp, #72	; 0x48
   d434a:	233c      	movs	r3, #60	; 0x3c
   d434c:	f001 fa5c 	bl	d5808 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4350:	a813      	add	r0, sp, #76	; 0x4c
   d4352:	f7ff ff91 	bl	d4278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4356:	f000 faad 	bl	d48b4 <HAL_Timer_Get_Milli_Seconds>
  if(inAlarm){
    String alarmStr = String("Dryer ") + String(alarmNum+1) + String(" in Alarm");

    if(((millis() - debounceTime) > DEBOUNCE_DELAY) && alarmState[alarmNum] == 0){
      Particle.publish(PUBLISH_NAME, alarmStr, PRIVATE);
      debounceTime = millis();
   d435a:	6028      	str	r0, [r5, #0]
   d435c:	e7db      	b.n	d4316 <_Z8setAlarmbi+0x72>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d435e:	491e      	ldr	r1, [pc, #120]	; (d43d8 <_Z8setAlarmbi+0x134>)
   d4360:	a812      	add	r0, sp, #72	; 0x48
   d4362:	f000 fe36 	bl	d4fd2 <_ZN6StringC1EPK19__FlashStringHelper>
    alarmState[alarmNum] = 1;
    return;
  }

  if(((millis() - debounceTime) > DEBOUNCE_DELAY) && alarmState[alarmNum] == 1){
    String resetStr = String("Dryer Alarm " + String(alarmNum+1) + " Reset");
   d4366:	220a      	movs	r2, #10
   d4368:	1c61      	adds	r1, r4, #1
   d436a:	a80e      	add	r0, sp, #56	; 0x38
   d436c:	f000 fe81 	bl	d5072 <_ZN6StringC1Eih>
   d4370:	a90e      	add	r1, sp, #56	; 0x38
   d4372:	a812      	add	r0, sp, #72	; 0x48
   d4374:	f000 fea7 	bl	d50c6 <_ZplRK15StringSumHelperRK6String>
   d4378:	4918      	ldr	r1, [pc, #96]	; (d43dc <_Z8setAlarmbi+0x138>)
   d437a:	f000 feb0 	bl	d50de <_ZplRK15StringSumHelperPKc>
   d437e:	4601      	mov	r1, r0
   d4380:	a80a      	add	r0, sp, #40	; 0x28
   d4382:	f000 fe48 	bl	d5016 <_ZN6StringC1ERKS_>
   d4386:	a80e      	add	r0, sp, #56	; 0x38
   d4388:	f000 fddc 	bl	d4f44 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d438c:	a812      	add	r0, sp, #72	; 0x48
   d438e:	f000 fdd9 	bl	d4f44 <_ZN6StringD1Ev>
   d4392:	4b0f      	ldr	r3, [pc, #60]	; (d43d0 <_Z8setAlarmbi+0x12c>)
   d4394:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d4396:	6819      	ldr	r1, [r3, #0]
   d4398:	4b0e      	ldr	r3, [pc, #56]	; (d43d4 <_Z8setAlarmbi+0x130>)
   d439a:	781b      	ldrb	r3, [r3, #0]
   d439c:	f88d 3000 	strb.w	r3, [sp]
   d43a0:	a812      	add	r0, sp, #72	; 0x48
   d43a2:	233c      	movs	r3, #60	; 0x3c
   d43a4:	f001 fa30 	bl	d5808 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d43a8:	a813      	add	r0, sp, #76	; 0x4c
   d43aa:	f7ff ff65 	bl	d4278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43ae:	f000 fa81 	bl	d48b4 <HAL_Timer_Get_Milli_Seconds>
    Particle.publish(PUBLISH_NAME, resetStr, PRIVATE);
    debounceTime = millis();
   d43b2:	6028      	str	r0, [r5, #0]
    alarmState[alarmNum] = 1;
    return;
  }

  if(((millis() - debounceTime) > DEBOUNCE_DELAY) && alarmState[alarmNum] == 1){
    String resetStr = String("Dryer Alarm " + String(alarmNum+1) + " Reset");
   d43b4:	a80a      	add	r0, sp, #40	; 0x28
   d43b6:	f000 fdc5 	bl	d4f44 <_ZN6StringD1Ev>
   d43ba:	e7bb      	b.n	d4334 <_Z8setAlarmbi+0x90>
    #if MONITOR_DEBUG
    Serial.println(resetStr);
    #endif
  }
  alarmState[alarmNum] = 0;
}
   d43bc:	b017      	add	sp, #92	; 0x5c
   d43be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d43c0:	2003e2c8 	.word	0x2003e2c8
   d43c4:	2003e2bc 	.word	0x2003e2bc
   d43c8:	000d7428 	.word	0x000d7428
   d43cc:	000d742f 	.word	0x000d742f
   d43d0:	2003e364 	.word	0x2003e364
   d43d4:	2003e320 	.word	0x2003e320
   d43d8:	000d7447 	.word	0x000d7447
   d43dc:	000d7439 	.word	0x000d7439

000d43e0 <loop>:
  }

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d43e0:	b570      	push	{r4, r5, r6, lr}

  for(int i = 0; i < alarmCount; i++){
    alarmValues[i] = digitalRead(ALARM[i]);
   d43e2:	4d17      	ldr	r5, [pc, #92]	; (d4440 <loop+0x60>)
   d43e4:	4e17      	ldr	r6, [pc, #92]	; (d4444 <loop+0x64>)
  }

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d43e6:	b08a      	sub	sp, #40	; 0x28

  for(int i = 0; i < alarmCount; i++){
   d43e8:	2400      	movs	r4, #0
    alarmValues[i] = digitalRead(ALARM[i]);
   d43ea:	5d28      	ldrb	r0, [r5, r4]
   d43ec:	f001 ff9e 	bl	d632c <digitalRead>
    alarmValues[i] == HIGH ? setAlarm(true, i) : setAlarm(false, i);
   d43f0:	2801      	cmp	r0, #1

// loop() runs over and over again, as quickly as it can execute.
void loop() {

  for(int i = 0; i < alarmCount; i++){
    alarmValues[i] = digitalRead(ALARM[i]);
   d43f2:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
    alarmValues[i] == HIGH ? setAlarm(true, i) : setAlarm(false, i);
   d43f6:	4621      	mov	r1, r4
   d43f8:	bf18      	it	ne
   d43fa:	2000      	movne	r0, #0
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {

  for(int i = 0; i < alarmCount; i++){
   d43fc:	3401      	adds	r4, #1
    alarmValues[i] = digitalRead(ALARM[i]);
    alarmValues[i] == HIGH ? setAlarm(true, i) : setAlarm(false, i);
   d43fe:	f7ff ff51 	bl	d42a4 <_Z8setAlarmbi>
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {

  for(int i = 0; i < alarmCount; i++){
   d4402:	2c04      	cmp	r4, #4
   d4404:	d1f1      	bne.n	d43ea <loop+0xa>
  }
  #if MONITOR_DEBUG
  Serial.println();
  #endif

  CellularSignal sig = Cellular.RSSI();
   d4406:	4910      	ldr	r1, [pc, #64]	; (d4448 <loop+0x68>)
   d4408:	4668      	mov	r0, sp
   d440a:	f001 fca9 	bl	d5d60 <_ZN5spark13CellularClass4RSSIEv>
  signalStrength = sig.getStrength();
   d440e:	4668      	mov	r0, sp
   d4410:	f000 fffc 	bl	d540c <_ZNK14CellularSignal11getStrengthEv>
   d4414:	ee10 0a10 	vmov	r0, s0
   d4418:	f002 fbc6 	bl	d6ba8 <__aeabi_f2d>
   d441c:	4b0b      	ldr	r3, [pc, #44]	; (d444c <loop+0x6c>)
   d441e:	e9c3 0100 	strd	r0, r1, [r3]
  signalQuality = sig.getQuality();
   d4422:	4668      	mov	r0, sp
   d4424:	f000 ffd8 	bl	d53d8 <_ZNK14CellularSignal10getQualityEv>
   d4428:	ee10 0a10 	vmov	r0, s0
   d442c:	f002 fbbc 	bl	d6ba8 <__aeabi_f2d>
   d4430:	4b07      	ldr	r3, [pc, #28]	; (d4450 <loop+0x70>)
   d4432:	e9c3 0100 	strd	r0, r1, [r3]

  setAmpReadings();
   d4436:	f7ff ff05 	bl	d4244 <_Z14setAmpReadingsv>
    Serial.print(": ");
    Serial.print(powerValue[i]);
  }
  Serial.println();
  #endif
}
   d443a:	b00a      	add	sp, #40	; 0x28
   d443c:	bd70      	pop	{r4, r5, r6, pc}
   d443e:	bf00      	nop
   d4440:	000d746d 	.word	0x000d746d
   d4444:	2003e390 	.word	0x2003e390
   d4448:	2003e3e8 	.word	0x2003e3e8
   d444c:	2003e2c0 	.word	0x2003e2c0
   d4450:	2003e388 	.word	0x2003e388

000d4454 <_Z10alarmReset6String>:
    #endif
  }
  alarmState[alarmNum] = 0;
}

int alarmReset(String alarmNum){
   d4454:	b570      	push	{r4, r5, r6, lr}
   d4456:	b08c      	sub	sp, #48	; 0x30
   d4458:	4605      	mov	r5, r0
  int alarm = alarmNum.toInt();
   d445a:	f000 fe52 	bl	d5102 <_ZNK6String5toIntEv>
  if(alarm < 1 || alarm > relayCount){
   d445e:	3801      	subs	r0, #1
   d4460:	2803      	cmp	r0, #3
   d4462:	d839      	bhi.n	d44d8 <_Z10alarmReset6String+0x84>
    return 0;
  }

  digitalWrite(rPins[alarm-1], LOW);
   d4464:	4b1e      	ldr	r3, [pc, #120]	; (d44e0 <_Z10alarmReset6String+0x8c>)
   d4466:	f833 4010 	ldrh.w	r4, [r3, r0, lsl #1]
   d446a:	2100      	movs	r1, #0
   d446c:	4620      	mov	r0, r4
   d446e:	f001 ff44 	bl	d62fa <digitalWrite>
   d4472:	f000 fa1f 	bl	d48b4 <HAL_Timer_Get_Milli_Seconds>
   d4476:	4606      	mov	r6, r0
   d4478:	f000 fa1c 	bl	d48b4 <HAL_Timer_Get_Milli_Seconds>
  long resetDelay = millis();
  while(millis() - resetDelay < RELAY_DELAY){
   d447c:	1b80      	subs	r0, r0, r6
   d447e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   d4482:	d3f9      	bcc.n	d4478 <_Z10alarmReset6String+0x24>
    //wait (this is here instead to delay() so interrupts can occur)
  }
  digitalWrite(rPins[alarm-1], HIGH);
   d4484:	4620      	mov	r0, r4
   d4486:	2101      	movs	r1, #1
   d4488:	f001 ff37 	bl	d62fa <digitalWrite>
   d448c:	4b15      	ldr	r3, [pc, #84]	; (d44e4 <_Z10alarmReset6String+0x90>)
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d448e:	4916      	ldr	r1, [pc, #88]	; (d44e8 <_Z10alarmReset6String+0x94>)
   d4490:	681c      	ldr	r4, [r3, #0]
   d4492:	a804      	add	r0, sp, #16
   d4494:	f000 fd9d 	bl	d4fd2 <_ZN6StringC1EPK19__FlashStringHelper>

  Particle.publish(PUBLISH_NAME, String("Remote Dryer Alarm " + alarmNum + " Reset Sent"), PRIVATE);
   d4498:	4629      	mov	r1, r5
   d449a:	a804      	add	r0, sp, #16
   d449c:	f000 fe13 	bl	d50c6 <_ZplRK15StringSumHelperRK6String>
   d44a0:	4912      	ldr	r1, [pc, #72]	; (d44ec <_Z10alarmReset6String+0x98>)
   d44a2:	f000 fe1c 	bl	d50de <_ZplRK15StringSumHelperPKc>
   d44a6:	4601      	mov	r1, r0
   d44a8:	a808      	add	r0, sp, #32
   d44aa:	f000 fdb4 	bl	d5016 <_ZN6StringC1ERKS_>
   d44ae:	4b10      	ldr	r3, [pc, #64]	; (d44f0 <_Z10alarmReset6String+0x9c>)
   d44b0:	9a08      	ldr	r2, [sp, #32]
   d44b2:	781b      	ldrb	r3, [r3, #0]
   d44b4:	f88d 3000 	strb.w	r3, [sp]
   d44b8:	4621      	mov	r1, r4
   d44ba:	233c      	movs	r3, #60	; 0x3c
   d44bc:	a802      	add	r0, sp, #8
   d44be:	f001 f9a3 	bl	d5808 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d44c2:	a803      	add	r0, sp, #12
   d44c4:	f7ff fed8 	bl	d4278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d44c8:	a808      	add	r0, sp, #32
   d44ca:	f000 fd3b 	bl	d4f44 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d44ce:	a804      	add	r0, sp, #16
   d44d0:	f000 fd38 	bl	d4f44 <_ZN6StringD1Ev>

  #if MONITOR_DEBUG
  Serial.println("Remote Dryer Alarm " + alarmNum + " Reset Sent");
  #endif
  return 1;
   d44d4:	2001      	movs	r0, #1
   d44d6:	e000      	b.n	d44da <_Z10alarmReset6String+0x86>
}

int alarmReset(String alarmNum){
  int alarm = alarmNum.toInt();
  if(alarm < 1 || alarm > relayCount){
    return 0;
   d44d8:	2000      	movs	r0, #0

  #if MONITOR_DEBUG
  Serial.println("Remote Dryer Alarm " + alarmNum + " Reset Sent");
  #endif
  return 1;
}
   d44da:	b00c      	add	sp, #48	; 0x30
   d44dc:	bd70      	pop	{r4, r5, r6, pc}
   d44de:	bf00      	nop
   d44e0:	000d7472 	.word	0x000d7472
   d44e4:	2003e364 	.word	0x2003e364
   d44e8:	000d7440 	.word	0x000d7440
   d44ec:	000d7454 	.word	0x000d7454
   d44f0:	2003e320 	.word	0x2003e320

000d44f4 <_GLOBAL__sub_I___appProductID>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d44f4:	4b21      	ldr	r3, [pc, #132]	; (d457c <_GLOBAL__sub_I___appProductID+0x88>)
  if(aCount < 1 || aCount > 4){
    return 0;
  }

  return 1;
   d44f6:	b570      	push	{r4, r5, r6, lr}
   d44f8:	2401      	movs	r4, #1
   d44fa:	701c      	strb	r4, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d44fc:	f000 f972 	bl	d47e4 <HAL_Pin_Map>
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d4500:	f001 feae 	bl	d6260 <spark_protocol_instance>
   d4504:	2300      	movs	r3, #0
   d4506:	461a      	mov	r2, r3
   d4508:	f642 0144 	movw	r1, #10308	; 0x2844
   d450c:	f001 feb0 	bl	d6270 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d4510:	f001 fea6 	bl	d6260 <spark_protocol_instance>
   d4514:	2300      	movs	r3, #0
   d4516:	461a      	mov	r2, r3
   d4518:	4621      	mov	r1, r4
   d451a:	f001 feb1 	bl	d6280 <spark_protocol_set_product_firmware_version>
   d451e:	f000 f9c9 	bl	d48b4 <HAL_Timer_Get_Milli_Seconds>
const uint16_t RELAY_DELAY = 500;
const uint16_t knownVoltage = 118;
double signalStrength;
double signalQuality;

const String PUBLISH_NAME = "Dryer_Alarms"; // DO NOT MODIFY THIS. GOOGLE CLOUD PUBSUB DEPENDS ON THIS
   d4522:	4c17      	ldr	r4, [pc, #92]	; (d4580 <_GLOBAL__sub_I___appProductID+0x8c>)
#define MONITOR_DEBUG false

const uint8_t relayCount = 4;
const uint8_t alarmCount = 4;
const uint8_t ampCount = 1;
unsigned long debounceTime = millis();
   d4524:	4b17      	ldr	r3, [pc, #92]	; (d4584 <_GLOBAL__sub_I___appProductID+0x90>)
const uint16_t RELAY_DELAY = 500;
const uint16_t knownVoltage = 118;
double signalStrength;
double signalQuality;

const String PUBLISH_NAME = "Dryer_Alarms"; // DO NOT MODIFY THIS. GOOGLE CLOUD PUBSUB DEPENDS ON THIS
   d4526:	4e18      	ldr	r6, [pc, #96]	; (d4588 <_GLOBAL__sub_I___appProductID+0x94>)
#define MONITOR_DEBUG false

const uint8_t relayCount = 4;
const uint8_t alarmCount = 4;
const uint8_t ampCount = 1;
unsigned long debounceTime = millis();
   d4528:	6018      	str	r0, [r3, #0]
const uint16_t RELAY_DELAY = 500;
const uint16_t knownVoltage = 118;
double signalStrength;
double signalQuality;

const String PUBLISH_NAME = "Dryer_Alarms"; // DO NOT MODIFY THIS. GOOGLE CLOUD PUBSUB DEPENDS ON THIS
   d452a:	4918      	ldr	r1, [pc, #96]	; (d458c <_GLOBAL__sub_I___appProductID+0x98>)
const uint8_t ALARM[alarmCount] = {D4, D5, D6, D8};
int alarmValues[alarmCount] = {0, 0, 0, 0};
byte alarmState[alarmCount] = {0, 0, 0, 0};
double ampValue[ampCount];
double powerValue[ampCount];
String names[alarmCount];
   d452c:	4d18      	ldr	r5, [pc, #96]	; (d4590 <_GLOBAL__sub_I___appProductID+0x9c>)
const uint16_t RELAY_DELAY = 500;
const uint16_t knownVoltage = 118;
double signalStrength;
double signalQuality;

const String PUBLISH_NAME = "Dryer_Alarms"; // DO NOT MODIFY THIS. GOOGLE CLOUD PUBSUB DEPENDS ON THIS
   d452e:	4620      	mov	r0, r4
   d4530:	f000 fd4f 	bl	d4fd2 <_ZN6StringC1EPK19__FlashStringHelper>
   d4534:	4620      	mov	r0, r4
const uint8_t ALARM[alarmCount] = {D4, D5, D6, D8};
int alarmValues[alarmCount] = {0, 0, 0, 0};
byte alarmState[alarmCount] = {0, 0, 0, 0};
double ampValue[ampCount];
double powerValue[ampCount];
String names[alarmCount];
   d4536:	4c17      	ldr	r4, [pc, #92]	; (d4594 <_GLOBAL__sub_I___appProductID+0xa0>)
const uint16_t RELAY_DELAY = 500;
const uint16_t knownVoltage = 118;
double signalStrength;
double signalQuality;

const String PUBLISH_NAME = "Dryer_Alarms"; // DO NOT MODIFY THIS. GOOGLE CLOUD PUBSUB DEPENDS ON THIS
   d4538:	4917      	ldr	r1, [pc, #92]	; (d4598 <_GLOBAL__sub_I___appProductID+0xa4>)
   d453a:	4632      	mov	r2, r6
   d453c:	f001 ff4c 	bl	d63d8 <__aeabi_atexit>
const uint8_t ALARM[alarmCount] = {D4, D5, D6, D8};
int alarmValues[alarmCount] = {0, 0, 0, 0};
byte alarmState[alarmCount] = {0, 0, 0, 0};
double ampValue[ampCount];
double powerValue[ampCount];
String names[alarmCount];
   d4540:	4629      	mov	r1, r5
   d4542:	4620      	mov	r0, r4
   d4544:	f000 fd45 	bl	d4fd2 <_ZN6StringC1EPK19__FlashStringHelper>
   d4548:	4629      	mov	r1, r5
   d454a:	f104 0010 	add.w	r0, r4, #16
   d454e:	f000 fd40 	bl	d4fd2 <_ZN6StringC1EPK19__FlashStringHelper>
   d4552:	4629      	mov	r1, r5
   d4554:	f104 0020 	add.w	r0, r4, #32
   d4558:	f000 fd3b 	bl	d4fd2 <_ZN6StringC1EPK19__FlashStringHelper>
   d455c:	4629      	mov	r1, r5
   d455e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d4562:	f000 fd36 	bl	d4fd2 <_ZN6StringC1EPK19__FlashStringHelper>
   d4566:	4632      	mov	r2, r6
   d4568:	490c      	ldr	r1, [pc, #48]	; (d459c <_GLOBAL__sub_I___appProductID+0xa8>)
   d456a:	2000      	movs	r0, #0
   d456c:	f001 ff34 	bl	d63d8 <__aeabi_atexit>

//current adc chip
CurrentMonitor monitor;
   d4570:	480b      	ldr	r0, [pc, #44]	; (d45a0 <_GLOBAL__sub_I___appProductID+0xac>)
  if(aCount < 1 || aCount > 4){
    return 0;
  }

  return 1;
   d4572:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
double ampValue[ampCount];
double powerValue[ampCount];
String names[alarmCount];

//current adc chip
CurrentMonitor monitor;
   d4576:	f000 b88f 	b.w	d4698 <_ZN14CurrentMonitorC1Ev>
   d457a:	bf00      	nop
   d457c:	2003e320 	.word	0x2003e320
   d4580:	2003e364 	.word	0x2003e364
   d4584:	2003e2c8 	.word	0x2003e2c8
   d4588:	2003e2b8 	.word	0x2003e2b8
   d458c:	000d7460 	.word	0x000d7460
   d4590:	000d75c3 	.word	0x000d75c3
   d4594:	2003e324 	.word	0x2003e324
   d4598:	000d4f45 	.word	0x000d4f45
   d459c:	000d40b9 	.word	0x000d40b9
   d45a0:	2003e2d0 	.word	0x2003e2d0

000d45a4 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d45a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d45a6:	4602      	mov	r2, r0
   d45a8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d45aa:	7913      	ldrb	r3, [r2, #4]
   d45ac:	6895      	ldr	r5, [r2, #8]
   d45ae:	b133      	cbz	r3, d45be <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d45b0:	b93d      	cbnz	r5, d45c2 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d45b2:	490c      	ldr	r1, [pc, #48]	; (d45e4 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d45b4:	b004      	add	sp, #16
   d45b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d45ba:	f000 bddd 	b.w	d5178 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d45be:	4b0a      	ldr	r3, [pc, #40]	; (d45e8 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d45c0:	e000      	b.n	d45c4 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d45c2:	4b0a      	ldr	r3, [pc, #40]	; (d45ec <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d45c4:	7b16      	ldrb	r6, [r2, #12]
   d45c6:	4c0a      	ldr	r4, [pc, #40]	; (d45f0 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d45c8:	490a      	ldr	r1, [pc, #40]	; (d45f4 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d45ca:	7b52      	ldrb	r2, [r2, #13]
   d45cc:	9202      	str	r2, [sp, #8]
   d45ce:	2e01      	cmp	r6, #1
   d45d0:	bf08      	it	eq
   d45d2:	4621      	moveq	r1, r4
   d45d4:	9101      	str	r1, [sp, #4]
   d45d6:	9500      	str	r5, [sp, #0]
   d45d8:	4a07      	ldr	r2, [pc, #28]	; (d45f8 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d45da:	2100      	movs	r1, #0
   d45dc:	f000 fe32 	bl	d5244 <_ZN5Print11printf_implEbPKcz>
  }
   d45e0:	b004      	add	sp, #16
   d45e2:	bd70      	pop	{r4, r5, r6, pc}
   d45e4:	000d7499 	.word	0x000d7499
   d45e8:	000d75c3 	.word	0x000d75c3
   d45ec:	000d7488 	.word	0x000d7488
   d45f0:	000d7491 	.word	0x000d7491
   d45f4:	000d7495 	.word	0x000d7495
   d45f8:	000d74af 	.word	0x000d74af

000d45fc <_ZN10ADC128S102C1Ev>:
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d45fc:	4a05      	ldr	r2, [pc, #20]	; (d4614 <_ZN10ADC128S102C1Ev+0x18>)
   d45fe:	6002      	str	r2, [r0, #0]
   d4600:	2200      	movs	r2, #0
   d4602:	7102      	strb	r2, [r0, #4]
   d4604:	4a04      	ldr	r2, [pc, #16]	; (d4618 <_ZN10ADC128S102C1Ev+0x1c>)
   d4606:	6082      	str	r2, [r0, #8]
   d4608:	2201      	movs	r2, #1
   d460a:	7302      	strb	r2, [r0, #12]
   d460c:	2202      	movs	r2, #2
   d460e:	7342      	strb	r2, [r0, #13]

/**
 * Constructor.
 */
ADC128S102::ADC128S102()
{}
   d4610:	4770      	bx	lr
   d4612:	bf00      	nop
   d4614:	000d7484 	.word	0x000d7484
   d4618:	00d59f80 	.word	0x00d59f80

000d461c <_ZN10ADC128S1025beginEv>:

/**
 * Use this in the setup() method to initialize the hardware and begin SPI if it hasn't already.
 */
void ADC128S102::begin()
{
   d461c:	b510      	push	{r4, lr}
    // initialize hardware
    pinMode(SS, OUTPUT);
    SPI.begin();
   d461e:	4c07      	ldr	r4, [pc, #28]	; (d463c <_ZN10ADC128S1025beginEv+0x20>)
 * Use this in the setup() method to initialize the hardware and begin SPI if it hasn't already.
 */
void ADC128S102::begin()
{
    // initialize hardware
    pinMode(SS, OUTPUT);
   d4620:	2101      	movs	r1, #1
   d4622:	200e      	movs	r0, #14
   d4624:	f001 fe58 	bl	d62d8 <pinMode>
    SPI.begin();
   d4628:	4620      	mov	r0, r4
   d462a:	f000 fb71 	bl	d4d10 <_ZN8SPIClass5beginEv>
    SPI.setClockSpeed(16, MHZ);
   d462e:	4620      	mov	r0, r4
   d4630:	4a03      	ldr	r2, [pc, #12]	; (d4640 <_ZN10ADC128S1025beginEv+0x24>)
   d4632:	2110      	movs	r1, #16
}
   d4634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void ADC128S102::begin()
{
    // initialize hardware
    pinMode(SS, OUTPUT);
    SPI.begin();
    SPI.setClockSpeed(16, MHZ);
   d4638:	f000 bbf8 	b.w	d4e2c <_ZN8SPIClass13setClockSpeedEjj>
   d463c:	2003e714 	.word	0x2003e714
   d4640:	000f4240 	.word	0x000f4240

000d4644 <_ZN10ADC128S1027readADCEa>:
}

/**
 * Supply the channel number to read the Analog value converted to 12-bit
 */
int16_t ADC128S102::readADC(int8_t channel){
   d4644:	b570      	push	{r4, r5, r6, lr}

    SPI.beginTransaction(settings);
   d4646:	4e12      	ldr	r6, [pc, #72]	; (d4690 <_ZN10ADC128S1027readADCEa+0x4c>)
}

/**
 * Supply the channel number to read the Analog value converted to 12-bit
 */
int16_t ADC128S102::readADC(int8_t channel){
   d4648:	4605      	mov	r5, r0
   d464a:	460c      	mov	r4, r1

    SPI.beginTransaction(settings);
   d464c:	4601      	mov	r1, r0
   d464e:	4630      	mov	r0, r6
   d4650:	f000 fb7c 	bl	d4d4c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
    digitalWrite(SS, LOW); // Drive Slave Select LOW to select chip
   d4654:	2100      	movs	r1, #0
   d4656:	200e      	movs	r0, #14
   d4658:	f001 fe4f 	bl	d62fa <digitalWrite>
    
    byte control = channel << 3; // DONTC DONTC ADD2 ADD1 ADD0 DONTC DONTC DONTC
    buffer = SPI.transfer(control);
   d465c:	00e1      	lsls	r1, r4, #3
   d465e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
   d4662:	4630      	mov	r0, r6
   d4664:	f000 fc04 	bl	d4e70 <_ZN8SPIClass8transferEh>
    buffer = buffer << 8;
   d4668:	0200      	lsls	r0, r0, #8
   d466a:	b204      	sxth	r4, r0
   d466c:	822c      	strh	r4, [r5, #16]
    buffer = buffer | SPI.transfer(0);
   d466e:	2100      	movs	r1, #0
   d4670:	4630      	mov	r0, r6
   d4672:	f000 fbfd 	bl	d4e70 <_ZN8SPIClass8transferEh>
   d4676:	4320      	orrs	r0, r4
   d4678:	8228      	strh	r0, [r5, #16]

    digitalWrite(SS, HIGH); // Drive Slave Select HIGH so other hardware can use SPI
   d467a:	2101      	movs	r1, #1
   d467c:	200e      	movs	r0, #14
   d467e:	f001 fe3c 	bl	d62fa <digitalWrite>
    SPI.endTransaction();
   d4682:	4630      	mov	r0, r6
   d4684:	f000 fb49 	bl	d4d1a <_ZN8SPIClass14endTransactionEv>

    return buffer;
}
   d4688:	f9b5 0010 	ldrsh.w	r0, [r5, #16]
   d468c:	bd70      	pop	{r4, r5, r6, pc}
   d468e:	bf00      	nop
   d4690:	2003e714 	.word	0x2003e714

000d4694 <_GLOBAL__sub_I__ZN10ADC128S102C2Ev>:
   d4694:	f000 b8a6 	b.w	d47e4 <HAL_Pin_Map>

000d4698 <_ZN14CurrentMonitorC1Ev>:
#include "CurrentMonitor.h"

/**
 * Constructor.
 */
CurrentMonitor::CurrentMonitor()
   d4698:	b510      	push	{r4, lr}
   d469a:	4604      	mov	r4, r0
   d469c:	f7ff ffae 	bl	d45fc <_ZN10ADC128S102C1Ev>
   d46a0:	a307      	add	r3, pc, #28	; (adr r3, d46c0 <_ZN14CurrentMonitorC1Ev+0x28>)
   d46a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46a6:	e9c4 2306 	strd	r2, r3, [r4, #24]
   d46aa:	a307      	add	r3, pc, #28	; (adr r3, d46c8 <_ZN14CurrentMonitorC1Ev+0x30>)
   d46ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46b0:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
   d46b4:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
   d46b8:	64a3      	str	r3, [r4, #72]	; 0x48
{
  // be sure not to call anything that requires hardware be initialized here, put those in begin()
}
   d46ba:	4620      	mov	r0, r4
   d46bc:	bd10      	pop	{r4, pc}
   d46be:	bf00      	nop
   d46c0:	00000000 	.word	0x00000000
   d46c4:	40a00400 	.word	0x40a00400
   d46c8:	66666666 	.word	0x66666666
   d46cc:	40460666 	.word	0x40460666

000d46d0 <_ZN14CurrentMonitor5beginEv>:
 * Example method.
 */
void CurrentMonitor::begin()
{
    // initialize hardware
    adc.begin();
   d46d0:	f7ff bfa4 	b.w	d461c <_ZN10ADC128S1025beginEv>
   d46d4:	0000      	movs	r0, r0
	...

000d46d8 <_ZN14CurrentMonitor13calculateIrmsEh>:
/**
 * Private: Receives analog reading from given channel and calculates Irms.
 * The Irms is calculated from a numberOfSamples to receive a more accurate number
 */
double CurrentMonitor::calculateIrms(uint8_t channel)
{
   d46d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d46dc:	4604      	mov	r4, r0
    int SupplyVoltage = readVcc();


  for (unsigned int n = 0; n < numberOfSamples; n++)
   d46de:	2500      	movs	r5, #0
  {
    sampleI = adc.readADC(channel);
   d46e0:	fa4f fa81 	sxtb.w	sl, r1
double CurrentMonitor::calculateIrms(uint8_t channel)
{
    int SupplyVoltage = readVcc();


  for (unsigned int n = 0; n < numberOfSamples; n++)
   d46e4:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   d46e6:	42b5      	cmp	r5, r6
   d46e8:	d230      	bcs.n	d474c <_ZN14CurrentMonitor13calculateIrmsEh+0x74>
  {
    sampleI = adc.readADC(channel);
   d46ea:	4651      	mov	r1, sl
   d46ec:	4620      	mov	r0, r4
   d46ee:	f7ff ffa9 	bl	d4644 <_ZN10ADC128S1027readADCEa>
   d46f2:	6160      	str	r0, [r4, #20]

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset,
    //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (double)((double)(sampleI-offsetI))/1024);
   d46f4:	f002 fa46 	bl	d6b84 <__aeabi_i2d>
   d46f8:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
   d46fc:	4632      	mov	r2, r6
   d46fe:	463b      	mov	r3, r7
   d4700:	4680      	mov	r8, r0
   d4702:	4689      	mov	r9, r1
   d4704:	f002 f8f0 	bl	d68e8 <__aeabi_dsub>
   d4708:	2200      	movs	r2, #0
   d470a:	4b25      	ldr	r3, [pc, #148]	; (d47a0 <_ZN14CurrentMonitor13calculateIrmsEh+0xc8>)
   d470c:	f002 faa0 	bl	d6c50 <__aeabi_dmul>
   d4710:	4632      	mov	r2, r6
   d4712:	463b      	mov	r3, r7
   d4714:	f002 f8ea 	bl	d68ec <__adddf3>
   d4718:	4602      	mov	r2, r0
   d471a:	460b      	mov	r3, r1
   d471c:	e9c4 2306 	strd	r2, r3, [r4, #24]
    filteredI = sampleI - offsetI;
   d4720:	4640      	mov	r0, r8
   d4722:	4649      	mov	r1, r9
   d4724:	f002 f8e0 	bl	d68e8 <__aeabi_dsub>
   d4728:	4602      	mov	r2, r0
   d472a:	460b      	mov	r3, r1
   d472c:	e9c4 2308 	strd	r2, r3, [r4, #32]

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
   d4730:	f002 fa8e 	bl	d6c50 <__aeabi_dmul>
   d4734:	4602      	mov	r2, r0
   d4736:	460b      	mov	r3, r1
   d4738:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
    // 2) sum
    sumI += sqI;
   d473c:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
   d4740:	f002 f8d4 	bl	d68ec <__adddf3>
double CurrentMonitor::calculateIrms(uint8_t channel)
{
    int SupplyVoltage = readVcc();


  for (unsigned int n = 0; n < numberOfSamples; n++)
   d4744:	3501      	adds	r5, #1

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
    // 2) sum
    sumI += sqI;
   d4746:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
double CurrentMonitor::calculateIrms(uint8_t channel)
{
    int SupplyVoltage = readVcc();


  for (unsigned int n = 0; n < numberOfSamples; n++)
   d474a:	e7cb      	b.n	d46e4 <_ZN14CurrentMonitor13calculateIrmsEh+0xc>
    sqI = filteredI * filteredI;
    // 2) sum
    sumI += sqI;
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d474c:	a312      	add	r3, pc, #72	; (adr r3, d4798 <_ZN14CurrentMonitor13calculateIrmsEh+0xc0>)
   d474e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4752:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
   d4756:	f002 fa7b 	bl	d6c50 <__aeabi_dmul>
   d475a:	4680      	mov	r8, r0
  Irms = I_RATIO * sqrt(sumI / numberOfSamples);
   d475c:	4630      	mov	r0, r6
    sqI = filteredI * filteredI;
    // 2) sum
    sumI += sqI;
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d475e:	4689      	mov	r9, r1
  Irms = I_RATIO * sqrt(sumI / numberOfSamples);
   d4760:	f002 fa00 	bl	d6b64 <__aeabi_ui2d>
   d4764:	4602      	mov	r2, r0
   d4766:	460b      	mov	r3, r1
   d4768:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
   d476c:	f002 fb9a 	bl	d6ea4 <__aeabi_ddiv>
   d4770:	ec41 0b10 	vmov	d0, r0, r1
   d4774:	f001 ff82 	bl	d667c <sqrt>
   d4778:	4640      	mov	r0, r8
   d477a:	ec53 2b10 	vmov	r2, r3, d0
   d477e:	4649      	mov	r1, r9
   d4780:	f002 fa66 	bl	d6c50 <__aeabi_dmul>

  //Reset accumulators
  sumI = 0;
   d4784:	2200      	movs	r2, #0
   d4786:	2300      	movs	r3, #0
    // 2) sum
    sumI += sqI;
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
  Irms = I_RATIO * sqrt(sumI / numberOfSamples);
   d4788:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38

  //Reset accumulators
  sumI = 0;
   d478c:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
  //--------------------------------------------------------------------------------------
  return Irms;
}
   d4790:	ec41 0b10 	vmov	d0, r0, r1
   d4794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4798:	66666666 	.word	0x66666666
   d479c:	3f4a6666 	.word	0x3f4a6666
   d47a0:	3f500000 	.word	0x3f500000
   d47a4:	00000000 	.word	0x00000000

000d47a8 <_ZN14CurrentMonitor10processAdcEh>:
 * Processes the given channel and returns the calculated Irms value.
 */
double CurrentMonitor::processAdc(uint8_t adcChannel)
{

    if(adcChannel < 0 || adcChannel > 7){
   d47a8:	2907      	cmp	r1, #7
   d47aa:	d801      	bhi.n	d47b0 <_ZN14CurrentMonitor10processAdcEh+0x8>
        return -1;
    }
    return calculateIrms(adcChannel);
   d47ac:	f7ff bf94 	b.w	d46d8 <_ZN14CurrentMonitor13calculateIrmsEh>
}
   d47b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; d47b8 <_ZN14CurrentMonitor10processAdcEh+0x10>
   d47b4:	4770      	bx	lr
   d47b6:	bf00      	nop
   d47b8:	00000000 	.word	0x00000000
   d47bc:	bff00000 	.word	0xbff00000

000d47c0 <_GLOBAL__sub_I__ZN14CurrentMonitorC2Ev>:
   d47c0:	f000 b810 	b.w	d47e4 <HAL_Pin_Map>

000d47c4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d47c4:	b508      	push	{r3, lr}
   d47c6:	4b02      	ldr	r3, [pc, #8]	; (d47d0 <netdb_freeaddrinfo+0xc>)
   d47c8:	681b      	ldr	r3, [r3, #0]
   d47ca:	689b      	ldr	r3, [r3, #8]
   d47cc:	9301      	str	r3, [sp, #4]
   d47ce:	bd08      	pop	{r3, pc}
   d47d0:	00030268 	.word	0x00030268

000d47d4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d47d4:	b508      	push	{r3, lr}
   d47d6:	4b02      	ldr	r3, [pc, #8]	; (d47e0 <netdb_getaddrinfo+0xc>)
   d47d8:	681b      	ldr	r3, [r3, #0]
   d47da:	68db      	ldr	r3, [r3, #12]
   d47dc:	9301      	str	r3, [sp, #4]
   d47de:	bd08      	pop	{r3, pc}
   d47e0:	00030268 	.word	0x00030268

000d47e4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d47e4:	b508      	push	{r3, lr}
   d47e6:	4b02      	ldr	r3, [pc, #8]	; (d47f0 <HAL_Pin_Map+0xc>)
   d47e8:	681b      	ldr	r3, [r3, #0]
   d47ea:	681b      	ldr	r3, [r3, #0]
   d47ec:	9301      	str	r3, [sp, #4]
   d47ee:	bd08      	pop	{r3, pc}
   d47f0:	0003022c 	.word	0x0003022c

000d47f4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d47f4:	b508      	push	{r3, lr}
   d47f6:	4b02      	ldr	r3, [pc, #8]	; (d4800 <HAL_Pin_Mode+0xc>)
   d47f8:	681b      	ldr	r3, [r3, #0]
   d47fa:	689b      	ldr	r3, [r3, #8]
   d47fc:	9301      	str	r3, [sp, #4]
   d47fe:	bd08      	pop	{r3, pc}
   d4800:	0003022c 	.word	0x0003022c

000d4804 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4804:	b508      	push	{r3, lr}
   d4806:	4b02      	ldr	r3, [pc, #8]	; (d4810 <HAL_Get_Pin_Mode+0xc>)
   d4808:	681b      	ldr	r3, [r3, #0]
   d480a:	68db      	ldr	r3, [r3, #12]
   d480c:	9301      	str	r3, [sp, #4]
   d480e:	bd08      	pop	{r3, pc}
   d4810:	0003022c 	.word	0x0003022c

000d4814 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4814:	b508      	push	{r3, lr}
   d4816:	4b02      	ldr	r3, [pc, #8]	; (d4820 <HAL_GPIO_Write+0xc>)
   d4818:	681b      	ldr	r3, [r3, #0]
   d481a:	691b      	ldr	r3, [r3, #16]
   d481c:	9301      	str	r3, [sp, #4]
   d481e:	bd08      	pop	{r3, pc}
   d4820:	0003022c 	.word	0x0003022c

000d4824 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4824:	b508      	push	{r3, lr}
   d4826:	4b02      	ldr	r3, [pc, #8]	; (d4830 <HAL_GPIO_Read+0xc>)
   d4828:	681b      	ldr	r3, [r3, #0]
   d482a:	695b      	ldr	r3, [r3, #20]
   d482c:	9301      	str	r3, [sp, #4]
   d482e:	bd08      	pop	{r3, pc}
   d4830:	0003022c 	.word	0x0003022c

000d4834 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d4834:	b508      	push	{r3, lr}
   d4836:	4b02      	ldr	r3, [pc, #8]	; (d4840 <HAL_SPI_Begin+0xc>)
   d4838:	681b      	ldr	r3, [r3, #0]
   d483a:	681b      	ldr	r3, [r3, #0]
   d483c:	9301      	str	r3, [sp, #4]
   d483e:	bd08      	pop	{r3, pc}
   d4840:	00030230 	.word	0x00030230

000d4844 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d4844:	b508      	push	{r3, lr}
   d4846:	4b02      	ldr	r3, [pc, #8]	; (d4850 <HAL_SPI_Set_Clock_Divider+0xc>)
   d4848:	681b      	ldr	r3, [r3, #0]
   d484a:	691b      	ldr	r3, [r3, #16]
   d484c:	9301      	str	r3, [sp, #4]
   d484e:	bd08      	pop	{r3, pc}
   d4850:	00030230 	.word	0x00030230

000d4854 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d4854:	b508      	push	{r3, lr}
   d4856:	4b02      	ldr	r3, [pc, #8]	; (d4860 <HAL_SPI_Send_Receive_Data+0xc>)
   d4858:	681b      	ldr	r3, [r3, #0]
   d485a:	695b      	ldr	r3, [r3, #20]
   d485c:	9301      	str	r3, [sp, #4]
   d485e:	bd08      	pop	{r3, pc}
   d4860:	00030230 	.word	0x00030230

000d4864 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4864:	b508      	push	{r3, lr}
   d4866:	4b02      	ldr	r3, [pc, #8]	; (d4870 <HAL_SPI_Init+0xc>)
   d4868:	681b      	ldr	r3, [r3, #0]
   d486a:	69db      	ldr	r3, [r3, #28]
   d486c:	9301      	str	r3, [sp, #4]
   d486e:	bd08      	pop	{r3, pc}
   d4870:	00030230 	.word	0x00030230

000d4874 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4874:	b508      	push	{r3, lr}
   d4876:	4b02      	ldr	r3, [pc, #8]	; (d4880 <HAL_SPI_Is_Enabled+0xc>)
   d4878:	681b      	ldr	r3, [r3, #0]
   d487a:	6a1b      	ldr	r3, [r3, #32]
   d487c:	9301      	str	r3, [sp, #4]
   d487e:	bd08      	pop	{r3, pc}
   d4880:	00030230 	.word	0x00030230

000d4884 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d4884:	b508      	push	{r3, lr}
   d4886:	4b02      	ldr	r3, [pc, #8]	; (d4890 <HAL_SPI_Info+0xc>)
   d4888:	681b      	ldr	r3, [r3, #0]
   d488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d488c:	9301      	str	r3, [sp, #4]
   d488e:	bd08      	pop	{r3, pc}
   d4890:	00030230 	.word	0x00030230

000d4894 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d4894:	b508      	push	{r3, lr}
   d4896:	4b02      	ldr	r3, [pc, #8]	; (d48a0 <HAL_SPI_Set_Settings+0xc>)
   d4898:	681b      	ldr	r3, [r3, #0]
   d489a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d489c:	9301      	str	r3, [sp, #4]
   d489e:	bd08      	pop	{r3, pc}
   d48a0:	00030230 	.word	0x00030230

000d48a4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d48a4:	b508      	push	{r3, lr}
   d48a6:	4b02      	ldr	r3, [pc, #8]	; (d48b0 <HAL_RNG_GetRandomNumber+0xc>)
   d48a8:	681b      	ldr	r3, [r3, #0]
   d48aa:	685b      	ldr	r3, [r3, #4]
   d48ac:	9301      	str	r3, [sp, #4]
   d48ae:	bd08      	pop	{r3, pc}
   d48b0:	00030218 	.word	0x00030218

000d48b4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d48b4:	b508      	push	{r3, lr}
   d48b6:	4b02      	ldr	r3, [pc, #8]	; (d48c0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d48b8:	681b      	ldr	r3, [r3, #0]
   d48ba:	695b      	ldr	r3, [r3, #20]
   d48bc:	9301      	str	r3, [sp, #4]
   d48be:	bd08      	pop	{r3, pc}
   d48c0:	00030218 	.word	0x00030218

000d48c4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d48c4:	b508      	push	{r3, lr}
   d48c6:	4b02      	ldr	r3, [pc, #8]	; (d48d0 <os_thread_is_current+0xc>)
   d48c8:	681b      	ldr	r3, [r3, #0]
   d48ca:	689b      	ldr	r3, [r3, #8]
   d48cc:	9301      	str	r3, [sp, #4]
   d48ce:	bd08      	pop	{r3, pc}
   d48d0:	00030248 	.word	0x00030248

000d48d4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d48d4:	b508      	push	{r3, lr}
   d48d6:	4b02      	ldr	r3, [pc, #8]	; (d48e0 <os_thread_join+0xc>)
   d48d8:	681b      	ldr	r3, [r3, #0]
   d48da:	691b      	ldr	r3, [r3, #16]
   d48dc:	9301      	str	r3, [sp, #4]
   d48de:	bd08      	pop	{r3, pc}
   d48e0:	00030248 	.word	0x00030248

000d48e4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d48e4:	b508      	push	{r3, lr}
   d48e6:	4b02      	ldr	r3, [pc, #8]	; (d48f0 <os_thread_cleanup+0xc>)
   d48e8:	681b      	ldr	r3, [r3, #0]
   d48ea:	695b      	ldr	r3, [r3, #20]
   d48ec:	9301      	str	r3, [sp, #4]
   d48ee:	bd08      	pop	{r3, pc}
   d48f0:	00030248 	.word	0x00030248

000d48f4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d48f4:	b508      	push	{r3, lr}
   d48f6:	4b02      	ldr	r3, [pc, #8]	; (d4900 <os_mutex_create+0xc>)
   d48f8:	681b      	ldr	r3, [r3, #0]
   d48fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48fc:	9301      	str	r3, [sp, #4]
   d48fe:	bd08      	pop	{r3, pc}
   d4900:	00030248 	.word	0x00030248

000d4904 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d4904:	b508      	push	{r3, lr}
   d4906:	4b02      	ldr	r3, [pc, #8]	; (d4910 <os_mutex_lock+0xc>)
   d4908:	681b      	ldr	r3, [r3, #0]
   d490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d490c:	9301      	str	r3, [sp, #4]
   d490e:	bd08      	pop	{r3, pc}
   d4910:	00030248 	.word	0x00030248

000d4914 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d4914:	b508      	push	{r3, lr}
   d4916:	4b02      	ldr	r3, [pc, #8]	; (d4920 <os_mutex_unlock+0xc>)
   d4918:	681b      	ldr	r3, [r3, #0]
   d491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d491c:	9301      	str	r3, [sp, #4]
   d491e:	bd08      	pop	{r3, pc}
   d4920:	00030248 	.word	0x00030248

000d4924 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <os_mutex_recursive_create+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	00030248 	.word	0x00030248

000d4934 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <inet_inet_ntop+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	695b      	ldr	r3, [r3, #20]
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	00030264 	.word	0x00030264

000d4944 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b02      	ldr	r3, [pc, #8]	; (d4950 <HAL_USART_Init+0xc>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	681b      	ldr	r3, [r3, #0]
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	bd08      	pop	{r3, pc}
   d4950:	0003023c 	.word	0x0003023c

000d4954 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b02      	ldr	r3, [pc, #8]	; (d4960 <HAL_USART_Write_Data+0xc>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	68db      	ldr	r3, [r3, #12]
   d495c:	9301      	str	r3, [sp, #4]
   d495e:	bd08      	pop	{r3, pc}
   d4960:	0003023c 	.word	0x0003023c

000d4964 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b02      	ldr	r3, [pc, #8]	; (d4970 <HAL_USART_Available_Data+0xc>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	691b      	ldr	r3, [r3, #16]
   d496c:	9301      	str	r3, [sp, #4]
   d496e:	bd08      	pop	{r3, pc}
   d4970:	0003023c 	.word	0x0003023c

000d4974 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b02      	ldr	r3, [pc, #8]	; (d4980 <HAL_USART_Read_Data+0xc>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	695b      	ldr	r3, [r3, #20]
   d497c:	9301      	str	r3, [sp, #4]
   d497e:	bd08      	pop	{r3, pc}
   d4980:	0003023c 	.word	0x0003023c

000d4984 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b02      	ldr	r3, [pc, #8]	; (d4990 <HAL_USART_Peek_Data+0xc>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	699b      	ldr	r3, [r3, #24]
   d498c:	9301      	str	r3, [sp, #4]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	0003023c 	.word	0x0003023c

000d4994 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <HAL_USART_Flush_Data+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	69db      	ldr	r3, [r3, #28]
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	0003023c 	.word	0x0003023c

000d49a4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <HAL_USART_Is_Enabled+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	6a1b      	ldr	r3, [r3, #32]
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	0003023c 	.word	0x0003023c

000d49b4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <HAL_USART_Available_Data_For_Write+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	0003023c 	.word	0x0003023c

000d49c4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <HAL_I2C_Write_Data+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	6a1b      	ldr	r3, [r3, #32]
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	00030228 	.word	0x00030228

000d49d4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <HAL_I2C_Available_Data+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	00030228 	.word	0x00030228

000d49e4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <HAL_I2C_Read_Data+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	00030228 	.word	0x00030228

000d49f4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <HAL_I2C_Peek_Data+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	00030228 	.word	0x00030228

000d4a04 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <HAL_I2C_Flush_Data+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	00030228 	.word	0x00030228

000d4a14 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <HAL_I2C_Is_Enabled+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	00030228 	.word	0x00030228

000d4a24 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <HAL_I2C_Init+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	00030228 	.word	0x00030228

000d4a34 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <cellular_signal+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	00030274 	.word	0x00030274

000d4a44 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <HAL_USB_USART_Init+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	681b      	ldr	r3, [r3, #0]
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	0003024c 	.word	0x0003024c

000d4a54 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <HAL_USB_USART_Available_Data+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	691b      	ldr	r3, [r3, #16]
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	0003024c 	.word	0x0003024c

000d4a64 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	695b      	ldr	r3, [r3, #20]
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	0003024c 	.word	0x0003024c

000d4a74 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <HAL_USB_USART_Receive_Data+0xc>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	699b      	ldr	r3, [r3, #24]
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	0003024c 	.word	0x0003024c

000d4a84 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4a84:	b508      	push	{r3, lr}
   d4a86:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <HAL_USB_USART_Send_Data+0xc>)
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	69db      	ldr	r3, [r3, #28]
   d4a8c:	9301      	str	r3, [sp, #4]
   d4a8e:	bd08      	pop	{r3, pc}
   d4a90:	0003024c 	.word	0x0003024c

000d4a94 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4a94:	b508      	push	{r3, lr}
   d4a96:	4b02      	ldr	r3, [pc, #8]	; (d4aa0 <HAL_USB_USART_Flush_Data+0xc>)
   d4a98:	681b      	ldr	r3, [r3, #0]
   d4a9a:	6a1b      	ldr	r3, [r3, #32]
   d4a9c:	9301      	str	r3, [sp, #4]
   d4a9e:	bd08      	pop	{r3, pc}
   d4aa0:	0003024c 	.word	0x0003024c

000d4aa4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <set_system_mode+0xc>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	685b      	ldr	r3, [r3, #4]
   d4aac:	9301      	str	r3, [sp, #4]
   d4aae:	bd08      	pop	{r3, pc}
   d4ab0:	00030220 	.word	0x00030220

000d4ab4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4ab4:	b508      	push	{r3, lr}
   d4ab6:	4b02      	ldr	r3, [pc, #8]	; (d4ac0 <application_thread_current+0xc>)
   d4ab8:	681b      	ldr	r3, [r3, #0]
   d4aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4abc:	9301      	str	r3, [sp, #4]
   d4abe:	bd08      	pop	{r3, pc}
   d4ac0:	00030220 	.word	0x00030220

000d4ac4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <application_thread_invoke+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	00030220 	.word	0x00030220

000d4ad4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4ad4:	b508      	push	{r3, lr}
   d4ad6:	4b03      	ldr	r3, [pc, #12]	; (d4ae4 <system_ctrl_set_app_request_handler+0x10>)
   d4ad8:	681b      	ldr	r3, [r3, #0]
   d4ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4ade:	9301      	str	r3, [sp, #4]
   d4ae0:	bd08      	pop	{r3, pc}
   d4ae2:	0000      	.short	0x0000
   d4ae4:	00030220 	.word	0x00030220

000d4ae8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4ae8:	b508      	push	{r3, lr}
   d4aea:	4b03      	ldr	r3, [pc, #12]	; (d4af8 <system_ctrl_set_result+0x10>)
   d4aec:	681b      	ldr	r3, [r3, #0]
   d4aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4af2:	9301      	str	r3, [sp, #4]
   d4af4:	bd08      	pop	{r3, pc}
   d4af6:	0000      	.short	0x0000
   d4af8:	00030220 	.word	0x00030220

000d4afc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4afc:	b508      	push	{r3, lr}
   d4afe:	4b02      	ldr	r3, [pc, #8]	; (d4b08 <network_connect+0xc>)
   d4b00:	681b      	ldr	r3, [r3, #0]
   d4b02:	685b      	ldr	r3, [r3, #4]
   d4b04:	9301      	str	r3, [sp, #4]
   d4b06:	bd08      	pop	{r3, pc}
   d4b08:	00030240 	.word	0x00030240

000d4b0c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4b0c:	b508      	push	{r3, lr}
   d4b0e:	4b02      	ldr	r3, [pc, #8]	; (d4b18 <network_connecting+0xc>)
   d4b10:	681b      	ldr	r3, [r3, #0]
   d4b12:	689b      	ldr	r3, [r3, #8]
   d4b14:	9301      	str	r3, [sp, #4]
   d4b16:	bd08      	pop	{r3, pc}
   d4b18:	00030240 	.word	0x00030240

000d4b1c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4b1c:	b508      	push	{r3, lr}
   d4b1e:	4b02      	ldr	r3, [pc, #8]	; (d4b28 <network_disconnect+0xc>)
   d4b20:	681b      	ldr	r3, [r3, #0]
   d4b22:	68db      	ldr	r3, [r3, #12]
   d4b24:	9301      	str	r3, [sp, #4]
   d4b26:	bd08      	pop	{r3, pc}
   d4b28:	00030240 	.word	0x00030240

000d4b2c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4b2c:	b508      	push	{r3, lr}
   d4b2e:	4b02      	ldr	r3, [pc, #8]	; (d4b38 <network_ready+0xc>)
   d4b30:	681b      	ldr	r3, [r3, #0]
   d4b32:	691b      	ldr	r3, [r3, #16]
   d4b34:	9301      	str	r3, [sp, #4]
   d4b36:	bd08      	pop	{r3, pc}
   d4b38:	00030240 	.word	0x00030240

000d4b3c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b3c:	b508      	push	{r3, lr}
   d4b3e:	4b02      	ldr	r3, [pc, #8]	; (d4b48 <network_on+0xc>)
   d4b40:	681b      	ldr	r3, [r3, #0]
   d4b42:	695b      	ldr	r3, [r3, #20]
   d4b44:	9301      	str	r3, [sp, #4]
   d4b46:	bd08      	pop	{r3, pc}
   d4b48:	00030240 	.word	0x00030240

000d4b4c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b4c:	b508      	push	{r3, lr}
   d4b4e:	4b02      	ldr	r3, [pc, #8]	; (d4b58 <network_off+0xc>)
   d4b50:	681b      	ldr	r3, [r3, #0]
   d4b52:	699b      	ldr	r3, [r3, #24]
   d4b54:	9301      	str	r3, [sp, #4]
   d4b56:	bd08      	pop	{r3, pc}
   d4b58:	00030240 	.word	0x00030240

000d4b5c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4b5c:	b508      	push	{r3, lr}
   d4b5e:	4b02      	ldr	r3, [pc, #8]	; (d4b68 <network_listen+0xc>)
   d4b60:	681b      	ldr	r3, [r3, #0]
   d4b62:	69db      	ldr	r3, [r3, #28]
   d4b64:	9301      	str	r3, [sp, #4]
   d4b66:	bd08      	pop	{r3, pc}
   d4b68:	00030240 	.word	0x00030240

000d4b6c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4b6c:	b508      	push	{r3, lr}
   d4b6e:	4b02      	ldr	r3, [pc, #8]	; (d4b78 <network_listening+0xc>)
   d4b70:	681b      	ldr	r3, [r3, #0]
   d4b72:	6a1b      	ldr	r3, [r3, #32]
   d4b74:	9301      	str	r3, [sp, #4]
   d4b76:	bd08      	pop	{r3, pc}
   d4b78:	00030240 	.word	0x00030240

000d4b7c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4b7c:	b508      	push	{r3, lr}
   d4b7e:	4b02      	ldr	r3, [pc, #8]	; (d4b88 <network_set_listen_timeout+0xc>)
   d4b80:	681b      	ldr	r3, [r3, #0]
   d4b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b84:	9301      	str	r3, [sp, #4]
   d4b86:	bd08      	pop	{r3, pc}
   d4b88:	00030240 	.word	0x00030240

000d4b8c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4b8c:	b508      	push	{r3, lr}
   d4b8e:	4b02      	ldr	r3, [pc, #8]	; (d4b98 <network_get_listen_timeout+0xc>)
   d4b90:	681b      	ldr	r3, [r3, #0]
   d4b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4b94:	9301      	str	r3, [sp, #4]
   d4b96:	bd08      	pop	{r3, pc}
   d4b98:	00030240 	.word	0x00030240

000d4b9c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4b9c:	b508      	push	{r3, lr}
   d4b9e:	4b02      	ldr	r3, [pc, #8]	; (d4ba8 <spark_variable+0xc>)
   d4ba0:	681b      	ldr	r3, [r3, #0]
   d4ba2:	681b      	ldr	r3, [r3, #0]
   d4ba4:	9301      	str	r3, [sp, #4]
   d4ba6:	bd08      	pop	{r3, pc}
   d4ba8:	00030244 	.word	0x00030244

000d4bac <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4bac:	b508      	push	{r3, lr}
   d4bae:	4b02      	ldr	r3, [pc, #8]	; (d4bb8 <spark_function+0xc>)
   d4bb0:	681b      	ldr	r3, [r3, #0]
   d4bb2:	685b      	ldr	r3, [r3, #4]
   d4bb4:	9301      	str	r3, [sp, #4]
   d4bb6:	bd08      	pop	{r3, pc}
   d4bb8:	00030244 	.word	0x00030244

000d4bbc <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4bbc:	b508      	push	{r3, lr}
   d4bbe:	4b02      	ldr	r3, [pc, #8]	; (d4bc8 <spark_cloud_flag_connected+0xc>)
   d4bc0:	681b      	ldr	r3, [r3, #0]
   d4bc2:	695b      	ldr	r3, [r3, #20]
   d4bc4:	9301      	str	r3, [sp, #4]
   d4bc6:	bd08      	pop	{r3, pc}
   d4bc8:	00030244 	.word	0x00030244

000d4bcc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4bcc:	b508      	push	{r3, lr}
   d4bce:	4b02      	ldr	r3, [pc, #8]	; (d4bd8 <spark_send_event+0xc>)
   d4bd0:	681b      	ldr	r3, [r3, #0]
   d4bd2:	6a1b      	ldr	r3, [r3, #32]
   d4bd4:	9301      	str	r3, [sp, #4]
   d4bd6:	bd08      	pop	{r3, pc}
   d4bd8:	00030244 	.word	0x00030244

000d4bdc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4bdc:	b508      	push	{r3, lr}
   d4bde:	4b02      	ldr	r3, [pc, #8]	; (d4be8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4be0:	681b      	ldr	r3, [r3, #0]
   d4be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4be4:	9301      	str	r3, [sp, #4]
   d4be6:	bd08      	pop	{r3, pc}
   d4be8:	00030244 	.word	0x00030244

000d4bec <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4bec:	b508      	push	{r3, lr}
   d4bee:	4b02      	ldr	r3, [pc, #8]	; (d4bf8 <malloc+0xc>)
   d4bf0:	681b      	ldr	r3, [r3, #0]
   d4bf2:	681b      	ldr	r3, [r3, #0]
   d4bf4:	9301      	str	r3, [sp, #4]
   d4bf6:	bd08      	pop	{r3, pc}
   d4bf8:	0003021c 	.word	0x0003021c

000d4bfc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4bfc:	b508      	push	{r3, lr}
   d4bfe:	4b02      	ldr	r3, [pc, #8]	; (d4c08 <free+0xc>)
   d4c00:	681b      	ldr	r3, [r3, #0]
   d4c02:	685b      	ldr	r3, [r3, #4]
   d4c04:	9301      	str	r3, [sp, #4]
   d4c06:	bd08      	pop	{r3, pc}
   d4c08:	0003021c 	.word	0x0003021c

000d4c0c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4c0c:	b508      	push	{r3, lr}
   d4c0e:	4b02      	ldr	r3, [pc, #8]	; (d4c18 <realloc+0xc>)
   d4c10:	681b      	ldr	r3, [r3, #0]
   d4c12:	689b      	ldr	r3, [r3, #8]
   d4c14:	9301      	str	r3, [sp, #4]
   d4c16:	bd08      	pop	{r3, pc}
   d4c18:	0003021c 	.word	0x0003021c

000d4c1c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4c1c:	b508      	push	{r3, lr}
   d4c1e:	4b02      	ldr	r3, [pc, #8]	; (d4c28 <vsnprintf+0xc>)
   d4c20:	681b      	ldr	r3, [r3, #0]
   d4c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4c24:	9301      	str	r3, [sp, #4]
   d4c26:	bd08      	pop	{r3, pc}
   d4c28:	0003021c 	.word	0x0003021c

000d4c2c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4c2c:	b508      	push	{r3, lr}
   d4c2e:	4b02      	ldr	r3, [pc, #8]	; (d4c38 <abort+0xc>)
   d4c30:	681b      	ldr	r3, [r3, #0]
   d4c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4c34:	9301      	str	r3, [sp, #4]
   d4c36:	bd08      	pop	{r3, pc}
   d4c38:	0003021c 	.word	0x0003021c

000d4c3c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <_malloc_r+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	0003021c 	.word	0x0003021c

000d4c4c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <__errno+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	0003021c 	.word	0x0003021c

000d4c5c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4c5c:	2200      	movs	r2, #0
   d4c5e:	4611      	mov	r1, r2
   d4c60:	6840      	ldr	r0, [r0, #4]
   d4c62:	f7ff bf83 	b.w	d4b6c <network_listening>

000d4c66 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4c66:	2200      	movs	r2, #0
   d4c68:	4611      	mov	r1, r2
   d4c6a:	6840      	ldr	r0, [r0, #4]
   d4c6c:	f7ff bf8e 	b.w	d4b8c <network_get_listen_timeout>

000d4c70 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4c70:	2200      	movs	r2, #0
   d4c72:	6840      	ldr	r0, [r0, #4]
   d4c74:	f7ff bf82 	b.w	d4b7c <network_set_listen_timeout>

000d4c78 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4c78:	2200      	movs	r2, #0
   d4c7a:	f081 0101 	eor.w	r1, r1, #1
   d4c7e:	6840      	ldr	r0, [r0, #4]
   d4c80:	f7ff bf6c 	b.w	d4b5c <network_listen>

000d4c84 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4c84:	2300      	movs	r3, #0
   d4c86:	461a      	mov	r2, r3
   d4c88:	4619      	mov	r1, r3
   d4c8a:	6840      	ldr	r0, [r0, #4]
   d4c8c:	f7ff bf5e 	b.w	d4b4c <network_off>

000d4c90 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4c90:	2300      	movs	r3, #0
   d4c92:	461a      	mov	r2, r3
   d4c94:	4619      	mov	r1, r3
   d4c96:	6840      	ldr	r0, [r0, #4]
   d4c98:	f7ff bf50 	b.w	d4b3c <network_on>

000d4c9c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4c9c:	2200      	movs	r2, #0
   d4c9e:	4611      	mov	r1, r2
   d4ca0:	6840      	ldr	r0, [r0, #4]
   d4ca2:	f7ff bf43 	b.w	d4b2c <network_ready>

000d4ca6 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4ca6:	2200      	movs	r2, #0
   d4ca8:	4611      	mov	r1, r2
   d4caa:	6840      	ldr	r0, [r0, #4]
   d4cac:	f7ff bf2e 	b.w	d4b0c <network_connecting>

000d4cb0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4cb0:	2200      	movs	r2, #0
   d4cb2:	2102      	movs	r1, #2
   d4cb4:	6840      	ldr	r0, [r0, #4]
   d4cb6:	f7ff bf31 	b.w	d4b1c <network_disconnect>

000d4cba <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4cba:	2300      	movs	r3, #0
   d4cbc:	461a      	mov	r2, r3
   d4cbe:	6840      	ldr	r0, [r0, #4]
   d4cc0:	f7ff bf1c 	b.w	d4afc <network_connect>

000d4cc4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4cc4:	4b02      	ldr	r3, [pc, #8]	; (d4cd0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4cc6:	2203      	movs	r2, #3
   d4cc8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4cca:	4a02      	ldr	r2, [pc, #8]	; (d4cd4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4ccc:	601a      	str	r2, [r3, #0]
   d4cce:	4770      	bx	lr
   d4cd0:	2003e3a0 	.word	0x2003e3a0
   d4cd4:	000d74d8 	.word	0x000d74d8

000d4cd8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4cd8:	4770      	bx	lr

000d4cda <_ZN8SPIClassD0Ev>:
   d4cda:	b510      	push	{r4, lr}
   d4cdc:	2110      	movs	r1, #16
   d4cde:	4604      	mov	r4, r0
   d4ce0:	f001 fb7f 	bl	d63e2 <_ZdlPvj>
   d4ce4:	4620      	mov	r0, r4
   d4ce6:	bd10      	pop	{r4, pc}

000d4ce8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4ce8:	b570      	push	{r4, r5, r6, lr}
   d4cea:	4b08      	ldr	r3, [pc, #32]	; (d4d0c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4cec:	6003      	str	r3, [r0, #0]
   d4cee:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4cf0:	2500      	movs	r5, #0
   d4cf2:	460e      	mov	r6, r1
   d4cf4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4cf8:	f7ff fdfc 	bl	d48f4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4cfc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4cfe:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4d00:	f7ff fdb0 	bl	d4864 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4d04:	60a5      	str	r5, [r4, #8]
}
   d4d06:	4620      	mov	r0, r4
   d4d08:	bd70      	pop	{r4, r5, r6, pc}
   d4d0a:	bf00      	nop
   d4d0c:	000d750c 	.word	0x000d750c

000d4d10 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d4d10:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d4d14:	7900      	ldrb	r0, [r0, #4]
   d4d16:	f7ff bd8d 	b.w	d4834 <HAL_SPI_Begin>

000d4d1a <_ZN8SPIClass14endTransactionEv>:
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
    void unlock() { os_mutex_unlock(handle_); }
   d4d1a:	68c0      	ldr	r0, [r0, #12]
   d4d1c:	f7ff bdfa 	b.w	d4914 <os_mutex_unlock>

000d4d20 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d4d20:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
   d4d22:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d4d24:	6018      	str	r0, [r3, #0]
   d4d26:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
   d4d28:	6818      	ldr	r0, [r3, #0]
   d4d2a:	4288      	cmp	r0, r1
   d4d2c:	b2e5      	uxtb	r5, r4
   d4d2e:	d906      	bls.n	d4d3e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d4d30:	3401      	adds	r4, #1
   d4d32:	2c08      	cmp	r4, #8
   d4d34:	d002      	beq.n	d4d3c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
   d4d36:	0840      	lsrs	r0, r0, #1
   d4d38:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
   d4d3a:	e7f5      	b.n	d4d28 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d4d3c:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d4d3e:	4b02      	ldr	r3, [pc, #8]	; (d4d48 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d4d40:	5d5b      	ldrb	r3, [r3, r5]
   d4d42:	7013      	strb	r3, [r2, #0]
   d4d44:	bd30      	pop	{r4, r5, pc}
   d4d46:	bf00      	nop
   d4d48:	000d7514 	.word	0x000d7514

000d4d4c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
  lock();
  return 0;
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d4d4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4d50:	4680      	mov	r8, r0
   d4d52:	b08f      	sub	sp, #60	; 0x3c
            os_mutex_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
   d4d54:	68c0      	ldr	r0, [r0, #12]
   d4d56:	460f      	mov	r7, r1
   d4d58:	f7ff fdd4 	bl	d4904 <os_mutex_lock>
  lock();
  // Get Current SPISettings
  hal_spi_info_t info;
  querySpiInfo(_spi, &info);
   d4d5c:	f898 4004 	ldrb.w	r4, [r8, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   d4d60:	2214      	movs	r2, #20
   d4d62:	2100      	movs	r1, #0
   d4d64:	a809      	add	r0, sp, #36	; 0x24
   d4d66:	f002 fa40 	bl	d71ea <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   d4d6a:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   d4d6c:	4620      	mov	r0, r4
   d4d6e:	2200      	movs	r2, #0
   d4d70:	a909      	add	r1, sp, #36	; 0x24
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   d4d72:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  HAL_SPI_Info(spi, info, nullptr);
   d4d76:	f7ff fd85 	bl	d4884 <HAL_SPI_Info>
}

static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
  if (!info->enabled || info->default_settings)
   d4d7a:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d4d7e:	b14c      	cbz	r4, d4d94 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
   d4d80:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d4d84:	b92d      	cbnz	r5, d4d92 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d4d86:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   d4d88:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d4d8c:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d4d90:	e003      	b.n	d4d9a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d4d92:	2400      	movs	r4, #0
   d4d94:	46a1      	mov	r9, r4
   d4d96:	4626      	mov	r6, r4
   d4d98:	2501      	movs	r5, #1
   d4d9a:	793b      	ldrb	r3, [r7, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d4d9c:	b10d      	cbz	r5, d4da2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
   d4d9e:	2b00      	cmp	r3, #0
   d4da0:	d140      	bne.n	d4e24 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
      return true;

    if (default_ == other.default_ &&
   d4da2:	429d      	cmp	r5, r3
   d4da4:	d10b      	bne.n	d4dbe <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
   d4da6:	68ba      	ldr	r2, [r7, #8]
   d4da8:	42b2      	cmp	r2, r6
   d4daa:	d108      	bne.n	d4dbe <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d4dac:	f88d 9020 	strb.w	r9, [sp, #32]
   d4db0:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d4db4:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d4db8:	89ba      	ldrh	r2, [r7, #12]
   d4dba:	4291      	cmp	r1, r2
   d4dbc:	d032      	beq.n	d4e24 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
  querySpiInfo(_spi, &info);
  particle::__SPISettings current = spiSettingsFromSpiInfo(&info);
  // If they differ, reconfigure SPI peripheral
  if (settings != current)
  {
    if (!settings.default_) {
   d4dbe:	bb23      	cbnz	r3, d4e0a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xbe>
      uint8_t divisor = 0;
   d4dc0:	f88d 300f 	strb.w	r3, [sp, #15]
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);
   d4dc4:	f10d 020f 	add.w	r2, sp, #15
   d4dc8:	ab04      	add	r3, sp, #16
   d4dca:	68b9      	ldr	r1, [r7, #8]
   d4dcc:	980a      	ldr	r0, [sp, #40]	; 0x28
   d4dce:	f7ff ffa7 	bl	d4d20 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d4dd2:	793b      	ldrb	r3, [r7, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d4dd4:	b105      	cbz	r5, d4dd8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
   d4dd6:	bb13      	cbnz	r3, d4e1e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d4dd8:	42ab      	cmp	r3, r5
   d4dda:	d009      	beq.n	d4df0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>

      if (!(current <= settings && clock == current.clock_)) {
        HAL_SPI_Set_Settings(_spi, 0, divisor, settings.bitOrder_, settings.dataMode_, nullptr);
   d4ddc:	2100      	movs	r1, #0
   d4dde:	7b3b      	ldrb	r3, [r7, #12]
   d4de0:	9101      	str	r1, [sp, #4]
   d4de2:	7b7c      	ldrb	r4, [r7, #13]
   d4de4:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d4de8:	f898 0004 	ldrb.w	r0, [r8, #4]
   d4dec:	9400      	str	r4, [sp, #0]
   d4dee:	e013      	b.n	d4e18 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xcc>
   d4df0:	68bb      	ldr	r3, [r7, #8]
   d4df2:	42b3      	cmp	r3, r6
   d4df4:	d3f2      	bcc.n	d4ddc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d4df6:	f88d 9020 	strb.w	r9, [sp, #32]
   d4dfa:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d4dfe:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d4e02:	89bb      	ldrh	r3, [r7, #12]
   d4e04:	429a      	cmp	r2, r3
   d4e06:	d1e9      	bne.n	d4ddc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
   d4e08:	e009      	b.n	d4e1e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      }
    } else {
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
   d4e0a:	2300      	movs	r3, #0
   d4e0c:	f898 0004 	ldrb.w	r0, [r8, #4]
   d4e10:	9301      	str	r3, [sp, #4]
   d4e12:	9300      	str	r3, [sp, #0]
   d4e14:	461a      	mov	r2, r3
   d4e16:	2101      	movs	r1, #1
   d4e18:	f7ff fd3c 	bl	d4894 <HAL_SPI_Set_Settings>
   d4e1c:	e002      	b.n	d4e24 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
    if (!settings.default_) {
      uint8_t divisor = 0;
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);

      if (!(current <= settings && clock == current.clock_)) {
   d4e1e:	9b04      	ldr	r3, [sp, #16]
   d4e20:	42b3      	cmp	r3, r6
   d4e22:	d1db      	bne.n	d4ddc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
    }
  }

  return 0;
}
   d4e24:	2000      	movs	r0, #0
   d4e26:	b00f      	add	sp, #60	; 0x3c
   d4e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4e2c <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d4e2c:	b570      	push	{r4, r5, r6, lr}
   d4e2e:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
   d4e30:	7906      	ldrb	r6, [r0, #4]
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
   d4e32:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d4e36:	4604      	mov	r4, r0
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   d4e38:	2214      	movs	r2, #20
   d4e3a:	2100      	movs	r1, #0
   d4e3c:	a803      	add	r0, sp, #12
   d4e3e:	f002 f9d4 	bl	d71ea <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   d4e42:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   d4e44:	a903      	add	r1, sp, #12
   d4e46:	4630      	mov	r0, r6
   d4e48:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   d4e4a:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
   d4e4e:	f7ff fd19 	bl	d4884 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
   d4e52:	ab02      	add	r3, sp, #8
   d4e54:	f10d 0207 	add.w	r2, sp, #7
   d4e58:	4629      	mov	r1, r5
   d4e5a:	9804      	ldr	r0, [sp, #16]
   d4e5c:	f7ff ff60 	bl	d4d20 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
   d4e60:	7920      	ldrb	r0, [r4, #4]
   d4e62:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d4e66:	f7ff fced 	bl	d4844 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
   d4e6a:	9802      	ldr	r0, [sp, #8]
   d4e6c:	b008      	add	sp, #32
   d4e6e:	bd70      	pop	{r4, r5, r6, pc}

000d4e70 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d4e70:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   d4e72:	7900      	ldrb	r0, [r0, #4]
   d4e74:	f7ff fcee 	bl	d4854 <HAL_SPI_Send_Receive_Data>
}
   d4e78:	b2c0      	uxtb	r0, r0
   d4e7a:	bd08      	pop	{r3, pc}

000d4e7c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d4e7c:	7900      	ldrb	r0, [r0, #4]
   d4e7e:	f7ff bcf9 	b.w	d4874 <HAL_SPI_Is_Enabled>
	...

000d4e84 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4e84:	4b04      	ldr	r3, [pc, #16]	; (d4e98 <_GLOBAL__sub_I_System+0x14>)
   d4e86:	2000      	movs	r0, #0
   d4e88:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4e8c:	7018      	strb	r0, [r3, #0]
   d4e8e:	8058      	strh	r0, [r3, #2]
   d4e90:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4e92:	f7ff be07 	b.w	d4aa4 <set_system_mode>
   d4e96:	bf00      	nop
   d4e98:	2003e3a8 	.word	0x2003e3a8

000d4e9c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d4e9c:	b510      	push	{r4, lr}
   d4e9e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d4ea0:	f002 f9f7 	bl	d7292 <strlen>
   d4ea4:	3801      	subs	r0, #1
   d4ea6:	1823      	adds	r3, r4, r0
   d4ea8:	4620      	mov	r0, r4
	while(i<j){
   d4eaa:	4298      	cmp	r0, r3
   d4eac:	d206      	bcs.n	d4ebc <_Z11str_reversePc+0x20>
		c = *i;
   d4eae:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d4eb0:	7819      	ldrb	r1, [r3, #0]
   d4eb2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d4eb6:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d4eba:	e7f6      	b.n	d4eaa <_Z11str_reversePc+0xe>
   d4ebc:	bd10      	pop	{r4, pc}

000d4ebe <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4ebe:	b570      	push	{r4, r5, r6, lr}
   d4ec0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d4ec2:	1e91      	subs	r1, r2, #2
   d4ec4:	2922      	cmp	r1, #34	; 0x22
   d4ec6:	d820      	bhi.n	d4f0a <ultoa+0x4c>
   d4ec8:	4625      	mov	r5, r4
   d4eca:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4ecc:	b910      	cbnz	r0, d4ed4 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4ece:	4423      	add	r3, r4
            *ptr++ = '0';
   d4ed0:	2230      	movs	r2, #48	; 0x30
   d4ed2:	e00e      	b.n	d4ef2 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d4ed4:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d4ed8:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d4edc:	b2c1      	uxtb	r1, r0
   d4ede:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d4ee2:	2809      	cmp	r0, #9
                *ptr += '0';
   d4ee4:	bf94      	ite	ls
   d4ee6:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d4ee8:	3157      	addhi	r1, #87	; 0x57
   d4eea:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d4eee:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4ef0:	e7eb      	b.n	d4eca <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4ef2:	4299      	cmp	r1, r3
   d4ef4:	d202      	bcs.n	d4efc <ultoa+0x3e>
            *ptr++ = '0';
   d4ef6:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4efa:	e7fa      	b.n	d4ef2 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d4efc:	2300      	movs	r3, #0
	str_reverse(buffer);
   d4efe:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d4f00:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d4f02:	f7ff ffcb 	bl	d4e9c <_Z11str_reversePc>
	return buffer;
   d4f06:	4620      	mov	r0, r4
   d4f08:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d4f0a:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d4f0c:	bd70      	pop	{r4, r5, r6, pc}

000d4f0e <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4f0e:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d4f10:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4f12:	460c      	mov	r4, r1
   d4f14:	4615      	mov	r5, r2
	if(a<0){
   d4f16:	da0b      	bge.n	d4f30 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d4f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d4f1c:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d4f20:	bf14      	ite	ne
   d4f22:	4258      	negne	r0, r3
   d4f24:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d4f26:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d4f28:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d4f2a:	462a      	mov	r2, r5
   d4f2c:	4419      	add	r1, r3
   d4f2e:	e000      	b.n	d4f32 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d4f30:	2301      	movs	r3, #1
   d4f32:	f7ff ffc4 	bl	d4ebe <ultoa>
	}
	return buffer;
}
   d4f36:	4620      	mov	r0, r4
   d4f38:	bd38      	pop	{r3, r4, r5, pc}

000d4f3a <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   d4f3a:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   d4f3c:	2301      	movs	r3, #1
   d4f3e:	f7ff ffbe 	bl	d4ebe <ultoa>
}
   d4f42:	bd08      	pop	{r3, pc}

000d4f44 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4f44:	b510      	push	{r4, lr}
   d4f46:	4604      	mov	r4, r0
{
	free(buffer);
   d4f48:	6800      	ldr	r0, [r0, #0]
   d4f4a:	f7ff fe57 	bl	d4bfc <free>
}
   d4f4e:	4620      	mov	r0, r4
   d4f50:	bd10      	pop	{r4, pc}

000d4f52 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4f52:	b510      	push	{r4, lr}
   d4f54:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4f56:	6800      	ldr	r0, [r0, #0]
   d4f58:	b108      	cbz	r0, d4f5e <_ZN6String10invalidateEv+0xc>
   d4f5a:	f7ff fe4f 	bl	d4bfc <free>
	buffer = NULL;
   d4f5e:	2300      	movs	r3, #0
   d4f60:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4f62:	60a3      	str	r3, [r4, #8]
   d4f64:	6063      	str	r3, [r4, #4]
   d4f66:	bd10      	pop	{r4, pc}

000d4f68 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4f68:	b538      	push	{r3, r4, r5, lr}
   d4f6a:	4604      	mov	r4, r0
   d4f6c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4f6e:	6800      	ldr	r0, [r0, #0]
   d4f70:	3101      	adds	r1, #1
   d4f72:	f7ff fe4b 	bl	d4c0c <realloc>
	if (newbuffer) {
   d4f76:	b110      	cbz	r0, d4f7e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4f78:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4f7c:	2001      	movs	r0, #1
	}
	return 0;
}
   d4f7e:	bd38      	pop	{r3, r4, r5, pc}

000d4f80 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4f80:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4f82:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4f84:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4f86:	b113      	cbz	r3, d4f8e <_ZN6String7reserveEj+0xe>
   d4f88:	6843      	ldr	r3, [r0, #4]
   d4f8a:	428b      	cmp	r3, r1
   d4f8c:	d207      	bcs.n	d4f9e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4f8e:	4620      	mov	r0, r4
   d4f90:	f7ff ffea 	bl	d4f68 <_ZN6String12changeBufferEj>
   d4f94:	b120      	cbz	r0, d4fa0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4f96:	68a3      	ldr	r3, [r4, #8]
   d4f98:	b90b      	cbnz	r3, d4f9e <_ZN6String7reserveEj+0x1e>
   d4f9a:	6822      	ldr	r2, [r4, #0]
   d4f9c:	7013      	strb	r3, [r2, #0]
   d4f9e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4fa0:	bd10      	pop	{r4, pc}

000d4fa2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4fa2:	b570      	push	{r4, r5, r6, lr}
   d4fa4:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4fa6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4fa8:	4604      	mov	r4, r0
   d4faa:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4fac:	f7ff ffe8 	bl	d4f80 <_ZN6String7reserveEj>
   d4fb0:	b918      	cbnz	r0, d4fba <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4fb2:	4620      	mov	r0, r4
   d4fb4:	f7ff ffcd 	bl	d4f52 <_ZN6String10invalidateEv>
		return *this;
   d4fb8:	e009      	b.n	d4fce <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4fba:	462a      	mov	r2, r5
   d4fbc:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4fbe:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4fc0:	6820      	ldr	r0, [r4, #0]
   d4fc2:	f002 f907 	bl	d71d4 <memcpy>
	buffer[len] = 0;
   d4fc6:	6822      	ldr	r2, [r4, #0]
   d4fc8:	68a3      	ldr	r3, [r4, #8]
   d4fca:	2100      	movs	r1, #0
   d4fcc:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4fce:	4620      	mov	r0, r4
   d4fd0:	bd70      	pop	{r4, r5, r6, pc}

000d4fd2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4fd2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4fd4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4fd6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4fd8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4fda:	6043      	str	r3, [r0, #4]
	len = 0;
   d4fdc:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4fde:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4fe0:	460d      	mov	r5, r1
   d4fe2:	b139      	cbz	r1, d4ff4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4fe4:	4608      	mov	r0, r1
   d4fe6:	f002 f954 	bl	d7292 <strlen>
   d4fea:	4629      	mov	r1, r5
   d4fec:	4602      	mov	r2, r0
   d4fee:	4620      	mov	r0, r4
   d4ff0:	f7ff ffd7 	bl	d4fa2 <_ZN6String4copyEPKcj>
}
   d4ff4:	4620      	mov	r0, r4
   d4ff6:	bd38      	pop	{r3, r4, r5, pc}

000d4ff8 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4ff8:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d4ffa:	b510      	push	{r4, lr}
   d4ffc:	460b      	mov	r3, r1
   d4ffe:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5000:	d007      	beq.n	d5012 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5002:	6809      	ldr	r1, [r1, #0]
   d5004:	b119      	cbz	r1, d500e <_ZN6StringaSERKS_+0x16>
   d5006:	689a      	ldr	r2, [r3, #8]
   d5008:	f7ff ffcb 	bl	d4fa2 <_ZN6String4copyEPKcj>
   d500c:	e001      	b.n	d5012 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d500e:	f7ff ffa0 	bl	d4f52 <_ZN6String10invalidateEv>

	return *this;
}
   d5012:	4620      	mov	r0, r4
   d5014:	bd10      	pop	{r4, pc}

000d5016 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5016:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5018:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d501a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d501c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d501e:	6043      	str	r3, [r0, #4]
	len = 0;
   d5020:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5022:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5024:	f7ff ffe8 	bl	d4ff8 <_ZN6StringaSERKS_>
}
   d5028:	4620      	mov	r0, r4
   d502a:	bd10      	pop	{r4, pc}

000d502c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d502c:	b538      	push	{r3, r4, r5, lr}
   d502e:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5030:	460c      	mov	r4, r1
   d5032:	b141      	cbz	r1, d5046 <_ZN6StringaSEPKc+0x1a>
   d5034:	4608      	mov	r0, r1
   d5036:	f002 f92c 	bl	d7292 <strlen>
   d503a:	4621      	mov	r1, r4
   d503c:	4602      	mov	r2, r0
   d503e:	4628      	mov	r0, r5
   d5040:	f7ff ffaf 	bl	d4fa2 <_ZN6String4copyEPKcj>
   d5044:	e001      	b.n	d504a <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5046:	f7ff ff84 	bl	d4f52 <_ZN6String10invalidateEv>

	return *this;
}
   d504a:	4628      	mov	r0, r5
   d504c:	bd38      	pop	{r3, r4, r5, pc}

000d504e <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   d504e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5050:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5052:	2300      	movs	r3, #0
   d5054:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d5056:	6063      	str	r3, [r4, #4]
	len = 0;
   d5058:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d505a:	7323      	strb	r3, [r4, #12]
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   d505c:	4608      	mov	r0, r1
{
	init();
	char buf[9];
	utoa(value, buf, base);
   d505e:	a901      	add	r1, sp, #4
   d5060:	f7ff ff6b 	bl	d4f3a <utoa>
	*this = buf;
   d5064:	a901      	add	r1, sp, #4
   d5066:	4620      	mov	r0, r4
   d5068:	f7ff ffe0 	bl	d502c <_ZN6StringaSEPKc>
}
   d506c:	4620      	mov	r0, r4
   d506e:	b004      	add	sp, #16
   d5070:	bd10      	pop	{r4, pc}

000d5072 <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
   d5072:	b510      	push	{r4, lr}
   d5074:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5076:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5078:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d507a:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d507c:	6063      	str	r3, [r4, #4]
	len = 0;
   d507e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5080:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5082:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d5084:	a901      	add	r1, sp, #4
   d5086:	f7ff ff42 	bl	d4f0e <itoa>
	*this = buf;
   d508a:	a901      	add	r1, sp, #4
   d508c:	4620      	mov	r0, r4
   d508e:	f7ff ffcd 	bl	d502c <_ZN6StringaSEPKc>
}
   d5092:	4620      	mov	r0, r4
   d5094:	b00a      	add	sp, #40	; 0x28
   d5096:	bd10      	pop	{r4, pc}

000d5098 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5098:	b570      	push	{r4, r5, r6, lr}
   d509a:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d509c:	460e      	mov	r6, r1
   d509e:	b909      	cbnz	r1, d50a4 <_ZN6String6concatEPKcj+0xc>
   d50a0:	2000      	movs	r0, #0
   d50a2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d50a4:	b16a      	cbz	r2, d50c2 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d50a6:	6883      	ldr	r3, [r0, #8]
   d50a8:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d50aa:	4629      	mov	r1, r5
   d50ac:	f7ff ff68 	bl	d4f80 <_ZN6String7reserveEj>
   d50b0:	2800      	cmp	r0, #0
   d50b2:	d0f5      	beq.n	d50a0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d50b4:	6820      	ldr	r0, [r4, #0]
   d50b6:	68a3      	ldr	r3, [r4, #8]
   d50b8:	4631      	mov	r1, r6
   d50ba:	4418      	add	r0, r3
   d50bc:	f002 f8c6 	bl	d724c <strcpy>
	len = newlen;
   d50c0:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d50c2:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d50c4:	bd70      	pop	{r4, r5, r6, pc}

000d50c6 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d50c6:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d50c8:	688a      	ldr	r2, [r1, #8]
   d50ca:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d50cc:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d50ce:	f7ff ffe3 	bl	d5098 <_ZN6String6concatEPKcj>
   d50d2:	b910      	cbnz	r0, d50da <_ZplRK15StringSumHelperRK6String+0x14>
   d50d4:	4620      	mov	r0, r4
   d50d6:	f7ff ff3c 	bl	d4f52 <_ZN6String10invalidateEv>
	return a;
}
   d50da:	4620      	mov	r0, r4
   d50dc:	bd10      	pop	{r4, pc}

000d50de <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d50de:	b538      	push	{r3, r4, r5, lr}
   d50e0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d50e2:	460d      	mov	r5, r1
   d50e4:	b141      	cbz	r1, d50f8 <_ZplRK15StringSumHelperPKc+0x1a>
   d50e6:	4608      	mov	r0, r1
   d50e8:	f002 f8d3 	bl	d7292 <strlen>
   d50ec:	4629      	mov	r1, r5
   d50ee:	4602      	mov	r2, r0
   d50f0:	4620      	mov	r0, r4
   d50f2:	f7ff ffd1 	bl	d5098 <_ZN6String6concatEPKcj>
   d50f6:	b910      	cbnz	r0, d50fe <_ZplRK15StringSumHelperPKc+0x20>
   d50f8:	4620      	mov	r0, r4
   d50fa:	f7ff ff2a 	bl	d4f52 <_ZN6String10invalidateEv>
	return a;
}
   d50fe:	4620      	mov	r0, r4
   d5100:	bd38      	pop	{r3, r4, r5, pc}

000d5102 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d5102:	6800      	ldr	r0, [r0, #0]
   d5104:	b108      	cbz	r0, d510a <_ZNK6String5toIntEv+0x8>
   d5106:	f002 b853 	b.w	d71b0 <atol>
	return 0;
}
   d510a:	4770      	bx	lr

000d510c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d510c:	680b      	ldr	r3, [r1, #0]
   d510e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5110:	b113      	cbz	r3, d5118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5112:	685a      	ldr	r2, [r3, #4]
   d5114:	3201      	adds	r2, #1
   d5116:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5118:	4770      	bx	lr
	...

000d511c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d511c:	4802      	ldr	r0, [pc, #8]	; (d5128 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d511e:	2300      	movs	r3, #0
   d5120:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5122:	f7ff bbff 	b.w	d4924 <os_mutex_recursive_create>
   d5126:	bf00      	nop
   d5128:	2003e3b0 	.word	0x2003e3b0

000d512c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d512c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d512e:	4606      	mov	r6, r0
   d5130:	460d      	mov	r5, r1
   d5132:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5134:	2400      	movs	r4, #0
  while (size--) {
   d5136:	42bd      	cmp	r5, r7
   d5138:	d00c      	beq.n	d5154 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d513a:	6833      	ldr	r3, [r6, #0]
   d513c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5140:	689b      	ldr	r3, [r3, #8]
   d5142:	4630      	mov	r0, r6
   d5144:	4798      	blx	r3
     if (chunk>=0)
   d5146:	2800      	cmp	r0, #0
   d5148:	db01      	blt.n	d514e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d514a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d514c:	e7f3      	b.n	d5136 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d514e:	2c00      	cmp	r4, #0
   d5150:	bf08      	it	eq
   d5152:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5154:	4620      	mov	r0, r4
   d5156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5158 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5158:	b570      	push	{r4, r5, r6, lr}
   d515a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d515c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d515e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5160:	b149      	cbz	r1, d5176 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5162:	f002 f896 	bl	d7292 <strlen>
   d5166:	682b      	ldr	r3, [r5, #0]
   d5168:	4602      	mov	r2, r0
   d516a:	4621      	mov	r1, r4
   d516c:	4628      	mov	r0, r5
   d516e:	68db      	ldr	r3, [r3, #12]
    }
   d5170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5174:	4718      	bx	r3
    }
   d5176:	bd70      	pop	{r4, r5, r6, pc}

000d5178 <_ZN5Print5printEPKc>:
   d5178:	b508      	push	{r3, lr}
   d517a:	f7ff ffed 	bl	d5158 <_ZN5Print5writeEPKc>
   d517e:	bd08      	pop	{r3, pc}

000d5180 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5180:	6803      	ldr	r3, [r0, #0]
   d5182:	689b      	ldr	r3, [r3, #8]
   d5184:	4718      	bx	r3

000d5186 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5186:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5188:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d518a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d518c:	f7ff fff8 	bl	d5180 <_ZN5Print5printEc>
  n += print('\n');
   d5190:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5192:	4604      	mov	r4, r0
  n += print('\n');
   d5194:	4628      	mov	r0, r5
   d5196:	f7ff fff3 	bl	d5180 <_ZN5Print5printEc>
  return n;
}
   d519a:	4420      	add	r0, r4
   d519c:	bd38      	pop	{r3, r4, r5, pc}

000d519e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d519e:	b530      	push	{r4, r5, lr}
   d51a0:	b08b      	sub	sp, #44	; 0x2c
   d51a2:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d51a4:	2100      	movs	r1, #0
   d51a6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d51aa:	2a01      	cmp	r2, #1
   d51ac:	bf98      	it	ls
   d51ae:	220a      	movls	r2, #10
   d51b0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d51b4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d51b8:	fb05 3312 	mls	r3, r5, r2, r3
   d51bc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d51c0:	2b09      	cmp	r3, #9
   d51c2:	bf94      	ite	ls
   d51c4:	3330      	addls	r3, #48	; 0x30
   d51c6:	3337      	addhi	r3, #55	; 0x37
   d51c8:	b2db      	uxtb	r3, r3
   d51ca:	4621      	mov	r1, r4
   d51cc:	f804 3901 	strb.w	r3, [r4], #-1
   d51d0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d51d2:	2d00      	cmp	r5, #0
   d51d4:	d1ee      	bne.n	d51b4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d51d6:	f7ff ffbf 	bl	d5158 <_ZN5Print5writeEPKc>
}
   d51da:	b00b      	add	sp, #44	; 0x2c
   d51dc:	bd30      	pop	{r4, r5, pc}

000d51de <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d51de:	b410      	push	{r4}
  if (base == 0) return write(n);
   d51e0:	b92a      	cbnz	r2, d51ee <_ZN5Print5printEmi+0x10>
   d51e2:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d51e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d51e8:	689b      	ldr	r3, [r3, #8]
   d51ea:	b2c9      	uxtb	r1, r1
   d51ec:	4718      	bx	r3
  else return printNumber(n, base);
   d51ee:	b2d2      	uxtb	r2, r2
}
   d51f0:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d51f4:	f7ff bfd3 	b.w	d519e <_ZN5Print11printNumberEmh>

000d51f8 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d51f8:	f7ff bff1 	b.w	d51de <_ZN5Print5printEmi>

000d51fc <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d51fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5200:	4607      	mov	r7, r0
   d5202:	460e      	mov	r6, r1
  if (base == 0) {
   d5204:	4615      	mov	r5, r2
   d5206:	b92a      	cbnz	r2, d5214 <_ZN5Print5printEli+0x18>
    return write(n);
   d5208:	6803      	ldr	r3, [r0, #0]
   d520a:	b2c9      	uxtb	r1, r1
   d520c:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d520e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d5212:	4718      	bx	r3
  } else if (base == 10) {
   d5214:	2a0a      	cmp	r2, #10
   d5216:	d102      	bne.n	d521e <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d5218:	2900      	cmp	r1, #0
   d521a:	da01      	bge.n	d5220 <_ZN5Print5printEli+0x24>
   d521c:	e004      	b.n	d5228 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d521e:	b2d2      	uxtb	r2, r2
  }
}
   d5220:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5224:	f7ff bfbb 	b.w	d519e <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5228:	212d      	movs	r1, #45	; 0x2d
   d522a:	f7ff ffa9 	bl	d5180 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d522e:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5230:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d5232:	4271      	negs	r1, r6
   d5234:	4638      	mov	r0, r7
   d5236:	f7ff ffb2 	bl	d519e <_ZN5Print11printNumberEmh>
   d523a:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d523c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5240 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d5240:	f7ff bfdc 	b.w	d51fc <_ZN5Print5printEli>

000d5244 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5244:	b40c      	push	{r2, r3}
   d5246:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d524a:	b087      	sub	sp, #28
   d524c:	af00      	add	r7, sp, #0
   d524e:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5252:	4605      	mov	r5, r0
   d5254:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5258:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d525a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d525c:	4623      	mov	r3, r4
   d525e:	464a      	mov	r2, r9
   d5260:	2114      	movs	r1, #20
   d5262:	1d38      	adds	r0, r7, #4
   d5264:	f7ff fcda 	bl	d4c1c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5268:	2813      	cmp	r0, #19
   d526a:	d805      	bhi.n	d5278 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d526c:	1d39      	adds	r1, r7, #4
   d526e:	4628      	mov	r0, r5
   d5270:	f7ff ff72 	bl	d5158 <_ZN5Print5writeEPKc>
   d5274:	4604      	mov	r4, r0
   d5276:	e013      	b.n	d52a0 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5278:	f100 0308 	add.w	r3, r0, #8
   d527c:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d5280:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5282:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5286:	1c41      	adds	r1, r0, #1
   d5288:	4623      	mov	r3, r4
   d528a:	464a      	mov	r2, r9
   d528c:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d528e:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5290:	f7ff fcc4 	bl	d4c1c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5294:	4669      	mov	r1, sp
   d5296:	4628      	mov	r0, r5
   d5298:	f7ff ff5e 	bl	d5158 <_ZN5Print5writeEPKc>
   d529c:	4604      	mov	r4, r0
   d529e:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d52a0:	b11e      	cbz	r6, d52aa <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d52a2:	4628      	mov	r0, r5
   d52a4:	f7ff ff6f 	bl	d5186 <_ZN5Print7printlnEv>
   d52a8:	4404      	add	r4, r0
    return n;
}
   d52aa:	4620      	mov	r0, r4
   d52ac:	371c      	adds	r7, #28
   d52ae:	46bd      	mov	sp, r7
   d52b0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d52b4:	b002      	add	sp, #8
   d52b6:	4770      	bx	lr

000d52b8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d52b8:	4b01      	ldr	r3, [pc, #4]	; (d52c0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d52ba:	4a02      	ldr	r2, [pc, #8]	; (d52c4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d52bc:	601a      	str	r2, [r3, #0]
   d52be:	4770      	bx	lr
   d52c0:	2003e3b4 	.word	0x2003e3b4
   d52c4:	000d758f 	.word	0x000d758f

000d52c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d52c8:	4b02      	ldr	r3, [pc, #8]	; (d52d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d52ca:	681a      	ldr	r2, [r3, #0]
   d52cc:	4b02      	ldr	r3, [pc, #8]	; (d52d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d52ce:	601a      	str	r2, [r3, #0]
   d52d0:	4770      	bx	lr
   d52d2:	bf00      	nop
   d52d4:	2003e248 	.word	0x2003e248
   d52d8:	2003e3b8 	.word	0x2003e3b8

000d52dc <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d52dc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d52de:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d52e0:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d52e2:	b113      	cbz	r3, d52ea <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d52e4:	2203      	movs	r2, #3
   d52e6:	4601      	mov	r1, r0
   d52e8:	4798      	blx	r3
    }
   d52ea:	4620      	mov	r0, r4
   d52ec:	bd10      	pop	{r4, pc}

000d52ee <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d52ee:	b510      	push	{r4, lr}
   d52f0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d52f2:	f7ff fff3 	bl	d52dc <_ZNSt14_Function_baseD1Ev>
   d52f6:	4620      	mov	r0, r4
   d52f8:	bd10      	pop	{r4, pc}

000d52fa <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d52fa:	b513      	push	{r0, r1, r4, lr}
   d52fc:	460b      	mov	r3, r1
   d52fe:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5300:	c803      	ldmia	r0, {r0, r1}
   d5302:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5306:	e893 0003 	ldmia.w	r3, {r0, r1}
   d530a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d530e:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5312:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5316:	b002      	add	sp, #8
   d5318:	bd10      	pop	{r4, pc}
	...

000d531c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d531c:	4803      	ldr	r0, [pc, #12]	; (d532c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d531e:	4a04      	ldr	r2, [pc, #16]	; (d5330 <_GLOBAL__sub_I_RGB+0x14>)
   d5320:	4904      	ldr	r1, [pc, #16]	; (d5334 <_GLOBAL__sub_I_RGB+0x18>)
   d5322:	2300      	movs	r3, #0
   d5324:	6083      	str	r3, [r0, #8]
   d5326:	f001 b857 	b.w	d63d8 <__aeabi_atexit>
   d532a:	bf00      	nop
   d532c:	2003e3bc 	.word	0x2003e3bc
   d5330:	2003e2b8 	.word	0x2003e2b8
   d5334:	000d52ef 	.word	0x000d52ef

000d5338 <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d5338:	4770      	bx	lr

000d533a <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d533a:	7d00      	ldrb	r0, [r0, #20]
   d533c:	4770      	bx	lr
	...

000d5340 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d5340:	7d03      	ldrb	r3, [r0, #20]
   d5342:	b11b      	cbz	r3, d534c <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d5344:	6983      	ldr	r3, [r0, #24]
   d5346:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d534a:	d102      	bne.n	d5352 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d534c:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5364 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d5350:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d5352:	ee07 3a90 	vmov	s15, r3
   d5356:	ed9f 7a04 	vldr	s14, [pc, #16]	; d5368 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d535a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d535e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d5362:	4770      	bx	lr
   d5364:	00000000 	.word	0x00000000
   d5368:	42c80000 	.word	0x42c80000

000d536c <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d536c:	7d03      	ldrb	r3, [r0, #20]
   d536e:	b11b      	cbz	r3, d5378 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d5370:	6a03      	ldr	r3, [r0, #32]
   d5372:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d5376:	d102      	bne.n	d537e <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d5378:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5390 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d537c:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d537e:	ee07 3a90 	vmov	s15, r3
   d5382:	ed9f 7a04 	vldr	s14, [pc, #16]	; d5394 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d5386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d538a:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d538e:	4770      	bx	lr
   d5390:	00000000 	.word	0x00000000
   d5394:	42c80000 	.word	0x42c80000

000d5398 <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
   d5398:	b570      	push	{r4, r5, r6, lr}
   d539a:	460d      	mov	r5, r1
   d539c:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d539e:	220a      	movs	r2, #10
   d53a0:	6881      	ldr	r1, [r0, #8]
   d53a2:	4628      	mov	r0, r5
   d53a4:	f7ff ff4c 	bl	d5240 <_ZN5Print5printEii>
    n += p.print(',');
   d53a8:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d53aa:	4604      	mov	r4, r0
    n += p.print(',');
   d53ac:	4628      	mov	r0, r5
   d53ae:	f7ff fee7 	bl	d5180 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d53b2:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d53b4:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d53b6:	68f1      	ldr	r1, [r6, #12]
   d53b8:	4628      	mov	r0, r5
   d53ba:	f7ff ff41 	bl	d5240 <_ZN5Print5printEii>
    return n;
}
   d53be:	4420      	add	r0, r4
   d53c0:	bd70      	pop	{r4, r5, r6, pc}

000d53c2 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d53c2:	f1a0 0004 	sub.w	r0, r0, #4
   d53c6:	f7ff bfe7 	b.w	d5398 <_ZNK14CellularSignal7printToER5Print>

000d53ca <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d53ca:	b510      	push	{r4, lr}
   d53cc:	2128      	movs	r1, #40	; 0x28
   d53ce:	4604      	mov	r4, r0
   d53d0:	f001 f807 	bl	d63e2 <_ZdlPvj>
   d53d4:	4620      	mov	r0, r4
   d53d6:	bd10      	pop	{r4, pc}

000d53d8 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d53d8:	7d03      	ldrb	r3, [r0, #20]
   d53da:	b17b      	cbz	r3, d53fc <_ZNK14CellularSignal10getQualityEv+0x24>
   d53dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d53de:	2b00      	cmp	r3, #0
   d53e0:	db0c      	blt.n	d53fc <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d53e2:	ee07 3a90 	vmov	s15, r3
   d53e6:	eddf 6a07 	vldr	s13, [pc, #28]	; d5404 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d53ea:	ed9f 0a07 	vldr	s0, [pc, #28]	; d5408 <_ZNK14CellularSignal10getQualityEv+0x30>
   d53ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d53f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d53f6:	ee27 0a80 	vmul.f32	s0, s15, s0
   d53fa:	4770      	bx	lr
    }

    return -1.0f;
   d53fc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d5400:	4770      	bx	lr
   d5402:	bf00      	nop
   d5404:	477fff00 	.word	0x477fff00
   d5408:	42c80000 	.word	0x42c80000

000d540c <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d540c:	7d03      	ldrb	r3, [r0, #20]
   d540e:	b17b      	cbz	r3, d5430 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d5410:	69c3      	ldr	r3, [r0, #28]
   d5412:	2b00      	cmp	r3, #0
   d5414:	db0c      	blt.n	d5430 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d5416:	ee07 3a90 	vmov	s15, r3
   d541a:	eddf 6a07 	vldr	s13, [pc, #28]	; d5438 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d541e:	ed9f 0a07 	vldr	s0, [pc, #28]	; d543c <_ZNK14CellularSignal11getStrengthEv+0x30>
   d5422:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d5426:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d542a:	ee27 0a80 	vmul.f32	s0, s15, s0
   d542e:	4770      	bx	lr
    }

    return -1.0f;
   d5430:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d5434:	4770      	bx	lr
   d5436:	bf00      	nop
   d5438:	477fff00 	.word	0x477fff00
   d543c:	42c80000 	.word	0x42c80000

000d5440 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d5440:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d5442:	460d      	mov	r5, r1
   d5444:	f100 0410 	add.w	r4, r0, #16
   d5448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d544a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d544c:	e895 0003 	ldmia.w	r5, {r0, r1}
   d5450:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d5454:	2001      	movs	r0, #1
   d5456:	bd30      	pop	{r4, r5, pc}

000d5458 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5458:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d545a:	4b0c      	ldr	r3, [pc, #48]	; (d548c <serialEventRun+0x34>)
   d545c:	b133      	cbz	r3, d546c <serialEventRun+0x14>
   d545e:	f000 fc25 	bl	d5cac <_Z16_fetch_usbserialv>
   d5462:	6803      	ldr	r3, [r0, #0]
   d5464:	691b      	ldr	r3, [r3, #16]
   d5466:	4798      	blx	r3
   d5468:	2800      	cmp	r0, #0
   d546a:	dc09      	bgt.n	d5480 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d546c:	4b08      	ldr	r3, [pc, #32]	; (d5490 <serialEventRun+0x38>)
   d546e:	b163      	cbz	r3, d548a <serialEventRun+0x32>
   d5470:	f000 fd24 	bl	d5ebc <_Z22__fetch_global_Serial1v>
   d5474:	6803      	ldr	r3, [r0, #0]
   d5476:	691b      	ldr	r3, [r3, #16]
   d5478:	4798      	blx	r3
   d547a:	2800      	cmp	r0, #0
   d547c:	dc03      	bgt.n	d5486 <serialEventRun+0x2e>
   d547e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5480:	f3af 8000 	nop.w
   d5484:	e7f2      	b.n	d546c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5486:	f3af 8000 	nop.w
   d548a:	bd08      	pop	{r3, pc}
	...

000d5494 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5494:	b508      	push	{r3, lr}
	serialEventRun();
   d5496:	f7ff ffdf 	bl	d5458 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d549a:	f7ff fa0b 	bl	d48b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d549e:	4b01      	ldr	r3, [pc, #4]	; (d54a4 <_post_loop+0x10>)
   d54a0:	6018      	str	r0, [r3, #0]
   d54a2:	bd08      	pop	{r3, pc}
   d54a4:	2003e734 	.word	0x2003e734

000d54a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d54a8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d54aa:	2300      	movs	r3, #0
   d54ac:	9300      	str	r3, [sp, #0]
   d54ae:	461a      	mov	r2, r3
   d54b0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d54b4:	f7ff fb18 	bl	d4ae8 <system_ctrl_set_result>
}
   d54b8:	b003      	add	sp, #12
   d54ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d54c0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d54c0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d54c2:	8843      	ldrh	r3, [r0, #2]
   d54c4:	2b0a      	cmp	r3, #10
   d54c6:	d008      	beq.n	d54da <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d54c8:	2b50      	cmp	r3, #80	; 0x50
   d54ca:	d109      	bne.n	d54e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d54cc:	4b09      	ldr	r3, [pc, #36]	; (d54f4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d54ce:	681b      	ldr	r3, [r3, #0]
   d54d0:	b13b      	cbz	r3, d54e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d54d2:	b003      	add	sp, #12
   d54d4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d54d8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d54da:	f7ff ffe5 	bl	d54a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d54de:	e006      	b.n	d54ee <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d54e0:	2300      	movs	r3, #0
   d54e2:	9300      	str	r3, [sp, #0]
   d54e4:	461a      	mov	r2, r3
   d54e6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d54ea:	f7ff fafd 	bl	d4ae8 <system_ctrl_set_result>
        break;
    }
}
   d54ee:	b003      	add	sp, #12
   d54f0:	f85d fb04 	ldr.w	pc, [sp], #4
   d54f4:	2003e3cc 	.word	0x2003e3cc

000d54f8 <module_user_init_hook>:

void module_user_init_hook()
{
   d54f8:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d54fa:	f7ff f9d3 	bl	d48a4 <HAL_RNG_GetRandomNumber>
   d54fe:	4604      	mov	r4, r0
    srand(seed);
   d5500:	f001 fe7c 	bl	d71fc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5504:	4b07      	ldr	r3, [pc, #28]	; (d5524 <module_user_init_hook+0x2c>)
   d5506:	b113      	cbz	r3, d550e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5508:	4620      	mov	r0, r4
   d550a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d550e:	2100      	movs	r1, #0
   d5510:	4804      	ldr	r0, [pc, #16]	; (d5524 <module_user_init_hook+0x2c>)
   d5512:	f7ff fb63 	bl	d4bdc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5516:	2100      	movs	r1, #0
   d5518:	4803      	ldr	r0, [pc, #12]	; (d5528 <module_user_init_hook+0x30>)
}
   d551a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d551e:	f7ff bad9 	b.w	d4ad4 <system_ctrl_set_app_request_handler>
   d5522:	bf00      	nop
   d5524:	00000000 	.word	0x00000000
   d5528:	000d54c1 	.word	0x000d54c1

000d552c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d552c:	4770      	bx	lr

000d552e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d552e:	2000      	movs	r0, #0
   d5530:	4770      	bx	lr

000d5532 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5532:	b510      	push	{r4, lr}
   d5534:	2110      	movs	r1, #16
   d5536:	4604      	mov	r4, r0
   d5538:	f000 ff53 	bl	d63e2 <_ZdlPvj>
   d553c:	4620      	mov	r0, r4
   d553e:	bd10      	pop	{r4, pc}

000d5540 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5540:	b508      	push	{r3, lr}
      { delete this; }
   d5542:	b108      	cbz	r0, d5548 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5544:	f7ff fff5 	bl	d5532 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5548:	bd08      	pop	{r3, pc}

000d554a <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d554a:	2200      	movs	r2, #0
   d554c:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d554e:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5550:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5554:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5556:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d555a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d555c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d555e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5560:	680c      	ldr	r4, [r1, #0]
   d5562:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5564:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d5566:	bd10      	pop	{r4, pc}

000d5568 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5568:	b510      	push	{r4, lr}
   d556a:	4604      	mov	r4, r0
    free((void*)msg_);
   d556c:	6800      	ldr	r0, [r0, #0]
   d556e:	f7ff fb45 	bl	d4bfc <free>
}
   d5572:	4620      	mov	r0, r4
   d5574:	bd10      	pop	{r4, pc}

000d5576 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5576:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5578:	68c4      	ldr	r4, [r0, #12]
   d557a:	b1f4      	cbz	r4, d55ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d557c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d557e:	2b02      	cmp	r3, #2
   d5580:	d103      	bne.n	d558a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5582:	f104 000c 	add.w	r0, r4, #12
   d5586:	f7ff ffef 	bl	d5568 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d558a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d558c:	b135      	cbz	r5, d559c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d558e:	4628      	mov	r0, r5
   d5590:	f7ff fea4 	bl	d52dc <_ZNSt14_Function_baseD1Ev>
   d5594:	2110      	movs	r1, #16
   d5596:	4628      	mov	r0, r5
   d5598:	f000 ff23 	bl	d63e2 <_ZdlPvj>
   d559c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d559e:	b135      	cbz	r5, d55ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d55a0:	4628      	mov	r0, r5
   d55a2:	f7ff fe9b 	bl	d52dc <_ZNSt14_Function_baseD1Ev>
   d55a6:	2110      	movs	r1, #16
   d55a8:	4628      	mov	r0, r5
   d55aa:	f000 ff1a 	bl	d63e2 <_ZdlPvj>
   d55ae:	4620      	mov	r0, r4
   d55b0:	2114      	movs	r1, #20
   d55b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d55b6:	f000 bf14 	b.w	d63e2 <_ZdlPvj>
   d55ba:	bd38      	pop	{r3, r4, r5, pc}

000d55bc <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d55bc:	b510      	push	{r4, lr}
   d55be:	b088      	sub	sp, #32
   d55c0:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d55c2:	4668      	mov	r0, sp
   d55c4:	f7ff fd05 	bl	d4fd2 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d55c8:	4669      	mov	r1, sp
   d55ca:	a804      	add	r0, sp, #16
   d55cc:	f7ff fd23 	bl	d5016 <_ZN6StringC1ERKS_>
   d55d0:	a804      	add	r0, sp, #16
   d55d2:	47a0      	blx	r4
   d55d4:	4604      	mov	r4, r0
   d55d6:	a804      	add	r0, sp, #16
   d55d8:	f7ff fcb4 	bl	d4f44 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d55dc:	4668      	mov	r0, sp
   d55de:	f7ff fcb1 	bl	d4f44 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d55e2:	4620      	mov	r0, r4
   d55e4:	b008      	add	sp, #32
   d55e6:	bd10      	pop	{r4, pc}

000d55e8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d55e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d55ea:	2410      	movs	r4, #16
   d55ec:	b085      	sub	sp, #20
   d55ee:	4607      	mov	r7, r0
   d55f0:	460e      	mov	r6, r1
   d55f2:	4615      	mov	r5, r2
   d55f4:	2100      	movs	r1, #0
   d55f6:	4622      	mov	r2, r4
   d55f8:	4668      	mov	r0, sp
   d55fa:	f001 fdf6 	bl	d71ea <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d55fe:	2200      	movs	r2, #0
   d5600:	4669      	mov	r1, sp
   d5602:	4610      	mov	r0, r2
         size = sizeof(*this);
   d5604:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d5608:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d560a:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d560c:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d560e:	f7ff facd 	bl	d4bac <spark_function>
}
   d5612:	b005      	add	sp, #20
   d5614:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5616 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d5616:	b513      	push	{r0, r1, r4, lr}
   d5618:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d561a:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d561e:	2300      	movs	r3, #0
   d5620:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5622:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5624:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5626:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5628:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d562a:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d562c:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d562e:	f7fe fe23 	bl	d4278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5632:	4620      	mov	r0, r4
   d5634:	b002      	add	sp, #8
   d5636:	bd10      	pop	{r4, pc}

000d5638 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d563a:	460c      	mov	r4, r1
   d563c:	ad02      	add	r5, sp, #8
   d563e:	f854 3b04 	ldr.w	r3, [r4], #4
   d5642:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5646:	4606      	mov	r6, r0
   d5648:	460f      	mov	r7, r1
   d564a:	a801      	add	r0, sp, #4
   d564c:	4621      	mov	r1, r4
   d564e:	f7ff fd5d 	bl	d510c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5652:	4629      	mov	r1, r5
   d5654:	4630      	mov	r0, r6
   d5656:	f7ff ffde 	bl	d5616 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d565a:	a801      	add	r0, sp, #4
   d565c:	f7fe fe0c 	bl	d4278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5660:	4620      	mov	r0, r4
   d5662:	f7fe fe09 	bl	d4278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5666:	4638      	mov	r0, r7
   d5668:	2108      	movs	r1, #8
   d566a:	f000 feba 	bl	d63e2 <_ZdlPvj>
        return p;
    }
   d566e:	4630      	mov	r0, r6
   d5670:	b003      	add	sp, #12
   d5672:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5674:	b538      	push	{r3, r4, r5, lr}
   d5676:	2300      	movs	r3, #0
   d5678:	4604      	mov	r4, r0
   d567a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d567c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d567e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5680:	f7fe fd0b 	bl	d409a <_Znwj>
   d5684:	b128      	cbz	r0, d5692 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5686:	2301      	movs	r3, #1
   d5688:	6043      	str	r3, [r0, #4]
   d568a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d568c:	4b02      	ldr	r3, [pc, #8]	; (d5698 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d568e:	6003      	str	r3, [r0, #0]
   d5690:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5692:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d5694:	4620      	mov	r0, r4
   d5696:	bd38      	pop	{r3, r4, r5, pc}
   d5698:	000d7664 	.word	0x000d7664

000d569c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d569c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d569e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d56a0:	b90a      	cbnz	r2, d56a6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d56a2:	f000 fea0 	bl	d63e6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d56a6:	68c3      	ldr	r3, [r0, #12]
    }
   d56a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d56ac:	4718      	bx	r3

000d56ae <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d56ae:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d56b0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d56b2:	f100 0110 	add.w	r1, r0, #16
   d56b6:	f7ff fff1 	bl	d569c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d56ba:	bd08      	pop	{r3, pc}

000d56bc <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d56bc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d56be:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d56c0:	b90a      	cbnz	r2, d56c6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d56c2:	f000 fe90 	bl	d63e6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d56c6:	68c3      	ldr	r3, [r0, #12]
    }
   d56c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d56cc:	4718      	bx	r3

000d56ce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d56ce:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d56d0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d56d2:	f100 0110 	add.w	r1, r0, #16
   d56d6:	f7ff fff1 	bl	d56bc <_ZNKSt8functionIFvRKbEEclES1_>
   d56da:	bd08      	pop	{r3, pc}

000d56dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d56dc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d56de:	2300      	movs	r3, #0
   d56e0:	6083      	str	r3, [r0, #8]
   d56e2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d56e4:	4604      	mov	r4, r0
   d56e6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d56e8:	b12b      	cbz	r3, d56f6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d56ea:	2202      	movs	r2, #2
   d56ec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d56ee:	68eb      	ldr	r3, [r5, #12]
   d56f0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d56f2:	68ab      	ldr	r3, [r5, #8]
   d56f4:	60a3      	str	r3, [r4, #8]
	}
    }
   d56f6:	4620      	mov	r0, r4
   d56f8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d56fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d56fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d56fe:	b089      	sub	sp, #36	; 0x24
   d5700:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5702:	4668      	mov	r0, sp
   d5704:	f7ff ff21 	bl	d554a <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5708:	2300      	movs	r3, #0
   d570a:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d570e:	f04f 0202 	mov.w	r2, #2
   d5712:	e8d4 3f4f 	ldrexb	r3, [r4]
   d5716:	2b00      	cmp	r3, #0
   d5718:	d103      	bne.n	d5722 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d571a:	e8c4 2f41 	strexb	r1, r2, [r4]
   d571e:	2900      	cmp	r1, #0
   d5720:	d1f7      	bne.n	d5712 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d5722:	d002      	beq.n	d572a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d5724:	f88d 3008 	strb.w	r3, [sp, #8]
   d5728:	e063      	b.n	d57f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d572a:	f114 050c 	adds.w	r5, r4, #12
   d572e:	d003      	beq.n	d5738 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d5730:	4669      	mov	r1, sp
   d5732:	4628      	mov	r0, r5
   d5734:	f7ff ff09 	bl	d554a <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5738:	f3bf 8f5f 	dmb	sy
   d573c:	2301      	movs	r3, #1
   d573e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5740:	2000      	movs	r0, #0
   d5742:	f104 0308 	add.w	r3, r4, #8
   d5746:	f3bf 8f5f 	dmb	sy
   d574a:	e853 6f00 	ldrex	r6, [r3]
   d574e:	e843 0200 	strex	r2, r0, [r3]
   d5752:	2a00      	cmp	r2, #0
   d5754:	d1f9      	bne.n	d574a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d5756:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d575a:	2e00      	cmp	r6, #0
   d575c:	d049      	beq.n	d57f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d575e:	f7ff f9a9 	bl	d4ab4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5762:	b120      	cbz	r0, d576e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5764:	4629      	mov	r1, r5
   d5766:	4630      	mov	r0, r6
   d5768:	f7ff ff98 	bl	d569c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d576c:	e03a      	b.n	d57e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d576e:	4631      	mov	r1, r6
   d5770:	a802      	add	r0, sp, #8
   d5772:	f7ff ffb3 	bl	d56dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5776:	68e0      	ldr	r0, [r4, #12]
   d5778:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d577c:	b108      	cbz	r0, d5782 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d577e:	f001 fd6d 	bl	d725c <strdup>
   d5782:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5784:	2010      	movs	r0, #16
   d5786:	f8ad 501c 	strh.w	r5, [sp, #28]
   d578a:	f7fe fc86 	bl	d409a <_Znwj>
   d578e:	4605      	mov	r5, r0
   d5790:	b1e8      	cbz	r0, d57ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5792:	2700      	movs	r7, #0
   d5794:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5796:	2018      	movs	r0, #24
   d5798:	f7fe fc7f 	bl	d409a <_Znwj>
   d579c:	4604      	mov	r4, r0
   d579e:	b188      	cbz	r0, d57c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d57a0:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d57a2:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d57a4:	a802      	add	r0, sp, #8
   d57a6:	f7ff fda8 	bl	d52fa <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57aa:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d57ac:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d57ae:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57b0:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d57b2:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d57b4:	a906      	add	r1, sp, #24
   d57b6:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d57b8:	60e3      	str	r3, [r4, #12]
   d57ba:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d57be:	9205      	str	r2, [sp, #20]
   d57c0:	f7ff fec3 	bl	d554a <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d57c4:	4b0d      	ldr	r3, [pc, #52]	; (d57fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d57c6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d57c8:	4b0d      	ldr	r3, [pc, #52]	; (d5800 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d57ca:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d57cc:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d57ce:	a806      	add	r0, sp, #24
   d57d0:	f7ff feca 	bl	d5568 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d57d4:	a802      	add	r0, sp, #8
   d57d6:	f7ff fd81 	bl	d52dc <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d57da:	2200      	movs	r2, #0
   d57dc:	4629      	mov	r1, r5
   d57de:	4809      	ldr	r0, [pc, #36]	; (d5804 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d57e0:	f7ff f970 	bl	d4ac4 <application_thread_invoke>
   d57e4:	4630      	mov	r0, r6
   d57e6:	f7ff fd79 	bl	d52dc <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d57ea:	2110      	movs	r1, #16
   d57ec:	4630      	mov	r0, r6
   d57ee:	f000 fdf8 	bl	d63e2 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d57f2:	4668      	mov	r0, sp
   d57f4:	f7ff feb8 	bl	d5568 <_ZN8particle5ErrorD1Ev>
    }
   d57f8:	b009      	add	sp, #36	; 0x24
   d57fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d57fc:	000d56af 	.word	0x000d56af
   d5800:	000d5925 	.word	0x000d5925
   d5804:	000d5f09 	.word	0x000d5f09

000d5808 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d580c:	b08b      	sub	sp, #44	; 0x2c
   d580e:	4606      	mov	r6, r0
   d5810:	460f      	mov	r7, r1
   d5812:	4690      	mov	r8, r2
   d5814:	4699      	mov	r9, r3
   d5816:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d581a:	f7ff f9cf 	bl	d4bbc <spark_cloud_flag_connected>
   d581e:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d5820:	4683      	mov	fp, r0
   d5822:	bb30      	cbnz	r0, d5872 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5824:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5828:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d582a:	a905      	add	r1, sp, #20
   d582c:	4628      	mov	r0, r5
   d582e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5832:	f7ff fe8a 	bl	d554a <_ZN8particle5ErrorC1EOS0_>
   d5836:	2014      	movs	r0, #20
   d5838:	f7fe fc2f 	bl	d409a <_Znwj>
   d583c:	4604      	mov	r4, r0
   d583e:	b158      	cbz	r0, d5858 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5840:	2302      	movs	r3, #2
   d5842:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5844:	2301      	movs	r3, #1
   d5846:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5848:	f8c0 b004 	str.w	fp, [r0, #4]
   d584c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5850:	4629      	mov	r1, r5
   d5852:	300c      	adds	r0, #12
   d5854:	f7ff fe79 	bl	d554a <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5858:	4630      	mov	r0, r6
   d585a:	4621      	mov	r1, r4
   d585c:	f840 4b04 	str.w	r4, [r0], #4
   d5860:	f7ff ff08 	bl	d5674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5864:	4628      	mov	r0, r5
   d5866:	f7ff fe7f 	bl	d5568 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d586a:	a805      	add	r0, sp, #20
   d586c:	f7ff fe7c 	bl	d5568 <_ZN8particle5ErrorD1Ev>
   d5870:	e052      	b.n	d5918 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5872:	2400      	movs	r4, #0
   d5874:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5876:	2014      	movs	r0, #20
   d5878:	606c      	str	r4, [r5, #4]
   d587a:	60ac      	str	r4, [r5, #8]
   d587c:	9307      	str	r3, [sp, #28]
   d587e:	f7fe fc0c 	bl	d409a <_Znwj>
   d5882:	4601      	mov	r1, r0
   d5884:	b118      	cbz	r0, d588e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d5886:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5888:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d588a:	6044      	str	r4, [r0, #4]
   d588c:	6084      	str	r4, [r0, #8]
   d588e:	a804      	add	r0, sp, #16
   d5890:	9103      	str	r1, [sp, #12]
   d5892:	f7ff feef 	bl	d5674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5896:	4b22      	ldr	r3, [pc, #136]	; (d5920 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5898:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d589a:	2008      	movs	r0, #8
   d589c:	f7fe fbfd 	bl	d409a <_Znwj>
   d58a0:	4604      	mov	r4, r0
   d58a2:	b128      	cbz	r0, d58b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d58a4:	9b03      	ldr	r3, [sp, #12]
   d58a6:	f840 3b04 	str.w	r3, [r0], #4
   d58aa:	a904      	add	r1, sp, #16
   d58ac:	f7ff fc2e 	bl	d510c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d58b0:	9500      	str	r5, [sp, #0]
   d58b2:	fa5f f38a 	uxtb.w	r3, sl
   d58b6:	464a      	mov	r2, r9
   d58b8:	4641      	mov	r1, r8
   d58ba:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d58bc:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d58be:	f7ff f985 	bl	d4bcc <spark_send_event>
   d58c2:	b920      	cbnz	r0, d58ce <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d58c4:	9b03      	ldr	r3, [sp, #12]
   d58c6:	785b      	ldrb	r3, [r3, #1]
   d58c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d58cc:	b183      	cbz	r3, d58f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d58ce:	9b03      	ldr	r3, [sp, #12]
   d58d0:	9305      	str	r3, [sp, #20]
   d58d2:	a904      	add	r1, sp, #16
   d58d4:	a806      	add	r0, sp, #24
   d58d6:	f7ff fc19 	bl	d510c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d58da:	a905      	add	r1, sp, #20
   d58dc:	4630      	mov	r0, r6
   d58de:	f7ff fe9a 	bl	d5616 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d58e2:	a806      	add	r0, sp, #24
   d58e4:	f7fe fcc8 	bl	d4278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d58e8:	a804      	add	r0, sp, #16
   d58ea:	f7fe fcc5 	bl	d4278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d58ee:	e013      	b.n	d5918 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d58f0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d58f4:	a905      	add	r1, sp, #20
   d58f6:	a803      	add	r0, sp, #12
   d58f8:	9205      	str	r2, [sp, #20]
   d58fa:	f8ad 3018 	strh.w	r3, [sp, #24]
   d58fe:	f7ff fefd 	bl	d56fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5902:	a805      	add	r0, sp, #20
   d5904:	f7ff fe30 	bl	d5568 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5908:	a805      	add	r0, sp, #20
   d590a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d590c:	f7ff fe94 	bl	d5638 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d5910:	a806      	add	r0, sp, #24
   d5912:	f7fe fcb1 	bl	d4278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5916:	e7da      	b.n	d58ce <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d5918:	4630      	mov	r0, r6
   d591a:	b00b      	add	sp, #44	; 0x2c
   d591c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5920:	000d5a95 	.word	0x000d5a95

000d5924 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5924:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5928:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d592a:	d006      	beq.n	d593a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d592c:	2a03      	cmp	r2, #3
   d592e:	d017      	beq.n	d5960 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5930:	2a01      	cmp	r2, #1
   d5932:	d122      	bne.n	d597a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5934:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5936:	6003      	str	r3, [r0, #0]
	      break;
   d5938:	e01f      	b.n	d597a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d593a:	2018      	movs	r0, #24
   d593c:	680e      	ldr	r6, [r1, #0]
   d593e:	f7fe fbac 	bl	d409a <_Znwj>
   d5942:	4605      	mov	r5, r0
   d5944:	b150      	cbz	r0, d595c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5946:	4631      	mov	r1, r6
   d5948:	f7ff fec8 	bl	d56dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d594c:	6930      	ldr	r0, [r6, #16]
   d594e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5952:	b108      	cbz	r0, d5958 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5954:	f001 fc82 	bl	d725c <strdup>
   d5958:	6128      	str	r0, [r5, #16]
   d595a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d595c:	6025      	str	r5, [r4, #0]
   d595e:	e00c      	b.n	d597a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5960:	6804      	ldr	r4, [r0, #0]
   d5962:	b154      	cbz	r4, d597a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5964:	f104 0010 	add.w	r0, r4, #16
   d5968:	f7ff fdfe 	bl	d5568 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d596c:	4620      	mov	r0, r4
   d596e:	f7ff fcb5 	bl	d52dc <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5972:	2118      	movs	r1, #24
   d5974:	4620      	mov	r0, r4
   d5976:	f000 fd34 	bl	d63e2 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d597a:	2000      	movs	r0, #0
   d597c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d597e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d597e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5980:	2300      	movs	r3, #0
   d5982:	6083      	str	r3, [r0, #8]
   d5984:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5986:	4604      	mov	r4, r0
   d5988:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d598a:	b12b      	cbz	r3, d5998 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d598c:	2202      	movs	r2, #2
   d598e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5990:	68eb      	ldr	r3, [r5, #12]
   d5992:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5994:	68ab      	ldr	r3, [r5, #8]
   d5996:	60a3      	str	r3, [r4, #8]
	}
    }
   d5998:	4620      	mov	r0, r4
   d599a:	bd38      	pop	{r3, r4, r5, pc}

000d599c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d599c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d599e:	b570      	push	{r4, r5, r6, lr}
   d59a0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d59a2:	d006      	beq.n	d59b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d59a4:	2a03      	cmp	r2, #3
   d59a6:	d011      	beq.n	d59cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d59a8:	2a01      	cmp	r2, #1
   d59aa:	d118      	bne.n	d59de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d59ac:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d59ae:	6003      	str	r3, [r0, #0]
	      break;
   d59b0:	e015      	b.n	d59de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d59b2:	2014      	movs	r0, #20
   d59b4:	680e      	ldr	r6, [r1, #0]
   d59b6:	f7fe fb70 	bl	d409a <_Znwj>
   d59ba:	4605      	mov	r5, r0
   d59bc:	b120      	cbz	r0, d59c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d59be:	4631      	mov	r1, r6
   d59c0:	f7ff ffdd 	bl	d597e <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d59c4:	7c33      	ldrb	r3, [r6, #16]
   d59c6:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d59c8:	6025      	str	r5, [r4, #0]
   d59ca:	e008      	b.n	d59de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d59cc:	6804      	ldr	r4, [r0, #0]
   d59ce:	b134      	cbz	r4, d59de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d59d0:	4620      	mov	r0, r4
   d59d2:	f7ff fc83 	bl	d52dc <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d59d6:	2114      	movs	r1, #20
   d59d8:	4620      	mov	r0, r4
   d59da:	f000 fd02 	bl	d63e2 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d59de:	2000      	movs	r0, #0
   d59e0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d59e4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d59e4:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d59e6:	2300      	movs	r3, #0
   d59e8:	b087      	sub	sp, #28
   d59ea:	460c      	mov	r4, r1
   d59ec:	f3bf 8f5f 	dmb	sy
   d59f0:	e850 6f00 	ldrex	r6, [r0]
   d59f4:	e840 3200 	strex	r2, r3, [r0]
   d59f8:	2a00      	cmp	r2, #0
   d59fa:	d1f9      	bne.n	d59f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d59fc:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5a00:	2e00      	cmp	r6, #0
   d5a02:	d03f      	beq.n	d5a84 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5a04:	4618      	mov	r0, r3
   d5a06:	f7ff f855 	bl	d4ab4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5a0a:	4607      	mov	r7, r0
   d5a0c:	b120      	cbz	r0, d5a18 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5a0e:	4621      	mov	r1, r4
   d5a10:	4630      	mov	r0, r6
   d5a12:	f7ff fe53 	bl	d56bc <_ZNKSt8functionIFvRKbEEclES1_>
   d5a16:	e02e      	b.n	d5a76 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5a18:	4631      	mov	r1, r6
   d5a1a:	a801      	add	r0, sp, #4
   d5a1c:	f7ff ffaf 	bl	d597e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5a20:	7823      	ldrb	r3, [r4, #0]
   d5a22:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5a26:	2010      	movs	r0, #16
   d5a28:	f7fe fb37 	bl	d409a <_Znwj>
   d5a2c:	4605      	mov	r5, r0
   d5a2e:	b1d0      	cbz	r0, d5a66 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5a30:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5a32:	2014      	movs	r0, #20
   d5a34:	f7fe fb31 	bl	d409a <_Znwj>
   d5a38:	4604      	mov	r4, r0
   d5a3a:	b178      	cbz	r0, d5a5c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5a3c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5a3e:	4601      	mov	r1, r0
   d5a40:	a801      	add	r0, sp, #4
   d5a42:	f7ff fc5a 	bl	d52fa <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a46:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5a48:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a4a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a4c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5a4e:	9203      	str	r2, [sp, #12]
   d5a50:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a52:	60e3      	str	r3, [r4, #12]
   d5a54:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5a58:	9204      	str	r2, [sp, #16]
   d5a5a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5a5c:	4b0a      	ldr	r3, [pc, #40]	; (d5a88 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5a5e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5a60:	4b0a      	ldr	r3, [pc, #40]	; (d5a8c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5a62:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5a64:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a66:	a801      	add	r0, sp, #4
   d5a68:	f7ff fc38 	bl	d52dc <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5a6c:	2200      	movs	r2, #0
   d5a6e:	4629      	mov	r1, r5
   d5a70:	4807      	ldr	r0, [pc, #28]	; (d5a90 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5a72:	f7ff f827 	bl	d4ac4 <application_thread_invoke>
   d5a76:	4630      	mov	r0, r6
   d5a78:	f7ff fc30 	bl	d52dc <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5a7c:	2110      	movs	r1, #16
   d5a7e:	4630      	mov	r0, r6
   d5a80:	f000 fcaf 	bl	d63e2 <_ZdlPvj>
        }
    }
   d5a84:	b007      	add	sp, #28
   d5a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5a88:	000d56cf 	.word	0x000d56cf
   d5a8c:	000d599d 	.word	0x000d599d
   d5a90:	000d5f09 	.word	0x000d5f09

000d5a94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5a94:	b530      	push	{r4, r5, lr}
   d5a96:	b085      	sub	sp, #20
   d5a98:	4604      	mov	r4, r0
   d5a9a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5a9c:	4668      	mov	r0, sp
   d5a9e:	4611      	mov	r1, r2
   d5aa0:	f7ff fdca 	bl	d5638 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5aa4:	b17c      	cbz	r4, d5ac6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5aa6:	b224      	sxth	r4, r4
   d5aa8:	4628      	mov	r0, r5
   d5aaa:	b10d      	cbz	r5, d5ab0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5aac:	f001 fbd6 	bl	d725c <strdup>
   d5ab0:	9002      	str	r0, [sp, #8]
   d5ab2:	a902      	add	r1, sp, #8
   d5ab4:	4668      	mov	r0, sp
   d5ab6:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5aba:	f7ff fe1f 	bl	d56fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5abe:	a802      	add	r0, sp, #8
   d5ac0:	f7ff fd52 	bl	d5568 <_ZN8particle5ErrorD1Ev>
   d5ac4:	e01d      	b.n	d5b02 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5ac6:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5ac8:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5acc:	f04f 0201 	mov.w	r2, #1
   d5ad0:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5ad4:	42a3      	cmp	r3, r4
   d5ad6:	d103      	bne.n	d5ae0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5ad8:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5adc:	2900      	cmp	r1, #0
   d5ade:	d1f7      	bne.n	d5ad0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5ae0:	d002      	beq.n	d5ae8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5ae2:	f88d 3008 	strb.w	r3, [sp, #8]
   d5ae6:	e00c      	b.n	d5b02 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5ae8:	f110 010c 	adds.w	r1, r0, #12
   d5aec:	f04f 0301 	mov.w	r3, #1
   d5af0:	bf18      	it	ne
   d5af2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5af4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5af8:	3004      	adds	r0, #4
   d5afa:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5afe:	f7ff ff71 	bl	d59e4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5b02:	a801      	add	r0, sp, #4
   d5b04:	f7fe fbb8 	bl	d4278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5b08:	b005      	add	sp, #20
   d5b0a:	bd30      	pop	{r4, r5, pc}

000d5b0c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5b0c:	4770      	bx	lr

000d5b0e <_ZN9IPAddressD0Ev>:
   d5b0e:	b510      	push	{r4, lr}
   d5b10:	2118      	movs	r1, #24
   d5b12:	4604      	mov	r4, r0
   d5b14:	f000 fc65 	bl	d63e2 <_ZdlPvj>
   d5b18:	4620      	mov	r0, r4
   d5b1a:	bd10      	pop	{r4, pc}

000d5b1c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5b1e:	7d03      	ldrb	r3, [r0, #20]
   d5b20:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5b22:	b08d      	sub	sp, #52	; 0x34
   d5b24:	460e      	mov	r6, r1
   d5b26:	f100 0704 	add.w	r7, r0, #4
   d5b2a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5b2e:	d002      	beq.n	d5b36 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5b30:	f100 0508 	add.w	r5, r0, #8
   d5b34:	e018      	b.n	d5b68 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5b36:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5b38:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5b3a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5b3e:	232f      	movs	r3, #47	; 0x2f
   d5b40:	462a      	mov	r2, r5
   d5b42:	200a      	movs	r0, #10
   d5b44:	f7fe fef6 	bl	d4934 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5b48:	4628      	mov	r0, r5
   d5b4a:	f001 fba2 	bl	d7292 <strlen>
   d5b4e:	6833      	ldr	r3, [r6, #0]
   d5b50:	4602      	mov	r2, r0
   d5b52:	68db      	ldr	r3, [r3, #12]
   d5b54:	4629      	mov	r1, r5
   d5b56:	4630      	mov	r0, r6
   d5b58:	4798      	blx	r3
   d5b5a:	e00f      	b.n	d5b7c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5b5c:	b124      	cbz	r4, d5b68 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5b5e:	212e      	movs	r1, #46	; 0x2e
   d5b60:	4630      	mov	r0, r6
   d5b62:	f7ff fb0d 	bl	d5180 <_ZN5Print5printEc>
   d5b66:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5b68:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5b6c:	220a      	movs	r2, #10
   d5b6e:	4630      	mov	r0, r6
   d5b70:	f7ff fb42 	bl	d51f8 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5b74:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5b76:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5b78:	d1f0      	bne.n	d5b5c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5b7a:	4620      	mov	r0, r4
    }
    return n;
}
   d5b7c:	b00d      	add	sp, #52	; 0x34
   d5b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5b80 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5b80:	b510      	push	{r4, lr}
   d5b82:	4b05      	ldr	r3, [pc, #20]	; (d5b98 <_ZN9IPAddressC1Ev+0x18>)
   d5b84:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5b86:	2211      	movs	r2, #17
   d5b88:	f840 3b04 	str.w	r3, [r0], #4
   d5b8c:	2100      	movs	r1, #0
   d5b8e:	f001 fb2c 	bl	d71ea <memset>
{
    clear();
}
   d5b92:	4620      	mov	r0, r4
   d5b94:	bd10      	pop	{r4, pc}
   d5b96:	bf00      	nop
   d5b98:	000d7680 	.word	0x000d7680

000d5b9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5b9c:	4603      	mov	r3, r0
   d5b9e:	4a07      	ldr	r2, [pc, #28]	; (d5bbc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5ba0:	b510      	push	{r4, lr}
   d5ba2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5ba6:	f101 0210 	add.w	r2, r1, #16
   d5baa:	f851 4b04 	ldr.w	r4, [r1], #4
   d5bae:	f843 4b04 	str.w	r4, [r3], #4
   d5bb2:	4291      	cmp	r1, r2
   d5bb4:	d1f9      	bne.n	d5baa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5bb6:	780a      	ldrb	r2, [r1, #0]
   d5bb8:	701a      	strb	r2, [r3, #0]
}
   d5bba:	bd10      	pop	{r4, pc}
   d5bbc:	000d7680 	.word	0x000d7680

000d5bc0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5bc0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5bc2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5bc6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5bca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5bce:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5bd2:	2304      	movs	r3, #4
   d5bd4:	6041      	str	r1, [r0, #4]
   d5bd6:	7503      	strb	r3, [r0, #20]
   d5bd8:	bd10      	pop	{r4, pc}

000d5bda <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5bda:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5bdc:	780d      	ldrb	r5, [r1, #0]
   d5bde:	788b      	ldrb	r3, [r1, #2]
   d5be0:	784a      	ldrb	r2, [r1, #1]
   d5be2:	78c9      	ldrb	r1, [r1, #3]
   d5be4:	9100      	str	r1, [sp, #0]
   d5be6:	4629      	mov	r1, r5
   d5be8:	f7ff ffea 	bl	d5bc0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5bec:	b003      	add	sp, #12
   d5bee:	bd30      	pop	{r4, r5, pc}

000d5bf0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5bf0:	7441      	strb	r1, [r0, #17]
   d5bf2:	4770      	bx	lr

000d5bf4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5bf4:	4770      	bx	lr

000d5bf6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5bf6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5bf8:	2100      	movs	r1, #0
   d5bfa:	7c00      	ldrb	r0, [r0, #16]
   d5bfc:	f7fe ff3a 	bl	d4a74 <HAL_USB_USART_Receive_Data>
}
   d5c00:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5c04:	bf28      	it	cs
   d5c06:	f04f 30ff 	movcs.w	r0, #4294967295
   d5c0a:	bd08      	pop	{r3, pc}

000d5c0c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5c0c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5c0e:	2101      	movs	r1, #1
   d5c10:	7c00      	ldrb	r0, [r0, #16]
   d5c12:	f7fe ff2f 	bl	d4a74 <HAL_USB_USART_Receive_Data>
}
   d5c16:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5c1a:	bf28      	it	cs
   d5c1c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5c20:	bd08      	pop	{r3, pc}

000d5c22 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5c22:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5c24:	7c00      	ldrb	r0, [r0, #16]
   d5c26:	f7fe ff1d 	bl	d4a64 <HAL_USB_USART_Available_Data_For_Write>
}
   d5c2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5c2e:	bd08      	pop	{r3, pc}

000d5c30 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5c30:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5c32:	7c00      	ldrb	r0, [r0, #16]
   d5c34:	f7fe ff0e 	bl	d4a54 <HAL_USB_USART_Available_Data>
}
   d5c38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5c3c:	bd08      	pop	{r3, pc}

000d5c3e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5c3e:	7c00      	ldrb	r0, [r0, #16]
   d5c40:	f7fe bf28 	b.w	d4a94 <HAL_USB_USART_Flush_Data>

000d5c44 <_ZN9USBSerialD0Ev>:
   d5c44:	b510      	push	{r4, lr}
   d5c46:	2114      	movs	r1, #20
   d5c48:	4604      	mov	r4, r0
   d5c4a:	f000 fbca 	bl	d63e2 <_ZdlPvj>
   d5c4e:	4620      	mov	r0, r4
   d5c50:	bd10      	pop	{r4, pc}

000d5c52 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5c52:	b538      	push	{r3, r4, r5, lr}
   d5c54:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5c56:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5c58:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5c5a:	f7fe ff03 	bl	d4a64 <HAL_USB_USART_Available_Data_For_Write>
   d5c5e:	2800      	cmp	r0, #0
   d5c60:	dc01      	bgt.n	d5c66 <_ZN9USBSerial5writeEh+0x14>
   d5c62:	7c60      	ldrb	r0, [r4, #17]
   d5c64:	b128      	cbz	r0, d5c72 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5c66:	4629      	mov	r1, r5
   d5c68:	7c20      	ldrb	r0, [r4, #16]
   d5c6a:	f7fe ff0b 	bl	d4a84 <HAL_USB_USART_Send_Data>
   d5c6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5c72:	bd38      	pop	{r3, r4, r5, pc}

000d5c74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5c74:	b510      	push	{r4, lr}
   d5c76:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5c78:	2300      	movs	r3, #0
   d5c7a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5c7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5c80:	60a3      	str	r3, [r4, #8]
   d5c82:	4b05      	ldr	r3, [pc, #20]	; (d5c98 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5c84:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5c86:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5c88:	4608      	mov	r0, r1
{
  _serial = serial;
   d5c8a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5c8c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5c8e:	4611      	mov	r1, r2
   d5c90:	f7fe fed8 	bl	d4a44 <HAL_USB_USART_Init>
}
   d5c94:	4620      	mov	r0, r4
   d5c96:	bd10      	pop	{r4, pc}
   d5c98:	000d7694 	.word	0x000d7694

000d5c9c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5c9c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5c9e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5ca0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5ca2:	2100      	movs	r1, #0
   d5ca4:	f001 faa1 	bl	d71ea <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5ca8:	4620      	mov	r0, r4
   d5caa:	bd10      	pop	{r4, pc}

000d5cac <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5cac:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5cae:	4d0e      	ldr	r5, [pc, #56]	; (d5ce8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5cb0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5cb2:	a801      	add	r0, sp, #4
   d5cb4:	f7ff fff2 	bl	d5c9c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5cb8:	6829      	ldr	r1, [r5, #0]
   d5cba:	f011 0401 	ands.w	r4, r1, #1
   d5cbe:	d110      	bne.n	d5ce2 <_Z16_fetch_usbserialv+0x36>
   d5cc0:	4628      	mov	r0, r5
   d5cc2:	f7fe f9f0 	bl	d40a6 <__cxa_guard_acquire>
   d5cc6:	b160      	cbz	r0, d5ce2 <_Z16_fetch_usbserialv+0x36>
   d5cc8:	aa01      	add	r2, sp, #4
   d5cca:	4621      	mov	r1, r4
   d5ccc:	4807      	ldr	r0, [pc, #28]	; (d5cec <_Z16_fetch_usbserialv+0x40>)
   d5cce:	f7ff ffd1 	bl	d5c74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5cd2:	4628      	mov	r0, r5
   d5cd4:	f7fe f9ec 	bl	d40b0 <__cxa_guard_release>
   d5cd8:	4a05      	ldr	r2, [pc, #20]	; (d5cf0 <_Z16_fetch_usbserialv+0x44>)
   d5cda:	4906      	ldr	r1, [pc, #24]	; (d5cf4 <_Z16_fetch_usbserialv+0x48>)
   d5cdc:	4803      	ldr	r0, [pc, #12]	; (d5cec <_Z16_fetch_usbserialv+0x40>)
   d5cde:	f000 fb7b 	bl	d63d8 <__aeabi_atexit>
	return _usbserial;
}
   d5ce2:	4802      	ldr	r0, [pc, #8]	; (d5cec <_Z16_fetch_usbserialv+0x40>)
   d5ce4:	b007      	add	sp, #28
   d5ce6:	bd30      	pop	{r4, r5, pc}
   d5ce8:	2003e3d0 	.word	0x2003e3d0
   d5cec:	2003e3d4 	.word	0x2003e3d4
   d5cf0:	2003e2b8 	.word	0x2003e2b8
   d5cf4:	000d5bf5 	.word	0x000d5bf5

000d5cf8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5cf8:	2200      	movs	r2, #0
   d5cfa:	4611      	mov	r1, r2
   d5cfc:	6840      	ldr	r0, [r0, #4]
   d5cfe:	f7fe bf15 	b.w	d4b2c <network_ready>

000d5d02 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5d02:	2200      	movs	r2, #0
   d5d04:	4611      	mov	r1, r2
   d5d06:	6840      	ldr	r0, [r0, #4]
   d5d08:	f7fe bf30 	b.w	d4b6c <network_listening>

000d5d0c <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5d0c:	2200      	movs	r2, #0
   d5d0e:	4611      	mov	r1, r2
   d5d10:	6840      	ldr	r0, [r0, #4]
   d5d12:	f7fe bf3b 	b.w	d4b8c <network_get_listen_timeout>

000d5d16 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5d16:	2200      	movs	r2, #0
   d5d18:	6840      	ldr	r0, [r0, #4]
   d5d1a:	f7fe bf2f 	b.w	d4b7c <network_set_listen_timeout>

000d5d1e <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5d1e:	2200      	movs	r2, #0
   d5d20:	f081 0101 	eor.w	r1, r1, #1
   d5d24:	6840      	ldr	r0, [r0, #4]
   d5d26:	f7fe bf19 	b.w	d4b5c <network_listen>

000d5d2a <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5d2a:	2300      	movs	r3, #0
   d5d2c:	461a      	mov	r2, r3
   d5d2e:	4619      	mov	r1, r3
   d5d30:	6840      	ldr	r0, [r0, #4]
   d5d32:	f7fe bf0b 	b.w	d4b4c <network_off>

000d5d36 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d5d36:	2300      	movs	r3, #0
   d5d38:	461a      	mov	r2, r3
   d5d3a:	4619      	mov	r1, r3
   d5d3c:	6840      	ldr	r0, [r0, #4]
   d5d3e:	f7fe befd 	b.w	d4b3c <network_on>

000d5d42 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5d42:	2200      	movs	r2, #0
   d5d44:	4611      	mov	r1, r2
   d5d46:	6840      	ldr	r0, [r0, #4]
   d5d48:	f7fe bee0 	b.w	d4b0c <network_connecting>

000d5d4c <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5d4c:	2200      	movs	r2, #0
   d5d4e:	2102      	movs	r1, #2
   d5d50:	6840      	ldr	r0, [r0, #4]
   d5d52:	f7fe bee3 	b.w	d4b1c <network_disconnect>

000d5d56 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5d56:	2300      	movs	r3, #0
   d5d58:	461a      	mov	r2, r3
   d5d5a:	6840      	ldr	r0, [r0, #4]
   d5d5c:	f7fe bece 	b.w	d4afc <network_connect>

000d5d60 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d5d60:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d5d62:	4b1b      	ldr	r3, [pc, #108]	; (d5dd0 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d5d64:	6003      	str	r3, [r0, #0]
   d5d66:	2500      	movs	r5, #0
   d5d68:	460f      	mov	r7, r1
   d5d6a:	3328      	adds	r3, #40	; 0x28
   d5d6c:	2618      	movs	r6, #24
   d5d6e:	b089      	sub	sp, #36	; 0x24
   d5d70:	6043      	str	r3, [r0, #4]
   d5d72:	6085      	str	r5, [r0, #8]
   d5d74:	60c5      	str	r5, [r0, #12]
   d5d76:	4632      	mov	r2, r6
   d5d78:	4629      	mov	r1, r5
   d5d7a:	4604      	mov	r4, r0
   d5d7c:	3010      	adds	r0, #16
   d5d7e:	f001 fa34 	bl	d71ea <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d5d82:	462a      	mov	r2, r5
   d5d84:	4629      	mov	r1, r5
   d5d86:	6878      	ldr	r0, [r7, #4]
   d5d88:	f7fe fed0 	bl	d4b2c <network_ready>
   d5d8c:	b908      	cbnz	r0, d5d92 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d5d8e:	60a0      	str	r0, [r4, #8]
            return sig;
   d5d90:	e01b      	b.n	d5dca <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d5d92:	4629      	mov	r1, r5
   d5d94:	4632      	mov	r2, r6
   d5d96:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d5d98:	9500      	str	r5, [sp, #0]
   d5d9a:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d5d9c:	f001 fa25 	bl	d71ea <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d5da0:	a902      	add	r1, sp, #8
   d5da2:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d5da4:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d5da8:	f7fe fe44 	bl	d4a34 <cellular_signal>
   d5dac:	b110      	cbz	r0, d5db4 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d5dae:	2301      	movs	r3, #1
   d5db0:	60a3      	str	r3, [r4, #8]
            return sig;
   d5db2:	e00a      	b.n	d5dca <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d5db4:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d5db6:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d5db8:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d5dba:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d5dbc:	b90b      	cbnz	r3, d5dc2 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d5dbe:	2302      	movs	r3, #2
   d5dc0:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d5dc2:	a902      	add	r1, sp, #8
   d5dc4:	4620      	mov	r0, r4
   d5dc6:	f7ff fb3b 	bl	d5440 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d5dca:	4620      	mov	r0, r4
   d5dcc:	b009      	add	sp, #36	; 0x24
   d5dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5dd0:	000d7630 	.word	0x000d7630

000d5dd4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5dd4:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5dd6:	4c08      	ldr	r4, [pc, #32]	; (d5df8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5dd8:	2528      	movs	r5, #40	; 0x28
   d5dda:	462a      	mov	r2, r5
   d5ddc:	2100      	movs	r1, #0
   d5dde:	4620      	mov	r0, r4
   d5de0:	f001 fa03 	bl	d71ea <memset>
        cid = -1;
   d5de4:	f04f 33ff 	mov.w	r3, #4294967295
   d5de8:	6063      	str	r3, [r4, #4]
   d5dea:	4b04      	ldr	r3, [pc, #16]	; (d5dfc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d5dec:	8025      	strh	r5, [r4, #0]
   d5dee:	2204      	movs	r2, #4
   d5df0:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5df2:	4a03      	ldr	r2, [pc, #12]	; (d5e00 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5df4:	601a      	str	r2, [r3, #0]
   d5df6:	bd38      	pop	{r3, r4, r5, pc}
   d5df8:	2003e3f0 	.word	0x2003e3f0
   d5dfc:	2003e3e8 	.word	0x2003e3e8
   d5e00:	000d76c4 	.word	0x000d76c4

000d5e04 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5e04:	4770      	bx	lr

000d5e06 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5e06:	7441      	strb	r1, [r0, #17]
   d5e08:	4770      	bx	lr

000d5e0a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5e0a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5e0c:	7c00      	ldrb	r0, [r0, #16]
   d5e0e:	f7fe fdd1 	bl	d49b4 <HAL_USART_Available_Data_For_Write>
}
   d5e12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5e16:	bd08      	pop	{r3, pc}

000d5e18 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5e18:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5e1a:	7c00      	ldrb	r0, [r0, #16]
   d5e1c:	f7fe fda2 	bl	d4964 <HAL_USART_Available_Data>
}
   d5e20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5e24:	bd08      	pop	{r3, pc}

000d5e26 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5e26:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5e28:	7c00      	ldrb	r0, [r0, #16]
   d5e2a:	f7fe fdab 	bl	d4984 <HAL_USART_Peek_Data>
}
   d5e2e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5e32:	bf28      	it	cs
   d5e34:	f04f 30ff 	movcs.w	r0, #4294967295
   d5e38:	bd08      	pop	{r3, pc}

000d5e3a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5e3a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5e3c:	7c00      	ldrb	r0, [r0, #16]
   d5e3e:	f7fe fd99 	bl	d4974 <HAL_USART_Read_Data>
}
   d5e42:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5e46:	bf28      	it	cs
   d5e48:	f04f 30ff 	movcs.w	r0, #4294967295
   d5e4c:	bd08      	pop	{r3, pc}

000d5e4e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5e4e:	7c00      	ldrb	r0, [r0, #16]
   d5e50:	f7fe bda0 	b.w	d4994 <HAL_USART_Flush_Data>

000d5e54 <_ZN11USARTSerialD0Ev>:
   d5e54:	b510      	push	{r4, lr}
   d5e56:	2114      	movs	r1, #20
   d5e58:	4604      	mov	r4, r0
   d5e5a:	f000 fac2 	bl	d63e2 <_ZdlPvj>
   d5e5e:	4620      	mov	r0, r4
   d5e60:	bd10      	pop	{r4, pc}

000d5e62 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5e62:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5e64:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5e66:	4604      	mov	r4, r0
   d5e68:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5e6a:	b925      	cbnz	r5, d5e76 <_ZN11USARTSerial5writeEh+0x14>
   d5e6c:	7c00      	ldrb	r0, [r0, #16]
   d5e6e:	f7fe fda1 	bl	d49b4 <HAL_USART_Available_Data_For_Write>
   d5e72:	2800      	cmp	r0, #0
   d5e74:	dd05      	ble.n	d5e82 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5e76:	4631      	mov	r1, r6
   d5e78:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5e7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5e7e:	f7fe bd69 	b.w	d4954 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5e82:	4628      	mov	r0, r5
   d5e84:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5e88 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5e88:	b510      	push	{r4, lr}
   d5e8a:	4604      	mov	r4, r0
   d5e8c:	4608      	mov	r0, r1
   d5e8e:	4611      	mov	r1, r2
   d5e90:	2200      	movs	r2, #0
   d5e92:	6062      	str	r2, [r4, #4]
   d5e94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5e98:	60a2      	str	r2, [r4, #8]
   d5e9a:	4a05      	ldr	r2, [pc, #20]	; (d5eb0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5e9c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5e9e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5ea0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5ea2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5ea4:	461a      	mov	r2, r3
   d5ea6:	f7fe fd4d 	bl	d4944 <HAL_USART_Init>
}
   d5eaa:	4620      	mov	r0, r4
   d5eac:	bd10      	pop	{r4, pc}
   d5eae:	bf00      	nop
   d5eb0:	000d76f8 	.word	0x000d76f8

000d5eb4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5eb4:	7c00      	ldrb	r0, [r0, #16]
   d5eb6:	f7fe bd75 	b.w	d49a4 <HAL_USART_Is_Enabled>
	...

000d5ebc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5ebc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5ebe:	4d0c      	ldr	r5, [pc, #48]	; (d5ef0 <_Z22__fetch_global_Serial1v+0x34>)
   d5ec0:	6829      	ldr	r1, [r5, #0]
   d5ec2:	f011 0401 	ands.w	r4, r1, #1
   d5ec6:	d111      	bne.n	d5eec <_Z22__fetch_global_Serial1v+0x30>
   d5ec8:	4628      	mov	r0, r5
   d5eca:	f7fe f8ec 	bl	d40a6 <__cxa_guard_acquire>
   d5ece:	b168      	cbz	r0, d5eec <_Z22__fetch_global_Serial1v+0x30>
   d5ed0:	4a08      	ldr	r2, [pc, #32]	; (d5ef4 <_Z22__fetch_global_Serial1v+0x38>)
   d5ed2:	4b09      	ldr	r3, [pc, #36]	; (d5ef8 <_Z22__fetch_global_Serial1v+0x3c>)
   d5ed4:	4809      	ldr	r0, [pc, #36]	; (d5efc <_Z22__fetch_global_Serial1v+0x40>)
   d5ed6:	4621      	mov	r1, r4
   d5ed8:	f7ff ffd6 	bl	d5e88 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5edc:	4628      	mov	r0, r5
   d5ede:	f7fe f8e7 	bl	d40b0 <__cxa_guard_release>
   d5ee2:	4a07      	ldr	r2, [pc, #28]	; (d5f00 <_Z22__fetch_global_Serial1v+0x44>)
   d5ee4:	4907      	ldr	r1, [pc, #28]	; (d5f04 <_Z22__fetch_global_Serial1v+0x48>)
   d5ee6:	4805      	ldr	r0, [pc, #20]	; (d5efc <_Z22__fetch_global_Serial1v+0x40>)
   d5ee8:	f000 fa76 	bl	d63d8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5eec:	4803      	ldr	r0, [pc, #12]	; (d5efc <_Z22__fetch_global_Serial1v+0x40>)
   d5eee:	bd38      	pop	{r3, r4, r5, pc}
   d5ef0:	2003e4b0 	.word	0x2003e4b0
   d5ef4:	2003e4b4 	.word	0x2003e4b4
   d5ef8:	2003e42c 	.word	0x2003e42c
   d5efc:	2003e418 	.word	0x2003e418
   d5f00:	2003e2b8 	.word	0x2003e2b8
   d5f04:	000d5e05 	.word	0x000d5e05

000d5f08 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5f08:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5f0a:	6883      	ldr	r3, [r0, #8]
   d5f0c:	4604      	mov	r4, r0
   d5f0e:	b90b      	cbnz	r3, d5f14 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5f10:	f000 fa69 	bl	d63e6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5f14:	68c3      	ldr	r3, [r0, #12]
   d5f16:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5f18:	68a3      	ldr	r3, [r4, #8]
   d5f1a:	b11b      	cbz	r3, d5f24 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5f1c:	2203      	movs	r2, #3
   d5f1e:	4621      	mov	r1, r4
   d5f20:	4620      	mov	r0, r4
   d5f22:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5f24:	4620      	mov	r0, r4
   d5f26:	2110      	movs	r1, #16
}
   d5f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5f2c:	f000 ba59 	b.w	d63e2 <_ZdlPvj>

000d5f30 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5f30:	4770      	bx	lr

000d5f32 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5f34:	4606      	mov	r6, r0
   d5f36:	4615      	mov	r5, r2
   d5f38:	460c      	mov	r4, r1
   d5f3a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5f3c:	42bc      	cmp	r4, r7
   d5f3e:	d006      	beq.n	d5f4e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5f40:	6833      	ldr	r3, [r6, #0]
   d5f42:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5f46:	689b      	ldr	r3, [r3, #8]
   d5f48:	4630      	mov	r0, r6
   d5f4a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5f4c:	e7f6      	b.n	d5f3c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5f4e:	4628      	mov	r0, r5
   d5f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5f52 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5f52:	2200      	movs	r2, #0
   d5f54:	7c00      	ldrb	r0, [r0, #16]
   d5f56:	f7fe bd35 	b.w	d49c4 <HAL_I2C_Write_Data>

000d5f5a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5f5a:	2100      	movs	r1, #0
   d5f5c:	7c00      	ldrb	r0, [r0, #16]
   d5f5e:	f7fe bd39 	b.w	d49d4 <HAL_I2C_Available_Data>

000d5f62 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5f62:	2100      	movs	r1, #0
   d5f64:	7c00      	ldrb	r0, [r0, #16]
   d5f66:	f7fe bd3d 	b.w	d49e4 <HAL_I2C_Read_Data>

000d5f6a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5f6a:	2100      	movs	r1, #0
   d5f6c:	7c00      	ldrb	r0, [r0, #16]
   d5f6e:	f7fe bd41 	b.w	d49f4 <HAL_I2C_Peek_Data>

000d5f72 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5f72:	2100      	movs	r1, #0
   d5f74:	7c00      	ldrb	r0, [r0, #16]
   d5f76:	f7fe bd45 	b.w	d4a04 <HAL_I2C_Flush_Data>

000d5f7a <_ZN7TwoWireD0Ev>:
   d5f7a:	b510      	push	{r4, lr}
   d5f7c:	2114      	movs	r1, #20
   d5f7e:	4604      	mov	r4, r0
   d5f80:	f000 fa2f 	bl	d63e2 <_ZdlPvj>
   d5f84:	4620      	mov	r0, r4
   d5f86:	bd10      	pop	{r4, pc}

000d5f88 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5f88:	b510      	push	{r4, lr}
   d5f8a:	4604      	mov	r4, r0
   d5f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5f90:	4608      	mov	r0, r1
   d5f92:	60a3      	str	r3, [r4, #8]
   d5f94:	2100      	movs	r1, #0
   d5f96:	4b04      	ldr	r3, [pc, #16]	; (d5fa8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5f98:	7420      	strb	r0, [r4, #16]
   d5f9a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5f9c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5f9e:	f7fe fd41 	bl	d4a24 <HAL_I2C_Init>

}
   d5fa2:	4620      	mov	r0, r4
   d5fa4:	bd10      	pop	{r4, pc}
   d5fa6:	bf00      	nop
   d5fa8:	000d7728 	.word	0x000d7728

000d5fac <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5fac:	2100      	movs	r1, #0
   d5fae:	7c00      	ldrb	r0, [r0, #16]
   d5fb0:	f7fe bd30 	b.w	d4a14 <HAL_I2C_Is_Enabled>

000d5fb4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5fb4:	2200      	movs	r2, #0
   d5fb6:	4611      	mov	r1, r2
   d5fb8:	6840      	ldr	r0, [r0, #4]
   d5fba:	f7fe bdd7 	b.w	d4b6c <network_listening>

000d5fbe <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5fbe:	2200      	movs	r2, #0
   d5fc0:	4611      	mov	r1, r2
   d5fc2:	6840      	ldr	r0, [r0, #4]
   d5fc4:	f7fe bde2 	b.w	d4b8c <network_get_listen_timeout>

000d5fc8 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5fc8:	2200      	movs	r2, #0
   d5fca:	6840      	ldr	r0, [r0, #4]
   d5fcc:	f7fe bdd6 	b.w	d4b7c <network_set_listen_timeout>

000d5fd0 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5fd0:	2200      	movs	r2, #0
   d5fd2:	f081 0101 	eor.w	r1, r1, #1
   d5fd6:	6840      	ldr	r0, [r0, #4]
   d5fd8:	f7fe bdc0 	b.w	d4b5c <network_listen>

000d5fdc <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5fdc:	2300      	movs	r3, #0
   d5fde:	461a      	mov	r2, r3
   d5fe0:	2101      	movs	r1, #1
   d5fe2:	6840      	ldr	r0, [r0, #4]
   d5fe4:	f7fe bdb2 	b.w	d4b4c <network_off>

000d5fe8 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5fe8:	2300      	movs	r3, #0
   d5fea:	461a      	mov	r2, r3
   d5fec:	4619      	mov	r1, r3
   d5fee:	6840      	ldr	r0, [r0, #4]
   d5ff0:	f7fe bda4 	b.w	d4b3c <network_on>

000d5ff4 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5ff4:	2200      	movs	r2, #0
   d5ff6:	4611      	mov	r1, r2
   d5ff8:	6840      	ldr	r0, [r0, #4]
   d5ffa:	f7fe bd97 	b.w	d4b2c <network_ready>

000d5ffe <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5ffe:	2200      	movs	r2, #0
   d6000:	4611      	mov	r1, r2
   d6002:	6840      	ldr	r0, [r0, #4]
   d6004:	f7fe bd82 	b.w	d4b0c <network_connecting>

000d6008 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6008:	2200      	movs	r2, #0
   d600a:	2102      	movs	r1, #2
   d600c:	6840      	ldr	r0, [r0, #4]
   d600e:	f7fe bd85 	b.w	d4b1c <network_disconnect>

000d6012 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6012:	2300      	movs	r3, #0
   d6014:	461a      	mov	r2, r3
   d6016:	6840      	ldr	r0, [r0, #4]
   d6018:	f7fe bd70 	b.w	d4afc <network_connect>

000d601c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d601c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d601e:	4605      	mov	r5, r0
   d6020:	b188      	cbz	r0, d6046 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6022:	6804      	ldr	r4, [r0, #0]
   d6024:	b14c      	cbz	r4, d603a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6026:	68a3      	ldr	r3, [r4, #8]
   d6028:	b11b      	cbz	r3, d6032 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d602a:	2203      	movs	r2, #3
   d602c:	4621      	mov	r1, r4
   d602e:	4620      	mov	r0, r4
   d6030:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6032:	2110      	movs	r1, #16
   d6034:	4620      	mov	r0, r4
   d6036:	f000 f9d4 	bl	d63e2 <_ZdlPvj>
   d603a:	4628      	mov	r0, r5
   d603c:	2114      	movs	r1, #20
      }
   d603e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6042:	f000 b9ce 	b.w	d63e2 <_ZdlPvj>
   d6046:	bd38      	pop	{r3, r4, r5, pc}

000d6048 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6048:	b110      	cbz	r0, d6050 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d604a:	6803      	ldr	r3, [r0, #0]
   d604c:	685b      	ldr	r3, [r3, #4]
   d604e:	4718      	bx	r3
   d6050:	4770      	bx	lr

000d6052 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6052:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6054:	6803      	ldr	r3, [r0, #0]
   d6056:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6058:	b1bb      	cbz	r3, d608a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d605a:	6858      	ldr	r0, [r3, #4]
   d605c:	f7fe fc32 	bl	d48c4 <os_thread_is_current>
   d6060:	b978      	cbnz	r0, d6082 <_ZN6ThreadD1Ev+0x30>
   d6062:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6064:	7c5a      	ldrb	r2, [r3, #17]
   d6066:	b912      	cbnz	r2, d606e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6068:	6858      	ldr	r0, [r3, #4]
   d606a:	f7fe fc33 	bl	d48d4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d606e:	6823      	ldr	r3, [r4, #0]
   d6070:	6858      	ldr	r0, [r3, #4]
   d6072:	f7fe fc37 	bl	d48e4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6076:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6078:	2300      	movs	r3, #0
   d607a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d607c:	b128      	cbz	r0, d608a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d607e:	f7ff ffcd 	bl	d601c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6082:	6820      	ldr	r0, [r4, #0]
   d6084:	b108      	cbz	r0, d608a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6086:	f7ff ffc9 	bl	d601c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d608a:	4620      	mov	r0, r4
   d608c:	bd10      	pop	{r4, pc}
	...

000d6090 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6090:	b538      	push	{r3, r4, r5, lr}
   d6092:	4b0c      	ldr	r3, [pc, #48]	; (d60c4 <_ZN5spark9MeshClassD1Ev+0x34>)
   d6094:	6003      	str	r3, [r0, #0]
   d6096:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6098:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d609c:	b108      	cbz	r0, d60a2 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d609e:	f7fe f800 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d60a2:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d60a6:	b135      	cbz	r5, d60b6 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d60a8:	4628      	mov	r0, r5
   d60aa:	f7ff ffd2 	bl	d6052 <_ZN6ThreadD1Ev>
   d60ae:	2104      	movs	r1, #4
   d60b0:	4628      	mov	r0, r5
   d60b2:	f000 f996 	bl	d63e2 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d60b6:	68a0      	ldr	r0, [r4, #8]
   d60b8:	b108      	cbz	r0, d60be <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d60ba:	f7ff ffc5 	bl	d6048 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d60be:	4620      	mov	r0, r4
   d60c0:	bd38      	pop	{r3, r4, r5, pc}
   d60c2:	bf00      	nop
   d60c4:	000d7750 	.word	0x000d7750

000d60c8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d60c8:	b538      	push	{r3, r4, r5, lr}
   d60ca:	4c0e      	ldr	r4, [pc, #56]	; (d6104 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d60cc:	4b0e      	ldr	r3, [pc, #56]	; (d6108 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d60ce:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d60d0:	2500      	movs	r5, #0
   d60d2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d60d4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d60d8:	6063      	str	r3, [r4, #4]
   d60da:	60a5      	str	r5, [r4, #8]
   d60dc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d60e0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d60e4:	f7fe fc1e 	bl	d4924 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d60e8:	4b08      	ldr	r3, [pc, #32]	; (d610c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d60ea:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d60ee:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d60f2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d60f4:	4620      	mov	r0, r4
   d60f6:	4a06      	ldr	r2, [pc, #24]	; (d6110 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d60f8:	4906      	ldr	r1, [pc, #24]	; (d6114 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d60fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d60fe:	f000 b96b 	b.w	d63d8 <__aeabi_atexit>
   d6102:	bf00      	nop
   d6104:	2003e538 	.word	0x2003e538
   d6108:	000d7784 	.word	0x000d7784
   d610c:	000d7750 	.word	0x000d7750
   d6110:	2003e2b8 	.word	0x2003e2b8
   d6114:	000d6091 	.word	0x000d6091

000d6118 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6118:	2300      	movs	r3, #0
   d611a:	461a      	mov	r2, r3
   d611c:	6840      	ldr	r0, [r0, #4]
   d611e:	f7fe bced 	b.w	d4afc <network_connect>

000d6122 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6122:	2200      	movs	r2, #0
   d6124:	2102      	movs	r1, #2
   d6126:	6840      	ldr	r0, [r0, #4]
   d6128:	f7fe bcf8 	b.w	d4b1c <network_disconnect>

000d612c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d612c:	2200      	movs	r2, #0
   d612e:	4611      	mov	r1, r2
   d6130:	6840      	ldr	r0, [r0, #4]
   d6132:	f7fe bceb 	b.w	d4b0c <network_connecting>

000d6136 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6136:	2200      	movs	r2, #0
   d6138:	4611      	mov	r1, r2
   d613a:	6840      	ldr	r0, [r0, #4]
   d613c:	f7fe bcf6 	b.w	d4b2c <network_ready>

000d6140 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6140:	2300      	movs	r3, #0
   d6142:	461a      	mov	r2, r3
   d6144:	4619      	mov	r1, r3
   d6146:	6840      	ldr	r0, [r0, #4]
   d6148:	f7fe bcf8 	b.w	d4b3c <network_on>

000d614c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d614c:	2300      	movs	r3, #0
   d614e:	461a      	mov	r2, r3
   d6150:	4619      	mov	r1, r3
   d6152:	6840      	ldr	r0, [r0, #4]
   d6154:	f7fe bcfa 	b.w	d4b4c <network_off>

000d6158 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6158:	2200      	movs	r2, #0
   d615a:	f081 0101 	eor.w	r1, r1, #1
   d615e:	6840      	ldr	r0, [r0, #4]
   d6160:	f7fe bcfc 	b.w	d4b5c <network_listen>

000d6164 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6164:	2200      	movs	r2, #0
   d6166:	6840      	ldr	r0, [r0, #4]
   d6168:	f7fe bd08 	b.w	d4b7c <network_set_listen_timeout>

000d616c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d616c:	2200      	movs	r2, #0
   d616e:	4611      	mov	r1, r2
   d6170:	6840      	ldr	r0, [r0, #4]
   d6172:	f7fe bd0b 	b.w	d4b8c <network_get_listen_timeout>

000d6176 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6176:	2200      	movs	r2, #0
   d6178:	4611      	mov	r1, r2
   d617a:	6840      	ldr	r0, [r0, #4]
   d617c:	f7fe bcf6 	b.w	d4b6c <network_listening>

000d6180 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6184:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6186:	b095      	sub	sp, #84	; 0x54
   d6188:	4616      	mov	r6, r2
   d618a:	460d      	mov	r5, r1
   d618c:	4607      	mov	r7, r0
    IPAddress addr;
   d618e:	f7ff fcf7 	bl	d5b80 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6192:	4621      	mov	r1, r4
   d6194:	2220      	movs	r2, #32
   d6196:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6198:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d619a:	f001 f826 	bl	d71ea <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d619e:	2340      	movs	r3, #64	; 0x40
   d61a0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d61a2:	4621      	mov	r1, r4
   d61a4:	466b      	mov	r3, sp
   d61a6:	aa0c      	add	r2, sp, #48	; 0x30
   d61a8:	4630      	mov	r0, r6
   d61aa:	f7fe fb13 	bl	d47d4 <netdb_getaddrinfo>
    if (!r) {
   d61ae:	4604      	mov	r4, r0
   d61b0:	2800      	cmp	r0, #0
   d61b2:	d144      	bne.n	d623e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d61b4:	4602      	mov	r2, r0
   d61b6:	2101      	movs	r1, #1
   d61b8:	6868      	ldr	r0, [r5, #4]
   d61ba:	f7fe fcb7 	bl	d4b2c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d61be:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d61c0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d61c2:	4622      	mov	r2, r4
   d61c4:	6868      	ldr	r0, [r5, #4]
   d61c6:	f7fe fcb1 	bl	d4b2c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d61ca:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d61cc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d61ce:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d61d0:	2e00      	cmp	r6, #0
   d61d2:	d034      	beq.n	d623e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d61d4:	2900      	cmp	r1, #0
   d61d6:	d132      	bne.n	d623e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d61d8:	6873      	ldr	r3, [r6, #4]
   d61da:	2b02      	cmp	r3, #2
   d61dc:	d002      	beq.n	d61e4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d61de:	2b0a      	cmp	r3, #10
   d61e0:	d009      	beq.n	d61f6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d61e2:	e02a      	b.n	d623a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d61e4:	f1b8 0f00 	cmp.w	r8, #0
   d61e8:	d027      	beq.n	d623a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d61ea:	6971      	ldr	r1, [r6, #20]
   d61ec:	4638      	mov	r0, r7
   d61ee:	3104      	adds	r1, #4
   d61f0:	f7ff fcf3 	bl	d5bda <_ZN9IPAddressaSEPKh>
   d61f4:	e020      	b.n	d6238 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d61f6:	f1b9 0f00 	cmp.w	r9, #0
   d61fa:	d01e      	beq.n	d623a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d61fc:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d61fe:	2211      	movs	r2, #17
   d6200:	a801      	add	r0, sp, #4
   d6202:	f000 fff2 	bl	d71ea <memset>
                    a.v = 6;
   d6206:	2306      	movs	r3, #6
   d6208:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d620c:	ad01      	add	r5, sp, #4
   d620e:	f104 0308 	add.w	r3, r4, #8
   d6212:	3418      	adds	r4, #24
   d6214:	6818      	ldr	r0, [r3, #0]
   d6216:	6859      	ldr	r1, [r3, #4]
   d6218:	462a      	mov	r2, r5
   d621a:	c203      	stmia	r2!, {r0, r1}
   d621c:	3308      	adds	r3, #8
   d621e:	42a3      	cmp	r3, r4
   d6220:	4615      	mov	r5, r2
   d6222:	d1f7      	bne.n	d6214 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6224:	a901      	add	r1, sp, #4
   d6226:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6228:	ad07      	add	r5, sp, #28
   d622a:	f7ff fcb7 	bl	d5b9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d622e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6230:	1d3c      	adds	r4, r7, #4
   d6232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6234:	682b      	ldr	r3, [r5, #0]
   d6236:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6238:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d623a:	69f6      	ldr	r6, [r6, #28]
   d623c:	e7c8      	b.n	d61d0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d623e:	9800      	ldr	r0, [sp, #0]
   d6240:	f7fe fac0 	bl	d47c4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6244:	4638      	mov	r0, r7
   d6246:	b015      	add	sp, #84	; 0x54
   d6248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d624c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d624c:	4b02      	ldr	r3, [pc, #8]	; (d6258 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d624e:	4a03      	ldr	r2, [pc, #12]	; (d625c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6250:	601a      	str	r2, [r3, #0]
   d6252:	2200      	movs	r2, #0
   d6254:	605a      	str	r2, [r3, #4]
   d6256:	4770      	bx	lr
   d6258:	2003e70c 	.word	0x2003e70c
   d625c:	000d7784 	.word	0x000d7784

000d6260 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d6260:	b508      	push	{r3, lr}
   d6262:	4b02      	ldr	r3, [pc, #8]	; (d626c <spark_protocol_instance+0xc>)
   d6264:	681b      	ldr	r3, [r3, #0]
   d6266:	681b      	ldr	r3, [r3, #0]
   d6268:	9301      	str	r3, [sp, #4]
   d626a:	bd08      	pop	{r3, pc}
   d626c:	0003025c 	.word	0x0003025c

000d6270 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d6270:	b508      	push	{r3, lr}
   d6272:	4b02      	ldr	r3, [pc, #8]	; (d627c <spark_protocol_set_product_id+0xc>)
   d6274:	681b      	ldr	r3, [r3, #0]
   d6276:	685b      	ldr	r3, [r3, #4]
   d6278:	9301      	str	r3, [sp, #4]
   d627a:	bd08      	pop	{r3, pc}
   d627c:	0003025c 	.word	0x0003025c

000d6280 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d6280:	b508      	push	{r3, lr}
   d6282:	4b02      	ldr	r3, [pc, #8]	; (d628c <spark_protocol_set_product_firmware_version+0xc>)
   d6284:	681b      	ldr	r3, [r3, #0]
   d6286:	689b      	ldr	r3, [r3, #8]
   d6288:	9301      	str	r3, [sp, #4]
   d628a:	bd08      	pop	{r3, pc}
   d628c:	0003025c 	.word	0x0003025c

000d6290 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6290:	b510      	push	{r4, lr}
   d6292:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6294:	480f      	ldr	r0, [pc, #60]	; (d62d4 <pinAvailable+0x44>)
   d6296:	f7fe fdf1 	bl	d4e7c <_ZN8SPIClass9isEnabledEv>
   d629a:	b128      	cbz	r0, d62a8 <pinAvailable+0x18>
   d629c:	f1a4 030b 	sub.w	r3, r4, #11
   d62a0:	2b02      	cmp	r3, #2
   d62a2:	d801      	bhi.n	d62a8 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d62a4:	2000      	movs	r0, #0
   d62a6:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d62a8:	f000 f876 	bl	d6398 <_Z19__fetch_global_Wirev>
   d62ac:	f7ff fe7e 	bl	d5fac <_ZN7TwoWire9isEnabledEv>
   d62b0:	b108      	cbz	r0, d62b6 <pinAvailable+0x26>
   d62b2:	2c01      	cmp	r4, #1
   d62b4:	d9f6      	bls.n	d62a4 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d62b6:	f7ff fe01 	bl	d5ebc <_Z22__fetch_global_Serial1v>
   d62ba:	f7ff fdfb 	bl	d5eb4 <_ZN11USARTSerial9isEnabledEv>
   d62be:	b118      	cbz	r0, d62c8 <pinAvailable+0x38>
   d62c0:	f1a4 0309 	sub.w	r3, r4, #9
   d62c4:	2b01      	cmp	r3, #1
   d62c6:	d9ed      	bls.n	d62a4 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d62c8:	2c23      	cmp	r4, #35	; 0x23
   d62ca:	bf8c      	ite	hi
   d62cc:	2000      	movhi	r0, #0
   d62ce:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d62d0:	bd10      	pop	{r4, pc}
   d62d2:	bf00      	nop
   d62d4:	2003e714 	.word	0x2003e714

000d62d8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d62d8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d62da:	b538      	push	{r3, r4, r5, lr}
   d62dc:	4604      	mov	r4, r0
   d62de:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d62e0:	d80a      	bhi.n	d62f8 <pinMode+0x20>
   d62e2:	29ff      	cmp	r1, #255	; 0xff
   d62e4:	d008      	beq.n	d62f8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d62e6:	f7ff ffd3 	bl	d6290 <pinAvailable>
   d62ea:	b128      	cbz	r0, d62f8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d62ec:	4629      	mov	r1, r5
   d62ee:	4620      	mov	r0, r4
}
   d62f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d62f4:	f7fe ba7e 	b.w	d47f4 <HAL_Pin_Mode>
   d62f8:	bd38      	pop	{r3, r4, r5, pc}

000d62fa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d62fa:	b538      	push	{r3, r4, r5, lr}
   d62fc:	4604      	mov	r4, r0
   d62fe:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6300:	f7fe fa80 	bl	d4804 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6304:	28ff      	cmp	r0, #255	; 0xff
   d6306:	d010      	beq.n	d632a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6308:	2806      	cmp	r0, #6
   d630a:	d804      	bhi.n	d6316 <digitalWrite+0x1c>
   d630c:	234d      	movs	r3, #77	; 0x4d
   d630e:	fa23 f000 	lsr.w	r0, r3, r0
   d6312:	07c3      	lsls	r3, r0, #31
   d6314:	d409      	bmi.n	d632a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6316:	4620      	mov	r0, r4
   d6318:	f7ff ffba 	bl	d6290 <pinAvailable>
   d631c:	b128      	cbz	r0, d632a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d631e:	4629      	mov	r1, r5
   d6320:	4620      	mov	r0, r4
}
   d6322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6326:	f7fe ba75 	b.w	d4814 <HAL_GPIO_Write>
   d632a:	bd38      	pop	{r3, r4, r5, pc}

000d632c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d632c:	b510      	push	{r4, lr}
   d632e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6330:	f7fe fa68 	bl	d4804 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d6334:	3804      	subs	r0, #4
   d6336:	b2c0      	uxtb	r0, r0
   d6338:	2801      	cmp	r0, #1
   d633a:	d908      	bls.n	d634e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d633c:	4620      	mov	r0, r4
   d633e:	f7ff ffa7 	bl	d6290 <pinAvailable>
   d6342:	b120      	cbz	r0, d634e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6344:	4620      	mov	r0, r4
}
   d6346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d634a:	f7fe ba6b 	b.w	d4824 <HAL_GPIO_Read>
}
   d634e:	2000      	movs	r0, #0
   d6350:	bd10      	pop	{r4, pc}
	...

000d6354 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6354:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6356:	4c0c      	ldr	r4, [pc, #48]	; (d6388 <_GLOBAL__sub_I_SPI+0x34>)
   d6358:	4e0c      	ldr	r6, [pc, #48]	; (d638c <_GLOBAL__sub_I_SPI+0x38>)
   d635a:	4d0d      	ldr	r5, [pc, #52]	; (d6390 <_GLOBAL__sub_I_SPI+0x3c>)
   d635c:	2100      	movs	r1, #0
   d635e:	4620      	mov	r0, r4
   d6360:	f7fe fcc2 	bl	d4ce8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6364:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6366:	4c0b      	ldr	r4, [pc, #44]	; (d6394 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6368:	4632      	mov	r2, r6
   d636a:	4629      	mov	r1, r5
   d636c:	f000 f834 	bl	d63d8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6370:	2101      	movs	r1, #1
   d6372:	4620      	mov	r0, r4
   d6374:	f7fe fcb8 	bl	d4ce8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6378:	4632      	mov	r2, r6
   d637a:	4629      	mov	r1, r5
   d637c:	4620      	mov	r0, r4
   d637e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6382:	f000 b829 	b.w	d63d8 <__aeabi_atexit>
   d6386:	bf00      	nop
   d6388:	2003e714 	.word	0x2003e714
   d638c:	2003e2b8 	.word	0x2003e2b8
   d6390:	000d4cd9 	.word	0x000d4cd9
   d6394:	2003e724 	.word	0x2003e724

000d6398 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6398:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d639a:	4d0b      	ldr	r5, [pc, #44]	; (d63c8 <_Z19__fetch_global_Wirev+0x30>)
   d639c:	6829      	ldr	r1, [r5, #0]
   d639e:	f011 0401 	ands.w	r4, r1, #1
   d63a2:	d10f      	bne.n	d63c4 <_Z19__fetch_global_Wirev+0x2c>
   d63a4:	4628      	mov	r0, r5
   d63a6:	f7fd fe7e 	bl	d40a6 <__cxa_guard_acquire>
   d63aa:	b158      	cbz	r0, d63c4 <_Z19__fetch_global_Wirev+0x2c>
   d63ac:	4621      	mov	r1, r4
   d63ae:	4807      	ldr	r0, [pc, #28]	; (d63cc <_Z19__fetch_global_Wirev+0x34>)
   d63b0:	f7ff fdea 	bl	d5f88 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d63b4:	4628      	mov	r0, r5
   d63b6:	f7fd fe7b 	bl	d40b0 <__cxa_guard_release>
   d63ba:	4a05      	ldr	r2, [pc, #20]	; (d63d0 <_Z19__fetch_global_Wirev+0x38>)
   d63bc:	4905      	ldr	r1, [pc, #20]	; (d63d4 <_Z19__fetch_global_Wirev+0x3c>)
   d63be:	4803      	ldr	r0, [pc, #12]	; (d63cc <_Z19__fetch_global_Wirev+0x34>)
   d63c0:	f000 f80a 	bl	d63d8 <__aeabi_atexit>
	return wire;
}
   d63c4:	4801      	ldr	r0, [pc, #4]	; (d63cc <_Z19__fetch_global_Wirev+0x34>)
   d63c6:	bd38      	pop	{r3, r4, r5, pc}
   d63c8:	2003e738 	.word	0x2003e738
   d63cc:	2003e73c 	.word	0x2003e73c
   d63d0:	2003e2b8 	.word	0x2003e2b8
   d63d4:	000d5f31 	.word	0x000d5f31

000d63d8 <__aeabi_atexit>:
   d63d8:	460b      	mov	r3, r1
   d63da:	4601      	mov	r1, r0
   d63dc:	4618      	mov	r0, r3
   d63de:	f000 beeb 	b.w	d71b8 <__cxa_atexit>

000d63e2 <_ZdlPvj>:
   d63e2:	f7fd be5c 	b.w	d409e <_ZdlPv>

000d63e6 <_ZSt25__throw_bad_function_callv>:
   d63e6:	b508      	push	{r3, lr}
   d63e8:	f7fe fc20 	bl	d4c2c <abort>

000d63ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d63ec:	4b18      	ldr	r3, [pc, #96]	; (d6450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d63ee:	681a      	ldr	r2, [r3, #0]
   d63f0:	07d1      	lsls	r1, r2, #31
   d63f2:	bf5c      	itt	pl
   d63f4:	2201      	movpl	r2, #1
   d63f6:	601a      	strpl	r2, [r3, #0]
   d63f8:	4b16      	ldr	r3, [pc, #88]	; (d6454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d63fa:	681a      	ldr	r2, [r3, #0]
   d63fc:	07d2      	lsls	r2, r2, #31
   d63fe:	bf5c      	itt	pl
   d6400:	2201      	movpl	r2, #1
   d6402:	601a      	strpl	r2, [r3, #0]
   d6404:	4b14      	ldr	r3, [pc, #80]	; (d6458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6406:	681a      	ldr	r2, [r3, #0]
   d6408:	07d0      	lsls	r0, r2, #31
   d640a:	bf5c      	itt	pl
   d640c:	2201      	movpl	r2, #1
   d640e:	601a      	strpl	r2, [r3, #0]
   d6410:	4b12      	ldr	r3, [pc, #72]	; (d645c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6412:	681a      	ldr	r2, [r3, #0]
   d6414:	07d1      	lsls	r1, r2, #31
   d6416:	bf5c      	itt	pl
   d6418:	2201      	movpl	r2, #1
   d641a:	601a      	strpl	r2, [r3, #0]
   d641c:	4b10      	ldr	r3, [pc, #64]	; (d6460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d641e:	681a      	ldr	r2, [r3, #0]
   d6420:	07d2      	lsls	r2, r2, #31
   d6422:	bf5c      	itt	pl
   d6424:	2201      	movpl	r2, #1
   d6426:	601a      	strpl	r2, [r3, #0]
   d6428:	4b0e      	ldr	r3, [pc, #56]	; (d6464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d642a:	681a      	ldr	r2, [r3, #0]
   d642c:	07d0      	lsls	r0, r2, #31
   d642e:	bf5c      	itt	pl
   d6430:	2201      	movpl	r2, #1
   d6432:	601a      	strpl	r2, [r3, #0]
   d6434:	4b0c      	ldr	r3, [pc, #48]	; (d6468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6436:	681a      	ldr	r2, [r3, #0]
   d6438:	07d1      	lsls	r1, r2, #31
   d643a:	bf5c      	itt	pl
   d643c:	2201      	movpl	r2, #1
   d643e:	601a      	strpl	r2, [r3, #0]
   d6440:	4b0a      	ldr	r3, [pc, #40]	; (d646c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6442:	681a      	ldr	r2, [r3, #0]
   d6444:	07d2      	lsls	r2, r2, #31
   d6446:	bf5c      	itt	pl
   d6448:	2201      	movpl	r2, #1
   d644a:	601a      	strpl	r2, [r3, #0]
   d644c:	4770      	bx	lr
   d644e:	bf00      	nop
   d6450:	2003e76c 	.word	0x2003e76c
   d6454:	2003e768 	.word	0x2003e768
   d6458:	2003e764 	.word	0x2003e764
   d645c:	2003e760 	.word	0x2003e760
   d6460:	2003e75c 	.word	0x2003e75c
   d6464:	2003e758 	.word	0x2003e758
   d6468:	2003e754 	.word	0x2003e754
   d646c:	2003e750 	.word	0x2003e750

000d6470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6470:	4b24      	ldr	r3, [pc, #144]	; (d6504 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6472:	681a      	ldr	r2, [r3, #0]
   d6474:	07d0      	lsls	r0, r2, #31
   d6476:	bf5c      	itt	pl
   d6478:	2201      	movpl	r2, #1
   d647a:	601a      	strpl	r2, [r3, #0]
   d647c:	4b22      	ldr	r3, [pc, #136]	; (d6508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d647e:	681a      	ldr	r2, [r3, #0]
   d6480:	07d1      	lsls	r1, r2, #31
   d6482:	bf5c      	itt	pl
   d6484:	2201      	movpl	r2, #1
   d6486:	601a      	strpl	r2, [r3, #0]
   d6488:	4b20      	ldr	r3, [pc, #128]	; (d650c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d648a:	681a      	ldr	r2, [r3, #0]
   d648c:	07d2      	lsls	r2, r2, #31
   d648e:	bf5c      	itt	pl
   d6490:	2201      	movpl	r2, #1
   d6492:	601a      	strpl	r2, [r3, #0]
   d6494:	4b1e      	ldr	r3, [pc, #120]	; (d6510 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6496:	681a      	ldr	r2, [r3, #0]
   d6498:	07d0      	lsls	r0, r2, #31
   d649a:	bf5c      	itt	pl
   d649c:	2201      	movpl	r2, #1
   d649e:	601a      	strpl	r2, [r3, #0]
   d64a0:	4b1c      	ldr	r3, [pc, #112]	; (d6514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d64a2:	681a      	ldr	r2, [r3, #0]
   d64a4:	07d1      	lsls	r1, r2, #31
   d64a6:	bf5c      	itt	pl
   d64a8:	2201      	movpl	r2, #1
   d64aa:	601a      	strpl	r2, [r3, #0]
   d64ac:	4b1a      	ldr	r3, [pc, #104]	; (d6518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d64ae:	681a      	ldr	r2, [r3, #0]
   d64b0:	07d2      	lsls	r2, r2, #31
   d64b2:	bf5c      	itt	pl
   d64b4:	2201      	movpl	r2, #1
   d64b6:	601a      	strpl	r2, [r3, #0]
   d64b8:	4b18      	ldr	r3, [pc, #96]	; (d651c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d64ba:	681a      	ldr	r2, [r3, #0]
   d64bc:	07d0      	lsls	r0, r2, #31
   d64be:	bf5c      	itt	pl
   d64c0:	2201      	movpl	r2, #1
   d64c2:	601a      	strpl	r2, [r3, #0]
   d64c4:	4b16      	ldr	r3, [pc, #88]	; (d6520 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d64c6:	681a      	ldr	r2, [r3, #0]
   d64c8:	07d1      	lsls	r1, r2, #31
   d64ca:	bf5c      	itt	pl
   d64cc:	2201      	movpl	r2, #1
   d64ce:	601a      	strpl	r2, [r3, #0]
   d64d0:	4b14      	ldr	r3, [pc, #80]	; (d6524 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d64d2:	681a      	ldr	r2, [r3, #0]
   d64d4:	07d2      	lsls	r2, r2, #31
   d64d6:	bf5c      	itt	pl
   d64d8:	2201      	movpl	r2, #1
   d64da:	601a      	strpl	r2, [r3, #0]
   d64dc:	4b12      	ldr	r3, [pc, #72]	; (d6528 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d64de:	681a      	ldr	r2, [r3, #0]
   d64e0:	07d0      	lsls	r0, r2, #31
   d64e2:	bf5c      	itt	pl
   d64e4:	2201      	movpl	r2, #1
   d64e6:	601a      	strpl	r2, [r3, #0]
   d64e8:	4b10      	ldr	r3, [pc, #64]	; (d652c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d64ea:	681a      	ldr	r2, [r3, #0]
   d64ec:	07d1      	lsls	r1, r2, #31
   d64ee:	bf5c      	itt	pl
   d64f0:	2201      	movpl	r2, #1
   d64f2:	601a      	strpl	r2, [r3, #0]
   d64f4:	4b0e      	ldr	r3, [pc, #56]	; (d6530 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d64f6:	681a      	ldr	r2, [r3, #0]
   d64f8:	07d2      	lsls	r2, r2, #31
   d64fa:	bf5c      	itt	pl
   d64fc:	2201      	movpl	r2, #1
   d64fe:	601a      	strpl	r2, [r3, #0]
   d6500:	4770      	bx	lr
   d6502:	bf00      	nop
   d6504:	2003e79c 	.word	0x2003e79c
   d6508:	2003e798 	.word	0x2003e798
   d650c:	2003e794 	.word	0x2003e794
   d6510:	2003e790 	.word	0x2003e790
   d6514:	2003e78c 	.word	0x2003e78c
   d6518:	2003e788 	.word	0x2003e788
   d651c:	2003e784 	.word	0x2003e784
   d6520:	2003e780 	.word	0x2003e780
   d6524:	2003e77c 	.word	0x2003e77c
   d6528:	2003e778 	.word	0x2003e778
   d652c:	2003e774 	.word	0x2003e774
   d6530:	2003e770 	.word	0x2003e770

000d6534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6534:	4b24      	ldr	r3, [pc, #144]	; (d65c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6536:	681a      	ldr	r2, [r3, #0]
   d6538:	07d0      	lsls	r0, r2, #31
   d653a:	bf5c      	itt	pl
   d653c:	2201      	movpl	r2, #1
   d653e:	601a      	strpl	r2, [r3, #0]
   d6540:	4b22      	ldr	r3, [pc, #136]	; (d65cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6542:	681a      	ldr	r2, [r3, #0]
   d6544:	07d1      	lsls	r1, r2, #31
   d6546:	bf5c      	itt	pl
   d6548:	2201      	movpl	r2, #1
   d654a:	601a      	strpl	r2, [r3, #0]
   d654c:	4b20      	ldr	r3, [pc, #128]	; (d65d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d654e:	681a      	ldr	r2, [r3, #0]
   d6550:	07d2      	lsls	r2, r2, #31
   d6552:	bf5c      	itt	pl
   d6554:	2201      	movpl	r2, #1
   d6556:	601a      	strpl	r2, [r3, #0]
   d6558:	4b1e      	ldr	r3, [pc, #120]	; (d65d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d655a:	681a      	ldr	r2, [r3, #0]
   d655c:	07d0      	lsls	r0, r2, #31
   d655e:	bf5c      	itt	pl
   d6560:	2201      	movpl	r2, #1
   d6562:	601a      	strpl	r2, [r3, #0]
   d6564:	4b1c      	ldr	r3, [pc, #112]	; (d65d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6566:	681a      	ldr	r2, [r3, #0]
   d6568:	07d1      	lsls	r1, r2, #31
   d656a:	bf5c      	itt	pl
   d656c:	2201      	movpl	r2, #1
   d656e:	601a      	strpl	r2, [r3, #0]
   d6570:	4b1a      	ldr	r3, [pc, #104]	; (d65dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6572:	681a      	ldr	r2, [r3, #0]
   d6574:	07d2      	lsls	r2, r2, #31
   d6576:	bf5c      	itt	pl
   d6578:	2201      	movpl	r2, #1
   d657a:	601a      	strpl	r2, [r3, #0]
   d657c:	4b18      	ldr	r3, [pc, #96]	; (d65e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d657e:	681a      	ldr	r2, [r3, #0]
   d6580:	07d0      	lsls	r0, r2, #31
   d6582:	bf5c      	itt	pl
   d6584:	2201      	movpl	r2, #1
   d6586:	601a      	strpl	r2, [r3, #0]
   d6588:	4b16      	ldr	r3, [pc, #88]	; (d65e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d658a:	681a      	ldr	r2, [r3, #0]
   d658c:	07d1      	lsls	r1, r2, #31
   d658e:	bf5c      	itt	pl
   d6590:	2201      	movpl	r2, #1
   d6592:	601a      	strpl	r2, [r3, #0]
   d6594:	4b14      	ldr	r3, [pc, #80]	; (d65e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6596:	681a      	ldr	r2, [r3, #0]
   d6598:	07d2      	lsls	r2, r2, #31
   d659a:	bf5c      	itt	pl
   d659c:	2201      	movpl	r2, #1
   d659e:	601a      	strpl	r2, [r3, #0]
   d65a0:	4b12      	ldr	r3, [pc, #72]	; (d65ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d65a2:	681a      	ldr	r2, [r3, #0]
   d65a4:	07d0      	lsls	r0, r2, #31
   d65a6:	bf5c      	itt	pl
   d65a8:	2201      	movpl	r2, #1
   d65aa:	601a      	strpl	r2, [r3, #0]
   d65ac:	4b10      	ldr	r3, [pc, #64]	; (d65f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d65ae:	681a      	ldr	r2, [r3, #0]
   d65b0:	07d1      	lsls	r1, r2, #31
   d65b2:	bf5c      	itt	pl
   d65b4:	2201      	movpl	r2, #1
   d65b6:	601a      	strpl	r2, [r3, #0]
   d65b8:	4b0e      	ldr	r3, [pc, #56]	; (d65f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d65ba:	681a      	ldr	r2, [r3, #0]
   d65bc:	07d2      	lsls	r2, r2, #31
   d65be:	bf5c      	itt	pl
   d65c0:	2201      	movpl	r2, #1
   d65c2:	601a      	strpl	r2, [r3, #0]
   d65c4:	4770      	bx	lr
   d65c6:	bf00      	nop
   d65c8:	2003e7cc 	.word	0x2003e7cc
   d65cc:	2003e7c8 	.word	0x2003e7c8
   d65d0:	2003e7c4 	.word	0x2003e7c4
   d65d4:	2003e7c0 	.word	0x2003e7c0
   d65d8:	2003e7bc 	.word	0x2003e7bc
   d65dc:	2003e7b8 	.word	0x2003e7b8
   d65e0:	2003e7b4 	.word	0x2003e7b4
   d65e4:	2003e7b0 	.word	0x2003e7b0
   d65e8:	2003e7ac 	.word	0x2003e7ac
   d65ec:	2003e7a8 	.word	0x2003e7a8
   d65f0:	2003e7a4 	.word	0x2003e7a4
   d65f4:	2003e7a0 	.word	0x2003e7a0

000d65f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d65f8:	4b18      	ldr	r3, [pc, #96]	; (d665c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d65fa:	681a      	ldr	r2, [r3, #0]
   d65fc:	07d1      	lsls	r1, r2, #31
   d65fe:	bf5c      	itt	pl
   d6600:	2201      	movpl	r2, #1
   d6602:	601a      	strpl	r2, [r3, #0]
   d6604:	4b16      	ldr	r3, [pc, #88]	; (d6660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6606:	681a      	ldr	r2, [r3, #0]
   d6608:	07d2      	lsls	r2, r2, #31
   d660a:	bf5c      	itt	pl
   d660c:	2201      	movpl	r2, #1
   d660e:	601a      	strpl	r2, [r3, #0]
   d6610:	4b14      	ldr	r3, [pc, #80]	; (d6664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6612:	681a      	ldr	r2, [r3, #0]
   d6614:	07d0      	lsls	r0, r2, #31
   d6616:	bf5c      	itt	pl
   d6618:	2201      	movpl	r2, #1
   d661a:	601a      	strpl	r2, [r3, #0]
   d661c:	4b12      	ldr	r3, [pc, #72]	; (d6668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d661e:	681a      	ldr	r2, [r3, #0]
   d6620:	07d1      	lsls	r1, r2, #31
   d6622:	bf5c      	itt	pl
   d6624:	2201      	movpl	r2, #1
   d6626:	601a      	strpl	r2, [r3, #0]
   d6628:	4b10      	ldr	r3, [pc, #64]	; (d666c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d662a:	681a      	ldr	r2, [r3, #0]
   d662c:	07d2      	lsls	r2, r2, #31
   d662e:	bf5c      	itt	pl
   d6630:	2201      	movpl	r2, #1
   d6632:	601a      	strpl	r2, [r3, #0]
   d6634:	4b0e      	ldr	r3, [pc, #56]	; (d6670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6636:	681a      	ldr	r2, [r3, #0]
   d6638:	07d0      	lsls	r0, r2, #31
   d663a:	bf5c      	itt	pl
   d663c:	2201      	movpl	r2, #1
   d663e:	601a      	strpl	r2, [r3, #0]
   d6640:	4b0c      	ldr	r3, [pc, #48]	; (d6674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6642:	681a      	ldr	r2, [r3, #0]
   d6644:	07d1      	lsls	r1, r2, #31
   d6646:	bf5c      	itt	pl
   d6648:	2201      	movpl	r2, #1
   d664a:	601a      	strpl	r2, [r3, #0]
   d664c:	4b0a      	ldr	r3, [pc, #40]	; (d6678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d664e:	681a      	ldr	r2, [r3, #0]
   d6650:	07d2      	lsls	r2, r2, #31
   d6652:	bf5c      	itt	pl
   d6654:	2201      	movpl	r2, #1
   d6656:	601a      	strpl	r2, [r3, #0]
   d6658:	4770      	bx	lr
   d665a:	bf00      	nop
   d665c:	2003e7ec 	.word	0x2003e7ec
   d6660:	2003e7e8 	.word	0x2003e7e8
   d6664:	2003e7e4 	.word	0x2003e7e4
   d6668:	2003e7e0 	.word	0x2003e7e0
   d666c:	2003e7dc 	.word	0x2003e7dc
   d6670:	2003e7d8 	.word	0x2003e7d8
   d6674:	2003e7d4 	.word	0x2003e7d4
   d6678:	2003e7d0 	.word	0x2003e7d0

000d667c <sqrt>:
   d667c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6680:	ed2d 8b02 	vpush	{d8}
   d6684:	b08b      	sub	sp, #44	; 0x2c
   d6686:	ec55 4b10 	vmov	r4, r5, d0
   d668a:	f000 f857 	bl	d673c <__ieee754_sqrt>
   d668e:	4b29      	ldr	r3, [pc, #164]	; (d6734 <sqrt+0xb8>)
   d6690:	eeb0 8a40 	vmov.f32	s16, s0
   d6694:	eef0 8a60 	vmov.f32	s17, s1
   d6698:	f993 6000 	ldrsb.w	r6, [r3]
   d669c:	1c73      	adds	r3, r6, #1
   d669e:	d012      	beq.n	d66c6 <sqrt+0x4a>
   d66a0:	4622      	mov	r2, r4
   d66a2:	462b      	mov	r3, r5
   d66a4:	4620      	mov	r0, r4
   d66a6:	4629      	mov	r1, r5
   d66a8:	f000 fd6c 	bl	d7184 <__aeabi_dcmpun>
   d66ac:	4607      	mov	r7, r0
   d66ae:	b950      	cbnz	r0, d66c6 <sqrt+0x4a>
   d66b0:	f04f 0800 	mov.w	r8, #0
   d66b4:	f04f 0900 	mov.w	r9, #0
   d66b8:	4620      	mov	r0, r4
   d66ba:	4629      	mov	r1, r5
   d66bc:	4642      	mov	r2, r8
   d66be:	464b      	mov	r3, r9
   d66c0:	f000 fd38 	bl	d7134 <__aeabi_dcmplt>
   d66c4:	b940      	cbnz	r0, d66d8 <sqrt+0x5c>
   d66c6:	eeb0 0a48 	vmov.f32	s0, s16
   d66ca:	eef0 0a68 	vmov.f32	s1, s17
   d66ce:	b00b      	add	sp, #44	; 0x2c
   d66d0:	ecbd 8b02 	vpop	{d8}
   d66d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d66d8:	4b17      	ldr	r3, [pc, #92]	; (d6738 <sqrt+0xbc>)
   d66da:	9708      	str	r7, [sp, #32]
   d66dc:	2201      	movs	r2, #1
   d66de:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d66e2:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d66e6:	e88d 000c 	stmia.w	sp, {r2, r3}
   d66ea:	b1b6      	cbz	r6, d671a <sqrt+0x9e>
   d66ec:	4642      	mov	r2, r8
   d66ee:	464b      	mov	r3, r9
   d66f0:	4640      	mov	r0, r8
   d66f2:	4649      	mov	r1, r9
   d66f4:	f000 fbd6 	bl	d6ea4 <__aeabi_ddiv>
   d66f8:	2e02      	cmp	r6, #2
   d66fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d66fe:	d10e      	bne.n	d671e <sqrt+0xa2>
   d6700:	f7fe faa4 	bl	d4c4c <__errno>
   d6704:	2321      	movs	r3, #33	; 0x21
   d6706:	6003      	str	r3, [r0, #0]
   d6708:	9b08      	ldr	r3, [sp, #32]
   d670a:	b973      	cbnz	r3, d672a <sqrt+0xae>
   d670c:	ed9d 0b06 	vldr	d0, [sp, #24]
   d6710:	b00b      	add	sp, #44	; 0x2c
   d6712:	ecbd 8b02 	vpop	{d8}
   d6716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d671a:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d671e:	4668      	mov	r0, sp
   d6720:	f000 f8dc 	bl	d68dc <matherr>
   d6724:	2800      	cmp	r0, #0
   d6726:	d1ef      	bne.n	d6708 <sqrt+0x8c>
   d6728:	e7ea      	b.n	d6700 <sqrt+0x84>
   d672a:	f7fe fa8f 	bl	d4c4c <__errno>
   d672e:	9b08      	ldr	r3, [sp, #32]
   d6730:	6003      	str	r3, [r0, #0]
   d6732:	e7eb      	b.n	d670c <sqrt+0x90>
   d6734:	2003e24c 	.word	0x2003e24c
   d6738:	000d77b0 	.word	0x000d77b0

000d673c <__ieee754_sqrt>:
   d673c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6740:	4965      	ldr	r1, [pc, #404]	; (d68d8 <__ieee754_sqrt+0x19c>)
   d6742:	ec55 4b10 	vmov	r4, r5, d0
   d6746:	460e      	mov	r6, r1
   d6748:	4029      	ands	r1, r5
   d674a:	42b1      	cmp	r1, r6
   d674c:	f000 8097 	beq.w	d687e <__ieee754_sqrt+0x142>
   d6750:	2d00      	cmp	r5, #0
   d6752:	462b      	mov	r3, r5
   d6754:	ee10 2a10 	vmov	r2, s0
   d6758:	dd74      	ble.n	d6844 <__ieee754_sqrt+0x108>
   d675a:	152f      	asrs	r7, r5, #20
   d675c:	d07f      	beq.n	d685e <__ieee754_sqrt+0x122>
   d675e:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d6762:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d6766:	07f9      	lsls	r1, r7, #31
   d6768:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d676c:	d465      	bmi.n	d683a <__ieee754_sqrt+0xfe>
   d676e:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d6772:	2600      	movs	r6, #0
   d6774:	440b      	add	r3, r1
   d6776:	107f      	asrs	r7, r7, #1
   d6778:	0052      	lsls	r2, r2, #1
   d677a:	46b6      	mov	lr, r6
   d677c:	2016      	movs	r0, #22
   d677e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d6782:	eb0e 0401 	add.w	r4, lr, r1
   d6786:	429c      	cmp	r4, r3
   d6788:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d678c:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d6790:	dc03      	bgt.n	d679a <__ieee754_sqrt+0x5e>
   d6792:	1b1b      	subs	r3, r3, r4
   d6794:	eb04 0e01 	add.w	lr, r4, r1
   d6798:	440e      	add	r6, r1
   d679a:	3801      	subs	r0, #1
   d679c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d67a0:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d67a4:	d1ed      	bne.n	d6782 <__ieee754_sqrt+0x46>
   d67a6:	4684      	mov	ip, r0
   d67a8:	2420      	movs	r4, #32
   d67aa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d67ae:	e009      	b.n	d67c4 <__ieee754_sqrt+0x88>
   d67b0:	d020      	beq.n	d67f4 <__ieee754_sqrt+0xb8>
   d67b2:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d67b6:	3c01      	subs	r4, #1
   d67b8:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d67bc:	442b      	add	r3, r5
   d67be:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d67c2:	d020      	beq.n	d6806 <__ieee754_sqrt+0xca>
   d67c4:	459e      	cmp	lr, r3
   d67c6:	eb01 050c 	add.w	r5, r1, ip
   d67ca:	daf1      	bge.n	d67b0 <__ieee754_sqrt+0x74>
   d67cc:	2d00      	cmp	r5, #0
   d67ce:	eb05 0c01 	add.w	ip, r5, r1
   d67d2:	db09      	blt.n	d67e8 <__ieee754_sqrt+0xac>
   d67d4:	46f0      	mov	r8, lr
   d67d6:	4295      	cmp	r5, r2
   d67d8:	ebce 0303 	rsb	r3, lr, r3
   d67dc:	d900      	bls.n	d67e0 <__ieee754_sqrt+0xa4>
   d67de:	3b01      	subs	r3, #1
   d67e0:	1b52      	subs	r2, r2, r5
   d67e2:	4408      	add	r0, r1
   d67e4:	46c6      	mov	lr, r8
   d67e6:	e7e4      	b.n	d67b2 <__ieee754_sqrt+0x76>
   d67e8:	f1bc 0f00 	cmp.w	ip, #0
   d67ec:	dbf2      	blt.n	d67d4 <__ieee754_sqrt+0x98>
   d67ee:	f10e 0801 	add.w	r8, lr, #1
   d67f2:	e7f0      	b.n	d67d6 <__ieee754_sqrt+0x9a>
   d67f4:	4295      	cmp	r5, r2
   d67f6:	d81e      	bhi.n	d6836 <__ieee754_sqrt+0xfa>
   d67f8:	2d00      	cmp	r5, #0
   d67fa:	eb05 0c01 	add.w	ip, r5, r1
   d67fe:	db50      	blt.n	d68a2 <__ieee754_sqrt+0x166>
   d6800:	4698      	mov	r8, r3
   d6802:	2300      	movs	r3, #0
   d6804:	e7ec      	b.n	d67e0 <__ieee754_sqrt+0xa4>
   d6806:	4313      	orrs	r3, r2
   d6808:	d004      	beq.n	d6814 <__ieee754_sqrt+0xd8>
   d680a:	1c42      	adds	r2, r0, #1
   d680c:	d04d      	beq.n	d68aa <__ieee754_sqrt+0x16e>
   d680e:	f000 0301 	and.w	r3, r0, #1
   d6812:	4418      	add	r0, r3
   d6814:	0840      	lsrs	r0, r0, #1
   d6816:	1071      	asrs	r1, r6, #1
   d6818:	07f3      	lsls	r3, r6, #31
   d681a:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d681e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d6822:	bf48      	it	mi
   d6824:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d6828:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d682c:	4602      	mov	r2, r0
   d682e:	ec43 2b10 	vmov	d0, r2, r3
   d6832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6836:	4673      	mov	r3, lr
   d6838:	e7bb      	b.n	d67b2 <__ieee754_sqrt+0x76>
   d683a:	005b      	lsls	r3, r3, #1
   d683c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d6840:	0052      	lsls	r2, r2, #1
   d6842:	e794      	b.n	d676e <__ieee754_sqrt+0x32>
   d6844:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d6848:	4321      	orrs	r1, r4
   d684a:	d028      	beq.n	d689e <__ieee754_sqrt+0x162>
   d684c:	bbad      	cbnz	r5, d68ba <__ieee754_sqrt+0x17e>
   d684e:	462f      	mov	r7, r5
   d6850:	0ad3      	lsrs	r3, r2, #11
   d6852:	3f15      	subs	r7, #21
   d6854:	0552      	lsls	r2, r2, #21
   d6856:	2b00      	cmp	r3, #0
   d6858:	d0fa      	beq.n	d6850 <__ieee754_sqrt+0x114>
   d685a:	02dd      	lsls	r5, r3, #11
   d685c:	d428      	bmi.n	d68b0 <__ieee754_sqrt+0x174>
   d685e:	2100      	movs	r1, #0
   d6860:	e000      	b.n	d6864 <__ieee754_sqrt+0x128>
   d6862:	4601      	mov	r1, r0
   d6864:	005b      	lsls	r3, r3, #1
   d6866:	02dc      	lsls	r4, r3, #11
   d6868:	f101 0001 	add.w	r0, r1, #1
   d686c:	d5f9      	bpl.n	d6862 <__ieee754_sqrt+0x126>
   d686e:	f1c0 0420 	rsb	r4, r0, #32
   d6872:	fa22 f404 	lsr.w	r4, r2, r4
   d6876:	4323      	orrs	r3, r4
   d6878:	1a7f      	subs	r7, r7, r1
   d687a:	4082      	lsls	r2, r0
   d687c:	e76f      	b.n	d675e <__ieee754_sqrt+0x22>
   d687e:	ee10 2a10 	vmov	r2, s0
   d6882:	462b      	mov	r3, r5
   d6884:	ee10 0a10 	vmov	r0, s0
   d6888:	4629      	mov	r1, r5
   d688a:	f000 f9e1 	bl	d6c50 <__aeabi_dmul>
   d688e:	4622      	mov	r2, r4
   d6890:	462b      	mov	r3, r5
   d6892:	f000 f82b 	bl	d68ec <__adddf3>
   d6896:	ec41 0b10 	vmov	d0, r0, r1
   d689a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d689e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d68a2:	f1bc 0f00 	cmp.w	ip, #0
   d68a6:	daa2      	bge.n	d67ee <__ieee754_sqrt+0xb2>
   d68a8:	e7aa      	b.n	d6800 <__ieee754_sqrt+0xc4>
   d68aa:	3601      	adds	r6, #1
   d68ac:	4620      	mov	r0, r4
   d68ae:	e7b2      	b.n	d6816 <__ieee754_sqrt+0xda>
   d68b0:	2420      	movs	r4, #32
   d68b2:	f04f 31ff 	mov.w	r1, #4294967295
   d68b6:	2000      	movs	r0, #0
   d68b8:	e7db      	b.n	d6872 <__ieee754_sqrt+0x136>
   d68ba:	ee10 2a10 	vmov	r2, s0
   d68be:	462b      	mov	r3, r5
   d68c0:	4620      	mov	r0, r4
   d68c2:	4629      	mov	r1, r5
   d68c4:	f000 f810 	bl	d68e8 <__aeabi_dsub>
   d68c8:	4602      	mov	r2, r0
   d68ca:	460b      	mov	r3, r1
   d68cc:	f000 faea 	bl	d6ea4 <__aeabi_ddiv>
   d68d0:	ec41 0b10 	vmov	d0, r0, r1
   d68d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d68d8:	7ff00000 	.word	0x7ff00000

000d68dc <matherr>:
   d68dc:	2000      	movs	r0, #0
   d68de:	4770      	bx	lr

000d68e0 <__aeabi_drsub>:
   d68e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d68e4:	e002      	b.n	d68ec <__adddf3>
   d68e6:	bf00      	nop

000d68e8 <__aeabi_dsub>:
   d68e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d68ec <__adddf3>:
   d68ec:	b530      	push	{r4, r5, lr}
   d68ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d68f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d68f6:	ea94 0f05 	teq	r4, r5
   d68fa:	bf08      	it	eq
   d68fc:	ea90 0f02 	teqeq	r0, r2
   d6900:	bf1f      	itttt	ne
   d6902:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6906:	ea55 0c02 	orrsne.w	ip, r5, r2
   d690a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d690e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6912:	f000 80e2 	beq.w	d6ada <__adddf3+0x1ee>
   d6916:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d691a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d691e:	bfb8      	it	lt
   d6920:	426d      	neglt	r5, r5
   d6922:	dd0c      	ble.n	d693e <__adddf3+0x52>
   d6924:	442c      	add	r4, r5
   d6926:	ea80 0202 	eor.w	r2, r0, r2
   d692a:	ea81 0303 	eor.w	r3, r1, r3
   d692e:	ea82 0000 	eor.w	r0, r2, r0
   d6932:	ea83 0101 	eor.w	r1, r3, r1
   d6936:	ea80 0202 	eor.w	r2, r0, r2
   d693a:	ea81 0303 	eor.w	r3, r1, r3
   d693e:	2d36      	cmp	r5, #54	; 0x36
   d6940:	bf88      	it	hi
   d6942:	bd30      	pophi	{r4, r5, pc}
   d6944:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6948:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d694c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6950:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6954:	d002      	beq.n	d695c <__adddf3+0x70>
   d6956:	4240      	negs	r0, r0
   d6958:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d695c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6960:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6964:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6968:	d002      	beq.n	d6970 <__adddf3+0x84>
   d696a:	4252      	negs	r2, r2
   d696c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6970:	ea94 0f05 	teq	r4, r5
   d6974:	f000 80a7 	beq.w	d6ac6 <__adddf3+0x1da>
   d6978:	f1a4 0401 	sub.w	r4, r4, #1
   d697c:	f1d5 0e20 	rsbs	lr, r5, #32
   d6980:	db0d      	blt.n	d699e <__adddf3+0xb2>
   d6982:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6986:	fa22 f205 	lsr.w	r2, r2, r5
   d698a:	1880      	adds	r0, r0, r2
   d698c:	f141 0100 	adc.w	r1, r1, #0
   d6990:	fa03 f20e 	lsl.w	r2, r3, lr
   d6994:	1880      	adds	r0, r0, r2
   d6996:	fa43 f305 	asr.w	r3, r3, r5
   d699a:	4159      	adcs	r1, r3
   d699c:	e00e      	b.n	d69bc <__adddf3+0xd0>
   d699e:	f1a5 0520 	sub.w	r5, r5, #32
   d69a2:	f10e 0e20 	add.w	lr, lr, #32
   d69a6:	2a01      	cmp	r2, #1
   d69a8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d69ac:	bf28      	it	cs
   d69ae:	f04c 0c02 	orrcs.w	ip, ip, #2
   d69b2:	fa43 f305 	asr.w	r3, r3, r5
   d69b6:	18c0      	adds	r0, r0, r3
   d69b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d69bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d69c0:	d507      	bpl.n	d69d2 <__adddf3+0xe6>
   d69c2:	f04f 0e00 	mov.w	lr, #0
   d69c6:	f1dc 0c00 	rsbs	ip, ip, #0
   d69ca:	eb7e 0000 	sbcs.w	r0, lr, r0
   d69ce:	eb6e 0101 	sbc.w	r1, lr, r1
   d69d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d69d6:	d31b      	bcc.n	d6a10 <__adddf3+0x124>
   d69d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d69dc:	d30c      	bcc.n	d69f8 <__adddf3+0x10c>
   d69de:	0849      	lsrs	r1, r1, #1
   d69e0:	ea5f 0030 	movs.w	r0, r0, rrx
   d69e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d69e8:	f104 0401 	add.w	r4, r4, #1
   d69ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d69f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d69f4:	f080 809a 	bcs.w	d6b2c <__adddf3+0x240>
   d69f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d69fc:	bf08      	it	eq
   d69fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6a02:	f150 0000 	adcs.w	r0, r0, #0
   d6a06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6a0a:	ea41 0105 	orr.w	r1, r1, r5
   d6a0e:	bd30      	pop	{r4, r5, pc}
   d6a10:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6a14:	4140      	adcs	r0, r0
   d6a16:	eb41 0101 	adc.w	r1, r1, r1
   d6a1a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6a1e:	f1a4 0401 	sub.w	r4, r4, #1
   d6a22:	d1e9      	bne.n	d69f8 <__adddf3+0x10c>
   d6a24:	f091 0f00 	teq	r1, #0
   d6a28:	bf04      	itt	eq
   d6a2a:	4601      	moveq	r1, r0
   d6a2c:	2000      	moveq	r0, #0
   d6a2e:	fab1 f381 	clz	r3, r1
   d6a32:	bf08      	it	eq
   d6a34:	3320      	addeq	r3, #32
   d6a36:	f1a3 030b 	sub.w	r3, r3, #11
   d6a3a:	f1b3 0220 	subs.w	r2, r3, #32
   d6a3e:	da0c      	bge.n	d6a5a <__adddf3+0x16e>
   d6a40:	320c      	adds	r2, #12
   d6a42:	dd08      	ble.n	d6a56 <__adddf3+0x16a>
   d6a44:	f102 0c14 	add.w	ip, r2, #20
   d6a48:	f1c2 020c 	rsb	r2, r2, #12
   d6a4c:	fa01 f00c 	lsl.w	r0, r1, ip
   d6a50:	fa21 f102 	lsr.w	r1, r1, r2
   d6a54:	e00c      	b.n	d6a70 <__adddf3+0x184>
   d6a56:	f102 0214 	add.w	r2, r2, #20
   d6a5a:	bfd8      	it	le
   d6a5c:	f1c2 0c20 	rsble	ip, r2, #32
   d6a60:	fa01 f102 	lsl.w	r1, r1, r2
   d6a64:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6a68:	bfdc      	itt	le
   d6a6a:	ea41 010c 	orrle.w	r1, r1, ip
   d6a6e:	4090      	lslle	r0, r2
   d6a70:	1ae4      	subs	r4, r4, r3
   d6a72:	bfa2      	ittt	ge
   d6a74:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6a78:	4329      	orrge	r1, r5
   d6a7a:	bd30      	popge	{r4, r5, pc}
   d6a7c:	ea6f 0404 	mvn.w	r4, r4
   d6a80:	3c1f      	subs	r4, #31
   d6a82:	da1c      	bge.n	d6abe <__adddf3+0x1d2>
   d6a84:	340c      	adds	r4, #12
   d6a86:	dc0e      	bgt.n	d6aa6 <__adddf3+0x1ba>
   d6a88:	f104 0414 	add.w	r4, r4, #20
   d6a8c:	f1c4 0220 	rsb	r2, r4, #32
   d6a90:	fa20 f004 	lsr.w	r0, r0, r4
   d6a94:	fa01 f302 	lsl.w	r3, r1, r2
   d6a98:	ea40 0003 	orr.w	r0, r0, r3
   d6a9c:	fa21 f304 	lsr.w	r3, r1, r4
   d6aa0:	ea45 0103 	orr.w	r1, r5, r3
   d6aa4:	bd30      	pop	{r4, r5, pc}
   d6aa6:	f1c4 040c 	rsb	r4, r4, #12
   d6aaa:	f1c4 0220 	rsb	r2, r4, #32
   d6aae:	fa20 f002 	lsr.w	r0, r0, r2
   d6ab2:	fa01 f304 	lsl.w	r3, r1, r4
   d6ab6:	ea40 0003 	orr.w	r0, r0, r3
   d6aba:	4629      	mov	r1, r5
   d6abc:	bd30      	pop	{r4, r5, pc}
   d6abe:	fa21 f004 	lsr.w	r0, r1, r4
   d6ac2:	4629      	mov	r1, r5
   d6ac4:	bd30      	pop	{r4, r5, pc}
   d6ac6:	f094 0f00 	teq	r4, #0
   d6aca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6ace:	bf06      	itte	eq
   d6ad0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6ad4:	3401      	addeq	r4, #1
   d6ad6:	3d01      	subne	r5, #1
   d6ad8:	e74e      	b.n	d6978 <__adddf3+0x8c>
   d6ada:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6ade:	bf18      	it	ne
   d6ae0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6ae4:	d029      	beq.n	d6b3a <__adddf3+0x24e>
   d6ae6:	ea94 0f05 	teq	r4, r5
   d6aea:	bf08      	it	eq
   d6aec:	ea90 0f02 	teqeq	r0, r2
   d6af0:	d005      	beq.n	d6afe <__adddf3+0x212>
   d6af2:	ea54 0c00 	orrs.w	ip, r4, r0
   d6af6:	bf04      	itt	eq
   d6af8:	4619      	moveq	r1, r3
   d6afa:	4610      	moveq	r0, r2
   d6afc:	bd30      	pop	{r4, r5, pc}
   d6afe:	ea91 0f03 	teq	r1, r3
   d6b02:	bf1e      	ittt	ne
   d6b04:	2100      	movne	r1, #0
   d6b06:	2000      	movne	r0, #0
   d6b08:	bd30      	popne	{r4, r5, pc}
   d6b0a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6b0e:	d105      	bne.n	d6b1c <__adddf3+0x230>
   d6b10:	0040      	lsls	r0, r0, #1
   d6b12:	4149      	adcs	r1, r1
   d6b14:	bf28      	it	cs
   d6b16:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6b1a:	bd30      	pop	{r4, r5, pc}
   d6b1c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6b20:	bf3c      	itt	cc
   d6b22:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6b26:	bd30      	popcc	{r4, r5, pc}
   d6b28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6b2c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6b30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6b34:	f04f 0000 	mov.w	r0, #0
   d6b38:	bd30      	pop	{r4, r5, pc}
   d6b3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6b3e:	bf1a      	itte	ne
   d6b40:	4619      	movne	r1, r3
   d6b42:	4610      	movne	r0, r2
   d6b44:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6b48:	bf1c      	itt	ne
   d6b4a:	460b      	movne	r3, r1
   d6b4c:	4602      	movne	r2, r0
   d6b4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6b52:	bf06      	itte	eq
   d6b54:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6b58:	ea91 0f03 	teqeq	r1, r3
   d6b5c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6b60:	bd30      	pop	{r4, r5, pc}
   d6b62:	bf00      	nop

000d6b64 <__aeabi_ui2d>:
   d6b64:	f090 0f00 	teq	r0, #0
   d6b68:	bf04      	itt	eq
   d6b6a:	2100      	moveq	r1, #0
   d6b6c:	4770      	bxeq	lr
   d6b6e:	b530      	push	{r4, r5, lr}
   d6b70:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6b74:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6b78:	f04f 0500 	mov.w	r5, #0
   d6b7c:	f04f 0100 	mov.w	r1, #0
   d6b80:	e750      	b.n	d6a24 <__adddf3+0x138>
   d6b82:	bf00      	nop

000d6b84 <__aeabi_i2d>:
   d6b84:	f090 0f00 	teq	r0, #0
   d6b88:	bf04      	itt	eq
   d6b8a:	2100      	moveq	r1, #0
   d6b8c:	4770      	bxeq	lr
   d6b8e:	b530      	push	{r4, r5, lr}
   d6b90:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6b94:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6b98:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6b9c:	bf48      	it	mi
   d6b9e:	4240      	negmi	r0, r0
   d6ba0:	f04f 0100 	mov.w	r1, #0
   d6ba4:	e73e      	b.n	d6a24 <__adddf3+0x138>
   d6ba6:	bf00      	nop

000d6ba8 <__aeabi_f2d>:
   d6ba8:	0042      	lsls	r2, r0, #1
   d6baa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6bae:	ea4f 0131 	mov.w	r1, r1, rrx
   d6bb2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6bb6:	bf1f      	itttt	ne
   d6bb8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6bbc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6bc0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6bc4:	4770      	bxne	lr
   d6bc6:	f092 0f00 	teq	r2, #0
   d6bca:	bf14      	ite	ne
   d6bcc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6bd0:	4770      	bxeq	lr
   d6bd2:	b530      	push	{r4, r5, lr}
   d6bd4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6bd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6bdc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6be0:	e720      	b.n	d6a24 <__adddf3+0x138>
   d6be2:	bf00      	nop

000d6be4 <__aeabi_ul2d>:
   d6be4:	ea50 0201 	orrs.w	r2, r0, r1
   d6be8:	bf08      	it	eq
   d6bea:	4770      	bxeq	lr
   d6bec:	b530      	push	{r4, r5, lr}
   d6bee:	f04f 0500 	mov.w	r5, #0
   d6bf2:	e00a      	b.n	d6c0a <__aeabi_l2d+0x16>

000d6bf4 <__aeabi_l2d>:
   d6bf4:	ea50 0201 	orrs.w	r2, r0, r1
   d6bf8:	bf08      	it	eq
   d6bfa:	4770      	bxeq	lr
   d6bfc:	b530      	push	{r4, r5, lr}
   d6bfe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6c02:	d502      	bpl.n	d6c0a <__aeabi_l2d+0x16>
   d6c04:	4240      	negs	r0, r0
   d6c06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6c0a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6c0e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6c12:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6c16:	f43f aedc 	beq.w	d69d2 <__adddf3+0xe6>
   d6c1a:	f04f 0203 	mov.w	r2, #3
   d6c1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6c22:	bf18      	it	ne
   d6c24:	3203      	addne	r2, #3
   d6c26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6c2a:	bf18      	it	ne
   d6c2c:	3203      	addne	r2, #3
   d6c2e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6c32:	f1c2 0320 	rsb	r3, r2, #32
   d6c36:	fa00 fc03 	lsl.w	ip, r0, r3
   d6c3a:	fa20 f002 	lsr.w	r0, r0, r2
   d6c3e:	fa01 fe03 	lsl.w	lr, r1, r3
   d6c42:	ea40 000e 	orr.w	r0, r0, lr
   d6c46:	fa21 f102 	lsr.w	r1, r1, r2
   d6c4a:	4414      	add	r4, r2
   d6c4c:	e6c1      	b.n	d69d2 <__adddf3+0xe6>
   d6c4e:	bf00      	nop

000d6c50 <__aeabi_dmul>:
   d6c50:	b570      	push	{r4, r5, r6, lr}
   d6c52:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6c56:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6c5a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6c5e:	bf1d      	ittte	ne
   d6c60:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6c64:	ea94 0f0c 	teqne	r4, ip
   d6c68:	ea95 0f0c 	teqne	r5, ip
   d6c6c:	f000 f8de 	bleq	d6e2c <__aeabi_dmul+0x1dc>
   d6c70:	442c      	add	r4, r5
   d6c72:	ea81 0603 	eor.w	r6, r1, r3
   d6c76:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6c7a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6c7e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6c82:	bf18      	it	ne
   d6c84:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6c88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6c8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6c90:	d038      	beq.n	d6d04 <__aeabi_dmul+0xb4>
   d6c92:	fba0 ce02 	umull	ip, lr, r0, r2
   d6c96:	f04f 0500 	mov.w	r5, #0
   d6c9a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6c9e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6ca2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6ca6:	f04f 0600 	mov.w	r6, #0
   d6caa:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6cae:	f09c 0f00 	teq	ip, #0
   d6cb2:	bf18      	it	ne
   d6cb4:	f04e 0e01 	orrne.w	lr, lr, #1
   d6cb8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6cbc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6cc0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6cc4:	d204      	bcs.n	d6cd0 <__aeabi_dmul+0x80>
   d6cc6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6cca:	416d      	adcs	r5, r5
   d6ccc:	eb46 0606 	adc.w	r6, r6, r6
   d6cd0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6cd4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6cd8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6cdc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6ce0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6ce4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6ce8:	bf88      	it	hi
   d6cea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6cee:	d81e      	bhi.n	d6d2e <__aeabi_dmul+0xde>
   d6cf0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6cf4:	bf08      	it	eq
   d6cf6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6cfa:	f150 0000 	adcs.w	r0, r0, #0
   d6cfe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6d02:	bd70      	pop	{r4, r5, r6, pc}
   d6d04:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6d08:	ea46 0101 	orr.w	r1, r6, r1
   d6d0c:	ea40 0002 	orr.w	r0, r0, r2
   d6d10:	ea81 0103 	eor.w	r1, r1, r3
   d6d14:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6d18:	bfc2      	ittt	gt
   d6d1a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6d1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6d22:	bd70      	popgt	{r4, r5, r6, pc}
   d6d24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6d28:	f04f 0e00 	mov.w	lr, #0
   d6d2c:	3c01      	subs	r4, #1
   d6d2e:	f300 80ab 	bgt.w	d6e88 <__aeabi_dmul+0x238>
   d6d32:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6d36:	bfde      	ittt	le
   d6d38:	2000      	movle	r0, #0
   d6d3a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6d3e:	bd70      	pople	{r4, r5, r6, pc}
   d6d40:	f1c4 0400 	rsb	r4, r4, #0
   d6d44:	3c20      	subs	r4, #32
   d6d46:	da35      	bge.n	d6db4 <__aeabi_dmul+0x164>
   d6d48:	340c      	adds	r4, #12
   d6d4a:	dc1b      	bgt.n	d6d84 <__aeabi_dmul+0x134>
   d6d4c:	f104 0414 	add.w	r4, r4, #20
   d6d50:	f1c4 0520 	rsb	r5, r4, #32
   d6d54:	fa00 f305 	lsl.w	r3, r0, r5
   d6d58:	fa20 f004 	lsr.w	r0, r0, r4
   d6d5c:	fa01 f205 	lsl.w	r2, r1, r5
   d6d60:	ea40 0002 	orr.w	r0, r0, r2
   d6d64:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6d68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6d6c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6d70:	fa21 f604 	lsr.w	r6, r1, r4
   d6d74:	eb42 0106 	adc.w	r1, r2, r6
   d6d78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6d7c:	bf08      	it	eq
   d6d7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6d82:	bd70      	pop	{r4, r5, r6, pc}
   d6d84:	f1c4 040c 	rsb	r4, r4, #12
   d6d88:	f1c4 0520 	rsb	r5, r4, #32
   d6d8c:	fa00 f304 	lsl.w	r3, r0, r4
   d6d90:	fa20 f005 	lsr.w	r0, r0, r5
   d6d94:	fa01 f204 	lsl.w	r2, r1, r4
   d6d98:	ea40 0002 	orr.w	r0, r0, r2
   d6d9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6da0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6da4:	f141 0100 	adc.w	r1, r1, #0
   d6da8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6dac:	bf08      	it	eq
   d6dae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6db2:	bd70      	pop	{r4, r5, r6, pc}
   d6db4:	f1c4 0520 	rsb	r5, r4, #32
   d6db8:	fa00 f205 	lsl.w	r2, r0, r5
   d6dbc:	ea4e 0e02 	orr.w	lr, lr, r2
   d6dc0:	fa20 f304 	lsr.w	r3, r0, r4
   d6dc4:	fa01 f205 	lsl.w	r2, r1, r5
   d6dc8:	ea43 0302 	orr.w	r3, r3, r2
   d6dcc:	fa21 f004 	lsr.w	r0, r1, r4
   d6dd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6dd4:	fa21 f204 	lsr.w	r2, r1, r4
   d6dd8:	ea20 0002 	bic.w	r0, r0, r2
   d6ddc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6de0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6de4:	bf08      	it	eq
   d6de6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6dea:	bd70      	pop	{r4, r5, r6, pc}
   d6dec:	f094 0f00 	teq	r4, #0
   d6df0:	d10f      	bne.n	d6e12 <__aeabi_dmul+0x1c2>
   d6df2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6df6:	0040      	lsls	r0, r0, #1
   d6df8:	eb41 0101 	adc.w	r1, r1, r1
   d6dfc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6e00:	bf08      	it	eq
   d6e02:	3c01      	subeq	r4, #1
   d6e04:	d0f7      	beq.n	d6df6 <__aeabi_dmul+0x1a6>
   d6e06:	ea41 0106 	orr.w	r1, r1, r6
   d6e0a:	f095 0f00 	teq	r5, #0
   d6e0e:	bf18      	it	ne
   d6e10:	4770      	bxne	lr
   d6e12:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6e16:	0052      	lsls	r2, r2, #1
   d6e18:	eb43 0303 	adc.w	r3, r3, r3
   d6e1c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6e20:	bf08      	it	eq
   d6e22:	3d01      	subeq	r5, #1
   d6e24:	d0f7      	beq.n	d6e16 <__aeabi_dmul+0x1c6>
   d6e26:	ea43 0306 	orr.w	r3, r3, r6
   d6e2a:	4770      	bx	lr
   d6e2c:	ea94 0f0c 	teq	r4, ip
   d6e30:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6e34:	bf18      	it	ne
   d6e36:	ea95 0f0c 	teqne	r5, ip
   d6e3a:	d00c      	beq.n	d6e56 <__aeabi_dmul+0x206>
   d6e3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6e40:	bf18      	it	ne
   d6e42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6e46:	d1d1      	bne.n	d6dec <__aeabi_dmul+0x19c>
   d6e48:	ea81 0103 	eor.w	r1, r1, r3
   d6e4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6e50:	f04f 0000 	mov.w	r0, #0
   d6e54:	bd70      	pop	{r4, r5, r6, pc}
   d6e56:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6e5a:	bf06      	itte	eq
   d6e5c:	4610      	moveq	r0, r2
   d6e5e:	4619      	moveq	r1, r3
   d6e60:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6e64:	d019      	beq.n	d6e9a <__aeabi_dmul+0x24a>
   d6e66:	ea94 0f0c 	teq	r4, ip
   d6e6a:	d102      	bne.n	d6e72 <__aeabi_dmul+0x222>
   d6e6c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6e70:	d113      	bne.n	d6e9a <__aeabi_dmul+0x24a>
   d6e72:	ea95 0f0c 	teq	r5, ip
   d6e76:	d105      	bne.n	d6e84 <__aeabi_dmul+0x234>
   d6e78:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6e7c:	bf1c      	itt	ne
   d6e7e:	4610      	movne	r0, r2
   d6e80:	4619      	movne	r1, r3
   d6e82:	d10a      	bne.n	d6e9a <__aeabi_dmul+0x24a>
   d6e84:	ea81 0103 	eor.w	r1, r1, r3
   d6e88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6e8c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6e90:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6e94:	f04f 0000 	mov.w	r0, #0
   d6e98:	bd70      	pop	{r4, r5, r6, pc}
   d6e9a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6e9e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6ea2:	bd70      	pop	{r4, r5, r6, pc}

000d6ea4 <__aeabi_ddiv>:
   d6ea4:	b570      	push	{r4, r5, r6, lr}
   d6ea6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6eaa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6eae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6eb2:	bf1d      	ittte	ne
   d6eb4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6eb8:	ea94 0f0c 	teqne	r4, ip
   d6ebc:	ea95 0f0c 	teqne	r5, ip
   d6ec0:	f000 f8a7 	bleq	d7012 <__aeabi_ddiv+0x16e>
   d6ec4:	eba4 0405 	sub.w	r4, r4, r5
   d6ec8:	ea81 0e03 	eor.w	lr, r1, r3
   d6ecc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6ed0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6ed4:	f000 8088 	beq.w	d6fe8 <__aeabi_ddiv+0x144>
   d6ed8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6edc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6ee0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6ee4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6ee8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6eec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6ef0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6ef4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6ef8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6efc:	429d      	cmp	r5, r3
   d6efe:	bf08      	it	eq
   d6f00:	4296      	cmpeq	r6, r2
   d6f02:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6f06:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6f0a:	d202      	bcs.n	d6f12 <__aeabi_ddiv+0x6e>
   d6f0c:	085b      	lsrs	r3, r3, #1
   d6f0e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6f12:	1ab6      	subs	r6, r6, r2
   d6f14:	eb65 0503 	sbc.w	r5, r5, r3
   d6f18:	085b      	lsrs	r3, r3, #1
   d6f1a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6f1e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6f22:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6f26:	ebb6 0e02 	subs.w	lr, r6, r2
   d6f2a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6f2e:	bf22      	ittt	cs
   d6f30:	1ab6      	subcs	r6, r6, r2
   d6f32:	4675      	movcs	r5, lr
   d6f34:	ea40 000c 	orrcs.w	r0, r0, ip
   d6f38:	085b      	lsrs	r3, r3, #1
   d6f3a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6f3e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6f42:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6f46:	bf22      	ittt	cs
   d6f48:	1ab6      	subcs	r6, r6, r2
   d6f4a:	4675      	movcs	r5, lr
   d6f4c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6f50:	085b      	lsrs	r3, r3, #1
   d6f52:	ea4f 0232 	mov.w	r2, r2, rrx
   d6f56:	ebb6 0e02 	subs.w	lr, r6, r2
   d6f5a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6f5e:	bf22      	ittt	cs
   d6f60:	1ab6      	subcs	r6, r6, r2
   d6f62:	4675      	movcs	r5, lr
   d6f64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6f68:	085b      	lsrs	r3, r3, #1
   d6f6a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6f6e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6f72:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6f76:	bf22      	ittt	cs
   d6f78:	1ab6      	subcs	r6, r6, r2
   d6f7a:	4675      	movcs	r5, lr
   d6f7c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6f80:	ea55 0e06 	orrs.w	lr, r5, r6
   d6f84:	d018      	beq.n	d6fb8 <__aeabi_ddiv+0x114>
   d6f86:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6f8a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6f8e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6f92:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6f96:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6f9a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6f9e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6fa2:	d1c0      	bne.n	d6f26 <__aeabi_ddiv+0x82>
   d6fa4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6fa8:	d10b      	bne.n	d6fc2 <__aeabi_ddiv+0x11e>
   d6faa:	ea41 0100 	orr.w	r1, r1, r0
   d6fae:	f04f 0000 	mov.w	r0, #0
   d6fb2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6fb6:	e7b6      	b.n	d6f26 <__aeabi_ddiv+0x82>
   d6fb8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6fbc:	bf04      	itt	eq
   d6fbe:	4301      	orreq	r1, r0
   d6fc0:	2000      	moveq	r0, #0
   d6fc2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6fc6:	bf88      	it	hi
   d6fc8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6fcc:	f63f aeaf 	bhi.w	d6d2e <__aeabi_dmul+0xde>
   d6fd0:	ebb5 0c03 	subs.w	ip, r5, r3
   d6fd4:	bf04      	itt	eq
   d6fd6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6fda:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6fde:	f150 0000 	adcs.w	r0, r0, #0
   d6fe2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6fe6:	bd70      	pop	{r4, r5, r6, pc}
   d6fe8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6fec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6ff0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6ff4:	bfc2      	ittt	gt
   d6ff6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6ffa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6ffe:	bd70      	popgt	{r4, r5, r6, pc}
   d7000:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7004:	f04f 0e00 	mov.w	lr, #0
   d7008:	3c01      	subs	r4, #1
   d700a:	e690      	b.n	d6d2e <__aeabi_dmul+0xde>
   d700c:	ea45 0e06 	orr.w	lr, r5, r6
   d7010:	e68d      	b.n	d6d2e <__aeabi_dmul+0xde>
   d7012:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7016:	ea94 0f0c 	teq	r4, ip
   d701a:	bf08      	it	eq
   d701c:	ea95 0f0c 	teqeq	r5, ip
   d7020:	f43f af3b 	beq.w	d6e9a <__aeabi_dmul+0x24a>
   d7024:	ea94 0f0c 	teq	r4, ip
   d7028:	d10a      	bne.n	d7040 <__aeabi_ddiv+0x19c>
   d702a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d702e:	f47f af34 	bne.w	d6e9a <__aeabi_dmul+0x24a>
   d7032:	ea95 0f0c 	teq	r5, ip
   d7036:	f47f af25 	bne.w	d6e84 <__aeabi_dmul+0x234>
   d703a:	4610      	mov	r0, r2
   d703c:	4619      	mov	r1, r3
   d703e:	e72c      	b.n	d6e9a <__aeabi_dmul+0x24a>
   d7040:	ea95 0f0c 	teq	r5, ip
   d7044:	d106      	bne.n	d7054 <__aeabi_ddiv+0x1b0>
   d7046:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d704a:	f43f aefd 	beq.w	d6e48 <__aeabi_dmul+0x1f8>
   d704e:	4610      	mov	r0, r2
   d7050:	4619      	mov	r1, r3
   d7052:	e722      	b.n	d6e9a <__aeabi_dmul+0x24a>
   d7054:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7058:	bf18      	it	ne
   d705a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d705e:	f47f aec5 	bne.w	d6dec <__aeabi_dmul+0x19c>
   d7062:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7066:	f47f af0d 	bne.w	d6e84 <__aeabi_dmul+0x234>
   d706a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d706e:	f47f aeeb 	bne.w	d6e48 <__aeabi_dmul+0x1f8>
   d7072:	e712      	b.n	d6e9a <__aeabi_dmul+0x24a>

000d7074 <__gedf2>:
   d7074:	f04f 3cff 	mov.w	ip, #4294967295
   d7078:	e006      	b.n	d7088 <__cmpdf2+0x4>
   d707a:	bf00      	nop

000d707c <__ledf2>:
   d707c:	f04f 0c01 	mov.w	ip, #1
   d7080:	e002      	b.n	d7088 <__cmpdf2+0x4>
   d7082:	bf00      	nop

000d7084 <__cmpdf2>:
   d7084:	f04f 0c01 	mov.w	ip, #1
   d7088:	f84d cd04 	str.w	ip, [sp, #-4]!
   d708c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7090:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7094:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7098:	bf18      	it	ne
   d709a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d709e:	d01b      	beq.n	d70d8 <__cmpdf2+0x54>
   d70a0:	b001      	add	sp, #4
   d70a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d70a6:	bf0c      	ite	eq
   d70a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d70ac:	ea91 0f03 	teqne	r1, r3
   d70b0:	bf02      	ittt	eq
   d70b2:	ea90 0f02 	teqeq	r0, r2
   d70b6:	2000      	moveq	r0, #0
   d70b8:	4770      	bxeq	lr
   d70ba:	f110 0f00 	cmn.w	r0, #0
   d70be:	ea91 0f03 	teq	r1, r3
   d70c2:	bf58      	it	pl
   d70c4:	4299      	cmppl	r1, r3
   d70c6:	bf08      	it	eq
   d70c8:	4290      	cmpeq	r0, r2
   d70ca:	bf2c      	ite	cs
   d70cc:	17d8      	asrcs	r0, r3, #31
   d70ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d70d2:	f040 0001 	orr.w	r0, r0, #1
   d70d6:	4770      	bx	lr
   d70d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d70dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d70e0:	d102      	bne.n	d70e8 <__cmpdf2+0x64>
   d70e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d70e6:	d107      	bne.n	d70f8 <__cmpdf2+0x74>
   d70e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d70ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d70f0:	d1d6      	bne.n	d70a0 <__cmpdf2+0x1c>
   d70f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d70f6:	d0d3      	beq.n	d70a0 <__cmpdf2+0x1c>
   d70f8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d70fc:	4770      	bx	lr
   d70fe:	bf00      	nop

000d7100 <__aeabi_cdrcmple>:
   d7100:	4684      	mov	ip, r0
   d7102:	4610      	mov	r0, r2
   d7104:	4662      	mov	r2, ip
   d7106:	468c      	mov	ip, r1
   d7108:	4619      	mov	r1, r3
   d710a:	4663      	mov	r3, ip
   d710c:	e000      	b.n	d7110 <__aeabi_cdcmpeq>
   d710e:	bf00      	nop

000d7110 <__aeabi_cdcmpeq>:
   d7110:	b501      	push	{r0, lr}
   d7112:	f7ff ffb7 	bl	d7084 <__cmpdf2>
   d7116:	2800      	cmp	r0, #0
   d7118:	bf48      	it	mi
   d711a:	f110 0f00 	cmnmi.w	r0, #0
   d711e:	bd01      	pop	{r0, pc}

000d7120 <__aeabi_dcmpeq>:
   d7120:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7124:	f7ff fff4 	bl	d7110 <__aeabi_cdcmpeq>
   d7128:	bf0c      	ite	eq
   d712a:	2001      	moveq	r0, #1
   d712c:	2000      	movne	r0, #0
   d712e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7132:	bf00      	nop

000d7134 <__aeabi_dcmplt>:
   d7134:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7138:	f7ff ffea 	bl	d7110 <__aeabi_cdcmpeq>
   d713c:	bf34      	ite	cc
   d713e:	2001      	movcc	r0, #1
   d7140:	2000      	movcs	r0, #0
   d7142:	f85d fb08 	ldr.w	pc, [sp], #8
   d7146:	bf00      	nop

000d7148 <__aeabi_dcmple>:
   d7148:	f84d ed08 	str.w	lr, [sp, #-8]!
   d714c:	f7ff ffe0 	bl	d7110 <__aeabi_cdcmpeq>
   d7150:	bf94      	ite	ls
   d7152:	2001      	movls	r0, #1
   d7154:	2000      	movhi	r0, #0
   d7156:	f85d fb08 	ldr.w	pc, [sp], #8
   d715a:	bf00      	nop

000d715c <__aeabi_dcmpge>:
   d715c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7160:	f7ff ffce 	bl	d7100 <__aeabi_cdrcmple>
   d7164:	bf94      	ite	ls
   d7166:	2001      	movls	r0, #1
   d7168:	2000      	movhi	r0, #0
   d716a:	f85d fb08 	ldr.w	pc, [sp], #8
   d716e:	bf00      	nop

000d7170 <__aeabi_dcmpgt>:
   d7170:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7174:	f7ff ffc4 	bl	d7100 <__aeabi_cdrcmple>
   d7178:	bf34      	ite	cc
   d717a:	2001      	movcc	r0, #1
   d717c:	2000      	movcs	r0, #0
   d717e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7182:	bf00      	nop

000d7184 <__aeabi_dcmpun>:
   d7184:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7188:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d718c:	d102      	bne.n	d7194 <__aeabi_dcmpun+0x10>
   d718e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7192:	d10a      	bne.n	d71aa <__aeabi_dcmpun+0x26>
   d7194:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7198:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d719c:	d102      	bne.n	d71a4 <__aeabi_dcmpun+0x20>
   d719e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d71a2:	d102      	bne.n	d71aa <__aeabi_dcmpun+0x26>
   d71a4:	f04f 0000 	mov.w	r0, #0
   d71a8:	4770      	bx	lr
   d71aa:	f04f 0001 	mov.w	r0, #1
   d71ae:	4770      	bx	lr

000d71b0 <atol>:
   d71b0:	220a      	movs	r2, #10
   d71b2:	2100      	movs	r1, #0
   d71b4:	f000 b8fc 	b.w	d73b0 <strtol>

000d71b8 <__cxa_atexit>:
   d71b8:	b510      	push	{r4, lr}
   d71ba:	4c05      	ldr	r4, [pc, #20]	; (d71d0 <__cxa_atexit+0x18>)
   d71bc:	4613      	mov	r3, r2
   d71be:	b12c      	cbz	r4, d71cc <__cxa_atexit+0x14>
   d71c0:	460a      	mov	r2, r1
   d71c2:	4601      	mov	r1, r0
   d71c4:	2002      	movs	r0, #2
   d71c6:	f3af 8000 	nop.w
   d71ca:	bd10      	pop	{r4, pc}
   d71cc:	4620      	mov	r0, r4
   d71ce:	bd10      	pop	{r4, pc}
   d71d0:	00000000 	.word	0x00000000

000d71d4 <memcpy>:
   d71d4:	b510      	push	{r4, lr}
   d71d6:	1e43      	subs	r3, r0, #1
   d71d8:	440a      	add	r2, r1
   d71da:	4291      	cmp	r1, r2
   d71dc:	d004      	beq.n	d71e8 <memcpy+0x14>
   d71de:	f811 4b01 	ldrb.w	r4, [r1], #1
   d71e2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d71e6:	e7f8      	b.n	d71da <memcpy+0x6>
   d71e8:	bd10      	pop	{r4, pc}

000d71ea <memset>:
   d71ea:	4402      	add	r2, r0
   d71ec:	4603      	mov	r3, r0
   d71ee:	4293      	cmp	r3, r2
   d71f0:	d002      	beq.n	d71f8 <memset+0xe>
   d71f2:	f803 1b01 	strb.w	r1, [r3], #1
   d71f6:	e7fa      	b.n	d71ee <memset+0x4>
   d71f8:	4770      	bx	lr
	...

000d71fc <srand>:
   d71fc:	b538      	push	{r3, r4, r5, lr}
   d71fe:	4b12      	ldr	r3, [pc, #72]	; (d7248 <srand+0x4c>)
   d7200:	681c      	ldr	r4, [r3, #0]
   d7202:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7204:	4605      	mov	r5, r0
   d7206:	b9d3      	cbnz	r3, d723e <srand+0x42>
   d7208:	2018      	movs	r0, #24
   d720a:	f7fd fcef 	bl	d4bec <malloc>
   d720e:	f243 330e 	movw	r3, #13070	; 0x330e
   d7212:	63a0      	str	r0, [r4, #56]	; 0x38
   d7214:	8003      	strh	r3, [r0, #0]
   d7216:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d721a:	8043      	strh	r3, [r0, #2]
   d721c:	f241 2334 	movw	r3, #4660	; 0x1234
   d7220:	8083      	strh	r3, [r0, #4]
   d7222:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7226:	80c3      	strh	r3, [r0, #6]
   d7228:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d722c:	8103      	strh	r3, [r0, #8]
   d722e:	2305      	movs	r3, #5
   d7230:	8143      	strh	r3, [r0, #10]
   d7232:	230b      	movs	r3, #11
   d7234:	8183      	strh	r3, [r0, #12]
   d7236:	2201      	movs	r2, #1
   d7238:	2300      	movs	r3, #0
   d723a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d723e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7240:	2200      	movs	r2, #0
   d7242:	611d      	str	r5, [r3, #16]
   d7244:	615a      	str	r2, [r3, #20]
   d7246:	bd38      	pop	{r3, r4, r5, pc}
   d7248:	2003e2b4 	.word	0x2003e2b4

000d724c <strcpy>:
   d724c:	4603      	mov	r3, r0
   d724e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7252:	f803 2b01 	strb.w	r2, [r3], #1
   d7256:	2a00      	cmp	r2, #0
   d7258:	d1f9      	bne.n	d724e <strcpy+0x2>
   d725a:	4770      	bx	lr

000d725c <strdup>:
   d725c:	4b02      	ldr	r3, [pc, #8]	; (d7268 <strdup+0xc>)
   d725e:	4601      	mov	r1, r0
   d7260:	6818      	ldr	r0, [r3, #0]
   d7262:	f000 b803 	b.w	d726c <_strdup_r>
   d7266:	bf00      	nop
   d7268:	2003e2b4 	.word	0x2003e2b4

000d726c <_strdup_r>:
   d726c:	b570      	push	{r4, r5, r6, lr}
   d726e:	4606      	mov	r6, r0
   d7270:	4608      	mov	r0, r1
   d7272:	460c      	mov	r4, r1
   d7274:	f000 f80d 	bl	d7292 <strlen>
   d7278:	1c45      	adds	r5, r0, #1
   d727a:	4629      	mov	r1, r5
   d727c:	4630      	mov	r0, r6
   d727e:	f7fd fcdd 	bl	d4c3c <_malloc_r>
   d7282:	4606      	mov	r6, r0
   d7284:	b118      	cbz	r0, d728e <_strdup_r+0x22>
   d7286:	462a      	mov	r2, r5
   d7288:	4621      	mov	r1, r4
   d728a:	f7ff ffa3 	bl	d71d4 <memcpy>
   d728e:	4630      	mov	r0, r6
   d7290:	bd70      	pop	{r4, r5, r6, pc}

000d7292 <strlen>:
   d7292:	4603      	mov	r3, r0
   d7294:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7298:	2a00      	cmp	r2, #0
   d729a:	d1fb      	bne.n	d7294 <strlen+0x2>
   d729c:	1a18      	subs	r0, r3, r0
   d729e:	3801      	subs	r0, #1
   d72a0:	4770      	bx	lr
	...

000d72a4 <_strtol_r>:
   d72a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d72a8:	4680      	mov	r8, r0
   d72aa:	4840      	ldr	r0, [pc, #256]	; (d73ac <_strtol_r+0x108>)
   d72ac:	f8d0 9000 	ldr.w	r9, [r0]
   d72b0:	460f      	mov	r7, r1
   d72b2:	463d      	mov	r5, r7
   d72b4:	f815 4b01 	ldrb.w	r4, [r5], #1
   d72b8:	eb09 0004 	add.w	r0, r9, r4
   d72bc:	7840      	ldrb	r0, [r0, #1]
   d72be:	f000 0008 	and.w	r0, r0, #8
   d72c2:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d72c6:	b108      	cbz	r0, d72cc <_strtol_r+0x28>
   d72c8:	462f      	mov	r7, r5
   d72ca:	e7f2      	b.n	d72b2 <_strtol_r+0xe>
   d72cc:	2c2d      	cmp	r4, #45	; 0x2d
   d72ce:	d103      	bne.n	d72d8 <_strtol_r+0x34>
   d72d0:	1cbd      	adds	r5, r7, #2
   d72d2:	787c      	ldrb	r4, [r7, #1]
   d72d4:	2601      	movs	r6, #1
   d72d6:	e003      	b.n	d72e0 <_strtol_r+0x3c>
   d72d8:	2c2b      	cmp	r4, #43	; 0x2b
   d72da:	bf04      	itt	eq
   d72dc:	787c      	ldrbeq	r4, [r7, #1]
   d72de:	1cbd      	addeq	r5, r7, #2
   d72e0:	b113      	cbz	r3, d72e8 <_strtol_r+0x44>
   d72e2:	2b10      	cmp	r3, #16
   d72e4:	d10a      	bne.n	d72fc <_strtol_r+0x58>
   d72e6:	e05b      	b.n	d73a0 <_strtol_r+0xfc>
   d72e8:	2c30      	cmp	r4, #48	; 0x30
   d72ea:	d157      	bne.n	d739c <_strtol_r+0xf8>
   d72ec:	7828      	ldrb	r0, [r5, #0]
   d72ee:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d72f2:	2858      	cmp	r0, #88	; 0x58
   d72f4:	d14d      	bne.n	d7392 <_strtol_r+0xee>
   d72f6:	786c      	ldrb	r4, [r5, #1]
   d72f8:	2310      	movs	r3, #16
   d72fa:	3502      	adds	r5, #2
   d72fc:	2e00      	cmp	r6, #0
   d72fe:	bf14      	ite	ne
   d7300:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d7304:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d7308:	2700      	movs	r7, #0
   d730a:	fbbc faf3 	udiv	sl, ip, r3
   d730e:	4638      	mov	r0, r7
   d7310:	fb03 cc1a 	mls	ip, r3, sl, ip
   d7314:	eb09 0e04 	add.w	lr, r9, r4
   d7318:	f89e e001 	ldrb.w	lr, [lr, #1]
   d731c:	f01e 0f04 	tst.w	lr, #4
   d7320:	d001      	beq.n	d7326 <_strtol_r+0x82>
   d7322:	3c30      	subs	r4, #48	; 0x30
   d7324:	e00b      	b.n	d733e <_strtol_r+0x9a>
   d7326:	f01e 0e03 	ands.w	lr, lr, #3
   d732a:	d01b      	beq.n	d7364 <_strtol_r+0xc0>
   d732c:	f1be 0f01 	cmp.w	lr, #1
   d7330:	bf0c      	ite	eq
   d7332:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d7336:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d733a:	ebce 0404 	rsb	r4, lr, r4
   d733e:	42a3      	cmp	r3, r4
   d7340:	dd10      	ble.n	d7364 <_strtol_r+0xc0>
   d7342:	f1b7 3fff 	cmp.w	r7, #4294967295
   d7346:	d00a      	beq.n	d735e <_strtol_r+0xba>
   d7348:	4550      	cmp	r0, sl
   d734a:	d806      	bhi.n	d735a <_strtol_r+0xb6>
   d734c:	d101      	bne.n	d7352 <_strtol_r+0xae>
   d734e:	4564      	cmp	r4, ip
   d7350:	dc03      	bgt.n	d735a <_strtol_r+0xb6>
   d7352:	fb03 4000 	mla	r0, r3, r0, r4
   d7356:	2701      	movs	r7, #1
   d7358:	e001      	b.n	d735e <_strtol_r+0xba>
   d735a:	f04f 37ff 	mov.w	r7, #4294967295
   d735e:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7362:	e7d7      	b.n	d7314 <_strtol_r+0x70>
   d7364:	1c7b      	adds	r3, r7, #1
   d7366:	d10c      	bne.n	d7382 <_strtol_r+0xde>
   d7368:	2e00      	cmp	r6, #0
   d736a:	f04f 0322 	mov.w	r3, #34	; 0x22
   d736e:	bf14      	ite	ne
   d7370:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d7374:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7378:	f8c8 3000 	str.w	r3, [r8]
   d737c:	b92a      	cbnz	r2, d738a <_strtol_r+0xe6>
   d737e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7382:	b106      	cbz	r6, d7386 <_strtol_r+0xe2>
   d7384:	4240      	negs	r0, r0
   d7386:	b172      	cbz	r2, d73a6 <_strtol_r+0x102>
   d7388:	b107      	cbz	r7, d738c <_strtol_r+0xe8>
   d738a:	1e69      	subs	r1, r5, #1
   d738c:	6011      	str	r1, [r2, #0]
   d738e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7392:	2430      	movs	r4, #48	; 0x30
   d7394:	2b00      	cmp	r3, #0
   d7396:	d1b1      	bne.n	d72fc <_strtol_r+0x58>
   d7398:	2308      	movs	r3, #8
   d739a:	e7af      	b.n	d72fc <_strtol_r+0x58>
   d739c:	230a      	movs	r3, #10
   d739e:	e7ad      	b.n	d72fc <_strtol_r+0x58>
   d73a0:	2c30      	cmp	r4, #48	; 0x30
   d73a2:	d0a3      	beq.n	d72ec <_strtol_r+0x48>
   d73a4:	e7aa      	b.n	d72fc <_strtol_r+0x58>
   d73a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d73aa:	bf00      	nop
   d73ac:	2003e250 	.word	0x2003e250

000d73b0 <strtol>:
   d73b0:	4613      	mov	r3, r2
   d73b2:	460a      	mov	r2, r1
   d73b4:	4601      	mov	r1, r0
   d73b6:	4802      	ldr	r0, [pc, #8]	; (d73c0 <strtol+0x10>)
   d73b8:	6800      	ldr	r0, [r0, #0]
   d73ba:	f7ff bf73 	b.w	d72a4 <_strtol_r>
   d73be:	bf00      	nop
   d73c0:	2003e2b4 	.word	0x2003e2b4

000d73c4 <dynalib_user>:
   d73c4:	000d4021 000d405d 000d4089 000d408d     !@..]@...@...@..
   d73d4:	00000000 65797244 6c415f72 5f6d7261     ....Dryer_Alarm_
   d73e4:	73655200 445f7465 72657972 616c4100     .Reset_Dryer.Ala
   d73f4:	435f6d72 746e756f 67695300 5f6c616e     rm_Count.Signal_
   d7404:	65727453 6874676e 67695300 5f6c616e     Strength.Signal_
   d7414:	6c617551 00797469 5f706d41 776f5000     Quality.Amp_.Pow
   d7424:	005f7265 65797244 20002072 41206e69     er_.Dryer . in A
   d7434:	6d72616c 65522000 00746573 6f6d6552     larm. Reset.Remo
   d7444:	44206574 72657972 616c4120 00206d72     te Dryer Alarm .
   d7454:	73655220 53207465 00746e65 65797244      Reset Sent.Drye
   d7464:	6c415f72 736d7261 06050400                       r_Alarms.

000d746d <_ZL5ALARM>:
   d746d:	08060504 02000300                                .....

000d7472 <_ZL5rPins>:
   d7472:	00020003 00000001 00000000                       ..........

000d747c <_ZTVN8particle13__SPISettingsE>:
	...
   d7484:	000d45a5 61666564 20746c75 42534d00     .E..default .MSB
   d7494:	42534c00 50533c00 74655349 676e6974     .LSB.<SPISetting
   d74a4:	65642073 6c756166 3c003e74 53495053     s default>.<SPIS
   d74b4:	69747465 2073676e 6c257325 73252075     ettings %s%lu %s
   d74c4:	444f4d20 3e642545 00000000               MODE%d>....

000d74d0 <_ZTVN5spark13EthernetClassE>:
	...
   d74d8:	000d4cbb 000d4cb1 000d4ca7 000d4c9d     .L...L...L...L..
   d74e8:	000d4c91 000d4c85 000d4c79 000d4c71     .L...L..yL..qL..
   d74f8:	000d4c67 000d4c5d 000d6181              gL..]L...a..

000d7504 <_ZTV8SPIClass>:
	...
   d750c:	000d4cd9 000d4cdb                       .L...L..

000d7514 <_ZL14clock_divisors>:
   d7514:	18100800 38302820 64756162 72655300     .... (08baud.Ser
   d7524:	006c6169 69726553 00316c61 65707974     ial.Serial1.type
   d7534:	72617000 63006d61 6900646d 6e680064     .param.cmd.id.hn
   d7544:	74730064 66006d72 00746c69 006c766c     d.strm.filt.lvl.
   d7554:	48646461 6c646e61 72007265 766f6d65     addHandler.remov
   d7564:	6e614865 72656c64 756e6500 6e61486d     eHandler.enumHan
   d7574:	72656c64 534a0073 74534e4f 6d616572     dlers.JSONStream
   d7584:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   d7594:	75303130 205d0020 00642500 2800202c     010u .] .%d., .(
   d75a4:	00203a29 63005b20 2065646f 2500203d     ): . [.code = .%
   d75b4:	65640069 6c696174 203d2073 000a0d00     i.details = ....
   d75c4:	6e6c0066 006e6600 65646f63 74656400     f.ln.fn.code.det
   d75d4:	006c6961 656e6f6e 61727400 69006563     ail.none.trace.i
   d75e4:	006f666e 6e726177 72726500 7000726f     nfo.warn.error.p
   d75f4:	63696e61 6c6c6100 25005a00 6433302b     anic.all.Z.%+03d
   d7604:	3230253a 59250075 2d6d252d 25546425     :%02u.%Y-%m-%dT%
   d7614:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
   d7624:	00000065                                e...

000d7628 <_ZTV14CellularSignal>:
	...
   d7630:	000d5339 000d53cb 000d533b 000d540d     9S...S..;S...T..
   d7640:	000d5341 000d53d9 000d536d 000d5399     AS...S..mS...S..
   d7650:	fffffffc 00000000 000d53c3              .........S..

000d765c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7664:	000d552d 000d5533 000d5577 000d5541     -U..3U..wU..AU..
   d7674:	000d552f                                /U..

000d7678 <_ZTV9IPAddress>:
	...
   d7680:	000d5b1d 000d5b0d 000d5b0f              .[...[...[..

000d768c <_ZTV9USBSerial>:
	...
   d7694:	000d5bf5 000d5c45 000d5c53 000d512d     .[..E\..S\..-Q..
   d76a4:	000d5c31 000d5bf7 000d5c0d 000d5c3f     1\...[...\..?\..
   d76b4:	000d5c23 000d5bf1                       #\...[..

000d76bc <_ZTVN5spark13CellularClassE>:
	...
   d76c4:	000d5d57 000d5d4d 000d5d43 000d5cf9     W]..M]..C]...\..
   d76d4:	000d5d37 000d5d2b 000d5d1f 000d5d17     7]..+]...]...]..
   d76e4:	000d5d0d 000d5d03 000d6181              .]...]...a..

000d76f0 <_ZTV11USARTSerial>:
	...
   d76f8:	000d5e05 000d5e55 000d5e63 000d512d     .^..U^..c^..-Q..
   d7708:	000d5e19 000d5e3b 000d5e27 000d5e4f     .^..;^..'^..O^..
   d7718:	000d5e07 000d5e0b                       .^...^..

000d7720 <_ZTV7TwoWire>:
	...
   d7728:	000d5f31 000d5f7b 000d5f53 000d5f33     1_..{_..S_..3_..
   d7738:	000d5f5b 000d5f63 000d5f6b 000d5f73     [_..c_..k_..s_..

000d7748 <_ZTVN5spark9MeshClassE>:
	...
   d7750:	000d6013 000d6009 000d5fff 000d5ff5     .`...`..._..._..
   d7760:	000d5fe9 000d5fdd 000d5fd1 000d5fc9     ._..._..._..._..
   d7770:	000d5fbf 000d5fb5 000d6181              ._..._...a..

000d777c <_ZTVN5spark12NetworkClassE>:
	...
   d7784:	000d6119 000d6123 000d612d 000d6137     .a..#a..-a..7a..
   d7794:	000d6141 000d614d 000d6159 000d6165     Aa..Ma..Ya..ea..
   d77a4:	000d616d 000d6177 000d6181 74727173     ma..wa...a..sqrt
   d77b4:	00000000                                ....

000d77b8 <_ctype_>:
   d77b8:	20202000 20202020 28282020 20282828     .         ((((( 
   d77c8:	20202020 20202020 20202020 20202020                     
   d77d8:	10108820 10101010 10101010 10101010      ...............
   d77e8:	04040410 04040404 10040404 10101010     ................
   d77f8:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d7808:	01010101 01010101 01010101 10101010     ................
   d7818:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d7828:	02020202 02020202 02020202 10101010     ................
   d7838:	00000020 00000000 00000000 00000000      ...............
	...

000d78bc <__sf_fake_stdin>:
	...

000d78dc <__sf_fake_stdout>:
	...

000d78fc <__sf_fake_stderr>:
	...
   d791c:	00000043                                         C.

000d791e <link_const_variable_data_end>:
	...

000d7920 <link_constructors_location>:
   d7920:	000d44f5 	.word	0x000d44f5
   d7924:	000d4695 	.word	0x000d4695
   d7928:	000d47c1 	.word	0x000d47c1
   d792c:	000d4cc5 	.word	0x000d4cc5
   d7930:	000d4e85 	.word	0x000d4e85
   d7934:	000d511d 	.word	0x000d511d
   d7938:	000d52b9 	.word	0x000d52b9
   d793c:	000d52c9 	.word	0x000d52c9
   d7940:	000d531d 	.word	0x000d531d
   d7944:	000d5dd5 	.word	0x000d5dd5
   d7948:	000d60c9 	.word	0x000d60c9
   d794c:	000d624d 	.word	0x000d624d
   d7950:	000d6355 	.word	0x000d6355
   d7954:	000d63ed 	.word	0x000d63ed
   d7958:	000d6471 	.word	0x000d6471
   d795c:	000d6535 	.word	0x000d6535
   d7960:	000d65f9 	.word	0x000d65f9

000d7964 <link_constructors_end>:
	...
