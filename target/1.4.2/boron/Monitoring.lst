
c:/Users/erosn/ownCloud/ParticleProjects/Monitoring/target/1.4.2/boron/Monitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003fa0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d7fc0  000d7fc0  00007fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000000  2003f400  2003f400  00018064  2**0
                  CONTENTS
  5 .data         00000070  2003e240  000d7fc8  0000e240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000540  2003e2b0  2003e2b0  0001e2b0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000d8038  000d8038  00018038  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d8060  000d8060  00018060  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000e4bac  00000000  00000000  00018064  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00012bbf  00000000  00000000  000fcc10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001f765  00000000  00000000  0010f7cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002798  00000000  00000000  0012ef34  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004930  00000000  00000000  001316cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00038ec8  00000000  00000000  00135ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002e99d  00000000  00000000  0016eec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00104d76  00000000  00000000  0019d861  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000d5ac  00000000  00000000  002a25d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fc0b 	bl	d784c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fc10 	bl	d7862 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e240 	.word	0x2003e240
   d404c:	000d7fc8 	.word	0x000d7fc8
   d4050:	2003e2b0 	.word	0x2003e2b0
   d4054:	2003e2b0 	.word	0x2003e2b0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 fba3 	bl	d57a8 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d7fbc 	.word	0x000d7fbc
   d4084:	000d7f78 	.word	0x000d7f78

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b9c2 	b.w	d4410 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f8a3 	bl	d41d8 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 bb55 	b.w	d5744 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bdbf 	b.w	d4c1c <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bdc5 	b.w	d4c2c <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bdc3 	b.w	d4c2c <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   d40b6:	6810      	ldr	r0, [r2, #0]
   d40b8:	4770      	bx	lr
	...

000d40bc <__tcf_0>:
String Amps = "0";

const uint8_t ALARM[alarmCount] = {D4, D5, D6, D8};
int alarmValues[alarmCount] = {0, 0, 0, 0};
byte alarmState[alarmCount] = {0, 0, 0, 0};
String names[alarmCount];
   d40bc:	b510      	push	{r4, lr}
   d40be:	4c09      	ldr	r4, [pc, #36]	; (d40e4 <__tcf_0+0x28>)
   d40c0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d40c4:	f000 ff94 	bl	d4ff0 <_ZN6StringD1Ev>
   d40c8:	f104 0020 	add.w	r0, r4, #32
   d40cc:	f000 ff90 	bl	d4ff0 <_ZN6StringD1Ev>
   d40d0:	f104 0010 	add.w	r0, r4, #16
   d40d4:	f000 ff8c 	bl	d4ff0 <_ZN6StringD1Ev>
   d40d8:	4620      	mov	r0, r4
   d40da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d40de:	f000 bf87 	b.w	d4ff0 <_ZN6StringD1Ev>
   d40e2:	bf00      	nop
   d40e4:	2003e31c 	.word	0x2003e31c

000d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d40e8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d40ea:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d40ec:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d40ee:	b17c      	cbz	r4, d4110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40f0:	6863      	ldr	r3, [r4, #4]
   d40f2:	3b01      	subs	r3, #1
   d40f4:	6063      	str	r3, [r4, #4]
   d40f6:	b95b      	cbnz	r3, d4110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d40f8:	6823      	ldr	r3, [r4, #0]
   d40fa:	4620      	mov	r0, r4
   d40fc:	689b      	ldr	r3, [r3, #8]
   d40fe:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4100:	68a3      	ldr	r3, [r4, #8]
   d4102:	3b01      	subs	r3, #1
   d4104:	60a3      	str	r3, [r4, #8]
   d4106:	b91b      	cbnz	r3, d4110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4108:	6823      	ldr	r3, [r4, #0]
   d410a:	4620      	mov	r0, r4
   d410c:	68db      	ldr	r3, [r3, #12]
   d410e:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4110:	4628      	mov	r0, r5
   d4112:	bd38      	pop	{r3, r4, r5, pc}

000d4114 <_Z8setAlarmbi>:
  Serial.print(Irms * 118);
  Serial.print(" ");
  Serial.println(Irms);
}

void setAlarm(bool inAlarm, int alarmNum){
   d4114:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4116:	b08d      	sub	sp, #52	; 0x34
   d4118:	4607      	mov	r7, r0
   d411a:	460c      	mov	r4, r1
  String alarmStr = "In Alarm";
   d411c:	a804      	add	r0, sp, #16
   d411e:	4927      	ldr	r1, [pc, #156]	; (d41bc <_Z8setAlarmbi+0xa8>)
   d4120:	4d27      	ldr	r5, [pc, #156]	; (d41c0 <_Z8setAlarmbi+0xac>)
   d4122:	4e28      	ldr	r6, [pc, #160]	; (d41c4 <_Z8setAlarmbi+0xb0>)
   d4124:	f000 ffab 	bl	d507e <_ZN6StringC1EPK19__FlashStringHelper>
  if(inAlarm){
   d4128:	b14f      	cbz	r7, d413e <_Z8setAlarmbi+0x2a>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d412a:	f000 fbcb 	bl	d48c4 <HAL_Timer_Get_Milli_Seconds>
    //strip.setPixelColor(alarmNum, BRIGHTNESS, 0, 0);
    if(((millis() - debounceTime) > DEBOUNCE_DELAY) && alarmState[alarmNum] == 0){
   d412e:	682b      	ldr	r3, [r5, #0]
   d4130:	1ac0      	subs	r0, r0, r3
   d4132:	28c8      	cmp	r0, #200	; 0xc8
   d4134:	d901      	bls.n	d413a <_Z8setAlarmbi+0x26>
   d4136:	5d33      	ldrb	r3, [r6, r4]
   d4138:	b18b      	cbz	r3, d415e <_Z8setAlarmbi+0x4a>
      Particle.publish(names[alarmNum], alarmStr, 259200, PRIVATE);
      debounceTime = millis();
    }
    alarmState[alarmNum] = 1;
   d413a:	2301      	movs	r3, #1
   d413c:	e009      	b.n	d4152 <_Z8setAlarmbi+0x3e>
   d413e:	f000 fbc1 	bl	d48c4 <HAL_Timer_Get_Milli_Seconds>
    return;
  }

  //strip.setPixelColor(alarmNum, 0, 0, 0);
  if(((millis() - debounceTime) > DEBOUNCE_DELAY) && alarmState[alarmNum] == 1){
   d4142:	682b      	ldr	r3, [r5, #0]
   d4144:	1ac0      	subs	r0, r0, r3
   d4146:	28c8      	cmp	r0, #200	; 0xc8
   d4148:	d902      	bls.n	d4150 <_Z8setAlarmbi+0x3c>
   d414a:	5d33      	ldrb	r3, [r6, r4]
   d414c:	2b01      	cmp	r3, #1
   d414e:	d019      	beq.n	d4184 <_Z8setAlarmbi+0x70>
    Particle.publish(names[alarmNum], String("Alarm Reset"), 259200, PRIVATE);
    debounceTime = millis();
  }
  alarmState[alarmNum] = 0;
   d4150:	2300      	movs	r3, #0
  Serial.print(" ");
  Serial.println(Irms);
}

void setAlarm(bool inAlarm, int alarmNum){
  String alarmStr = "In Alarm";
   d4152:	a804      	add	r0, sp, #16
  //strip.setPixelColor(alarmNum, 0, 0, 0);
  if(((millis() - debounceTime) > DEBOUNCE_DELAY) && alarmState[alarmNum] == 1){
    Particle.publish(names[alarmNum], String("Alarm Reset"), 259200, PRIVATE);
    debounceTime = millis();
  }
  alarmState[alarmNum] = 0;
   d4154:	5533      	strb	r3, [r6, r4]
  Serial.print(" ");
  Serial.println(Irms);
}

void setAlarm(bool inAlarm, int alarmNum){
  String alarmStr = "In Alarm";
   d4156:	f000 ff4b 	bl	d4ff0 <_ZN6StringD1Ev>
  if(((millis() - debounceTime) > DEBOUNCE_DELAY) && alarmState[alarmNum] == 1){
    Particle.publish(names[alarmNum], String("Alarm Reset"), 259200, PRIVATE);
    debounceTime = millis();
  }
  alarmState[alarmNum] = 0;
}
   d415a:	b00d      	add	sp, #52	; 0x34
   d415c:	bdf0      	pop	{r4, r5, r6, r7, pc}
void setAlarm(bool inAlarm, int alarmNum){
  String alarmStr = "In Alarm";
  if(inAlarm){
    //strip.setPixelColor(alarmNum, BRIGHTNESS, 0, 0);
    if(((millis() - debounceTime) > DEBOUNCE_DELAY) && alarmState[alarmNum] == 0){
      Particle.publish(names[alarmNum], alarmStr, 259200, PRIVATE);
   d415e:	0123      	lsls	r3, r4, #4
   d4160:	4a19      	ldr	r2, [pc, #100]	; (d41c8 <_Z8setAlarmbi+0xb4>)
   d4162:	58d1      	ldr	r1, [r2, r3]
   d4164:	4b19      	ldr	r3, [pc, #100]	; (d41cc <_Z8setAlarmbi+0xb8>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4166:	9a04      	ldr	r2, [sp, #16]
   d4168:	781b      	ldrb	r3, [r3, #0]
   d416a:	f88d 3000 	strb.w	r3, [sp]
   d416e:	a808      	add	r0, sp, #32
   d4170:	4b17      	ldr	r3, [pc, #92]	; (d41d0 <_Z8setAlarmbi+0xbc>)
   d4172:	f001 fca1 	bl	d5ab8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4176:	a809      	add	r0, sp, #36	; 0x24
   d4178:	f7ff ffb6 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d417c:	f000 fba2 	bl	d48c4 <HAL_Timer_Get_Milli_Seconds>
      debounceTime = millis();
   d4180:	6028      	str	r0, [r5, #0]
   d4182:	e7da      	b.n	d413a <_Z8setAlarmbi+0x26>
    return;
  }

  //strip.setPixelColor(alarmNum, 0, 0, 0);
  if(((millis() - debounceTime) > DEBOUNCE_DELAY) && alarmState[alarmNum] == 1){
    Particle.publish(names[alarmNum], String("Alarm Reset"), 259200, PRIVATE);
   d4184:	0123      	lsls	r3, r4, #4
   d4186:	4a10      	ldr	r2, [pc, #64]	; (d41c8 <_Z8setAlarmbi+0xb4>)
   d4188:	4912      	ldr	r1, [pc, #72]	; (d41d4 <_Z8setAlarmbi+0xc0>)
   d418a:	58d7      	ldr	r7, [r2, r3]
   d418c:	a808      	add	r0, sp, #32
   d418e:	f000 ff76 	bl	d507e <_ZN6StringC1EPK19__FlashStringHelper>
   d4192:	4b0e      	ldr	r3, [pc, #56]	; (d41cc <_Z8setAlarmbi+0xb8>)
   d4194:	9a08      	ldr	r2, [sp, #32]
   d4196:	781b      	ldrb	r3, [r3, #0]
   d4198:	f88d 3000 	strb.w	r3, [sp]
   d419c:	4639      	mov	r1, r7
   d419e:	4b0c      	ldr	r3, [pc, #48]	; (d41d0 <_Z8setAlarmbi+0xbc>)
   d41a0:	a802      	add	r0, sp, #8
   d41a2:	f001 fc89 	bl	d5ab8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d41a6:	a803      	add	r0, sp, #12
   d41a8:	f7ff ff9e 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d41ac:	a808      	add	r0, sp, #32
   d41ae:	f000 ff1f 	bl	d4ff0 <_ZN6StringD1Ev>
   d41b2:	f000 fb87 	bl	d48c4 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   d41b6:	6028      	str	r0, [r5, #0]
   d41b8:	e7ca      	b.n	d4150 <_Z8setAlarmbi+0x3c>
   d41ba:	bf00      	nop
   d41bc:	000d7a50 	.word	0x000d7a50
   d41c0:	2003e2c4 	.word	0x2003e2c4
   d41c4:	2003e36c 	.word	0x2003e36c
   d41c8:	2003e31c 	.word	0x2003e31c
   d41cc:	2003e318 	.word	0x2003e318
   d41d0:	0003f480 	.word	0x0003f480
   d41d4:	000d7a59 	.word	0x000d7a59

000d41d8 <loop>:
  Particle.variable("Power", power);
  Particle.variable("Amps", Amps);
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d41d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d41dc:	ed2d 8b04 	vpush	{d8-d9}

  for(int i = 0; i < alarmCount; i++){
    alarmValues[i] = digitalRead(ALARM[i]);
   d41e0:	4d59      	ldr	r5, [pc, #356]	; (d4348 <loop+0x170>)
   d41e2:	f8df a190 	ldr.w	sl, [pc, #400]	; d4374 <loop+0x19c>
  Particle.variable("Power", power);
  Particle.variable("Amps", Amps);
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d41e6:	b092      	sub	sp, #72	; 0x48

  for(int i = 0; i < alarmCount; i++){
   d41e8:	2400      	movs	r4, #0
   d41ea:	46a9      	mov	r9, r5
    alarmValues[i] = digitalRead(ALARM[i]);
   d41ec:	f81a 0004 	ldrb.w	r0, [sl, r4]
   d41f0:	f002 f9e0 	bl	d65b4 <digitalRead>
    alarmValues[i] == HIGH ? setAlarm(true, i) : setAlarm(false, i);
   d41f4:	2801      	cmp	r0, #1

// loop() runs over and over again, as quickly as it can execute.
void loop() {

  for(int i = 0; i < alarmCount; i++){
    alarmValues[i] = digitalRead(ALARM[i]);
   d41f6:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
    alarmValues[i] == HIGH ? setAlarm(true, i) : setAlarm(false, i);
   d41fa:	4621      	mov	r1, r4
   d41fc:	bf18      	it	ne
   d41fe:	2000      	movne	r0, #0
   d4200:	f7ff ff88 	bl	d4114 <_Z8setAlarmbi>
    
    #if MONITOR_DEBUG
    Serial.print(String(i) + " Value: " + String(alarmValues[i]));
   d4204:	f001 feae 	bl	d5f64 <_Z16_fetch_usbserialv>
   d4208:	220a      	movs	r2, #10
   d420a:	4621      	mov	r1, r4
   d420c:	4606      	mov	r6, r0
   d420e:	4668      	mov	r0, sp
   d4210:	f000 ff98 	bl	d5144 <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4214:	4669      	mov	r1, sp
   d4216:	a804      	add	r0, sp, #16
   d4218:	f000 ff70 	bl	d50fc <_ZN6StringC1ERKS_>
   d421c:	494b      	ldr	r1, [pc, #300]	; (d434c <loop+0x174>)
   d421e:	a804      	add	r0, sp, #16
   d4220:	f000 fff3 	bl	d520a <_ZplRK15StringSumHelperPKc>
   d4224:	ea4f 0884 	mov.w	r8, r4, lsl #2
   d4228:	220a      	movs	r2, #10
   d422a:	4607      	mov	r7, r0
   d422c:	f859 1008 	ldr.w	r1, [r9, r8]
   d4230:	a808      	add	r0, sp, #32
   d4232:	f000 ff87 	bl	d5144 <_ZN6StringC1Eih>
   d4236:	a908      	add	r1, sp, #32
   d4238:	4638      	mov	r0, r7
   d423a:	f000 ffda 	bl	d51f2 <_ZplRK15StringSumHelperRK6String>
   d423e:	6801      	ldr	r1, [r0, #0]
   d4240:	4630      	mov	r0, r6
   d4242:	f001 f82f 	bl	d52a4 <_ZN5Print5printEPKc>
   d4246:	a808      	add	r0, sp, #32
   d4248:	f000 fed2 	bl	d4ff0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d424c:	a804      	add	r0, sp, #16
   d424e:	f000 fecf 	bl	d4ff0 <_ZN6StringD1Ev>
   d4252:	4668      	mov	r0, sp
   d4254:	f000 fecc 	bl	d4ff0 <_ZN6StringD1Ev>
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {

  for(int i = 0; i < alarmCount; i++){
   d4258:	3401      	adds	r4, #1
    alarmValues[i] = digitalRead(ALARM[i]);
    alarmValues[i] == HIGH ? setAlarm(true, i) : setAlarm(false, i);
    
    #if MONITOR_DEBUG
    Serial.print(String(i) + " Value: " + String(alarmValues[i]));
    Serial.print(" ");
   d425a:	f001 fe83 	bl	d5f64 <_Z16_fetch_usbserialv>
   d425e:	493c      	ldr	r1, [pc, #240]	; (d4350 <loop+0x178>)
   d4260:	f001 f820 	bl	d52a4 <_ZN5Print5printEPKc>
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {

  for(int i = 0; i < alarmCount; i++){
   d4264:	2c04      	cmp	r4, #4
   d4266:	d1c1      	bne.n	d41ec <loop+0x14>
    Serial.print(String(i) + " Value: " + String(alarmValues[i]));
    Serial.print(" ");
    #endif
  }
  #if MONITOR_DEBUG
  Serial.println();
   d4268:	f001 fe7c 	bl	d5f64 <_Z16_fetch_usbserialv>
   d426c:	f001 f821 	bl	d52b2 <_ZN5Print7printlnEv>
  #endif

  CellularSignal sig = Cellular.RSSI();
   d4270:	4938      	ldr	r1, [pc, #224]	; (d4354 <loop+0x17c>)
   d4272:	a808      	add	r0, sp, #32
   d4274:	f001 fed0 	bl	d6018 <_ZN5spark13CellularClass4RSSIEv>
  signalStrength = String(sig.getStrength());
   d4278:	a808      	add	r0, sp, #32
   d427a:	f001 fa1f 	bl	d56bc <_ZNK14CellularSignal11getStrengthEv>
   d427e:	2106      	movs	r1, #6
   d4280:	a804      	add	r0, sp, #16
   d4282:	f000 ff72 	bl	d516a <_ZN6StringC1Efi>
   d4286:	a904      	add	r1, sp, #16
   d4288:	4833      	ldr	r0, [pc, #204]	; (d4358 <loop+0x180>)
   d428a:	f000 ff42 	bl	d5112 <_ZN6StringaSEOS_>
   d428e:	a804      	add	r0, sp, #16
   d4290:	f000 feae 	bl	d4ff0 <_ZN6StringD1Ev>
  signalQuality = String(sig.getQuality());
   d4294:	a808      	add	r0, sp, #32
   d4296:	f001 f9f7 	bl	d5688 <_ZNK14CellularSignal10getQualityEv>
   d429a:	2106      	movs	r1, #6
   d429c:	a804      	add	r0, sp, #16
   d429e:	f000 ff64 	bl	d516a <_ZN6StringC1Efi>
   d42a2:	a904      	add	r1, sp, #16
   d42a4:	482d      	ldr	r0, [pc, #180]	; (d435c <loop+0x184>)
   d42a6:	f000 ff34 	bl	d5112 <_ZN6StringaSEOS_>
   d42aa:	a804      	add	r0, sp, #16
   d42ac:	f000 fea0 	bl	d4ff0 <_ZN6StringD1Ev>

  Serial.print("Irms 0: ");
   d42b0:	f001 fe58 	bl	d5f64 <_Z16_fetch_usbserialv>
   d42b4:	492a      	ldr	r1, [pc, #168]	; (d4360 <loop+0x188>)
   d42b6:	f000 fff5 	bl	d52a4 <_ZN5Print5printEPKc>
  double Irms = monitor.processAdc(0);
   d42ba:	2100      	movs	r1, #0
   d42bc:	4829      	ldr	r0, [pc, #164]	; (d4364 <loop+0x18c>)
   d42be:	f000 fa83 	bl	d47c8 <_ZN14CurrentMonitor10processAdcEh>
  Amps = String(Irms);
   d42c2:	2106      	movs	r1, #6
   d42c4:	a804      	add	r0, sp, #16
  CellularSignal sig = Cellular.RSSI();
  signalStrength = String(sig.getStrength());
  signalQuality = String(sig.getQuality());

  Serial.print("Irms 0: ");
  double Irms = monitor.processAdc(0);
   d42c6:	eeb0 8a40 	vmov.f32	s16, s0
   d42ca:	eef0 8a60 	vmov.f32	s17, s1
  Amps = String(Irms);
   d42ce:	f000 ff66 	bl	d519e <_ZN6StringC1Edi>
   d42d2:	a904      	add	r1, sp, #16
   d42d4:	4824      	ldr	r0, [pc, #144]	; (d4368 <loop+0x190>)
   d42d6:	f000 ff1c 	bl	d5112 <_ZN6StringaSEOS_>
   d42da:	a804      	add	r0, sp, #16
   d42dc:	f000 fe88 	bl	d4ff0 <_ZN6StringD1Ev>
  power = String(Irms * 118);
   d42e0:	2200      	movs	r2, #0
   d42e2:	4b22      	ldr	r3, [pc, #136]	; (d436c <loop+0x194>)
   d42e4:	ec51 0b18 	vmov	r0, r1, d8
   d42e8:	f002 fdf6 	bl	d6ed8 <__aeabi_dmul>
   d42ec:	ec41 0b19 	vmov	d9, r0, r1
   d42f0:	2106      	movs	r1, #6
   d42f2:	eeb0 0a49 	vmov.f32	s0, s18
   d42f6:	eef0 0a69 	vmov.f32	s1, s19
   d42fa:	a804      	add	r0, sp, #16
   d42fc:	f000 ff4f 	bl	d519e <_ZN6StringC1Edi>
   d4300:	a904      	add	r1, sp, #16
   d4302:	481b      	ldr	r0, [pc, #108]	; (d4370 <loop+0x198>)
   d4304:	f000 ff05 	bl	d5112 <_ZN6StringaSEOS_>
   d4308:	a804      	add	r0, sp, #16
   d430a:	f000 fe71 	bl	d4ff0 <_ZN6StringD1Ev>
  Serial.print(Irms * 118);
   d430e:	f001 fe29 	bl	d5f64 <_Z16_fetch_usbserialv>
   d4312:	eeb0 0a49 	vmov.f32	s0, s18
   d4316:	eef0 0a69 	vmov.f32	s1, s19
   d431a:	2102      	movs	r1, #2
   d431c:	f001 f8da 	bl	d54d4 <_ZN5Print5printEdi>
  Serial.print(" ");
   d4320:	f001 fe20 	bl	d5f64 <_Z16_fetch_usbserialv>
   d4324:	490a      	ldr	r1, [pc, #40]	; (d4350 <loop+0x178>)
   d4326:	f000 ffbd 	bl	d52a4 <_ZN5Print5printEPKc>
  Serial.println(Irms);
   d432a:	f001 fe1b 	bl	d5f64 <_Z16_fetch_usbserialv>
   d432e:	eeb0 0a48 	vmov.f32	s0, s16
   d4332:	eef0 0a68 	vmov.f32	s1, s17
   d4336:	2102      	movs	r1, #2
   d4338:	f001 f8cf 	bl	d54da <_ZN5Print7printlnEdi>
}
   d433c:	b012      	add	sp, #72	; 0x48
   d433e:	ecbd 8b04 	vpop	{d8-d9}
   d4342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4346:	bf00      	nop
   d4348:	2003e390 	.word	0x2003e390
   d434c:	000d7a65 	.word	0x000d7a65
   d4350:	000d7bfb 	.word	0x000d7bfb
   d4354:	2003e3e8 	.word	0x2003e3e8
   d4358:	2003e2b4 	.word	0x2003e2b4
   d435c:	2003e380 	.word	0x2003e380
   d4360:	000d7a6e 	.word	0x000d7a6e
   d4364:	2003e2c8 	.word	0x2003e2c8
   d4368:	2003e370 	.word	0x2003e370
   d436c:	405d8000 	.word	0x405d8000
   d4370:	2003e35c 	.word	0x2003e35c
   d4374:	000d7abc 	.word	0x000d7abc

000d4378 <_Z10alarmReset6String>:
    debounceTime = millis();
  }
  alarmState[alarmNum] = 0;
}

int alarmReset(String alarmNum){
   d4378:	b530      	push	{r4, r5, lr}
   d437a:	b089      	sub	sp, #36	; 0x24
  int alarm = alarmNum.toInt();
   d437c:	f000 ff57 	bl	d522e <_ZNK6String5toIntEv>
  if(alarm < 1 || alarm > relayCount){
   d4380:	1e44      	subs	r4, r0, #1
   d4382:	2c03      	cmp	r4, #3
   d4384:	d827      	bhi.n	d43d6 <_Z10alarmReset6String+0x5e>
    return 0;
  }
  digitalWrite(rPins[alarm-1], LOW);
   d4386:	4b15      	ldr	r3, [pc, #84]	; (d43dc <_Z10alarmReset6String+0x64>)
   d4388:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
   d438c:	2100      	movs	r1, #0
   d438e:	4628      	mov	r0, r5
   d4390:	f002 f8f7 	bl	d6582 <digitalWrite>
  delay(500);
   d4394:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4398:	f001 f8f6 	bl	d5588 <delay>
  digitalWrite(rPins[alarm-1], HIGH);
   d439c:	2101      	movs	r1, #1
   d439e:	4628      	mov	r0, r5
   d43a0:	f002 f8ef 	bl	d6582 <digitalWrite>
  Particle.publish(names[alarm-1], String("Alarm Reset"), 259200, PRIVATE);
   d43a4:	0124      	lsls	r4, r4, #4
   d43a6:	4b0e      	ldr	r3, [pc, #56]	; (d43e0 <_Z10alarmReset6String+0x68>)
   d43a8:	490e      	ldr	r1, [pc, #56]	; (d43e4 <_Z10alarmReset6String+0x6c>)
   d43aa:	591c      	ldr	r4, [r3, r4]
   d43ac:	a804      	add	r0, sp, #16
   d43ae:	f000 fe66 	bl	d507e <_ZN6StringC1EPK19__FlashStringHelper>
   d43b2:	4b0d      	ldr	r3, [pc, #52]	; (d43e8 <_Z10alarmReset6String+0x70>)
   d43b4:	9a04      	ldr	r2, [sp, #16]
   d43b6:	781b      	ldrb	r3, [r3, #0]
   d43b8:	f88d 3000 	strb.w	r3, [sp]
   d43bc:	4621      	mov	r1, r4
   d43be:	4b0b      	ldr	r3, [pc, #44]	; (d43ec <_Z10alarmReset6String+0x74>)
   d43c0:	a802      	add	r0, sp, #8
   d43c2:	f001 fb79 	bl	d5ab8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d43c6:	a803      	add	r0, sp, #12
   d43c8:	f7ff fe8e 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43cc:	a804      	add	r0, sp, #16
   d43ce:	f000 fe0f 	bl	d4ff0 <_ZN6StringD1Ev>
  return 1;
   d43d2:	2001      	movs	r0, #1
   d43d4:	e000      	b.n	d43d8 <_Z10alarmReset6String+0x60>
}

int alarmReset(String alarmNum){
  int alarm = alarmNum.toInt();
  if(alarm < 1 || alarm > relayCount){
    return 0;
   d43d6:	2000      	movs	r0, #0
  digitalWrite(rPins[alarm-1], LOW);
  delay(500);
  digitalWrite(rPins[alarm-1], HIGH);
  Particle.publish(names[alarm-1], String("Alarm Reset"), 259200, PRIVATE);
  return 1;
   d43d8:	b009      	add	sp, #36	; 0x24
   d43da:	bd30      	pop	{r4, r5, pc}
   d43dc:	000d7ac0 	.word	0x000d7ac0
   d43e0:	2003e31c 	.word	0x2003e31c
   d43e4:	000d7a59 	.word	0x000d7a59
   d43e8:	2003e318 	.word	0x2003e318
   d43ec:	0003f480 	.word	0x0003f480

000d43f0 <_ZN10CloudClass8variableIA5_cI6StringEEEbRKT_DpRKT0_>:
};

class CloudClass {
  public:
    template <typename T, class ... Types>
    static inline bool variable(const T &name, const Types& ... args)
   d43f0:	b507      	push	{r0, r1, r2, lr}

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra;
        extra.size = sizeof(extra);
   d43f2:	2308      	movs	r3, #8
   d43f4:	f8ad 3000 	strh.w	r3, [sp]
        extra.update = update_string_variable;
   d43f8:	4b04      	ldr	r3, [pc, #16]	; (d440c <_ZN10CloudClass8variableIA5_cI6StringEEEbRKT_DpRKT0_+0x1c>)
   d43fa:	9301      	str	r3, [sp, #4]
        return CLOUD_FN(spark_variable(varKey, userVar, CloudVariableTypeString::value(), &extra), false);
   d43fc:	2204      	movs	r2, #4
   d43fe:	466b      	mov	r3, sp
   d4400:	f000 fbe4 	bl	d4bcc <spark_variable>
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_VAR_KEY_LENGTH + 1,
            "\n\nIn Particle.variable, name must be " __XSTRING(USER_VAR_KEY_LENGTH) " characters or less\n\n");

        return _variable(name, args...);
    }
   d4404:	b003      	add	sp, #12
   d4406:	f85d fb04 	ldr.w	pc, [sp], #4
   d440a:	bf00      	nop
   d440c:	000d40b7 	.word	0x000d40b7

000d4410 <setup>:
// function declarations
void setAlarm(bool inAlarm, int alarmNum);
int alarmReset(String alarmNum);

// setup() runs once, when the device is first turned on.
void setup() {
   d4410:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4412:	b089      	sub	sp, #36	; 0x24

  if(MONITOR_DEBUG){
    Serial.begin();
   d4414:	f001 fda6 	bl	d5f64 <_Z16_fetch_usbserialv>
   d4418:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d441c:	f001 fd96 	bl	d5f4c <_ZN9USBSerial5beginEl>
  }

  for(int i = 0; i < alarmCount; i++){
    pinMode(ALARM[i], INPUT);
   d4420:	4f25      	ldr	r7, [pc, #148]	; (d44b8 <setup+0xa8>)
    names[i] = "Dryer_Alarm_" + String(i+1);
   d4422:	4d26      	ldr	r5, [pc, #152]	; (d44bc <setup+0xac>)

  if(MONITOR_DEBUG){
    Serial.begin();
  }

  for(int i = 0; i < alarmCount; i++){
   d4424:	2400      	movs	r4, #0
    pinMode(ALARM[i], INPUT);
   d4426:	5d38      	ldrb	r0, [r7, r4]
   d4428:	2100      	movs	r1, #0
   d442a:	f002 f899 	bl	d6560 <pinMode>
   d442e:	4626      	mov	r6, r4
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4430:	4923      	ldr	r1, [pc, #140]	; (d44c0 <setup+0xb0>)
    names[i] = "Dryer_Alarm_" + String(i+1);
   d4432:	3401      	adds	r4, #1
   d4434:	a804      	add	r0, sp, #16
   d4436:	f000 fe22 	bl	d507e <_ZN6StringC1EPK19__FlashStringHelper>
   d443a:	220a      	movs	r2, #10
   d443c:	4621      	mov	r1, r4
   d443e:	4668      	mov	r0, sp
   d4440:	f000 fe80 	bl	d5144 <_ZN6StringC1Eih>
   d4444:	4669      	mov	r1, sp
   d4446:	a804      	add	r0, sp, #16
   d4448:	f000 fed3 	bl	d51f2 <_ZplRK15StringSumHelperRK6String>
   d444c:	4601      	mov	r1, r0
   d444e:	eb05 1006 	add.w	r0, r5, r6, lsl #4
   d4452:	f000 fe44 	bl	d50de <_ZN6StringaSERKS_>
   d4456:	4668      	mov	r0, sp
   d4458:	f000 fdca 	bl	d4ff0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d445c:	a804      	add	r0, sp, #16
   d445e:	f000 fdc7 	bl	d4ff0 <_ZN6StringD1Ev>

  if(MONITOR_DEBUG){
    Serial.begin();
  }

  for(int i = 0; i < alarmCount; i++){
   d4462:	2c04      	cmp	r4, #4
   d4464:	d1df      	bne.n	d4426 <setup+0x16>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d4466:	4a17      	ldr	r2, [pc, #92]	; (d44c4 <setup+0xb4>)
   d4468:	4917      	ldr	r1, [pc, #92]	; (d44c8 <setup+0xb8>)
   d446a:	4818      	ldr	r0, [pc, #96]	; (d44cc <setup+0xbc>)
  }

  Particle.function("Reset_Dryer", alarmReset);

  for(int i = 0; i < relayCount; i++){
    pinMode(rPins[i], OUTPUT);
   d446c:	4e18      	ldr	r6, [pc, #96]	; (d44d0 <setup+0xc0>)
   d446e:	f001 fa13 	bl	d5898 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    names[i] = "Dryer_Alarm_" + String(i+1);
  }

  Particle.function("Reset_Dryer", alarmReset);

  for(int i = 0; i < relayCount; i++){
   d4472:	2400      	movs	r4, #0
    pinMode(rPins[i], OUTPUT);
   d4474:	f836 5014 	ldrh.w	r5, [r6, r4, lsl #1]
   d4478:	2101      	movs	r1, #1
   d447a:	4628      	mov	r0, r5
   d447c:	f002 f870 	bl	d6560 <pinMode>
    names[i] = "Dryer_Alarm_" + String(i+1);
  }

  Particle.function("Reset_Dryer", alarmReset);

  for(int i = 0; i < relayCount; i++){
   d4480:	3401      	adds	r4, #1
    pinMode(rPins[i], OUTPUT);
    digitalWrite(rPins[i], HIGH);
   d4482:	2101      	movs	r1, #1
   d4484:	4628      	mov	r0, r5
   d4486:	f002 f87c 	bl	d6582 <digitalWrite>
    names[i] = "Dryer_Alarm_" + String(i+1);
  }

  Particle.function("Reset_Dryer", alarmReset);

  for(int i = 0; i < relayCount; i++){
   d448a:	2c04      	cmp	r4, #4
   d448c:	d1f2      	bne.n	d4474 <setup+0x64>
    pinMode(rPins[i], OUTPUT);
    digitalWrite(rPins[i], HIGH);
  }

  //adc.begin(SCK, MOSI, MISO, SS);
  monitor.begin();
   d448e:	4811      	ldr	r0, [pc, #68]	; (d44d4 <setup+0xc4>)
   d4490:	f000 f92e 	bl	d46f0 <_ZN14CurrentMonitor5beginEv>

  Particle.variable("Signal_Strength", signalStrength);
   d4494:	4910      	ldr	r1, [pc, #64]	; (d44d8 <setup+0xc8>)
   d4496:	4811      	ldr	r0, [pc, #68]	; (d44dc <setup+0xcc>)
   d4498:	f7ff ffaa 	bl	d43f0 <_ZN10CloudClass8variableIA5_cI6StringEEEbRKT_DpRKT0_>
  Particle.variable("Signal_Quality", signalQuality);
   d449c:	4910      	ldr	r1, [pc, #64]	; (d44e0 <setup+0xd0>)
   d449e:	4811      	ldr	r0, [pc, #68]	; (d44e4 <setup+0xd4>)
   d44a0:	f7ff ffa6 	bl	d43f0 <_ZN10CloudClass8variableIA5_cI6StringEEEbRKT_DpRKT0_>
  Particle.variable("Power", power);
   d44a4:	4910      	ldr	r1, [pc, #64]	; (d44e8 <setup+0xd8>)
   d44a6:	4811      	ldr	r0, [pc, #68]	; (d44ec <setup+0xdc>)
   d44a8:	f7ff ffa2 	bl	d43f0 <_ZN10CloudClass8variableIA5_cI6StringEEEbRKT_DpRKT0_>
  Particle.variable("Amps", Amps);
   d44ac:	4910      	ldr	r1, [pc, #64]	; (d44f0 <setup+0xe0>)
   d44ae:	4811      	ldr	r0, [pc, #68]	; (d44f4 <setup+0xe4>)
   d44b0:	f7ff ff9e 	bl	d43f0 <_ZN10CloudClass8variableIA5_cI6StringEEEbRKT_DpRKT0_>
}
   d44b4:	b009      	add	sp, #36	; 0x24
   d44b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d44b8:	000d7abc 	.word	0x000d7abc
   d44bc:	2003e31c 	.word	0x2003e31c
   d44c0:	000d7a77 	.word	0x000d7a77
   d44c4:	000d7a84 	.word	0x000d7a84
   d44c8:	000d4379 	.word	0x000d4379
   d44cc:	000d586d 	.word	0x000d586d
   d44d0:	000d7ac0 	.word	0x000d7ac0
   d44d4:	2003e2c8 	.word	0x2003e2c8
   d44d8:	2003e2b4 	.word	0x2003e2b4
   d44dc:	000d7a90 	.word	0x000d7a90
   d44e0:	2003e380 	.word	0x2003e380
   d44e4:	000d7aa0 	.word	0x000d7aa0
   d44e8:	2003e35c 	.word	0x2003e35c
   d44ec:	000d7aaf 	.word	0x000d7aaf
   d44f0:	2003e370 	.word	0x2003e370
   d44f4:	000d7ab5 	.word	0x000d7ab5

000d44f8 <_GLOBAL__sub_I_debounceTime>:
  digitalWrite(rPins[alarm-1], LOW);
  delay(500);
  digitalWrite(rPins[alarm-1], HIGH);
  Particle.publish(names[alarm-1], String("Alarm Reset"), 259200, PRIVATE);
  return 1;
   d44f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d44fa:	4b29      	ldr	r3, [pc, #164]	; (d45a0 <_GLOBAL__sub_I_debounceTime+0xa8>)
const uint8_t relayCount = 4;
const uint8_t alarmCount = 4;
const uint16_t rPins[relayCount] = {D3, D2, D1, D0};
unsigned long debounceTime = millis();
unsigned const int DEBOUNCE_DELAY = 200;
String signalStrength = "0";
   d44fc:	4e29      	ldr	r6, [pc, #164]	; (d45a4 <_GLOBAL__sub_I_debounceTime+0xac>)
   d44fe:	4f2a      	ldr	r7, [pc, #168]	; (d45a8 <_GLOBAL__sub_I_debounceTime+0xb0>)
   d4500:	4c2a      	ldr	r4, [pc, #168]	; (d45ac <_GLOBAL__sub_I_debounceTime+0xb4>)
   d4502:	4d2b      	ldr	r5, [pc, #172]	; (d45b0 <_GLOBAL__sub_I_debounceTime+0xb8>)
   d4504:	2201      	movs	r2, #1
   d4506:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4508:	f000 f97c 	bl	d4804 <HAL_Pin_Map>
   d450c:	f000 f9da 	bl	d48c4 <HAL_Timer_Get_Milli_Seconds>
#define MONITOR_DEBUG true

const uint8_t relayCount = 4;
const uint8_t alarmCount = 4;
const uint16_t rPins[relayCount] = {D3, D2, D1, D0};
unsigned long debounceTime = millis();
   d4510:	4b28      	ldr	r3, [pc, #160]	; (d45b4 <_GLOBAL__sub_I_debounceTime+0xbc>)
unsigned const int DEBOUNCE_DELAY = 200;
String signalStrength = "0";
   d4512:	4631      	mov	r1, r6
#define MONITOR_DEBUG true

const uint8_t relayCount = 4;
const uint8_t alarmCount = 4;
const uint16_t rPins[relayCount] = {D3, D2, D1, D0};
unsigned long debounceTime = millis();
   d4514:	6018      	str	r0, [r3, #0]
unsigned const int DEBOUNCE_DELAY = 200;
String signalStrength = "0";
   d4516:	4638      	mov	r0, r7
   d4518:	f000 fdb1 	bl	d507e <_ZN6StringC1EPK19__FlashStringHelper>
   d451c:	4638      	mov	r0, r7
String signalQuality = "0";
   d451e:	4f26      	ldr	r7, [pc, #152]	; (d45b8 <_GLOBAL__sub_I_debounceTime+0xc0>)
const uint8_t relayCount = 4;
const uint8_t alarmCount = 4;
const uint16_t rPins[relayCount] = {D3, D2, D1, D0};
unsigned long debounceTime = millis();
unsigned const int DEBOUNCE_DELAY = 200;
String signalStrength = "0";
   d4520:	4622      	mov	r2, r4
   d4522:	4629      	mov	r1, r5
   d4524:	f002 f89c 	bl	d6660 <__aeabi_atexit>
String signalQuality = "0";
   d4528:	4631      	mov	r1, r6
   d452a:	4638      	mov	r0, r7
   d452c:	f000 fda7 	bl	d507e <_ZN6StringC1EPK19__FlashStringHelper>
   d4530:	4638      	mov	r0, r7
String power = "0";
   d4532:	4f22      	ldr	r7, [pc, #136]	; (d45bc <_GLOBAL__sub_I_debounceTime+0xc4>)
const uint8_t alarmCount = 4;
const uint16_t rPins[relayCount] = {D3, D2, D1, D0};
unsigned long debounceTime = millis();
unsigned const int DEBOUNCE_DELAY = 200;
String signalStrength = "0";
String signalQuality = "0";
   d4534:	4622      	mov	r2, r4
   d4536:	4629      	mov	r1, r5
   d4538:	f002 f892 	bl	d6660 <__aeabi_atexit>
String power = "0";
   d453c:	4631      	mov	r1, r6
   d453e:	4638      	mov	r0, r7
   d4540:	f000 fd9d 	bl	d507e <_ZN6StringC1EPK19__FlashStringHelper>
   d4544:	4638      	mov	r0, r7
String Amps = "0";
   d4546:	4f1e      	ldr	r7, [pc, #120]	; (d45c0 <_GLOBAL__sub_I_debounceTime+0xc8>)
const uint16_t rPins[relayCount] = {D3, D2, D1, D0};
unsigned long debounceTime = millis();
unsigned const int DEBOUNCE_DELAY = 200;
String signalStrength = "0";
String signalQuality = "0";
String power = "0";
   d4548:	4622      	mov	r2, r4
   d454a:	4629      	mov	r1, r5
   d454c:	f002 f888 	bl	d6660 <__aeabi_atexit>
String Amps = "0";
   d4550:	4631      	mov	r1, r6
   d4552:	4638      	mov	r0, r7
   d4554:	f000 fd93 	bl	d507e <_ZN6StringC1EPK19__FlashStringHelper>

const uint8_t ALARM[alarmCount] = {D4, D5, D6, D8};
int alarmValues[alarmCount] = {0, 0, 0, 0};
byte alarmState[alarmCount] = {0, 0, 0, 0};
String names[alarmCount];
   d4558:	4e1a      	ldr	r6, [pc, #104]	; (d45c4 <_GLOBAL__sub_I_debounceTime+0xcc>)
unsigned long debounceTime = millis();
unsigned const int DEBOUNCE_DELAY = 200;
String signalStrength = "0";
String signalQuality = "0";
String power = "0";
String Amps = "0";
   d455a:	4629      	mov	r1, r5

const uint8_t ALARM[alarmCount] = {D4, D5, D6, D8};
int alarmValues[alarmCount] = {0, 0, 0, 0};
byte alarmState[alarmCount] = {0, 0, 0, 0};
String names[alarmCount];
   d455c:	4d1a      	ldr	r5, [pc, #104]	; (d45c8 <_GLOBAL__sub_I_debounceTime+0xd0>)
unsigned long debounceTime = millis();
unsigned const int DEBOUNCE_DELAY = 200;
String signalStrength = "0";
String signalQuality = "0";
String power = "0";
String Amps = "0";
   d455e:	4622      	mov	r2, r4
   d4560:	4638      	mov	r0, r7
   d4562:	f002 f87d 	bl	d6660 <__aeabi_atexit>

const uint8_t ALARM[alarmCount] = {D4, D5, D6, D8};
int alarmValues[alarmCount] = {0, 0, 0, 0};
byte alarmState[alarmCount] = {0, 0, 0, 0};
String names[alarmCount];
   d4566:	4631      	mov	r1, r6
   d4568:	4628      	mov	r0, r5
   d456a:	f000 fd88 	bl	d507e <_ZN6StringC1EPK19__FlashStringHelper>
   d456e:	4631      	mov	r1, r6
   d4570:	f105 0010 	add.w	r0, r5, #16
   d4574:	f000 fd83 	bl	d507e <_ZN6StringC1EPK19__FlashStringHelper>
   d4578:	4631      	mov	r1, r6
   d457a:	f105 0020 	add.w	r0, r5, #32
   d457e:	f000 fd7e 	bl	d507e <_ZN6StringC1EPK19__FlashStringHelper>
   d4582:	4631      	mov	r1, r6
   d4584:	f105 0030 	add.w	r0, r5, #48	; 0x30
   d4588:	f000 fd79 	bl	d507e <_ZN6StringC1EPK19__FlashStringHelper>
   d458c:	4622      	mov	r2, r4
   d458e:	490f      	ldr	r1, [pc, #60]	; (d45cc <_GLOBAL__sub_I_debounceTime+0xd4>)
   d4590:	2000      	movs	r0, #0
   d4592:	f002 f865 	bl	d6660 <__aeabi_atexit>

//current adc chip
CurrentMonitor monitor;
   d4596:	480e      	ldr	r0, [pc, #56]	; (d45d0 <_GLOBAL__sub_I_debounceTime+0xd8>)
  digitalWrite(rPins[alarm-1], LOW);
  delay(500);
  digitalWrite(rPins[alarm-1], HIGH);
  Particle.publish(names[alarm-1], String("Alarm Reset"), 259200, PRIVATE);
  return 1;
   d4598:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
int alarmValues[alarmCount] = {0, 0, 0, 0};
byte alarmState[alarmCount] = {0, 0, 0, 0};
String names[alarmCount];

//current adc chip
CurrentMonitor monitor;
   d459c:	f000 b88c 	b.w	d46b8 <_ZN14CurrentMonitorC1Ev>
   d45a0:	2003e318 	.word	0x2003e318
   d45a4:	000d7aba 	.word	0x000d7aba
   d45a8:	2003e2b4 	.word	0x2003e2b4
   d45ac:	2003e2b0 	.word	0x2003e2b0
   d45b0:	000d4ff1 	.word	0x000d4ff1
   d45b4:	2003e2c4 	.word	0x2003e2c4
   d45b8:	2003e380 	.word	0x2003e380
   d45bc:	2003e35c 	.word	0x2003e35c
   d45c0:	2003e370 	.word	0x2003e370
   d45c4:	000d7c1d 	.word	0x000d7c1d
   d45c8:	2003e31c 	.word	0x2003e31c
   d45cc:	000d40bd 	.word	0x000d40bd
   d45d0:	2003e2c8 	.word	0x2003e2c8

000d45d4 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d45d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d45d6:	4602      	mov	r2, r0
   d45d8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d45da:	7913      	ldrb	r3, [r2, #4]
   d45dc:	6895      	ldr	r5, [r2, #8]
   d45de:	b133      	cbz	r3, d45ee <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d45e0:	b93d      	cbnz	r5, d45f2 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d45e2:	490c      	ldr	r1, [pc, #48]	; (d4614 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d45e4:	b004      	add	sp, #16
   d45e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d45ea:	f000 be5b 	b.w	d52a4 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d45ee:	4b0a      	ldr	r3, [pc, #40]	; (d4618 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d45f0:	e000      	b.n	d45f4 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d45f2:	4b0a      	ldr	r3, [pc, #40]	; (d461c <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d45f4:	7b16      	ldrb	r6, [r2, #12]
   d45f6:	4c0a      	ldr	r4, [pc, #40]	; (d4620 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d45f8:	490a      	ldr	r1, [pc, #40]	; (d4624 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d45fa:	7b52      	ldrb	r2, [r2, #13]
   d45fc:	9202      	str	r2, [sp, #8]
   d45fe:	2e01      	cmp	r6, #1
   d4600:	bf08      	it	eq
   d4602:	4621      	moveq	r1, r4
   d4604:	9101      	str	r1, [sp, #4]
   d4606:	9500      	str	r5, [sp, #0]
   d4608:	4a07      	ldr	r2, [pc, #28]	; (d4628 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d460a:	2100      	movs	r1, #0
   d460c:	f000 ff70 	bl	d54f0 <_ZN5Print11printf_implEbPKcz>
  }
   d4610:	b004      	add	sp, #16
   d4612:	bd70      	pop	{r4, r5, r6, pc}
   d4614:	000d7ae5 	.word	0x000d7ae5
   d4618:	000d7c1d 	.word	0x000d7c1d
   d461c:	000d7ad4 	.word	0x000d7ad4
   d4620:	000d7add 	.word	0x000d7add
   d4624:	000d7ae1 	.word	0x000d7ae1
   d4628:	000d7afb 	.word	0x000d7afb

000d462c <_ZN10ADC128S102C1Ev>:
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d462c:	4a05      	ldr	r2, [pc, #20]	; (d4644 <_ZN10ADC128S102C1Ev+0x18>)
   d462e:	6002      	str	r2, [r0, #0]
   d4630:	2200      	movs	r2, #0
   d4632:	7102      	strb	r2, [r0, #4]
   d4634:	4a04      	ldr	r2, [pc, #16]	; (d4648 <_ZN10ADC128S102C1Ev+0x1c>)
   d4636:	6082      	str	r2, [r0, #8]
   d4638:	2201      	movs	r2, #1
   d463a:	7302      	strb	r2, [r0, #12]
   d463c:	2202      	movs	r2, #2
   d463e:	7342      	strb	r2, [r0, #13]

/**
 * Constructor.
 */
ADC128S102::ADC128S102()
{}
   d4640:	4770      	bx	lr
   d4642:	bf00      	nop
   d4644:	000d7ad0 	.word	0x000d7ad0
   d4648:	00d59f80 	.word	0x00d59f80

000d464c <_ZN10ADC128S1025beginEv>:

/**
 * Use this in the setup() method to initialize the hardware and begin SPI if it hasn't already.
 */
void ADC128S102::begin()
{
   d464c:	b508      	push	{r3, lr}
    // initialize hardware
    pinMode(SS, OUTPUT);
   d464e:	200e      	movs	r0, #14
   d4650:	2101      	movs	r1, #1
   d4652:	f001 ff85 	bl	d6560 <pinMode>
    SPI.begin();
   d4656:	4802      	ldr	r0, [pc, #8]	; (d4660 <_ZN10ADC128S1025beginEv+0x14>)
}
   d4658:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 */
void ADC128S102::begin()
{
    // initialize hardware
    pinMode(SS, OUTPUT);
    SPI.begin();
   d465c:	f000 bb70 	b.w	d4d40 <_ZN8SPIClass5beginEv>
   d4660:	2003e714 	.word	0x2003e714

000d4664 <_ZN10ADC128S1027readADCEa>:
}

/**
 * Supply the channel number to read the Analog value converted to 12-bit
 */
int16_t ADC128S102::readADC(int8_t channel){
   d4664:	b570      	push	{r4, r5, r6, lr}

    SPI.beginTransaction(settings);
   d4666:	4d12      	ldr	r5, [pc, #72]	; (d46b0 <_ZN10ADC128S1027readADCEa+0x4c>)
}

/**
 * Supply the channel number to read the Analog value converted to 12-bit
 */
int16_t ADC128S102::readADC(int8_t channel){
   d4668:	4604      	mov	r4, r0
   d466a:	460e      	mov	r6, r1

    SPI.beginTransaction(settings);
   d466c:	4601      	mov	r1, r0
   d466e:	4628      	mov	r0, r5
   d4670:	f000 fb84 	bl	d4d7c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
    digitalWrite(SS, LOW); // Drive Slave Select LOW to select chip
   d4674:	2100      	movs	r1, #0
   d4676:	200e      	movs	r0, #14
   d4678:	f001 ff83 	bl	d6582 <digitalWrite>
    
    byte control = channel << 3; // DONTC DONTC ADD2 ADD1 ADD0 DONTC DONTC DONTC
    buffer = SPI.transfer(control);
   d467c:	00f1      	lsls	r1, r6, #3
   d467e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
   d4682:	4628      	mov	r0, r5
   d4684:	f000 fbea 	bl	d4e5c <_ZN8SPIClass8transferEh>
    buffer <<= 8;
   d4688:	0200      	lsls	r0, r0, #8
   d468a:	8220      	strh	r0, [r4, #16]
    buffer |= SPI.transfer(0);
   d468c:	2100      	movs	r1, #0
   d468e:	4628      	mov	r0, r5
   d4690:	f000 fbe4 	bl	d4e5c <_ZN8SPIClass8transferEh>
   d4694:	8a23      	ldrh	r3, [r4, #16]
   d4696:	4318      	orrs	r0, r3
   d4698:	8220      	strh	r0, [r4, #16]

    digitalWrite(SS, HIGH); // Drive Slave Select HIGH so other hardware can use SPI
   d469a:	2101      	movs	r1, #1
   d469c:	200e      	movs	r0, #14
   d469e:	f001 ff70 	bl	d6582 <digitalWrite>
    SPI.endTransaction();
   d46a2:	4628      	mov	r0, r5
   d46a4:	f000 fb51 	bl	d4d4a <_ZN8SPIClass14endTransactionEv>

    return buffer;
}
   d46a8:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
   d46ac:	bd70      	pop	{r4, r5, r6, pc}
   d46ae:	bf00      	nop
   d46b0:	2003e714 	.word	0x2003e714

000d46b4 <_GLOBAL__sub_I__ZN10ADC128S102C2Ev>:
   d46b4:	f000 b8a6 	b.w	d4804 <HAL_Pin_Map>

000d46b8 <_ZN14CurrentMonitorC1Ev>:
#include "CurrentMonitor.h"

/**
 * Constructor.
 */
CurrentMonitor::CurrentMonitor()
   d46b8:	b510      	push	{r4, lr}
   d46ba:	4604      	mov	r4, r0
   d46bc:	f7ff ffb6 	bl	d462c <_ZN10ADC128S102C1Ev>
   d46c0:	a307      	add	r3, pc, #28	; (adr r3, d46e0 <_ZN14CurrentMonitorC1Ev+0x28>)
   d46c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46c6:	e9c4 2306 	strd	r2, r3, [r4, #24]
   d46ca:	a307      	add	r3, pc, #28	; (adr r3, d46e8 <_ZN14CurrentMonitorC1Ev+0x30>)
   d46cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46d0:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
   d46d4:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
   d46d8:	64a3      	str	r3, [r4, #72]	; 0x48
{
  // be sure not to call anything that requires hardware be initialized here, put those in begin()
}
   d46da:	4620      	mov	r0, r4
   d46dc:	bd10      	pop	{r4, pc}
   d46de:	bf00      	nop
   d46e0:	00000000 	.word	0x00000000
   d46e4:	40a00400 	.word	0x40a00400
   d46e8:	66666666 	.word	0x66666666
   d46ec:	40460666 	.word	0x40460666

000d46f0 <_ZN14CurrentMonitor5beginEv>:
 * Example method.
 */
void CurrentMonitor::begin()
{
    // initialize hardware
    adc.begin();
   d46f0:	f7ff bfac 	b.w	d464c <_ZN10ADC128S1025beginEv>
   d46f4:	0000      	movs	r0, r0
	...

000d46f8 <_ZN14CurrentMonitor13calculateIrmsEh>:
/**
 * Private: Receives analog reading from given channel and calculates Irms.
 * The Irms is calculated from a numberOfSamples to receive a more accurate number
 */
double CurrentMonitor::calculateIrms(uint8_t channel)
{
   d46f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d46fc:	4604      	mov	r4, r0
    int SupplyVoltage = readVcc();


  for (unsigned int n = 0; n < numberOfSamples; n++)
   d46fe:	2500      	movs	r5, #0
  {
    sampleI = adc.readADC(channel);
   d4700:	fa4f fa81 	sxtb.w	sl, r1
double CurrentMonitor::calculateIrms(uint8_t channel)
{
    int SupplyVoltage = readVcc();


  for (unsigned int n = 0; n < numberOfSamples; n++)
   d4704:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   d4706:	42b5      	cmp	r5, r6
   d4708:	d230      	bcs.n	d476c <_ZN14CurrentMonitor13calculateIrmsEh+0x74>
  {
    sampleI = adc.readADC(channel);
   d470a:	4651      	mov	r1, sl
   d470c:	4620      	mov	r0, r4
   d470e:	f7ff ffa9 	bl	d4664 <_ZN10ADC128S1027readADCEa>
   d4712:	6160      	str	r0, [r4, #20]

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset,
    //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (double)((double)(sampleI-offsetI))/1024);
   d4714:	f002 fb7a 	bl	d6e0c <__aeabi_i2d>
   d4718:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
   d471c:	4632      	mov	r2, r6
   d471e:	463b      	mov	r3, r7
   d4720:	4680      	mov	r8, r0
   d4722:	4689      	mov	r9, r1
   d4724:	f002 fa24 	bl	d6b70 <__aeabi_dsub>
   d4728:	2200      	movs	r2, #0
   d472a:	4b25      	ldr	r3, [pc, #148]	; (d47c0 <_ZN14CurrentMonitor13calculateIrmsEh+0xc8>)
   d472c:	f002 fbd4 	bl	d6ed8 <__aeabi_dmul>
   d4730:	4632      	mov	r2, r6
   d4732:	463b      	mov	r3, r7
   d4734:	f002 fa1e 	bl	d6b74 <__adddf3>
   d4738:	4602      	mov	r2, r0
   d473a:	460b      	mov	r3, r1
   d473c:	e9c4 2306 	strd	r2, r3, [r4, #24]
    filteredI = sampleI - offsetI;
   d4740:	4640      	mov	r0, r8
   d4742:	4649      	mov	r1, r9
   d4744:	f002 fa14 	bl	d6b70 <__aeabi_dsub>
   d4748:	4602      	mov	r2, r0
   d474a:	460b      	mov	r3, r1
   d474c:	e9c4 2308 	strd	r2, r3, [r4, #32]

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
   d4750:	f002 fbc2 	bl	d6ed8 <__aeabi_dmul>
   d4754:	4602      	mov	r2, r0
   d4756:	460b      	mov	r3, r1
   d4758:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
    // 2) sum
    sumI += sqI;
   d475c:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
   d4760:	f002 fa08 	bl	d6b74 <__adddf3>
double CurrentMonitor::calculateIrms(uint8_t channel)
{
    int SupplyVoltage = readVcc();


  for (unsigned int n = 0; n < numberOfSamples; n++)
   d4764:	3501      	adds	r5, #1

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
    // 2) sum
    sumI += sqI;
   d4766:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
double CurrentMonitor::calculateIrms(uint8_t channel)
{
    int SupplyVoltage = readVcc();


  for (unsigned int n = 0; n < numberOfSamples; n++)
   d476a:	e7cb      	b.n	d4704 <_ZN14CurrentMonitor13calculateIrmsEh+0xc>
    sqI = filteredI * filteredI;
    // 2) sum
    sumI += sqI;
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d476c:	a312      	add	r3, pc, #72	; (adr r3, d47b8 <_ZN14CurrentMonitor13calculateIrmsEh+0xc0>)
   d476e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4772:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
   d4776:	f002 fbaf 	bl	d6ed8 <__aeabi_dmul>
   d477a:	4680      	mov	r8, r0
  Irms = I_RATIO * sqrt(sumI / numberOfSamples);
   d477c:	4630      	mov	r0, r6
    sqI = filteredI * filteredI;
    // 2) sum
    sumI += sqI;
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d477e:	4689      	mov	r9, r1
  Irms = I_RATIO * sqrt(sumI / numberOfSamples);
   d4780:	f002 fb34 	bl	d6dec <__aeabi_ui2d>
   d4784:	4602      	mov	r2, r0
   d4786:	460b      	mov	r3, r1
   d4788:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
   d478c:	f002 fcce 	bl	d712c <__aeabi_ddiv>
   d4790:	ec41 0b10 	vmov	d0, r0, r1
   d4794:	f002 f8b6 	bl	d6904 <sqrt>
   d4798:	4640      	mov	r0, r8
   d479a:	ec53 2b10 	vmov	r2, r3, d0
   d479e:	4649      	mov	r1, r9
   d47a0:	f002 fb9a 	bl	d6ed8 <__aeabi_dmul>

  //Reset accumulators
  sumI = 0;
   d47a4:	2200      	movs	r2, #0
   d47a6:	2300      	movs	r3, #0
    // 2) sum
    sumI += sqI;
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
  Irms = I_RATIO * sqrt(sumI / numberOfSamples);
   d47a8:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38

  //Reset accumulators
  sumI = 0;
   d47ac:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
  //--------------------------------------------------------------------------------------
  return Irms;
}
   d47b0:	ec41 0b10 	vmov	d0, r0, r1
   d47b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d47b8:	66666666 	.word	0x66666666
   d47bc:	3f4a6666 	.word	0x3f4a6666
   d47c0:	3f500000 	.word	0x3f500000
   d47c4:	00000000 	.word	0x00000000

000d47c8 <_ZN14CurrentMonitor10processAdcEh>:
 * Processes the given channel and returns the calculated Irms value.
 */
double CurrentMonitor::processAdc(uint8_t adcChannel)
{

    if(adcChannel < 0 || adcChannel > 7){
   d47c8:	2907      	cmp	r1, #7
   d47ca:	d801      	bhi.n	d47d0 <_ZN14CurrentMonitor10processAdcEh+0x8>
        return -1;
    }
    return calculateIrms(adcChannel);
   d47cc:	f7ff bf94 	b.w	d46f8 <_ZN14CurrentMonitor13calculateIrmsEh>
}
   d47d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; d47d8 <_ZN14CurrentMonitor10processAdcEh+0x10>
   d47d4:	4770      	bx	lr
   d47d6:	bf00      	nop
   d47d8:	00000000 	.word	0x00000000
   d47dc:	bff00000 	.word	0xbff00000

000d47e0 <_GLOBAL__sub_I__ZN14CurrentMonitorC2Ev>:
   d47e0:	f000 b810 	b.w	d4804 <HAL_Pin_Map>

000d47e4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d47e4:	b508      	push	{r3, lr}
   d47e6:	4b02      	ldr	r3, [pc, #8]	; (d47f0 <netdb_freeaddrinfo+0xc>)
   d47e8:	681b      	ldr	r3, [r3, #0]
   d47ea:	689b      	ldr	r3, [r3, #8]
   d47ec:	9301      	str	r3, [sp, #4]
   d47ee:	bd08      	pop	{r3, pc}
   d47f0:	00030268 	.word	0x00030268

000d47f4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d47f4:	b508      	push	{r3, lr}
   d47f6:	4b02      	ldr	r3, [pc, #8]	; (d4800 <netdb_getaddrinfo+0xc>)
   d47f8:	681b      	ldr	r3, [r3, #0]
   d47fa:	68db      	ldr	r3, [r3, #12]
   d47fc:	9301      	str	r3, [sp, #4]
   d47fe:	bd08      	pop	{r3, pc}
   d4800:	00030268 	.word	0x00030268

000d4804 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4804:	b508      	push	{r3, lr}
   d4806:	4b02      	ldr	r3, [pc, #8]	; (d4810 <HAL_Pin_Map+0xc>)
   d4808:	681b      	ldr	r3, [r3, #0]
   d480a:	681b      	ldr	r3, [r3, #0]
   d480c:	9301      	str	r3, [sp, #4]
   d480e:	bd08      	pop	{r3, pc}
   d4810:	0003022c 	.word	0x0003022c

000d4814 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4814:	b508      	push	{r3, lr}
   d4816:	4b02      	ldr	r3, [pc, #8]	; (d4820 <HAL_Pin_Mode+0xc>)
   d4818:	681b      	ldr	r3, [r3, #0]
   d481a:	689b      	ldr	r3, [r3, #8]
   d481c:	9301      	str	r3, [sp, #4]
   d481e:	bd08      	pop	{r3, pc}
   d4820:	0003022c 	.word	0x0003022c

000d4824 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4824:	b508      	push	{r3, lr}
   d4826:	4b02      	ldr	r3, [pc, #8]	; (d4830 <HAL_Get_Pin_Mode+0xc>)
   d4828:	681b      	ldr	r3, [r3, #0]
   d482a:	68db      	ldr	r3, [r3, #12]
   d482c:	9301      	str	r3, [sp, #4]
   d482e:	bd08      	pop	{r3, pc}
   d4830:	0003022c 	.word	0x0003022c

000d4834 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4834:	b508      	push	{r3, lr}
   d4836:	4b02      	ldr	r3, [pc, #8]	; (d4840 <HAL_GPIO_Write+0xc>)
   d4838:	681b      	ldr	r3, [r3, #0]
   d483a:	691b      	ldr	r3, [r3, #16]
   d483c:	9301      	str	r3, [sp, #4]
   d483e:	bd08      	pop	{r3, pc}
   d4840:	0003022c 	.word	0x0003022c

000d4844 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4844:	b508      	push	{r3, lr}
   d4846:	4b02      	ldr	r3, [pc, #8]	; (d4850 <HAL_GPIO_Read+0xc>)
   d4848:	681b      	ldr	r3, [r3, #0]
   d484a:	695b      	ldr	r3, [r3, #20]
   d484c:	9301      	str	r3, [sp, #4]
   d484e:	bd08      	pop	{r3, pc}
   d4850:	0003022c 	.word	0x0003022c

000d4854 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d4854:	b508      	push	{r3, lr}
   d4856:	4b02      	ldr	r3, [pc, #8]	; (d4860 <HAL_SPI_Begin+0xc>)
   d4858:	681b      	ldr	r3, [r3, #0]
   d485a:	681b      	ldr	r3, [r3, #0]
   d485c:	9301      	str	r3, [sp, #4]
   d485e:	bd08      	pop	{r3, pc}
   d4860:	00030230 	.word	0x00030230

000d4864 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d4864:	b508      	push	{r3, lr}
   d4866:	4b02      	ldr	r3, [pc, #8]	; (d4870 <HAL_SPI_Send_Receive_Data+0xc>)
   d4868:	681b      	ldr	r3, [r3, #0]
   d486a:	695b      	ldr	r3, [r3, #20]
   d486c:	9301      	str	r3, [sp, #4]
   d486e:	bd08      	pop	{r3, pc}
   d4870:	00030230 	.word	0x00030230

000d4874 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4874:	b508      	push	{r3, lr}
   d4876:	4b02      	ldr	r3, [pc, #8]	; (d4880 <HAL_SPI_Init+0xc>)
   d4878:	681b      	ldr	r3, [r3, #0]
   d487a:	69db      	ldr	r3, [r3, #28]
   d487c:	9301      	str	r3, [sp, #4]
   d487e:	bd08      	pop	{r3, pc}
   d4880:	00030230 	.word	0x00030230

000d4884 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4884:	b508      	push	{r3, lr}
   d4886:	4b02      	ldr	r3, [pc, #8]	; (d4890 <HAL_SPI_Is_Enabled+0xc>)
   d4888:	681b      	ldr	r3, [r3, #0]
   d488a:	6a1b      	ldr	r3, [r3, #32]
   d488c:	9301      	str	r3, [sp, #4]
   d488e:	bd08      	pop	{r3, pc}
   d4890:	00030230 	.word	0x00030230

000d4894 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d4894:	b508      	push	{r3, lr}
   d4896:	4b02      	ldr	r3, [pc, #8]	; (d48a0 <HAL_SPI_Info+0xc>)
   d4898:	681b      	ldr	r3, [r3, #0]
   d489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d489c:	9301      	str	r3, [sp, #4]
   d489e:	bd08      	pop	{r3, pc}
   d48a0:	00030230 	.word	0x00030230

000d48a4 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d48a4:	b508      	push	{r3, lr}
   d48a6:	4b02      	ldr	r3, [pc, #8]	; (d48b0 <HAL_SPI_Set_Settings+0xc>)
   d48a8:	681b      	ldr	r3, [r3, #0]
   d48aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d48ac:	9301      	str	r3, [sp, #4]
   d48ae:	bd08      	pop	{r3, pc}
   d48b0:	00030230 	.word	0x00030230

000d48b4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d48b4:	b508      	push	{r3, lr}
   d48b6:	4b02      	ldr	r3, [pc, #8]	; (d48c0 <HAL_RNG_GetRandomNumber+0xc>)
   d48b8:	681b      	ldr	r3, [r3, #0]
   d48ba:	685b      	ldr	r3, [r3, #4]
   d48bc:	9301      	str	r3, [sp, #4]
   d48be:	bd08      	pop	{r3, pc}
   d48c0:	00030218 	.word	0x00030218

000d48c4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d48c4:	b508      	push	{r3, lr}
   d48c6:	4b02      	ldr	r3, [pc, #8]	; (d48d0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d48c8:	681b      	ldr	r3, [r3, #0]
   d48ca:	695b      	ldr	r3, [r3, #20]
   d48cc:	9301      	str	r3, [sp, #4]
   d48ce:	bd08      	pop	{r3, pc}
   d48d0:	00030218 	.word	0x00030218

000d48d4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d48d4:	b508      	push	{r3, lr}
   d48d6:	4b02      	ldr	r3, [pc, #8]	; (d48e0 <os_thread_is_current+0xc>)
   d48d8:	681b      	ldr	r3, [r3, #0]
   d48da:	689b      	ldr	r3, [r3, #8]
   d48dc:	9301      	str	r3, [sp, #4]
   d48de:	bd08      	pop	{r3, pc}
   d48e0:	00030248 	.word	0x00030248

000d48e4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d48e4:	b508      	push	{r3, lr}
   d48e6:	4b02      	ldr	r3, [pc, #8]	; (d48f0 <os_thread_join+0xc>)
   d48e8:	681b      	ldr	r3, [r3, #0]
   d48ea:	691b      	ldr	r3, [r3, #16]
   d48ec:	9301      	str	r3, [sp, #4]
   d48ee:	bd08      	pop	{r3, pc}
   d48f0:	00030248 	.word	0x00030248

000d48f4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d48f4:	b508      	push	{r3, lr}
   d48f6:	4b02      	ldr	r3, [pc, #8]	; (d4900 <os_thread_cleanup+0xc>)
   d48f8:	681b      	ldr	r3, [r3, #0]
   d48fa:	695b      	ldr	r3, [r3, #20]
   d48fc:	9301      	str	r3, [sp, #4]
   d48fe:	bd08      	pop	{r3, pc}
   d4900:	00030248 	.word	0x00030248

000d4904 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4904:	b508      	push	{r3, lr}
   d4906:	4b02      	ldr	r3, [pc, #8]	; (d4910 <os_mutex_create+0xc>)
   d4908:	681b      	ldr	r3, [r3, #0]
   d490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d490c:	9301      	str	r3, [sp, #4]
   d490e:	bd08      	pop	{r3, pc}
   d4910:	00030248 	.word	0x00030248

000d4914 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d4914:	b508      	push	{r3, lr}
   d4916:	4b02      	ldr	r3, [pc, #8]	; (d4920 <os_mutex_lock+0xc>)
   d4918:	681b      	ldr	r3, [r3, #0]
   d491a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d491c:	9301      	str	r3, [sp, #4]
   d491e:	bd08      	pop	{r3, pc}
   d4920:	00030248 	.word	0x00030248

000d4924 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <os_mutex_unlock+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	00030248 	.word	0x00030248

000d4934 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <os_mutex_recursive_create+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	00030248 	.word	0x00030248

000d4944 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b02      	ldr	r3, [pc, #8]	; (d4950 <inet_inet_ntop+0xc>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	695b      	ldr	r3, [r3, #20]
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	bd08      	pop	{r3, pc}
   d4950:	00030264 	.word	0x00030264

000d4954 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b02      	ldr	r3, [pc, #8]	; (d4960 <HAL_USART_Init+0xc>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	681b      	ldr	r3, [r3, #0]
   d495c:	9301      	str	r3, [sp, #4]
   d495e:	bd08      	pop	{r3, pc}
   d4960:	0003023c 	.word	0x0003023c

000d4964 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b02      	ldr	r3, [pc, #8]	; (d4970 <HAL_USART_Write_Data+0xc>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	68db      	ldr	r3, [r3, #12]
   d496c:	9301      	str	r3, [sp, #4]
   d496e:	bd08      	pop	{r3, pc}
   d4970:	0003023c 	.word	0x0003023c

000d4974 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b02      	ldr	r3, [pc, #8]	; (d4980 <HAL_USART_Available_Data+0xc>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	691b      	ldr	r3, [r3, #16]
   d497c:	9301      	str	r3, [sp, #4]
   d497e:	bd08      	pop	{r3, pc}
   d4980:	0003023c 	.word	0x0003023c

000d4984 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b02      	ldr	r3, [pc, #8]	; (d4990 <HAL_USART_Read_Data+0xc>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	695b      	ldr	r3, [r3, #20]
   d498c:	9301      	str	r3, [sp, #4]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	0003023c 	.word	0x0003023c

000d4994 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <HAL_USART_Peek_Data+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	699b      	ldr	r3, [r3, #24]
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	0003023c 	.word	0x0003023c

000d49a4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <HAL_USART_Flush_Data+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	69db      	ldr	r3, [r3, #28]
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	0003023c 	.word	0x0003023c

000d49b4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <HAL_USART_Is_Enabled+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	6a1b      	ldr	r3, [r3, #32]
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	0003023c 	.word	0x0003023c

000d49c4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <HAL_USART_Available_Data_For_Write+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	0003023c 	.word	0x0003023c

000d49d4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <HAL_I2C_Write_Data+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	6a1b      	ldr	r3, [r3, #32]
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	00030228 	.word	0x00030228

000d49e4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <HAL_I2C_Available_Data+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	00030228 	.word	0x00030228

000d49f4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <HAL_I2C_Read_Data+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	00030228 	.word	0x00030228

000d4a04 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <HAL_I2C_Peek_Data+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	00030228 	.word	0x00030228

000d4a14 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <HAL_I2C_Flush_Data+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	00030228 	.word	0x00030228

000d4a24 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <HAL_I2C_Is_Enabled+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	00030228 	.word	0x00030228

000d4a34 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <HAL_I2C_Init+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	00030228 	.word	0x00030228

000d4a44 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <cellular_signal+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	00030274 	.word	0x00030274

000d4a54 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <HAL_USB_USART_Init+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	681b      	ldr	r3, [r3, #0]
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	0003024c 	.word	0x0003024c

000d4a64 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <HAL_USB_USART_Begin+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	685b      	ldr	r3, [r3, #4]
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	0003024c 	.word	0x0003024c

000d4a74 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <HAL_USB_USART_Available_Data+0xc>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	691b      	ldr	r3, [r3, #16]
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	0003024c 	.word	0x0003024c

000d4a84 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4a84:	b508      	push	{r3, lr}
   d4a86:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	695b      	ldr	r3, [r3, #20]
   d4a8c:	9301      	str	r3, [sp, #4]
   d4a8e:	bd08      	pop	{r3, pc}
   d4a90:	0003024c 	.word	0x0003024c

000d4a94 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4a94:	b508      	push	{r3, lr}
   d4a96:	4b02      	ldr	r3, [pc, #8]	; (d4aa0 <HAL_USB_USART_Receive_Data+0xc>)
   d4a98:	681b      	ldr	r3, [r3, #0]
   d4a9a:	699b      	ldr	r3, [r3, #24]
   d4a9c:	9301      	str	r3, [sp, #4]
   d4a9e:	bd08      	pop	{r3, pc}
   d4aa0:	0003024c 	.word	0x0003024c

000d4aa4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <HAL_USB_USART_Send_Data+0xc>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	69db      	ldr	r3, [r3, #28]
   d4aac:	9301      	str	r3, [sp, #4]
   d4aae:	bd08      	pop	{r3, pc}
   d4ab0:	0003024c 	.word	0x0003024c

000d4ab4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4ab4:	b508      	push	{r3, lr}
   d4ab6:	4b02      	ldr	r3, [pc, #8]	; (d4ac0 <HAL_USB_USART_Flush_Data+0xc>)
   d4ab8:	681b      	ldr	r3, [r3, #0]
   d4aba:	6a1b      	ldr	r3, [r3, #32]
   d4abc:	9301      	str	r3, [sp, #4]
   d4abe:	bd08      	pop	{r3, pc}
   d4ac0:	0003024c 	.word	0x0003024c

000d4ac4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <set_system_mode+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	685b      	ldr	r3, [r3, #4]
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	00030220 	.word	0x00030220

000d4ad4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4ad4:	b508      	push	{r3, lr}
   d4ad6:	4b02      	ldr	r3, [pc, #8]	; (d4ae0 <system_delay_ms+0xc>)
   d4ad8:	681b      	ldr	r3, [r3, #0]
   d4ada:	695b      	ldr	r3, [r3, #20]
   d4adc:	9301      	str	r3, [sp, #4]
   d4ade:	bd08      	pop	{r3, pc}
   d4ae0:	00030220 	.word	0x00030220

000d4ae4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4ae4:	b508      	push	{r3, lr}
   d4ae6:	4b02      	ldr	r3, [pc, #8]	; (d4af0 <application_thread_current+0xc>)
   d4ae8:	681b      	ldr	r3, [r3, #0]
   d4aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4aec:	9301      	str	r3, [sp, #4]
   d4aee:	bd08      	pop	{r3, pc}
   d4af0:	00030220 	.word	0x00030220

000d4af4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4af4:	b508      	push	{r3, lr}
   d4af6:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <application_thread_invoke+0xc>)
   d4af8:	681b      	ldr	r3, [r3, #0]
   d4afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4afc:	9301      	str	r3, [sp, #4]
   d4afe:	bd08      	pop	{r3, pc}
   d4b00:	00030220 	.word	0x00030220

000d4b04 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4b04:	b508      	push	{r3, lr}
   d4b06:	4b03      	ldr	r3, [pc, #12]	; (d4b14 <system_ctrl_set_app_request_handler+0x10>)
   d4b08:	681b      	ldr	r3, [r3, #0]
   d4b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4b0e:	9301      	str	r3, [sp, #4]
   d4b10:	bd08      	pop	{r3, pc}
   d4b12:	0000      	.short	0x0000
   d4b14:	00030220 	.word	0x00030220

000d4b18 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4b18:	b508      	push	{r3, lr}
   d4b1a:	4b03      	ldr	r3, [pc, #12]	; (d4b28 <system_ctrl_set_result+0x10>)
   d4b1c:	681b      	ldr	r3, [r3, #0]
   d4b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4b22:	9301      	str	r3, [sp, #4]
   d4b24:	bd08      	pop	{r3, pc}
   d4b26:	0000      	.short	0x0000
   d4b28:	00030220 	.word	0x00030220

000d4b2c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b2c:	b508      	push	{r3, lr}
   d4b2e:	4b02      	ldr	r3, [pc, #8]	; (d4b38 <network_connect+0xc>)
   d4b30:	681b      	ldr	r3, [r3, #0]
   d4b32:	685b      	ldr	r3, [r3, #4]
   d4b34:	9301      	str	r3, [sp, #4]
   d4b36:	bd08      	pop	{r3, pc}
   d4b38:	00030240 	.word	0x00030240

000d4b3c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4b3c:	b508      	push	{r3, lr}
   d4b3e:	4b02      	ldr	r3, [pc, #8]	; (d4b48 <network_connecting+0xc>)
   d4b40:	681b      	ldr	r3, [r3, #0]
   d4b42:	689b      	ldr	r3, [r3, #8]
   d4b44:	9301      	str	r3, [sp, #4]
   d4b46:	bd08      	pop	{r3, pc}
   d4b48:	00030240 	.word	0x00030240

000d4b4c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4b4c:	b508      	push	{r3, lr}
   d4b4e:	4b02      	ldr	r3, [pc, #8]	; (d4b58 <network_disconnect+0xc>)
   d4b50:	681b      	ldr	r3, [r3, #0]
   d4b52:	68db      	ldr	r3, [r3, #12]
   d4b54:	9301      	str	r3, [sp, #4]
   d4b56:	bd08      	pop	{r3, pc}
   d4b58:	00030240 	.word	0x00030240

000d4b5c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4b5c:	b508      	push	{r3, lr}
   d4b5e:	4b02      	ldr	r3, [pc, #8]	; (d4b68 <network_ready+0xc>)
   d4b60:	681b      	ldr	r3, [r3, #0]
   d4b62:	691b      	ldr	r3, [r3, #16]
   d4b64:	9301      	str	r3, [sp, #4]
   d4b66:	bd08      	pop	{r3, pc}
   d4b68:	00030240 	.word	0x00030240

000d4b6c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b6c:	b508      	push	{r3, lr}
   d4b6e:	4b02      	ldr	r3, [pc, #8]	; (d4b78 <network_on+0xc>)
   d4b70:	681b      	ldr	r3, [r3, #0]
   d4b72:	695b      	ldr	r3, [r3, #20]
   d4b74:	9301      	str	r3, [sp, #4]
   d4b76:	bd08      	pop	{r3, pc}
   d4b78:	00030240 	.word	0x00030240

000d4b7c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b7c:	b508      	push	{r3, lr}
   d4b7e:	4b02      	ldr	r3, [pc, #8]	; (d4b88 <network_off+0xc>)
   d4b80:	681b      	ldr	r3, [r3, #0]
   d4b82:	699b      	ldr	r3, [r3, #24]
   d4b84:	9301      	str	r3, [sp, #4]
   d4b86:	bd08      	pop	{r3, pc}
   d4b88:	00030240 	.word	0x00030240

000d4b8c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4b8c:	b508      	push	{r3, lr}
   d4b8e:	4b02      	ldr	r3, [pc, #8]	; (d4b98 <network_listen+0xc>)
   d4b90:	681b      	ldr	r3, [r3, #0]
   d4b92:	69db      	ldr	r3, [r3, #28]
   d4b94:	9301      	str	r3, [sp, #4]
   d4b96:	bd08      	pop	{r3, pc}
   d4b98:	00030240 	.word	0x00030240

000d4b9c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4b9c:	b508      	push	{r3, lr}
   d4b9e:	4b02      	ldr	r3, [pc, #8]	; (d4ba8 <network_listening+0xc>)
   d4ba0:	681b      	ldr	r3, [r3, #0]
   d4ba2:	6a1b      	ldr	r3, [r3, #32]
   d4ba4:	9301      	str	r3, [sp, #4]
   d4ba6:	bd08      	pop	{r3, pc}
   d4ba8:	00030240 	.word	0x00030240

000d4bac <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4bac:	b508      	push	{r3, lr}
   d4bae:	4b02      	ldr	r3, [pc, #8]	; (d4bb8 <network_set_listen_timeout+0xc>)
   d4bb0:	681b      	ldr	r3, [r3, #0]
   d4bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4bb4:	9301      	str	r3, [sp, #4]
   d4bb6:	bd08      	pop	{r3, pc}
   d4bb8:	00030240 	.word	0x00030240

000d4bbc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4bbc:	b508      	push	{r3, lr}
   d4bbe:	4b02      	ldr	r3, [pc, #8]	; (d4bc8 <network_get_listen_timeout+0xc>)
   d4bc0:	681b      	ldr	r3, [r3, #0]
   d4bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4bc4:	9301      	str	r3, [sp, #4]
   d4bc6:	bd08      	pop	{r3, pc}
   d4bc8:	00030240 	.word	0x00030240

000d4bcc <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4bcc:	b508      	push	{r3, lr}
   d4bce:	4b02      	ldr	r3, [pc, #8]	; (d4bd8 <spark_variable+0xc>)
   d4bd0:	681b      	ldr	r3, [r3, #0]
   d4bd2:	681b      	ldr	r3, [r3, #0]
   d4bd4:	9301      	str	r3, [sp, #4]
   d4bd6:	bd08      	pop	{r3, pc}
   d4bd8:	00030244 	.word	0x00030244

000d4bdc <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4bdc:	b508      	push	{r3, lr}
   d4bde:	4b02      	ldr	r3, [pc, #8]	; (d4be8 <spark_function+0xc>)
   d4be0:	681b      	ldr	r3, [r3, #0]
   d4be2:	685b      	ldr	r3, [r3, #4]
   d4be4:	9301      	str	r3, [sp, #4]
   d4be6:	bd08      	pop	{r3, pc}
   d4be8:	00030244 	.word	0x00030244

000d4bec <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4bec:	b508      	push	{r3, lr}
   d4bee:	4b02      	ldr	r3, [pc, #8]	; (d4bf8 <spark_cloud_flag_connected+0xc>)
   d4bf0:	681b      	ldr	r3, [r3, #0]
   d4bf2:	695b      	ldr	r3, [r3, #20]
   d4bf4:	9301      	str	r3, [sp, #4]
   d4bf6:	bd08      	pop	{r3, pc}
   d4bf8:	00030244 	.word	0x00030244

000d4bfc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4bfc:	b508      	push	{r3, lr}
   d4bfe:	4b02      	ldr	r3, [pc, #8]	; (d4c08 <spark_send_event+0xc>)
   d4c00:	681b      	ldr	r3, [r3, #0]
   d4c02:	6a1b      	ldr	r3, [r3, #32]
   d4c04:	9301      	str	r3, [sp, #4]
   d4c06:	bd08      	pop	{r3, pc}
   d4c08:	00030244 	.word	0x00030244

000d4c0c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4c0c:	b508      	push	{r3, lr}
   d4c0e:	4b02      	ldr	r3, [pc, #8]	; (d4c18 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4c10:	681b      	ldr	r3, [r3, #0]
   d4c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4c14:	9301      	str	r3, [sp, #4]
   d4c16:	bd08      	pop	{r3, pc}
   d4c18:	00030244 	.word	0x00030244

000d4c1c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4c1c:	b508      	push	{r3, lr}
   d4c1e:	4b02      	ldr	r3, [pc, #8]	; (d4c28 <malloc+0xc>)
   d4c20:	681b      	ldr	r3, [r3, #0]
   d4c22:	681b      	ldr	r3, [r3, #0]
   d4c24:	9301      	str	r3, [sp, #4]
   d4c26:	bd08      	pop	{r3, pc}
   d4c28:	0003021c 	.word	0x0003021c

000d4c2c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4c2c:	b508      	push	{r3, lr}
   d4c2e:	4b02      	ldr	r3, [pc, #8]	; (d4c38 <free+0xc>)
   d4c30:	681b      	ldr	r3, [r3, #0]
   d4c32:	685b      	ldr	r3, [r3, #4]
   d4c34:	9301      	str	r3, [sp, #4]
   d4c36:	bd08      	pop	{r3, pc}
   d4c38:	0003021c 	.word	0x0003021c

000d4c3c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <realloc+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	689b      	ldr	r3, [r3, #8]
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	0003021c 	.word	0x0003021c

000d4c4c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <vsnprintf+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	0003021c 	.word	0x0003021c

000d4c5c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <abort+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	0003021c 	.word	0x0003021c

000d4c6c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <_malloc_r+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	0003021c 	.word	0x0003021c

000d4c7c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <__errno+0xc>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4c84:	9301      	str	r3, [sp, #4]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	0003021c 	.word	0x0003021c

000d4c8c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4c8c:	2200      	movs	r2, #0
   d4c8e:	4611      	mov	r1, r2
   d4c90:	6840      	ldr	r0, [r0, #4]
   d4c92:	f7ff bf83 	b.w	d4b9c <network_listening>

000d4c96 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4c96:	2200      	movs	r2, #0
   d4c98:	4611      	mov	r1, r2
   d4c9a:	6840      	ldr	r0, [r0, #4]
   d4c9c:	f7ff bf8e 	b.w	d4bbc <network_get_listen_timeout>

000d4ca0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4ca0:	2200      	movs	r2, #0
   d4ca2:	6840      	ldr	r0, [r0, #4]
   d4ca4:	f7ff bf82 	b.w	d4bac <network_set_listen_timeout>

000d4ca8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ca8:	2200      	movs	r2, #0
   d4caa:	f081 0101 	eor.w	r1, r1, #1
   d4cae:	6840      	ldr	r0, [r0, #4]
   d4cb0:	f7ff bf6c 	b.w	d4b8c <network_listen>

000d4cb4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4cb4:	2300      	movs	r3, #0
   d4cb6:	461a      	mov	r2, r3
   d4cb8:	4619      	mov	r1, r3
   d4cba:	6840      	ldr	r0, [r0, #4]
   d4cbc:	f7ff bf5e 	b.w	d4b7c <network_off>

000d4cc0 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4cc0:	2300      	movs	r3, #0
   d4cc2:	461a      	mov	r2, r3
   d4cc4:	4619      	mov	r1, r3
   d4cc6:	6840      	ldr	r0, [r0, #4]
   d4cc8:	f7ff bf50 	b.w	d4b6c <network_on>

000d4ccc <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4ccc:	2200      	movs	r2, #0
   d4cce:	4611      	mov	r1, r2
   d4cd0:	6840      	ldr	r0, [r0, #4]
   d4cd2:	f7ff bf43 	b.w	d4b5c <network_ready>

000d4cd6 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4cd6:	2200      	movs	r2, #0
   d4cd8:	4611      	mov	r1, r2
   d4cda:	6840      	ldr	r0, [r0, #4]
   d4cdc:	f7ff bf2e 	b.w	d4b3c <network_connecting>

000d4ce0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4ce0:	2200      	movs	r2, #0
   d4ce2:	2102      	movs	r1, #2
   d4ce4:	6840      	ldr	r0, [r0, #4]
   d4ce6:	f7ff bf31 	b.w	d4b4c <network_disconnect>

000d4cea <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4cea:	2300      	movs	r3, #0
   d4cec:	461a      	mov	r2, r3
   d4cee:	6840      	ldr	r0, [r0, #4]
   d4cf0:	f7ff bf1c 	b.w	d4b2c <network_connect>

000d4cf4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4cf4:	4b02      	ldr	r3, [pc, #8]	; (d4d00 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4cf6:	2203      	movs	r2, #3
   d4cf8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4cfa:	4a02      	ldr	r2, [pc, #8]	; (d4d04 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4cfc:	601a      	str	r2, [r3, #0]
   d4cfe:	4770      	bx	lr
   d4d00:	2003e3a0 	.word	0x2003e3a0
   d4d04:	000d7b24 	.word	0x000d7b24

000d4d08 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4d08:	4770      	bx	lr

000d4d0a <_ZN8SPIClassD0Ev>:
   d4d0a:	b510      	push	{r4, lr}
   d4d0c:	2110      	movs	r1, #16
   d4d0e:	4604      	mov	r4, r0
   d4d10:	f001 fcab 	bl	d666a <_ZdlPvj>
   d4d14:	4620      	mov	r0, r4
   d4d16:	bd10      	pop	{r4, pc}

000d4d18 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4d18:	b570      	push	{r4, r5, r6, lr}
   d4d1a:	4b08      	ldr	r3, [pc, #32]	; (d4d3c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4d1c:	6003      	str	r3, [r0, #0]
   d4d1e:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4d20:	2500      	movs	r5, #0
   d4d22:	460e      	mov	r6, r1
   d4d24:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4d28:	f7ff fdec 	bl	d4904 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4d2c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4d2e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4d30:	f7ff fda0 	bl	d4874 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4d34:	60a5      	str	r5, [r4, #8]
}
   d4d36:	4620      	mov	r0, r4
   d4d38:	bd70      	pop	{r4, r5, r6, pc}
   d4d3a:	bf00      	nop
   d4d3c:	000d7b58 	.word	0x000d7b58

000d4d40 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d4d40:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d4d44:	7900      	ldrb	r0, [r0, #4]
   d4d46:	f7ff bd85 	b.w	d4854 <HAL_SPI_Begin>

000d4d4a <_ZN8SPIClass14endTransactionEv>:
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
    void unlock() { os_mutex_unlock(handle_); }
   d4d4a:	68c0      	ldr	r0, [r0, #12]
   d4d4c:	f7ff bdea 	b.w	d4924 <os_mutex_unlock>

000d4d50 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d4d50:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
   d4d52:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d4d54:	6018      	str	r0, [r3, #0]
   d4d56:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
   d4d58:	6818      	ldr	r0, [r3, #0]
   d4d5a:	4288      	cmp	r0, r1
   d4d5c:	b2e5      	uxtb	r5, r4
   d4d5e:	d906      	bls.n	d4d6e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d4d60:	3401      	adds	r4, #1
   d4d62:	2c08      	cmp	r4, #8
   d4d64:	d002      	beq.n	d4d6c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
   d4d66:	0840      	lsrs	r0, r0, #1
   d4d68:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
   d4d6a:	e7f5      	b.n	d4d58 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d4d6c:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d4d6e:	4b02      	ldr	r3, [pc, #8]	; (d4d78 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d4d70:	5d5b      	ldrb	r3, [r3, r5]
   d4d72:	7013      	strb	r3, [r2, #0]
   d4d74:	bd30      	pop	{r4, r5, pc}
   d4d76:	bf00      	nop
   d4d78:	000d7b60 	.word	0x000d7b60

000d4d7c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
  lock();
  return 0;
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d4d7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4d80:	4680      	mov	r8, r0
   d4d82:	b08f      	sub	sp, #60	; 0x3c
            os_mutex_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
   d4d84:	68c0      	ldr	r0, [r0, #12]
   d4d86:	460f      	mov	r7, r1
   d4d88:	f7ff fdc4 	bl	d4914 <os_mutex_lock>
  lock();
  // Get Current SPISettings
  hal_spi_info_t info;
  querySpiInfo(_spi, &info);
   d4d8c:	f898 4004 	ldrb.w	r4, [r8, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   d4d90:	2214      	movs	r2, #20
   d4d92:	2100      	movs	r1, #0
   d4d94:	a809      	add	r0, sp, #36	; 0x24
   d4d96:	f002 fd64 	bl	d7862 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   d4d9a:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   d4d9c:	4620      	mov	r0, r4
   d4d9e:	2200      	movs	r2, #0
   d4da0:	a909      	add	r1, sp, #36	; 0x24
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   d4da2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  HAL_SPI_Info(spi, info, nullptr);
   d4da6:	f7ff fd75 	bl	d4894 <HAL_SPI_Info>
}

static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
  if (!info->enabled || info->default_settings)
   d4daa:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d4dae:	b14c      	cbz	r4, d4dc4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
   d4db0:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d4db4:	b92d      	cbnz	r5, d4dc2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d4db6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   d4db8:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d4dbc:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d4dc0:	e003      	b.n	d4dca <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d4dc2:	2400      	movs	r4, #0
   d4dc4:	46a1      	mov	r9, r4
   d4dc6:	4626      	mov	r6, r4
   d4dc8:	2501      	movs	r5, #1
   d4dca:	793b      	ldrb	r3, [r7, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d4dcc:	b10d      	cbz	r5, d4dd2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
   d4dce:	2b00      	cmp	r3, #0
   d4dd0:	d140      	bne.n	d4e54 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
      return true;

    if (default_ == other.default_ &&
   d4dd2:	429d      	cmp	r5, r3
   d4dd4:	d10b      	bne.n	d4dee <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
   d4dd6:	68ba      	ldr	r2, [r7, #8]
   d4dd8:	42b2      	cmp	r2, r6
   d4dda:	d108      	bne.n	d4dee <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d4ddc:	f88d 9020 	strb.w	r9, [sp, #32]
   d4de0:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d4de4:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d4de8:	89ba      	ldrh	r2, [r7, #12]
   d4dea:	4291      	cmp	r1, r2
   d4dec:	d032      	beq.n	d4e54 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
  querySpiInfo(_spi, &info);
  particle::__SPISettings current = spiSettingsFromSpiInfo(&info);
  // If they differ, reconfigure SPI peripheral
  if (settings != current)
  {
    if (!settings.default_) {
   d4dee:	bb23      	cbnz	r3, d4e3a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xbe>
      uint8_t divisor = 0;
   d4df0:	f88d 300f 	strb.w	r3, [sp, #15]
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);
   d4df4:	f10d 020f 	add.w	r2, sp, #15
   d4df8:	ab04      	add	r3, sp, #16
   d4dfa:	68b9      	ldr	r1, [r7, #8]
   d4dfc:	980a      	ldr	r0, [sp, #40]	; 0x28
   d4dfe:	f7ff ffa7 	bl	d4d50 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d4e02:	793b      	ldrb	r3, [r7, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d4e04:	b105      	cbz	r5, d4e08 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
   d4e06:	bb13      	cbnz	r3, d4e4e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d4e08:	42ab      	cmp	r3, r5
   d4e0a:	d009      	beq.n	d4e20 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>

      if (!(current <= settings && clock == current.clock_)) {
        HAL_SPI_Set_Settings(_spi, 0, divisor, settings.bitOrder_, settings.dataMode_, nullptr);
   d4e0c:	2100      	movs	r1, #0
   d4e0e:	7b3b      	ldrb	r3, [r7, #12]
   d4e10:	9101      	str	r1, [sp, #4]
   d4e12:	7b7c      	ldrb	r4, [r7, #13]
   d4e14:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d4e18:	f898 0004 	ldrb.w	r0, [r8, #4]
   d4e1c:	9400      	str	r4, [sp, #0]
   d4e1e:	e013      	b.n	d4e48 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xcc>
   d4e20:	68bb      	ldr	r3, [r7, #8]
   d4e22:	42b3      	cmp	r3, r6
   d4e24:	d3f2      	bcc.n	d4e0c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d4e26:	f88d 9020 	strb.w	r9, [sp, #32]
   d4e2a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d4e2e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d4e32:	89bb      	ldrh	r3, [r7, #12]
   d4e34:	429a      	cmp	r2, r3
   d4e36:	d1e9      	bne.n	d4e0c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
   d4e38:	e009      	b.n	d4e4e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      }
    } else {
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
   d4e3a:	2300      	movs	r3, #0
   d4e3c:	f898 0004 	ldrb.w	r0, [r8, #4]
   d4e40:	9301      	str	r3, [sp, #4]
   d4e42:	9300      	str	r3, [sp, #0]
   d4e44:	461a      	mov	r2, r3
   d4e46:	2101      	movs	r1, #1
   d4e48:	f7ff fd2c 	bl	d48a4 <HAL_SPI_Set_Settings>
   d4e4c:	e002      	b.n	d4e54 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
    if (!settings.default_) {
      uint8_t divisor = 0;
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);

      if (!(current <= settings && clock == current.clock_)) {
   d4e4e:	9b04      	ldr	r3, [sp, #16]
   d4e50:	42b3      	cmp	r3, r6
   d4e52:	d1db      	bne.n	d4e0c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
    }
  }

  return 0;
}
   d4e54:	2000      	movs	r0, #0
   d4e56:	b00f      	add	sp, #60	; 0x3c
   d4e58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4e5c <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d4e5c:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   d4e5e:	7900      	ldrb	r0, [r0, #4]
   d4e60:	f7ff fd00 	bl	d4864 <HAL_SPI_Send_Receive_Data>
}
   d4e64:	b2c0      	uxtb	r0, r0
   d4e66:	bd08      	pop	{r3, pc}

000d4e68 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d4e68:	7900      	ldrb	r0, [r0, #4]
   d4e6a:	f7ff bd0b 	b.w	d4884 <HAL_SPI_Is_Enabled>
	...

000d4e70 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4e70:	4b04      	ldr	r3, [pc, #16]	; (d4e84 <_GLOBAL__sub_I_System+0x14>)
   d4e72:	2000      	movs	r0, #0
   d4e74:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4e78:	7018      	strb	r0, [r3, #0]
   d4e7a:	8058      	strh	r0, [r3, #2]
   d4e7c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4e7e:	f7ff be21 	b.w	d4ac4 <set_system_mode>
   d4e82:	bf00      	nop
   d4e84:	2003e3a8 	.word	0x2003e3a8

000d4e88 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d4e88:	b510      	push	{r4, lr}
   d4e8a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d4e8c:	f002 fd3d 	bl	d790a <strlen>
   d4e90:	3801      	subs	r0, #1
   d4e92:	1823      	adds	r3, r4, r0
   d4e94:	4620      	mov	r0, r4
	while(i<j){
   d4e96:	4298      	cmp	r0, r3
   d4e98:	d206      	bcs.n	d4ea8 <_Z11str_reversePc+0x20>
		c = *i;
   d4e9a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d4e9c:	7819      	ldrb	r1, [r3, #0]
   d4e9e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d4ea2:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d4ea6:	e7f6      	b.n	d4e96 <_Z11str_reversePc+0xe>
   d4ea8:	bd10      	pop	{r4, pc}

000d4eaa <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4eaa:	b570      	push	{r4, r5, r6, lr}
   d4eac:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d4eae:	1e91      	subs	r1, r2, #2
   d4eb0:	2922      	cmp	r1, #34	; 0x22
   d4eb2:	d820      	bhi.n	d4ef6 <ultoa+0x4c>
   d4eb4:	4625      	mov	r5, r4
   d4eb6:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4eb8:	b910      	cbnz	r0, d4ec0 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4eba:	4423      	add	r3, r4
            *ptr++ = '0';
   d4ebc:	2230      	movs	r2, #48	; 0x30
   d4ebe:	e00e      	b.n	d4ede <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d4ec0:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d4ec4:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d4ec8:	b2c1      	uxtb	r1, r0
   d4eca:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d4ece:	2809      	cmp	r0, #9
                *ptr += '0';
   d4ed0:	bf94      	ite	ls
   d4ed2:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d4ed4:	3157      	addhi	r1, #87	; 0x57
   d4ed6:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d4eda:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4edc:	e7eb      	b.n	d4eb6 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4ede:	4299      	cmp	r1, r3
   d4ee0:	d202      	bcs.n	d4ee8 <ultoa+0x3e>
            *ptr++ = '0';
   d4ee2:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4ee6:	e7fa      	b.n	d4ede <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d4ee8:	2300      	movs	r3, #0
	str_reverse(buffer);
   d4eea:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d4eec:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d4eee:	f7ff ffcb 	bl	d4e88 <_Z11str_reversePc>
	return buffer;
   d4ef2:	4620      	mov	r0, r4
   d4ef4:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d4ef6:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d4ef8:	bd70      	pop	{r4, r5, r6, pc}

000d4efa <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4efa:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d4efc:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4efe:	460c      	mov	r4, r1
   d4f00:	4615      	mov	r5, r2
	if(a<0){
   d4f02:	da0b      	bge.n	d4f1c <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d4f04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d4f08:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d4f0c:	bf14      	ite	ne
   d4f0e:	4258      	negne	r0, r3
   d4f10:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d4f12:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d4f14:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d4f16:	462a      	mov	r2, r5
   d4f18:	4419      	add	r1, r3
   d4f1a:	e000      	b.n	d4f1e <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d4f1c:	2301      	movs	r3, #1
   d4f1e:	f7ff ffc4 	bl	d4eaa <ultoa>
	}
	return buffer;
}
   d4f22:	4620      	mov	r0, r4
   d4f24:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4f28 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d4f28:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4f2c:	ec59 8b10 	vmov	r8, r9, d0
   d4f30:	4607      	mov	r7, r0
   d4f32:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d4f34:	2200      	movs	r2, #0
   d4f36:	2300      	movs	r3, #0
   d4f38:	ee10 0a10 	vmov	r0, s0
   d4f3c:	4649      	mov	r1, r9
   d4f3e:	f002 fa3d 	bl	d73bc <__aeabi_dcmplt>
   d4f42:	b128      	cbz	r0, d4f50 <_Z4dtoadhPc+0x28>
        val = -val;
   d4f44:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d4f48:	4699      	mov	r9, r3
        *sout++ = '-';
   d4f4a:	232d      	movs	r3, #45	; 0x2d
   d4f4c:	7033      	strb	r3, [r6, #0]
   d4f4e:	3601      	adds	r6, #1
   d4f50:	2300      	movs	r3, #0
    }
    long scale = 1;
   d4f52:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d4f54:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d4f56:	b2d9      	uxtb	r1, r3
   d4f58:	428f      	cmp	r7, r1
   d4f5a:	d902      	bls.n	d4f62 <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d4f5c:	4354      	muls	r4, r2
   d4f5e:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d4f60:	e7f9      	b.n	d4f56 <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d4f62:	4620      	mov	r0, r4
   d4f64:	f001 ff52 	bl	d6e0c <__aeabi_i2d>
   d4f68:	4642      	mov	r2, r8
   d4f6a:	464b      	mov	r3, r9
   d4f6c:	f001 ffb4 	bl	d6ed8 <__aeabi_dmul>
   d4f70:	4682      	mov	sl, r0
   d4f72:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d4f74:	f002 fac0 	bl	d74f8 <__aeabi_d2ulz>
   d4f78:	4680      	mov	r8, r0
   d4f7a:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d4f7c:	f001 ff76 	bl	d6e6c <__aeabi_ul2d>
   d4f80:	4602      	mov	r2, r0
   d4f82:	460b      	mov	r3, r1
   d4f84:	4650      	mov	r0, sl
   d4f86:	4659      	mov	r1, fp
   d4f88:	f001 fdf2 	bl	d6b70 <__aeabi_dsub>
   d4f8c:	2200      	movs	r2, #0
   d4f8e:	4b17      	ldr	r3, [pc, #92]	; (d4fec <_Z4dtoadhPc+0xc4>)
   d4f90:	f002 fa28 	bl	d73e4 <__aeabi_dcmpge>
   d4f94:	b118      	cbz	r0, d4f9e <_Z4dtoadhPc+0x76>
        fixed++;
   d4f96:	f118 0801 	adds.w	r8, r8, #1
   d4f9a:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d4f9e:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d4fa0:	4622      	mov	r2, r4
   d4fa2:	462b      	mov	r3, r5
   d4fa4:	4640      	mov	r0, r8
   d4fa6:	4649      	mov	r1, r9
   d4fa8:	f002 fa8e 	bl	d74c8 <__aeabi_uldivmod>
   d4fac:	2301      	movs	r3, #1
   d4fae:	220a      	movs	r2, #10
   d4fb0:	4631      	mov	r1, r6
   d4fb2:	f7ff ff7a 	bl	d4eaa <ultoa>
    if (prec) {
   d4fb6:	b1af      	cbz	r7, d4fe4 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d4fb8:	4630      	mov	r0, r6
   d4fba:	f002 fca6 	bl	d790a <strlen>
        *sout++ = '.';
   d4fbe:	232e      	movs	r3, #46	; 0x2e
   d4fc0:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d4fc2:	3001      	adds	r0, #1
   d4fc4:	4406      	add	r6, r0
   d4fc6:	4622      	mov	r2, r4
   d4fc8:	462b      	mov	r3, r5
   d4fca:	4640      	mov	r0, r8
   d4fcc:	4649      	mov	r1, r9
   d4fce:	f002 fa7b 	bl	d74c8 <__aeabi_uldivmod>
   d4fd2:	463b      	mov	r3, r7
   d4fd4:	4610      	mov	r0, r2
   d4fd6:	4631      	mov	r1, r6
   d4fd8:	220a      	movs	r2, #10
    }
}
   d4fda:	b001      	add	sp, #4
   d4fdc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d4fe0:	f7ff bf63 	b.w	d4eaa <ultoa>
    }
}
   d4fe4:	b001      	add	sp, #4
   d4fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4fea:	bf00      	nop
   d4fec:	3fe00000 	.word	0x3fe00000

000d4ff0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4ff0:	b510      	push	{r4, lr}
   d4ff2:	4604      	mov	r4, r0
{
	free(buffer);
   d4ff4:	6800      	ldr	r0, [r0, #0]
   d4ff6:	f7ff fe19 	bl	d4c2c <free>
}
   d4ffa:	4620      	mov	r0, r4
   d4ffc:	bd10      	pop	{r4, pc}

000d4ffe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4ffe:	b510      	push	{r4, lr}
   d5000:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5002:	6800      	ldr	r0, [r0, #0]
   d5004:	b108      	cbz	r0, d500a <_ZN6String10invalidateEv+0xc>
   d5006:	f7ff fe11 	bl	d4c2c <free>
	buffer = NULL;
   d500a:	2300      	movs	r3, #0
   d500c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d500e:	60a3      	str	r3, [r4, #8]
   d5010:	6063      	str	r3, [r4, #4]
   d5012:	bd10      	pop	{r4, pc}

000d5014 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5014:	b538      	push	{r3, r4, r5, lr}
   d5016:	4604      	mov	r4, r0
   d5018:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d501a:	6800      	ldr	r0, [r0, #0]
   d501c:	3101      	adds	r1, #1
   d501e:	f7ff fe0d 	bl	d4c3c <realloc>
	if (newbuffer) {
   d5022:	b110      	cbz	r0, d502a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5024:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5028:	2001      	movs	r0, #1
	}
	return 0;
}
   d502a:	bd38      	pop	{r3, r4, r5, pc}

000d502c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d502c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d502e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5030:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5032:	b113      	cbz	r3, d503a <_ZN6String7reserveEj+0xe>
   d5034:	6843      	ldr	r3, [r0, #4]
   d5036:	428b      	cmp	r3, r1
   d5038:	d207      	bcs.n	d504a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d503a:	4620      	mov	r0, r4
   d503c:	f7ff ffea 	bl	d5014 <_ZN6String12changeBufferEj>
   d5040:	b120      	cbz	r0, d504c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5042:	68a3      	ldr	r3, [r4, #8]
   d5044:	b90b      	cbnz	r3, d504a <_ZN6String7reserveEj+0x1e>
   d5046:	6822      	ldr	r2, [r4, #0]
   d5048:	7013      	strb	r3, [r2, #0]
   d504a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d504c:	bd10      	pop	{r4, pc}

000d504e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d504e:	b570      	push	{r4, r5, r6, lr}
   d5050:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5052:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5054:	4604      	mov	r4, r0
   d5056:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5058:	f7ff ffe8 	bl	d502c <_ZN6String7reserveEj>
   d505c:	b918      	cbnz	r0, d5066 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d505e:	4620      	mov	r0, r4
   d5060:	f7ff ffcd 	bl	d4ffe <_ZN6String10invalidateEv>
		return *this;
   d5064:	e009      	b.n	d507a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5066:	462a      	mov	r2, r5
   d5068:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d506a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d506c:	6820      	ldr	r0, [r4, #0]
   d506e:	f002 fbed 	bl	d784c <memcpy>
	buffer[len] = 0;
   d5072:	6822      	ldr	r2, [r4, #0]
   d5074:	68a3      	ldr	r3, [r4, #8]
   d5076:	2100      	movs	r1, #0
   d5078:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d507a:	4620      	mov	r0, r4
   d507c:	bd70      	pop	{r4, r5, r6, pc}

000d507e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d507e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5080:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5082:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5084:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5086:	6043      	str	r3, [r0, #4]
	len = 0;
   d5088:	6083      	str	r3, [r0, #8]
	flags = 0;
   d508a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d508c:	460d      	mov	r5, r1
   d508e:	b139      	cbz	r1, d50a0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5090:	4608      	mov	r0, r1
   d5092:	f002 fc3a 	bl	d790a <strlen>
   d5096:	4629      	mov	r1, r5
   d5098:	4602      	mov	r2, r0
   d509a:	4620      	mov	r0, r4
   d509c:	f7ff ffd7 	bl	d504e <_ZN6String4copyEPKcj>
}
   d50a0:	4620      	mov	r0, r4
   d50a2:	bd38      	pop	{r3, r4, r5, pc}

000d50a4 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d50a4:	b538      	push	{r3, r4, r5, lr}
   d50a6:	4605      	mov	r5, r0
	if (buffer) {
   d50a8:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d50aa:	460c      	mov	r4, r1
	if (buffer) {
   d50ac:	b160      	cbz	r0, d50c8 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d50ae:	686a      	ldr	r2, [r5, #4]
   d50b0:	688b      	ldr	r3, [r1, #8]
   d50b2:	429a      	cmp	r2, r3
   d50b4:	d306      	bcc.n	d50c4 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d50b6:	6809      	ldr	r1, [r1, #0]
   d50b8:	f002 fc04 	bl	d78c4 <strcpy>
			len = rhs.len;
   d50bc:	68a3      	ldr	r3, [r4, #8]
   d50be:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d50c0:	2300      	movs	r3, #0
   d50c2:	e00a      	b.n	d50da <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d50c4:	f7ff fdb2 	bl	d4c2c <free>
		}
	}
	buffer = rhs.buffer;
   d50c8:	6823      	ldr	r3, [r4, #0]
   d50ca:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d50cc:	6863      	ldr	r3, [r4, #4]
   d50ce:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d50d0:	68a3      	ldr	r3, [r4, #8]
   d50d2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d50d4:	2300      	movs	r3, #0
   d50d6:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d50d8:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d50da:	60a3      	str	r3, [r4, #8]
   d50dc:	bd38      	pop	{r3, r4, r5, pc}

000d50de <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d50de:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d50e0:	b510      	push	{r4, lr}
   d50e2:	460b      	mov	r3, r1
   d50e4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d50e6:	d007      	beq.n	d50f8 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d50e8:	6809      	ldr	r1, [r1, #0]
   d50ea:	b119      	cbz	r1, d50f4 <_ZN6StringaSERKS_+0x16>
   d50ec:	689a      	ldr	r2, [r3, #8]
   d50ee:	f7ff ffae 	bl	d504e <_ZN6String4copyEPKcj>
   d50f2:	e001      	b.n	d50f8 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d50f4:	f7ff ff83 	bl	d4ffe <_ZN6String10invalidateEv>

	return *this;
}
   d50f8:	4620      	mov	r0, r4
   d50fa:	bd10      	pop	{r4, pc}

000d50fc <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d50fc:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d50fe:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5100:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5102:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5104:	6043      	str	r3, [r0, #4]
	len = 0;
   d5106:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5108:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d510a:	f7ff ffe8 	bl	d50de <_ZN6StringaSERKS_>
}
   d510e:	4620      	mov	r0, r4
   d5110:	bd10      	pop	{r4, pc}

000d5112 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d5112:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d5114:	b510      	push	{r4, lr}
   d5116:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d5118:	d001      	beq.n	d511e <_ZN6StringaSEOS_+0xc>
   d511a:	f7ff ffc3 	bl	d50a4 <_ZN6String4moveERS_>
	return *this;
}
   d511e:	4620      	mov	r0, r4
   d5120:	bd10      	pop	{r4, pc}

000d5122 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5122:	b538      	push	{r3, r4, r5, lr}
   d5124:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5126:	460c      	mov	r4, r1
   d5128:	b141      	cbz	r1, d513c <_ZN6StringaSEPKc+0x1a>
   d512a:	4608      	mov	r0, r1
   d512c:	f002 fbed 	bl	d790a <strlen>
   d5130:	4621      	mov	r1, r4
   d5132:	4602      	mov	r2, r0
   d5134:	4628      	mov	r0, r5
   d5136:	f7ff ff8a 	bl	d504e <_ZN6String4copyEPKcj>
   d513a:	e001      	b.n	d5140 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d513c:	f7ff ff5f 	bl	d4ffe <_ZN6String10invalidateEv>

	return *this;
}
   d5140:	4628      	mov	r0, r5
   d5142:	bd38      	pop	{r3, r4, r5, pc}

000d5144 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5144:	b510      	push	{r4, lr}
   d5146:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5148:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d514a:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d514c:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d514e:	6063      	str	r3, [r4, #4]
	len = 0;
   d5150:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5152:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5154:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d5156:	a901      	add	r1, sp, #4
   d5158:	f7ff fecf 	bl	d4efa <itoa>
	*this = buf;
   d515c:	a901      	add	r1, sp, #4
   d515e:	4620      	mov	r0, r4
   d5160:	f7ff ffdf 	bl	d5122 <_ZN6StringaSEPKc>
}
   d5164:	4620      	mov	r0, r4
   d5166:	b00a      	add	sp, #40	; 0x28
   d5168:	bd10      	pop	{r4, pc}

000d516a <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d516a:	b530      	push	{r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d516c:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d516e:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5170:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5172:	6043      	str	r3, [r0, #4]
	len = 0;
   d5174:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5176:	7303      	strb	r3, [r0, #12]
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d5178:	4604      	mov	r4, r0
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d517a:	ee10 0a10 	vmov	r0, s0
   d517e:	b2cd      	uxtb	r5, r1
   d5180:	f001 fe56 	bl	d6e30 <__aeabi_f2d>
   d5184:	ec41 0b10 	vmov	d0, r0, r1
   d5188:	a901      	add	r1, sp, #4
   d518a:	4628      	mov	r0, r5
   d518c:	f7ff fecc 	bl	d4f28 <_Z4dtoadhPc>
        *this = buf;
   d5190:	a901      	add	r1, sp, #4
   d5192:	4620      	mov	r0, r4
   d5194:	f7ff ffc5 	bl	d5122 <_ZN6StringaSEPKc>
}
   d5198:	4620      	mov	r0, r4
   d519a:	b00b      	add	sp, #44	; 0x2c
   d519c:	bd30      	pop	{r4, r5, pc}

000d519e <_ZN6StringC1Edi>:

String::String(double value, int decimalPlaces)
   d519e:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d51a0:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d51a2:	b08a      	sub	sp, #40	; 0x28
   d51a4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d51a6:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d51a8:	6043      	str	r3, [r0, #4]
	len = 0;
   d51aa:	6083      	str	r3, [r0, #8]
	flags = 0;
   d51ac:	7303      	strb	r3, [r0, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d51ae:	b2c8      	uxtb	r0, r1
   d51b0:	a901      	add	r1, sp, #4
   d51b2:	f7ff feb9 	bl	d4f28 <_Z4dtoadhPc>
        *this = buf;
   d51b6:	a901      	add	r1, sp, #4
   d51b8:	4620      	mov	r0, r4
   d51ba:	f7ff ffb2 	bl	d5122 <_ZN6StringaSEPKc>
}
   d51be:	4620      	mov	r0, r4
   d51c0:	b00a      	add	sp, #40	; 0x28
   d51c2:	bd10      	pop	{r4, pc}

000d51c4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d51c4:	b570      	push	{r4, r5, r6, lr}
   d51c6:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d51c8:	460e      	mov	r6, r1
   d51ca:	b909      	cbnz	r1, d51d0 <_ZN6String6concatEPKcj+0xc>
   d51cc:	2000      	movs	r0, #0
   d51ce:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d51d0:	b16a      	cbz	r2, d51ee <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d51d2:	6883      	ldr	r3, [r0, #8]
   d51d4:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d51d6:	4629      	mov	r1, r5
   d51d8:	f7ff ff28 	bl	d502c <_ZN6String7reserveEj>
   d51dc:	2800      	cmp	r0, #0
   d51de:	d0f5      	beq.n	d51cc <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d51e0:	6820      	ldr	r0, [r4, #0]
   d51e2:	68a3      	ldr	r3, [r4, #8]
   d51e4:	4631      	mov	r1, r6
   d51e6:	4418      	add	r0, r3
   d51e8:	f002 fb6c 	bl	d78c4 <strcpy>
	len = newlen;
   d51ec:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d51ee:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d51f0:	bd70      	pop	{r4, r5, r6, pc}

000d51f2 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d51f2:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d51f4:	688a      	ldr	r2, [r1, #8]
   d51f6:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d51f8:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d51fa:	f7ff ffe3 	bl	d51c4 <_ZN6String6concatEPKcj>
   d51fe:	b910      	cbnz	r0, d5206 <_ZplRK15StringSumHelperRK6String+0x14>
   d5200:	4620      	mov	r0, r4
   d5202:	f7ff fefc 	bl	d4ffe <_ZN6String10invalidateEv>
	return a;
}
   d5206:	4620      	mov	r0, r4
   d5208:	bd10      	pop	{r4, pc}

000d520a <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d520a:	b538      	push	{r3, r4, r5, lr}
   d520c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d520e:	460d      	mov	r5, r1
   d5210:	b141      	cbz	r1, d5224 <_ZplRK15StringSumHelperPKc+0x1a>
   d5212:	4608      	mov	r0, r1
   d5214:	f002 fb79 	bl	d790a <strlen>
   d5218:	4629      	mov	r1, r5
   d521a:	4602      	mov	r2, r0
   d521c:	4620      	mov	r0, r4
   d521e:	f7ff ffd1 	bl	d51c4 <_ZN6String6concatEPKcj>
   d5222:	b910      	cbnz	r0, d522a <_ZplRK15StringSumHelperPKc+0x20>
   d5224:	4620      	mov	r0, r4
   d5226:	f7ff feea 	bl	d4ffe <_ZN6String10invalidateEv>
	return a;
}
   d522a:	4620      	mov	r0, r4
   d522c:	bd38      	pop	{r3, r4, r5, pc}

000d522e <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d522e:	6800      	ldr	r0, [r0, #0]
   d5230:	b108      	cbz	r0, d5236 <_ZNK6String5toIntEv+0x8>
   d5232:	f002 baf9 	b.w	d7828 <atol>
	return 0;
}
   d5236:	4770      	bx	lr

000d5238 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5238:	680b      	ldr	r3, [r1, #0]
   d523a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d523c:	b113      	cbz	r3, d5244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d523e:	685a      	ldr	r2, [r3, #4]
   d5240:	3201      	adds	r2, #1
   d5242:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5244:	4770      	bx	lr
	...

000d5248 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5248:	4802      	ldr	r0, [pc, #8]	; (d5254 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d524a:	2300      	movs	r3, #0
   d524c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d524e:	f7ff bb71 	b.w	d4934 <os_mutex_recursive_create>
   d5252:	bf00      	nop
   d5254:	2003e3b0 	.word	0x2003e3b0

000d5258 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d525a:	4606      	mov	r6, r0
   d525c:	460d      	mov	r5, r1
   d525e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5260:	2400      	movs	r4, #0
  while (size--) {
   d5262:	42bd      	cmp	r5, r7
   d5264:	d00c      	beq.n	d5280 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5266:	6833      	ldr	r3, [r6, #0]
   d5268:	f815 1b01 	ldrb.w	r1, [r5], #1
   d526c:	689b      	ldr	r3, [r3, #8]
   d526e:	4630      	mov	r0, r6
   d5270:	4798      	blx	r3
     if (chunk>=0)
   d5272:	2800      	cmp	r0, #0
   d5274:	db01      	blt.n	d527a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5276:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5278:	e7f3      	b.n	d5262 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d527a:	2c00      	cmp	r4, #0
   d527c:	bf08      	it	eq
   d527e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5280:	4620      	mov	r0, r4
   d5282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5284 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5284:	b570      	push	{r4, r5, r6, lr}
   d5286:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5288:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d528a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d528c:	b149      	cbz	r1, d52a2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d528e:	f002 fb3c 	bl	d790a <strlen>
   d5292:	682b      	ldr	r3, [r5, #0]
   d5294:	4602      	mov	r2, r0
   d5296:	4621      	mov	r1, r4
   d5298:	4628      	mov	r0, r5
   d529a:	68db      	ldr	r3, [r3, #12]
    }
   d529c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d52a0:	4718      	bx	r3
    }
   d52a2:	bd70      	pop	{r4, r5, r6, pc}

000d52a4 <_ZN5Print5printEPKc>:
   d52a4:	b508      	push	{r3, lr}
   d52a6:	f7ff ffed 	bl	d5284 <_ZN5Print5writeEPKc>
   d52aa:	bd08      	pop	{r3, pc}

000d52ac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d52ac:	6803      	ldr	r3, [r0, #0]
   d52ae:	689b      	ldr	r3, [r3, #8]
   d52b0:	4718      	bx	r3

000d52b2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d52b2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d52b4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d52b6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d52b8:	f7ff fff8 	bl	d52ac <_ZN5Print5printEc>
  n += print('\n');
   d52bc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d52be:	4604      	mov	r4, r0
  n += print('\n');
   d52c0:	4628      	mov	r0, r5
   d52c2:	f7ff fff3 	bl	d52ac <_ZN5Print5printEc>
  return n;
}
   d52c6:	4420      	add	r0, r4
   d52c8:	bd38      	pop	{r3, r4, r5, pc}

000d52ca <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d52ca:	b530      	push	{r4, r5, lr}
   d52cc:	b08b      	sub	sp, #44	; 0x2c
   d52ce:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d52d0:	2100      	movs	r1, #0
   d52d2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d52d6:	2a01      	cmp	r2, #1
   d52d8:	bf98      	it	ls
   d52da:	220a      	movls	r2, #10
   d52dc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d52e0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d52e4:	fb05 3312 	mls	r3, r5, r2, r3
   d52e8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d52ec:	2b09      	cmp	r3, #9
   d52ee:	bf94      	ite	ls
   d52f0:	3330      	addls	r3, #48	; 0x30
   d52f2:	3337      	addhi	r3, #55	; 0x37
   d52f4:	b2db      	uxtb	r3, r3
   d52f6:	4621      	mov	r1, r4
   d52f8:	f804 3901 	strb.w	r3, [r4], #-1
   d52fc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d52fe:	2d00      	cmp	r5, #0
   d5300:	d1ee      	bne.n	d52e0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5302:	f7ff ffbf 	bl	d5284 <_ZN5Print5writeEPKc>
}
   d5306:	b00b      	add	sp, #44	; 0x2c
   d5308:	bd30      	pop	{r4, r5, pc}

000d530a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d530a:	b410      	push	{r4}
  if (base == 0) return write(n);
   d530c:	b92a      	cbnz	r2, d531a <_ZN5Print5printEmi+0x10>
   d530e:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5310:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5314:	689b      	ldr	r3, [r3, #8]
   d5316:	b2c9      	uxtb	r1, r1
   d5318:	4718      	bx	r3
  else return printNumber(n, base);
   d531a:	b2d2      	uxtb	r2, r2
}
   d531c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5320:	f7ff bfd3 	b.w	d52ca <_ZN5Print11printNumberEmh>

000d5324 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5324:	f7ff bff1 	b.w	d530a <_ZN5Print5printEmi>

000d5328 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d5328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d532c:	4607      	mov	r7, r0
   d532e:	460e      	mov	r6, r1
  if (base == 0) {
   d5330:	4615      	mov	r5, r2
   d5332:	b92a      	cbnz	r2, d5340 <_ZN5Print5printEli+0x18>
    return write(n);
   d5334:	6803      	ldr	r3, [r0, #0]
   d5336:	b2c9      	uxtb	r1, r1
   d5338:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d533a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d533e:	4718      	bx	r3
  } else if (base == 10) {
   d5340:	2a0a      	cmp	r2, #10
   d5342:	d102      	bne.n	d534a <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d5344:	2900      	cmp	r1, #0
   d5346:	da01      	bge.n	d534c <_ZN5Print5printEli+0x24>
   d5348:	e004      	b.n	d5354 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d534a:	b2d2      	uxtb	r2, r2
  }
}
   d534c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5350:	f7ff bfbb 	b.w	d52ca <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5354:	212d      	movs	r1, #45	; 0x2d
   d5356:	f7ff ffa9 	bl	d52ac <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d535a:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d535c:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d535e:	4271      	negs	r1, r6
   d5360:	4638      	mov	r0, r7
   d5362:	f7ff ffb2 	bl	d52ca <_ZN5Print11printNumberEmh>
   d5366:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d536c <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d536c:	f7ff bfdc 	b.w	d5328 <_ZN5Print5printEli>

000d5370 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d5370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5374:	ec57 6b10 	vmov	r6, r7, d0
   d5378:	4682      	mov	sl, r0
   d537a:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d537c:	ee10 2a10 	vmov	r2, s0
   d5380:	463b      	mov	r3, r7
   d5382:	ee10 0a10 	vmov	r0, s0
   d5386:	4639      	mov	r1, r7
   d5388:	f002 f840 	bl	d740c <__aeabi_dcmpun>
   d538c:	b108      	cbz	r0, d5392 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d538e:	4948      	ldr	r1, [pc, #288]	; (d54b0 <_ZN5Print10printFloatEdh+0x140>)
   d5390:	e012      	b.n	d53b8 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d5392:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d5396:	f04f 32ff 	mov.w	r2, #4294967295
   d539a:	4b46      	ldr	r3, [pc, #280]	; (d54b4 <_ZN5Print10printFloatEdh+0x144>)
   d539c:	4630      	mov	r0, r6
   d539e:	4649      	mov	r1, r9
   d53a0:	f002 f834 	bl	d740c <__aeabi_dcmpun>
   d53a4:	b968      	cbnz	r0, d53c2 <_ZN5Print10printFloatEdh+0x52>
   d53a6:	f04f 32ff 	mov.w	r2, #4294967295
   d53aa:	4b42      	ldr	r3, [pc, #264]	; (d54b4 <_ZN5Print10printFloatEdh+0x144>)
   d53ac:	4630      	mov	r0, r6
   d53ae:	4649      	mov	r1, r9
   d53b0:	f002 f80e 	bl	d73d0 <__aeabi_dcmple>
   d53b4:	b928      	cbnz	r0, d53c2 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d53b6:	4940      	ldr	r1, [pc, #256]	; (d54b8 <_ZN5Print10printFloatEdh+0x148>)
   d53b8:	4650      	mov	r0, sl
   d53ba:	f7ff ff63 	bl	d5284 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d53be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d53c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d53c6:	4b3d      	ldr	r3, [pc, #244]	; (d54bc <_ZN5Print10printFloatEdh+0x14c>)
   d53c8:	4630      	mov	r0, r6
   d53ca:	4639      	mov	r1, r7
   d53cc:	f002 f814 	bl	d73f8 <__aeabi_dcmpgt>
   d53d0:	b108      	cbz	r0, d53d6 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d53d2:	493b      	ldr	r1, [pc, #236]	; (d54c0 <_ZN5Print10printFloatEdh+0x150>)
   d53d4:	e7f0      	b.n	d53b8 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d53d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d53da:	4b3a      	ldr	r3, [pc, #232]	; (d54c4 <_ZN5Print10printFloatEdh+0x154>)
   d53dc:	4630      	mov	r0, r6
   d53de:	4639      	mov	r1, r7
   d53e0:	f001 ffec 	bl	d73bc <__aeabi_dcmplt>
   d53e4:	2800      	cmp	r0, #0
   d53e6:	d1f4      	bne.n	d53d2 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d53e8:	2200      	movs	r2, #0
   d53ea:	2300      	movs	r3, #0
   d53ec:	4630      	mov	r0, r6
   d53ee:	4639      	mov	r1, r7
   d53f0:	f001 ffe4 	bl	d73bc <__aeabi_dcmplt>
   d53f4:	b140      	cbz	r0, d5408 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d53f6:	212d      	movs	r1, #45	; 0x2d
   d53f8:	4650      	mov	r0, sl
   d53fa:	f7ff ff57 	bl	d52ac <_ZN5Print5printEc>
     number = -number;
   d53fe:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d5402:	4604      	mov	r4, r0
     number = -number;
   d5404:	461f      	mov	r7, r3
   d5406:	e000      	b.n	d540a <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5408:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d540a:	492f      	ldr	r1, [pc, #188]	; (d54c8 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d540c:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5410:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d5412:	fa5f f388 	uxtb.w	r3, r8
   d5416:	429d      	cmp	r5, r3
   d5418:	d906      	bls.n	d5428 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d541a:	2200      	movs	r2, #0
   d541c:	4b2b      	ldr	r3, [pc, #172]	; (d54cc <_ZN5Print10printFloatEdh+0x15c>)
   d541e:	f001 fe85 	bl	d712c <__aeabi_ddiv>
   d5422:	f108 0801 	add.w	r8, r8, #1
   d5426:	e7f4      	b.n	d5412 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d5428:	4632      	mov	r2, r6
   d542a:	463b      	mov	r3, r7
   d542c:	f001 fba2 	bl	d6b74 <__adddf3>
   d5430:	460f      	mov	r7, r1
   d5432:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d5434:	f002 f828 	bl	d7488 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5438:	220a      	movs	r2, #10
   d543a:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d543c:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d543e:	4650      	mov	r0, sl
   d5440:	f7ff ff43 	bl	d52ca <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d5444:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d5446:	b37d      	cbz	r5, d54a8 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d5448:	4640      	mov	r0, r8
   d544a:	f001 fccf 	bl	d6dec <__aeabi_ui2d>
   d544e:	4602      	mov	r2, r0
   d5450:	460b      	mov	r3, r1
   d5452:	4630      	mov	r0, r6
   d5454:	4639      	mov	r1, r7
   d5456:	f001 fb8b 	bl	d6b70 <__aeabi_dsub>
   d545a:	4606      	mov	r6, r0
   d545c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d545e:	4650      	mov	r0, sl
   d5460:	491b      	ldr	r1, [pc, #108]	; (d54d0 <_ZN5Print10printFloatEdh+0x160>)
   d5462:	f7ff ff0f 	bl	d5284 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d5466:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d5468:	4b18      	ldr	r3, [pc, #96]	; (d54cc <_ZN5Print10printFloatEdh+0x15c>)
   d546a:	2200      	movs	r2, #0
   d546c:	4630      	mov	r0, r6
   d546e:	4639      	mov	r1, r7
   d5470:	f001 fd32 	bl	d6ed8 <__aeabi_dmul>
   d5474:	460f      	mov	r7, r1
   d5476:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d5478:	f001 ffde 	bl	d7438 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d547c:	220a      	movs	r2, #10
   d547e:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d5480:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d5482:	4650      	mov	r0, sl
   d5484:	f7ff ff50 	bl	d5328 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d5488:	4404      	add	r4, r0
    remainder -= toPrint;
   d548a:	4640      	mov	r0, r8
   d548c:	f001 fcbe 	bl	d6e0c <__aeabi_i2d>
   d5490:	4602      	mov	r2, r0
   d5492:	460b      	mov	r3, r1
   d5494:	4630      	mov	r0, r6
   d5496:	4639      	mov	r1, r7
   d5498:	f001 fb6a 	bl	d6b70 <__aeabi_dsub>
   d549c:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d549e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d54a2:	4606      	mov	r6, r0
   d54a4:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d54a6:	d1df      	bne.n	d5468 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d54a8:	4620      	mov	r0, r4
   d54aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d54ae:	bf00      	nop
   d54b0:	000d7b68 	.word	0x000d7b68
   d54b4:	7fefffff 	.word	0x7fefffff
   d54b8:	000d7b72 	.word	0x000d7b72
   d54bc:	41efffff 	.word	0x41efffff
   d54c0:	000d7b6c 	.word	0x000d7b6c
   d54c4:	c1efffff 	.word	0xc1efffff
   d54c8:	3fe00000 	.word	0x3fe00000
   d54cc:	40240000 	.word	0x40240000
   d54d0:	000d7b70 	.word	0x000d7b70

000d54d4 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d54d4:	b2c9      	uxtb	r1, r1
   d54d6:	f7ff bf4b 	b.w	d5370 <_ZN5Print10printFloatEdh>

000d54da <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d54da:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d54dc:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d54de:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d54e0:	f7ff ff46 	bl	d5370 <_ZN5Print10printFloatEdh>
   d54e4:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d54e6:	4628      	mov	r0, r5
   d54e8:	f7ff fee3 	bl	d52b2 <_ZN5Print7printlnEv>
  return n;
}
   d54ec:	4420      	add	r0, r4
   d54ee:	bd38      	pop	{r3, r4, r5, pc}

000d54f0 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d54f0:	b40c      	push	{r2, r3}
   d54f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d54f6:	b087      	sub	sp, #28
   d54f8:	af00      	add	r7, sp, #0
   d54fa:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d54fe:	4605      	mov	r5, r0
   d5500:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5504:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5506:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5508:	4623      	mov	r3, r4
   d550a:	464a      	mov	r2, r9
   d550c:	2114      	movs	r1, #20
   d550e:	1d38      	adds	r0, r7, #4
   d5510:	f7ff fb9c 	bl	d4c4c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5514:	2813      	cmp	r0, #19
   d5516:	d805      	bhi.n	d5524 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5518:	1d39      	adds	r1, r7, #4
   d551a:	4628      	mov	r0, r5
   d551c:	f7ff feb2 	bl	d5284 <_ZN5Print5writeEPKc>
   d5520:	4604      	mov	r4, r0
   d5522:	e013      	b.n	d554c <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5524:	f100 0308 	add.w	r3, r0, #8
   d5528:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d552c:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d552e:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5532:	1c41      	adds	r1, r0, #1
   d5534:	4623      	mov	r3, r4
   d5536:	464a      	mov	r2, r9
   d5538:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d553a:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d553c:	f7ff fb86 	bl	d4c4c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5540:	4669      	mov	r1, sp
   d5542:	4628      	mov	r0, r5
   d5544:	f7ff fe9e 	bl	d5284 <_ZN5Print5writeEPKc>
   d5548:	4604      	mov	r4, r0
   d554a:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d554c:	b11e      	cbz	r6, d5556 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d554e:	4628      	mov	r0, r5
   d5550:	f7ff feaf 	bl	d52b2 <_ZN5Print7printlnEv>
   d5554:	4404      	add	r4, r0
    return n;
}
   d5556:	4620      	mov	r0, r4
   d5558:	371c      	adds	r7, #28
   d555a:	46bd      	mov	sp, r7
   d555c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5560:	b002      	add	sp, #8
   d5562:	4770      	bx	lr

000d5564 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5564:	4b01      	ldr	r3, [pc, #4]	; (d556c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5566:	4a02      	ldr	r2, [pc, #8]	; (d5570 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5568:	601a      	str	r2, [r3, #0]
   d556a:	4770      	bx	lr
   d556c:	2003e3b4 	.word	0x2003e3b4
   d5570:	000d7be9 	.word	0x000d7be9

000d5574 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5574:	4b02      	ldr	r3, [pc, #8]	; (d5580 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5576:	681a      	ldr	r2, [r3, #0]
   d5578:	4b02      	ldr	r3, [pc, #8]	; (d5584 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d557a:	601a      	str	r2, [r3, #0]
   d557c:	4770      	bx	lr
   d557e:	bf00      	nop
   d5580:	2003e240 	.word	0x2003e240
   d5584:	2003e3b8 	.word	0x2003e3b8

000d5588 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5588:	2100      	movs	r1, #0
   d558a:	f7ff baa3 	b.w	d4ad4 <system_delay_ms>

000d558e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d558e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5590:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5592:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5594:	b113      	cbz	r3, d559c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5596:	2203      	movs	r2, #3
   d5598:	4601      	mov	r1, r0
   d559a:	4798      	blx	r3
    }
   d559c:	4620      	mov	r0, r4
   d559e:	bd10      	pop	{r4, pc}

000d55a0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d55a0:	b510      	push	{r4, lr}
   d55a2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d55a4:	f7ff fff3 	bl	d558e <_ZNSt14_Function_baseD1Ev>
   d55a8:	4620      	mov	r0, r4
   d55aa:	bd10      	pop	{r4, pc}

000d55ac <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d55ac:	b513      	push	{r0, r1, r4, lr}
   d55ae:	460b      	mov	r3, r1
   d55b0:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55b2:	c803      	ldmia	r0, {r0, r1}
   d55b4:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d55b8:	e893 0003 	ldmia.w	r3, {r0, r1}
   d55bc:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d55c0:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d55c4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d55c8:	b002      	add	sp, #8
   d55ca:	bd10      	pop	{r4, pc}

000d55cc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d55cc:	4803      	ldr	r0, [pc, #12]	; (d55dc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d55ce:	4a04      	ldr	r2, [pc, #16]	; (d55e0 <_GLOBAL__sub_I_RGB+0x14>)
   d55d0:	4904      	ldr	r1, [pc, #16]	; (d55e4 <_GLOBAL__sub_I_RGB+0x18>)
   d55d2:	2300      	movs	r3, #0
   d55d4:	6083      	str	r3, [r0, #8]
   d55d6:	f001 b843 	b.w	d6660 <__aeabi_atexit>
   d55da:	bf00      	nop
   d55dc:	2003e3bc 	.word	0x2003e3bc
   d55e0:	2003e2b0 	.word	0x2003e2b0
   d55e4:	000d55a1 	.word	0x000d55a1

000d55e8 <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d55e8:	4770      	bx	lr

000d55ea <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d55ea:	7d00      	ldrb	r0, [r0, #20]
   d55ec:	4770      	bx	lr
	...

000d55f0 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d55f0:	7d03      	ldrb	r3, [r0, #20]
   d55f2:	b11b      	cbz	r3, d55fc <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d55f4:	6983      	ldr	r3, [r0, #24]
   d55f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d55fa:	d102      	bne.n	d5602 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d55fc:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5614 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d5600:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d5602:	ee07 3a90 	vmov	s15, r3
   d5606:	ed9f 7a04 	vldr	s14, [pc, #16]	; d5618 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d560a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d560e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d5612:	4770      	bx	lr
   d5614:	00000000 	.word	0x00000000
   d5618:	42c80000 	.word	0x42c80000

000d561c <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d561c:	7d03      	ldrb	r3, [r0, #20]
   d561e:	b11b      	cbz	r3, d5628 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d5620:	6a03      	ldr	r3, [r0, #32]
   d5622:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d5626:	d102      	bne.n	d562e <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d5628:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5640 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d562c:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d562e:	ee07 3a90 	vmov	s15, r3
   d5632:	ed9f 7a04 	vldr	s14, [pc, #16]	; d5644 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d5636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d563a:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d563e:	4770      	bx	lr
   d5640:	00000000 	.word	0x00000000
   d5644:	42c80000 	.word	0x42c80000

000d5648 <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
   d5648:	b570      	push	{r4, r5, r6, lr}
   d564a:	460d      	mov	r5, r1
   d564c:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d564e:	220a      	movs	r2, #10
   d5650:	6881      	ldr	r1, [r0, #8]
   d5652:	4628      	mov	r0, r5
   d5654:	f7ff fe8a 	bl	d536c <_ZN5Print5printEii>
    n += p.print(',');
   d5658:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d565a:	4604      	mov	r4, r0
    n += p.print(',');
   d565c:	4628      	mov	r0, r5
   d565e:	f7ff fe25 	bl	d52ac <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d5662:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d5664:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d5666:	68f1      	ldr	r1, [r6, #12]
   d5668:	4628      	mov	r0, r5
   d566a:	f7ff fe7f 	bl	d536c <_ZN5Print5printEii>
    return n;
}
   d566e:	4420      	add	r0, r4
   d5670:	bd70      	pop	{r4, r5, r6, pc}

000d5672 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d5672:	f1a0 0004 	sub.w	r0, r0, #4
   d5676:	f7ff bfe7 	b.w	d5648 <_ZNK14CellularSignal7printToER5Print>

000d567a <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d567a:	b510      	push	{r4, lr}
   d567c:	2128      	movs	r1, #40	; 0x28
   d567e:	4604      	mov	r4, r0
   d5680:	f000 fff3 	bl	d666a <_ZdlPvj>
   d5684:	4620      	mov	r0, r4
   d5686:	bd10      	pop	{r4, pc}

000d5688 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d5688:	7d03      	ldrb	r3, [r0, #20]
   d568a:	b17b      	cbz	r3, d56ac <_ZNK14CellularSignal10getQualityEv+0x24>
   d568c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d568e:	2b00      	cmp	r3, #0
   d5690:	db0c      	blt.n	d56ac <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d5692:	ee07 3a90 	vmov	s15, r3
   d5696:	eddf 6a07 	vldr	s13, [pc, #28]	; d56b4 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d569a:	ed9f 0a07 	vldr	s0, [pc, #28]	; d56b8 <_ZNK14CellularSignal10getQualityEv+0x30>
   d569e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d56a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d56a6:	ee27 0a80 	vmul.f32	s0, s15, s0
   d56aa:	4770      	bx	lr
    }

    return -1.0f;
   d56ac:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d56b0:	4770      	bx	lr
   d56b2:	bf00      	nop
   d56b4:	477fff00 	.word	0x477fff00
   d56b8:	42c80000 	.word	0x42c80000

000d56bc <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d56bc:	7d03      	ldrb	r3, [r0, #20]
   d56be:	b17b      	cbz	r3, d56e0 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d56c0:	69c3      	ldr	r3, [r0, #28]
   d56c2:	2b00      	cmp	r3, #0
   d56c4:	db0c      	blt.n	d56e0 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d56c6:	ee07 3a90 	vmov	s15, r3
   d56ca:	eddf 6a07 	vldr	s13, [pc, #28]	; d56e8 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d56ce:	ed9f 0a07 	vldr	s0, [pc, #28]	; d56ec <_ZNK14CellularSignal11getStrengthEv+0x30>
   d56d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d56d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d56da:	ee27 0a80 	vmul.f32	s0, s15, s0
   d56de:	4770      	bx	lr
    }

    return -1.0f;
   d56e0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d56e4:	4770      	bx	lr
   d56e6:	bf00      	nop
   d56e8:	477fff00 	.word	0x477fff00
   d56ec:	42c80000 	.word	0x42c80000

000d56f0 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d56f0:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d56f2:	460d      	mov	r5, r1
   d56f4:	f100 0410 	add.w	r4, r0, #16
   d56f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d56fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d56fc:	e895 0003 	ldmia.w	r5, {r0, r1}
   d5700:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d5704:	2001      	movs	r0, #1
   d5706:	bd30      	pop	{r4, r5, pc}

000d5708 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5708:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d570a:	4b0c      	ldr	r3, [pc, #48]	; (d573c <serialEventRun+0x34>)
   d570c:	b133      	cbz	r3, d571c <serialEventRun+0x14>
   d570e:	f000 fc29 	bl	d5f64 <_Z16_fetch_usbserialv>
   d5712:	6803      	ldr	r3, [r0, #0]
   d5714:	691b      	ldr	r3, [r3, #16]
   d5716:	4798      	blx	r3
   d5718:	2800      	cmp	r0, #0
   d571a:	dc09      	bgt.n	d5730 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d571c:	4b08      	ldr	r3, [pc, #32]	; (d5740 <serialEventRun+0x38>)
   d571e:	b163      	cbz	r3, d573a <serialEventRun+0x32>
   d5720:	f000 fd28 	bl	d6174 <_Z22__fetch_global_Serial1v>
   d5724:	6803      	ldr	r3, [r0, #0]
   d5726:	691b      	ldr	r3, [r3, #16]
   d5728:	4798      	blx	r3
   d572a:	2800      	cmp	r0, #0
   d572c:	dc03      	bgt.n	d5736 <serialEventRun+0x2e>
   d572e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5730:	f3af 8000 	nop.w
   d5734:	e7f2      	b.n	d571c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5736:	f3af 8000 	nop.w
   d573a:	bd08      	pop	{r3, pc}
	...

000d5744 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5744:	b508      	push	{r3, lr}
	serialEventRun();
   d5746:	f7ff ffdf 	bl	d5708 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d574a:	f7ff f8bb 	bl	d48c4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d574e:	4b01      	ldr	r3, [pc, #4]	; (d5754 <_post_loop+0x10>)
   d5750:	6018      	str	r0, [r3, #0]
   d5752:	bd08      	pop	{r3, pc}
   d5754:	2003e734 	.word	0x2003e734

000d5758 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5758:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d575a:	2300      	movs	r3, #0
   d575c:	9300      	str	r3, [sp, #0]
   d575e:	461a      	mov	r2, r3
   d5760:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5764:	f7ff f9d8 	bl	d4b18 <system_ctrl_set_result>
}
   d5768:	b003      	add	sp, #12
   d576a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5770 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5770:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5772:	8843      	ldrh	r3, [r0, #2]
   d5774:	2b0a      	cmp	r3, #10
   d5776:	d008      	beq.n	d578a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5778:	2b50      	cmp	r3, #80	; 0x50
   d577a:	d109      	bne.n	d5790 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d577c:	4b09      	ldr	r3, [pc, #36]	; (d57a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d577e:	681b      	ldr	r3, [r3, #0]
   d5780:	b13b      	cbz	r3, d5792 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5782:	b003      	add	sp, #12
   d5784:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5788:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d578a:	f7ff ffe5 	bl	d5758 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d578e:	e006      	b.n	d579e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5790:	2300      	movs	r3, #0
   d5792:	9300      	str	r3, [sp, #0]
   d5794:	461a      	mov	r2, r3
   d5796:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d579a:	f7ff f9bd 	bl	d4b18 <system_ctrl_set_result>
        break;
    }
}
   d579e:	b003      	add	sp, #12
   d57a0:	f85d fb04 	ldr.w	pc, [sp], #4
   d57a4:	2003e3cc 	.word	0x2003e3cc

000d57a8 <module_user_init_hook>:

void module_user_init_hook()
{
   d57a8:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d57aa:	f7ff f883 	bl	d48b4 <HAL_RNG_GetRandomNumber>
   d57ae:	4604      	mov	r4, r0
    srand(seed);
   d57b0:	f002 f860 	bl	d7874 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d57b4:	4b07      	ldr	r3, [pc, #28]	; (d57d4 <module_user_init_hook+0x2c>)
   d57b6:	b113      	cbz	r3, d57be <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d57b8:	4620      	mov	r0, r4
   d57ba:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d57be:	2100      	movs	r1, #0
   d57c0:	4804      	ldr	r0, [pc, #16]	; (d57d4 <module_user_init_hook+0x2c>)
   d57c2:	f7ff fa23 	bl	d4c0c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d57c6:	2100      	movs	r1, #0
   d57c8:	4803      	ldr	r0, [pc, #12]	; (d57d8 <module_user_init_hook+0x30>)
}
   d57ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d57ce:	f7ff b999 	b.w	d4b04 <system_ctrl_set_app_request_handler>
   d57d2:	bf00      	nop
   d57d4:	00000000 	.word	0x00000000
   d57d8:	000d5771 	.word	0x000d5771

000d57dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d57dc:	4770      	bx	lr

000d57de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d57de:	2000      	movs	r0, #0
   d57e0:	4770      	bx	lr

000d57e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d57e2:	b510      	push	{r4, lr}
   d57e4:	2110      	movs	r1, #16
   d57e6:	4604      	mov	r4, r0
   d57e8:	f000 ff3f 	bl	d666a <_ZdlPvj>
   d57ec:	4620      	mov	r0, r4
   d57ee:	bd10      	pop	{r4, pc}

000d57f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d57f0:	b508      	push	{r3, lr}
      { delete this; }
   d57f2:	b108      	cbz	r0, d57f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d57f4:	f7ff fff5 	bl	d57e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d57f8:	bd08      	pop	{r3, pc}

000d57fa <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d57fa:	2200      	movs	r2, #0
   d57fc:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d57fe:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5800:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5804:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5806:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d580a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d580c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d580e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5810:	680c      	ldr	r4, [r1, #0]
   d5812:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5814:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d5816:	bd10      	pop	{r4, pc}

000d5818 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5818:	b510      	push	{r4, lr}
   d581a:	4604      	mov	r4, r0
    free((void*)msg_);
   d581c:	6800      	ldr	r0, [r0, #0]
   d581e:	f7ff fa05 	bl	d4c2c <free>
}
   d5822:	4620      	mov	r0, r4
   d5824:	bd10      	pop	{r4, pc}

000d5826 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5826:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5828:	68c4      	ldr	r4, [r0, #12]
   d582a:	b1f4      	cbz	r4, d586a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d582c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d582e:	2b02      	cmp	r3, #2
   d5830:	d103      	bne.n	d583a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5832:	f104 000c 	add.w	r0, r4, #12
   d5836:	f7ff ffef 	bl	d5818 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d583a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d583c:	b135      	cbz	r5, d584c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d583e:	4628      	mov	r0, r5
   d5840:	f7ff fea5 	bl	d558e <_ZNSt14_Function_baseD1Ev>
   d5844:	2110      	movs	r1, #16
   d5846:	4628      	mov	r0, r5
   d5848:	f000 ff0f 	bl	d666a <_ZdlPvj>
   d584c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d584e:	b135      	cbz	r5, d585e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5850:	4628      	mov	r0, r5
   d5852:	f7ff fe9c 	bl	d558e <_ZNSt14_Function_baseD1Ev>
   d5856:	2110      	movs	r1, #16
   d5858:	4628      	mov	r0, r5
   d585a:	f000 ff06 	bl	d666a <_ZdlPvj>
   d585e:	4620      	mov	r0, r4
   d5860:	2114      	movs	r1, #20
   d5862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5866:	f000 bf00 	b.w	d666a <_ZdlPvj>
   d586a:	bd38      	pop	{r3, r4, r5, pc}

000d586c <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d586c:	b510      	push	{r4, lr}
   d586e:	b088      	sub	sp, #32
   d5870:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5872:	4668      	mov	r0, sp
   d5874:	f7ff fc03 	bl	d507e <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d5878:	4669      	mov	r1, sp
   d587a:	a804      	add	r0, sp, #16
   d587c:	f7ff fc3e 	bl	d50fc <_ZN6StringC1ERKS_>
   d5880:	a804      	add	r0, sp, #16
   d5882:	47a0      	blx	r4
   d5884:	4604      	mov	r4, r0
   d5886:	a804      	add	r0, sp, #16
   d5888:	f7ff fbb2 	bl	d4ff0 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d588c:	4668      	mov	r0, sp
   d588e:	f7ff fbaf 	bl	d4ff0 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d5892:	4620      	mov	r0, r4
   d5894:	b008      	add	sp, #32
   d5896:	bd10      	pop	{r4, pc}

000d5898 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d5898:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d589a:	2410      	movs	r4, #16
   d589c:	b085      	sub	sp, #20
   d589e:	4607      	mov	r7, r0
   d58a0:	460e      	mov	r6, r1
   d58a2:	4615      	mov	r5, r2
   d58a4:	2100      	movs	r1, #0
   d58a6:	4622      	mov	r2, r4
   d58a8:	4668      	mov	r0, sp
   d58aa:	f001 ffda 	bl	d7862 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d58ae:	2200      	movs	r2, #0
   d58b0:	4669      	mov	r1, sp
   d58b2:	4610      	mov	r0, r2
         size = sizeof(*this);
   d58b4:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d58b8:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d58ba:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d58bc:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d58be:	f7ff f98d 	bl	d4bdc <spark_function>
}
   d58c2:	b005      	add	sp, #20
   d58c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d58c6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d58c6:	b513      	push	{r0, r1, r4, lr}
   d58c8:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d58ca:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d58ce:	2300      	movs	r3, #0
   d58d0:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d58d2:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d58d4:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d58d6:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d58d8:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d58da:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d58dc:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d58de:	f7fe fc03 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d58e2:	4620      	mov	r0, r4
   d58e4:	b002      	add	sp, #8
   d58e6:	bd10      	pop	{r4, pc}

000d58e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d58e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d58ea:	460c      	mov	r4, r1
   d58ec:	ad02      	add	r5, sp, #8
   d58ee:	f854 3b04 	ldr.w	r3, [r4], #4
   d58f2:	f845 3d08 	str.w	r3, [r5, #-8]!
   d58f6:	4606      	mov	r6, r0
   d58f8:	460f      	mov	r7, r1
   d58fa:	a801      	add	r0, sp, #4
   d58fc:	4621      	mov	r1, r4
   d58fe:	f7ff fc9b 	bl	d5238 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5902:	4629      	mov	r1, r5
   d5904:	4630      	mov	r0, r6
   d5906:	f7ff ffde 	bl	d58c6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d590a:	a801      	add	r0, sp, #4
   d590c:	f7fe fbec 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5910:	4620      	mov	r0, r4
   d5912:	f7fe fbe9 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5916:	4638      	mov	r0, r7
   d5918:	2108      	movs	r1, #8
   d591a:	f000 fea6 	bl	d666a <_ZdlPvj>
        return p;
    }
   d591e:	4630      	mov	r0, r6
   d5920:	b003      	add	sp, #12
   d5922:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5924:	b538      	push	{r3, r4, r5, lr}
   d5926:	2300      	movs	r3, #0
   d5928:	4604      	mov	r4, r0
   d592a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d592c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d592e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5930:	f7fe fbb3 	bl	d409a <_Znwj>
   d5934:	b128      	cbz	r0, d5942 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5936:	2301      	movs	r3, #1
   d5938:	6043      	str	r3, [r0, #4]
   d593a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d593c:	4b02      	ldr	r3, [pc, #8]	; (d5948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d593e:	6003      	str	r3, [r0, #0]
   d5940:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5942:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d5944:	4620      	mov	r0, r4
   d5946:	bd38      	pop	{r3, r4, r5, pc}
   d5948:	000d7cbc 	.word	0x000d7cbc

000d594c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d594c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d594e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5950:	b90a      	cbnz	r2, d5956 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5952:	f000 fe8c 	bl	d666e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5956:	68c3      	ldr	r3, [r0, #12]
    }
   d5958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d595c:	4718      	bx	r3

000d595e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d595e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5960:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5962:	f100 0110 	add.w	r1, r0, #16
   d5966:	f7ff fff1 	bl	d594c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d596a:	bd08      	pop	{r3, pc}

000d596c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d596c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d596e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5970:	b90a      	cbnz	r2, d5976 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5972:	f000 fe7c 	bl	d666e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5976:	68c3      	ldr	r3, [r0, #12]
    }
   d5978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d597c:	4718      	bx	r3

000d597e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d597e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5980:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5982:	f100 0110 	add.w	r1, r0, #16
   d5986:	f7ff fff1 	bl	d596c <_ZNKSt8functionIFvRKbEEclES1_>
   d598a:	bd08      	pop	{r3, pc}

000d598c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d598c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d598e:	2300      	movs	r3, #0
   d5990:	6083      	str	r3, [r0, #8]
   d5992:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5994:	4604      	mov	r4, r0
   d5996:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5998:	b12b      	cbz	r3, d59a6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d599a:	2202      	movs	r2, #2
   d599c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d599e:	68eb      	ldr	r3, [r5, #12]
   d59a0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d59a2:	68ab      	ldr	r3, [r5, #8]
   d59a4:	60a3      	str	r3, [r4, #8]
	}
    }
   d59a6:	4620      	mov	r0, r4
   d59a8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d59ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d59ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   d59ae:	b089      	sub	sp, #36	; 0x24
   d59b0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d59b2:	4668      	mov	r0, sp
   d59b4:	f7ff ff21 	bl	d57fa <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d59b8:	2300      	movs	r3, #0
   d59ba:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d59be:	f04f 0202 	mov.w	r2, #2
   d59c2:	e8d4 3f4f 	ldrexb	r3, [r4]
   d59c6:	2b00      	cmp	r3, #0
   d59c8:	d103      	bne.n	d59d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d59ca:	e8c4 2f41 	strexb	r1, r2, [r4]
   d59ce:	2900      	cmp	r1, #0
   d59d0:	d1f7      	bne.n	d59c2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d59d2:	d002      	beq.n	d59da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d59d4:	f88d 3008 	strb.w	r3, [sp, #8]
   d59d8:	e063      	b.n	d5aa2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d59da:	f114 050c 	adds.w	r5, r4, #12
   d59de:	d003      	beq.n	d59e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d59e0:	4669      	mov	r1, sp
   d59e2:	4628      	mov	r0, r5
   d59e4:	f7ff ff09 	bl	d57fa <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d59e8:	f3bf 8f5f 	dmb	sy
   d59ec:	2301      	movs	r3, #1
   d59ee:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d59f0:	2000      	movs	r0, #0
   d59f2:	f104 0308 	add.w	r3, r4, #8
   d59f6:	f3bf 8f5f 	dmb	sy
   d59fa:	e853 6f00 	ldrex	r6, [r3]
   d59fe:	e843 0200 	strex	r2, r0, [r3]
   d5a02:	2a00      	cmp	r2, #0
   d5a04:	d1f9      	bne.n	d59fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d5a06:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5a0a:	2e00      	cmp	r6, #0
   d5a0c:	d049      	beq.n	d5aa2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5a0e:	f7ff f869 	bl	d4ae4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5a12:	b120      	cbz	r0, d5a1e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5a14:	4629      	mov	r1, r5
   d5a16:	4630      	mov	r0, r6
   d5a18:	f7ff ff98 	bl	d594c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5a1c:	e03a      	b.n	d5a94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5a1e:	4631      	mov	r1, r6
   d5a20:	a802      	add	r0, sp, #8
   d5a22:	f7ff ffb3 	bl	d598c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5a26:	68e0      	ldr	r0, [r4, #12]
   d5a28:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5a2c:	b108      	cbz	r0, d5a32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5a2e:	f001 ff51 	bl	d78d4 <strdup>
   d5a32:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5a34:	2010      	movs	r0, #16
   d5a36:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5a3a:	f7fe fb2e 	bl	d409a <_Znwj>
   d5a3e:	4605      	mov	r5, r0
   d5a40:	b1e8      	cbz	r0, d5a7e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5a42:	2700      	movs	r7, #0
   d5a44:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5a46:	2018      	movs	r0, #24
   d5a48:	f7fe fb27 	bl	d409a <_Znwj>
   d5a4c:	4604      	mov	r4, r0
   d5a4e:	b188      	cbz	r0, d5a74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5a50:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5a52:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5a54:	a802      	add	r0, sp, #8
   d5a56:	f7ff fda9 	bl	d55ac <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a5a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5a5c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a5e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a60:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5a62:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5a64:	a906      	add	r1, sp, #24
   d5a66:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a68:	60e3      	str	r3, [r4, #12]
   d5a6a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5a6e:	9205      	str	r2, [sp, #20]
   d5a70:	f7ff fec3 	bl	d57fa <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5a74:	4b0d      	ldr	r3, [pc, #52]	; (d5aac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d5a76:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5a78:	4b0d      	ldr	r3, [pc, #52]	; (d5ab0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5a7a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5a7c:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5a7e:	a806      	add	r0, sp, #24
   d5a80:	f7ff feca 	bl	d5818 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a84:	a802      	add	r0, sp, #8
   d5a86:	f7ff fd82 	bl	d558e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5a8a:	2200      	movs	r2, #0
   d5a8c:	4629      	mov	r1, r5
   d5a8e:	4809      	ldr	r0, [pc, #36]	; (d5ab4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5a90:	f7ff f830 	bl	d4af4 <application_thread_invoke>
   d5a94:	4630      	mov	r0, r6
   d5a96:	f7ff fd7a 	bl	d558e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5a9a:	2110      	movs	r1, #16
   d5a9c:	4630      	mov	r0, r6
   d5a9e:	f000 fde4 	bl	d666a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d5aa2:	4668      	mov	r0, sp
   d5aa4:	f7ff feb8 	bl	d5818 <_ZN8particle5ErrorD1Ev>
    }
   d5aa8:	b009      	add	sp, #36	; 0x24
   d5aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5aac:	000d595f 	.word	0x000d595f
   d5ab0:	000d5bd5 	.word	0x000d5bd5
   d5ab4:	000d61c1 	.word	0x000d61c1

000d5ab8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5abc:	b08b      	sub	sp, #44	; 0x2c
   d5abe:	4606      	mov	r6, r0
   d5ac0:	460f      	mov	r7, r1
   d5ac2:	4690      	mov	r8, r2
   d5ac4:	4699      	mov	r9, r3
   d5ac6:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5aca:	f7ff f88f 	bl	d4bec <spark_cloud_flag_connected>
   d5ace:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d5ad0:	4683      	mov	fp, r0
   d5ad2:	bb30      	cbnz	r0, d5b22 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5ad4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5ad8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5ada:	a905      	add	r1, sp, #20
   d5adc:	4628      	mov	r0, r5
   d5ade:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5ae2:	f7ff fe8a 	bl	d57fa <_ZN8particle5ErrorC1EOS0_>
   d5ae6:	2014      	movs	r0, #20
   d5ae8:	f7fe fad7 	bl	d409a <_Znwj>
   d5aec:	4604      	mov	r4, r0
   d5aee:	b158      	cbz	r0, d5b08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5af0:	2302      	movs	r3, #2
   d5af2:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5af4:	2301      	movs	r3, #1
   d5af6:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5af8:	f8c0 b004 	str.w	fp, [r0, #4]
   d5afc:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5b00:	4629      	mov	r1, r5
   d5b02:	300c      	adds	r0, #12
   d5b04:	f7ff fe79 	bl	d57fa <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5b08:	4630      	mov	r0, r6
   d5b0a:	4621      	mov	r1, r4
   d5b0c:	f840 4b04 	str.w	r4, [r0], #4
   d5b10:	f7ff ff08 	bl	d5924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5b14:	4628      	mov	r0, r5
   d5b16:	f7ff fe7f 	bl	d5818 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5b1a:	a805      	add	r0, sp, #20
   d5b1c:	f7ff fe7c 	bl	d5818 <_ZN8particle5ErrorD1Ev>
   d5b20:	e052      	b.n	d5bc8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5b22:	2400      	movs	r4, #0
   d5b24:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5b26:	2014      	movs	r0, #20
   d5b28:	606c      	str	r4, [r5, #4]
   d5b2a:	60ac      	str	r4, [r5, #8]
   d5b2c:	9307      	str	r3, [sp, #28]
   d5b2e:	f7fe fab4 	bl	d409a <_Znwj>
   d5b32:	4601      	mov	r1, r0
   d5b34:	b118      	cbz	r0, d5b3e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d5b36:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5b38:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5b3a:	6044      	str	r4, [r0, #4]
   d5b3c:	6084      	str	r4, [r0, #8]
   d5b3e:	a804      	add	r0, sp, #16
   d5b40:	9103      	str	r1, [sp, #12]
   d5b42:	f7ff feef 	bl	d5924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5b46:	4b22      	ldr	r3, [pc, #136]	; (d5bd0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5b48:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5b4a:	2008      	movs	r0, #8
   d5b4c:	f7fe faa5 	bl	d409a <_Znwj>
   d5b50:	4604      	mov	r4, r0
   d5b52:	b128      	cbz	r0, d5b60 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5b54:	9b03      	ldr	r3, [sp, #12]
   d5b56:	f840 3b04 	str.w	r3, [r0], #4
   d5b5a:	a904      	add	r1, sp, #16
   d5b5c:	f7ff fb6c 	bl	d5238 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5b60:	9500      	str	r5, [sp, #0]
   d5b62:	fa5f f38a 	uxtb.w	r3, sl
   d5b66:	464a      	mov	r2, r9
   d5b68:	4641      	mov	r1, r8
   d5b6a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5b6c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5b6e:	f7ff f845 	bl	d4bfc <spark_send_event>
   d5b72:	b920      	cbnz	r0, d5b7e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5b74:	9b03      	ldr	r3, [sp, #12]
   d5b76:	785b      	ldrb	r3, [r3, #1]
   d5b78:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5b7c:	b183      	cbz	r3, d5ba0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5b7e:	9b03      	ldr	r3, [sp, #12]
   d5b80:	9305      	str	r3, [sp, #20]
   d5b82:	a904      	add	r1, sp, #16
   d5b84:	a806      	add	r0, sp, #24
   d5b86:	f7ff fb57 	bl	d5238 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5b8a:	a905      	add	r1, sp, #20
   d5b8c:	4630      	mov	r0, r6
   d5b8e:	f7ff fe9a 	bl	d58c6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5b92:	a806      	add	r0, sp, #24
   d5b94:	f7fe faa8 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b98:	a804      	add	r0, sp, #16
   d5b9a:	f7fe faa5 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b9e:	e013      	b.n	d5bc8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5ba0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5ba4:	a905      	add	r1, sp, #20
   d5ba6:	a803      	add	r0, sp, #12
   d5ba8:	9205      	str	r2, [sp, #20]
   d5baa:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5bae:	f7ff fefd 	bl	d59ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5bb2:	a805      	add	r0, sp, #20
   d5bb4:	f7ff fe30 	bl	d5818 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5bb8:	a805      	add	r0, sp, #20
   d5bba:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5bbc:	f7ff fe94 	bl	d58e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d5bc0:	a806      	add	r0, sp, #24
   d5bc2:	f7fe fa91 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5bc6:	e7da      	b.n	d5b7e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d5bc8:	4630      	mov	r0, r6
   d5bca:	b00b      	add	sp, #44	; 0x2c
   d5bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5bd0:	000d5d45 	.word	0x000d5d45

000d5bd4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5bd4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5bd8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5bda:	d006      	beq.n	d5bea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5bdc:	2a03      	cmp	r2, #3
   d5bde:	d017      	beq.n	d5c10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5be0:	2a01      	cmp	r2, #1
   d5be2:	d122      	bne.n	d5c2a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5be4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5be6:	6003      	str	r3, [r0, #0]
	      break;
   d5be8:	e01f      	b.n	d5c2a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5bea:	2018      	movs	r0, #24
   d5bec:	680e      	ldr	r6, [r1, #0]
   d5bee:	f7fe fa54 	bl	d409a <_Znwj>
   d5bf2:	4605      	mov	r5, r0
   d5bf4:	b150      	cbz	r0, d5c0c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5bf6:	4631      	mov	r1, r6
   d5bf8:	f7ff fec8 	bl	d598c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5bfc:	6930      	ldr	r0, [r6, #16]
   d5bfe:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5c02:	b108      	cbz	r0, d5c08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5c04:	f001 fe66 	bl	d78d4 <strdup>
   d5c08:	6128      	str	r0, [r5, #16]
   d5c0a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5c0c:	6025      	str	r5, [r4, #0]
   d5c0e:	e00c      	b.n	d5c2a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5c10:	6804      	ldr	r4, [r0, #0]
   d5c12:	b154      	cbz	r4, d5c2a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5c14:	f104 0010 	add.w	r0, r4, #16
   d5c18:	f7ff fdfe 	bl	d5818 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5c1c:	4620      	mov	r0, r4
   d5c1e:	f7ff fcb6 	bl	d558e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5c22:	2118      	movs	r1, #24
   d5c24:	4620      	mov	r0, r4
   d5c26:	f000 fd20 	bl	d666a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5c2a:	2000      	movs	r0, #0
   d5c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c2e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5c2e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5c30:	2300      	movs	r3, #0
   d5c32:	6083      	str	r3, [r0, #8]
   d5c34:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5c36:	4604      	mov	r4, r0
   d5c38:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5c3a:	b12b      	cbz	r3, d5c48 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5c3c:	2202      	movs	r2, #2
   d5c3e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5c40:	68eb      	ldr	r3, [r5, #12]
   d5c42:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5c44:	68ab      	ldr	r3, [r5, #8]
   d5c46:	60a3      	str	r3, [r4, #8]
	}
    }
   d5c48:	4620      	mov	r0, r4
   d5c4a:	bd38      	pop	{r3, r4, r5, pc}

000d5c4c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5c4c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5c4e:	b570      	push	{r4, r5, r6, lr}
   d5c50:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5c52:	d006      	beq.n	d5c62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5c54:	2a03      	cmp	r2, #3
   d5c56:	d011      	beq.n	d5c7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5c58:	2a01      	cmp	r2, #1
   d5c5a:	d118      	bne.n	d5c8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5c5c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5c5e:	6003      	str	r3, [r0, #0]
	      break;
   d5c60:	e015      	b.n	d5c8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5c62:	2014      	movs	r0, #20
   d5c64:	680e      	ldr	r6, [r1, #0]
   d5c66:	f7fe fa18 	bl	d409a <_Znwj>
   d5c6a:	4605      	mov	r5, r0
   d5c6c:	b120      	cbz	r0, d5c78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5c6e:	4631      	mov	r1, r6
   d5c70:	f7ff ffdd 	bl	d5c2e <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5c74:	7c33      	ldrb	r3, [r6, #16]
   d5c76:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5c78:	6025      	str	r5, [r4, #0]
   d5c7a:	e008      	b.n	d5c8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5c7c:	6804      	ldr	r4, [r0, #0]
   d5c7e:	b134      	cbz	r4, d5c8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5c80:	4620      	mov	r0, r4
   d5c82:	f7ff fc84 	bl	d558e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5c86:	2114      	movs	r1, #20
   d5c88:	4620      	mov	r0, r4
   d5c8a:	f000 fcee 	bl	d666a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5c8e:	2000      	movs	r0, #0
   d5c90:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5c94 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5c94:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5c96:	2300      	movs	r3, #0
   d5c98:	b087      	sub	sp, #28
   d5c9a:	460c      	mov	r4, r1
   d5c9c:	f3bf 8f5f 	dmb	sy
   d5ca0:	e850 6f00 	ldrex	r6, [r0]
   d5ca4:	e840 3200 	strex	r2, r3, [r0]
   d5ca8:	2a00      	cmp	r2, #0
   d5caa:	d1f9      	bne.n	d5ca0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5cac:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5cb0:	2e00      	cmp	r6, #0
   d5cb2:	d03f      	beq.n	d5d34 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5cb4:	4618      	mov	r0, r3
   d5cb6:	f7fe ff15 	bl	d4ae4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5cba:	4607      	mov	r7, r0
   d5cbc:	b120      	cbz	r0, d5cc8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5cbe:	4621      	mov	r1, r4
   d5cc0:	4630      	mov	r0, r6
   d5cc2:	f7ff fe53 	bl	d596c <_ZNKSt8functionIFvRKbEEclES1_>
   d5cc6:	e02e      	b.n	d5d26 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5cc8:	4631      	mov	r1, r6
   d5cca:	a801      	add	r0, sp, #4
   d5ccc:	f7ff ffaf 	bl	d5c2e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5cd0:	7823      	ldrb	r3, [r4, #0]
   d5cd2:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5cd6:	2010      	movs	r0, #16
   d5cd8:	f7fe f9df 	bl	d409a <_Znwj>
   d5cdc:	4605      	mov	r5, r0
   d5cde:	b1d0      	cbz	r0, d5d16 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5ce0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5ce2:	2014      	movs	r0, #20
   d5ce4:	f7fe f9d9 	bl	d409a <_Znwj>
   d5ce8:	4604      	mov	r4, r0
   d5cea:	b178      	cbz	r0, d5d0c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5cec:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5cee:	4601      	mov	r1, r0
   d5cf0:	a801      	add	r0, sp, #4
   d5cf2:	f7ff fc5b 	bl	d55ac <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5cf6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5cf8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5cfa:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5cfc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5cfe:	9203      	str	r2, [sp, #12]
   d5d00:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d02:	60e3      	str	r3, [r4, #12]
   d5d04:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5d08:	9204      	str	r2, [sp, #16]
   d5d0a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5d0c:	4b0a      	ldr	r3, [pc, #40]	; (d5d38 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5d0e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5d10:	4b0a      	ldr	r3, [pc, #40]	; (d5d3c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5d12:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5d14:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5d16:	a801      	add	r0, sp, #4
   d5d18:	f7ff fc39 	bl	d558e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5d1c:	2200      	movs	r2, #0
   d5d1e:	4629      	mov	r1, r5
   d5d20:	4807      	ldr	r0, [pc, #28]	; (d5d40 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5d22:	f7fe fee7 	bl	d4af4 <application_thread_invoke>
   d5d26:	4630      	mov	r0, r6
   d5d28:	f7ff fc31 	bl	d558e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5d2c:	2110      	movs	r1, #16
   d5d2e:	4630      	mov	r0, r6
   d5d30:	f000 fc9b 	bl	d666a <_ZdlPvj>
        }
    }
   d5d34:	b007      	add	sp, #28
   d5d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5d38:	000d597f 	.word	0x000d597f
   d5d3c:	000d5c4d 	.word	0x000d5c4d
   d5d40:	000d61c1 	.word	0x000d61c1

000d5d44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5d44:	b530      	push	{r4, r5, lr}
   d5d46:	b085      	sub	sp, #20
   d5d48:	4604      	mov	r4, r0
   d5d4a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5d4c:	4668      	mov	r0, sp
   d5d4e:	4611      	mov	r1, r2
   d5d50:	f7ff fdca 	bl	d58e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5d54:	b17c      	cbz	r4, d5d76 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5d56:	b224      	sxth	r4, r4
   d5d58:	4628      	mov	r0, r5
   d5d5a:	b10d      	cbz	r5, d5d60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5d5c:	f001 fdba 	bl	d78d4 <strdup>
   d5d60:	9002      	str	r0, [sp, #8]
   d5d62:	a902      	add	r1, sp, #8
   d5d64:	4668      	mov	r0, sp
   d5d66:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5d6a:	f7ff fe1f 	bl	d59ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5d6e:	a802      	add	r0, sp, #8
   d5d70:	f7ff fd52 	bl	d5818 <_ZN8particle5ErrorD1Ev>
   d5d74:	e01d      	b.n	d5db2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5d76:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5d78:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5d7c:	f04f 0201 	mov.w	r2, #1
   d5d80:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5d84:	42a3      	cmp	r3, r4
   d5d86:	d103      	bne.n	d5d90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5d88:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5d8c:	2900      	cmp	r1, #0
   d5d8e:	d1f7      	bne.n	d5d80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5d90:	d002      	beq.n	d5d98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5d92:	f88d 3008 	strb.w	r3, [sp, #8]
   d5d96:	e00c      	b.n	d5db2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5d98:	f110 010c 	adds.w	r1, r0, #12
   d5d9c:	f04f 0301 	mov.w	r3, #1
   d5da0:	bf18      	it	ne
   d5da2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5da4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5da8:	3004      	adds	r0, #4
   d5daa:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5dae:	f7ff ff71 	bl	d5c94 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5db2:	a801      	add	r0, sp, #4
   d5db4:	f7fe f998 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5db8:	b005      	add	sp, #20
   d5dba:	bd30      	pop	{r4, r5, pc}

000d5dbc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5dbc:	4770      	bx	lr

000d5dbe <_ZN9IPAddressD0Ev>:
   d5dbe:	b510      	push	{r4, lr}
   d5dc0:	2118      	movs	r1, #24
   d5dc2:	4604      	mov	r4, r0
   d5dc4:	f000 fc51 	bl	d666a <_ZdlPvj>
   d5dc8:	4620      	mov	r0, r4
   d5dca:	bd10      	pop	{r4, pc}

000d5dcc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5dce:	7d03      	ldrb	r3, [r0, #20]
   d5dd0:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5dd2:	b08d      	sub	sp, #52	; 0x34
   d5dd4:	460e      	mov	r6, r1
   d5dd6:	f100 0704 	add.w	r7, r0, #4
   d5dda:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5dde:	d002      	beq.n	d5de6 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5de0:	f100 0508 	add.w	r5, r0, #8
   d5de4:	e018      	b.n	d5e18 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5de6:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5de8:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5dea:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5dee:	232f      	movs	r3, #47	; 0x2f
   d5df0:	462a      	mov	r2, r5
   d5df2:	200a      	movs	r0, #10
   d5df4:	f7fe fda6 	bl	d4944 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5df8:	4628      	mov	r0, r5
   d5dfa:	f001 fd86 	bl	d790a <strlen>
   d5dfe:	6833      	ldr	r3, [r6, #0]
   d5e00:	4602      	mov	r2, r0
   d5e02:	68db      	ldr	r3, [r3, #12]
   d5e04:	4629      	mov	r1, r5
   d5e06:	4630      	mov	r0, r6
   d5e08:	4798      	blx	r3
   d5e0a:	e00f      	b.n	d5e2c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5e0c:	b124      	cbz	r4, d5e18 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5e0e:	212e      	movs	r1, #46	; 0x2e
   d5e10:	4630      	mov	r0, r6
   d5e12:	f7ff fa4b 	bl	d52ac <_ZN5Print5printEc>
   d5e16:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5e18:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5e1c:	220a      	movs	r2, #10
   d5e1e:	4630      	mov	r0, r6
   d5e20:	f7ff fa80 	bl	d5324 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5e24:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5e26:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5e28:	d1f0      	bne.n	d5e0c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5e2a:	4620      	mov	r0, r4
    }
    return n;
}
   d5e2c:	b00d      	add	sp, #52	; 0x34
   d5e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5e30 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5e30:	b510      	push	{r4, lr}
   d5e32:	4b05      	ldr	r3, [pc, #20]	; (d5e48 <_ZN9IPAddressC1Ev+0x18>)
   d5e34:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5e36:	2211      	movs	r2, #17
   d5e38:	f840 3b04 	str.w	r3, [r0], #4
   d5e3c:	2100      	movs	r1, #0
   d5e3e:	f001 fd10 	bl	d7862 <memset>
{
    clear();
}
   d5e42:	4620      	mov	r0, r4
   d5e44:	bd10      	pop	{r4, pc}
   d5e46:	bf00      	nop
   d5e48:	000d7cd8 	.word	0x000d7cd8

000d5e4c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5e4c:	4603      	mov	r3, r0
   d5e4e:	4a07      	ldr	r2, [pc, #28]	; (d5e6c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5e50:	b510      	push	{r4, lr}
   d5e52:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5e56:	f101 0210 	add.w	r2, r1, #16
   d5e5a:	f851 4b04 	ldr.w	r4, [r1], #4
   d5e5e:	f843 4b04 	str.w	r4, [r3], #4
   d5e62:	4291      	cmp	r1, r2
   d5e64:	d1f9      	bne.n	d5e5a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5e66:	780a      	ldrb	r2, [r1, #0]
   d5e68:	701a      	strb	r2, [r3, #0]
}
   d5e6a:	bd10      	pop	{r4, pc}
   d5e6c:	000d7cd8 	.word	0x000d7cd8

000d5e70 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5e70:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5e72:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5e76:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5e7a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5e7e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5e82:	2304      	movs	r3, #4
   d5e84:	6041      	str	r1, [r0, #4]
   d5e86:	7503      	strb	r3, [r0, #20]
   d5e88:	bd10      	pop	{r4, pc}

000d5e8a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5e8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5e8c:	780d      	ldrb	r5, [r1, #0]
   d5e8e:	788b      	ldrb	r3, [r1, #2]
   d5e90:	784a      	ldrb	r2, [r1, #1]
   d5e92:	78c9      	ldrb	r1, [r1, #3]
   d5e94:	9100      	str	r1, [sp, #0]
   d5e96:	4629      	mov	r1, r5
   d5e98:	f7ff ffea 	bl	d5e70 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5e9c:	b003      	add	sp, #12
   d5e9e:	bd30      	pop	{r4, r5, pc}

000d5ea0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5ea0:	7441      	strb	r1, [r0, #17]
   d5ea2:	4770      	bx	lr

000d5ea4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5ea4:	4770      	bx	lr

000d5ea6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5ea6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5ea8:	2100      	movs	r1, #0
   d5eaa:	7c00      	ldrb	r0, [r0, #16]
   d5eac:	f7fe fdf2 	bl	d4a94 <HAL_USB_USART_Receive_Data>
}
   d5eb0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5eb4:	bf28      	it	cs
   d5eb6:	f04f 30ff 	movcs.w	r0, #4294967295
   d5eba:	bd08      	pop	{r3, pc}

000d5ebc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5ebc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5ebe:	2101      	movs	r1, #1
   d5ec0:	7c00      	ldrb	r0, [r0, #16]
   d5ec2:	f7fe fde7 	bl	d4a94 <HAL_USB_USART_Receive_Data>
}
   d5ec6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5eca:	bf28      	it	cs
   d5ecc:	f04f 30ff 	movcs.w	r0, #4294967295
   d5ed0:	bd08      	pop	{r3, pc}

000d5ed2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5ed2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5ed4:	7c00      	ldrb	r0, [r0, #16]
   d5ed6:	f7fe fdd5 	bl	d4a84 <HAL_USB_USART_Available_Data_For_Write>
}
   d5eda:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ede:	bd08      	pop	{r3, pc}

000d5ee0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5ee0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5ee2:	7c00      	ldrb	r0, [r0, #16]
   d5ee4:	f7fe fdc6 	bl	d4a74 <HAL_USB_USART_Available_Data>
}
   d5ee8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5eec:	bd08      	pop	{r3, pc}

000d5eee <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5eee:	7c00      	ldrb	r0, [r0, #16]
   d5ef0:	f7fe bde0 	b.w	d4ab4 <HAL_USB_USART_Flush_Data>

000d5ef4 <_ZN9USBSerialD0Ev>:
   d5ef4:	b510      	push	{r4, lr}
   d5ef6:	2114      	movs	r1, #20
   d5ef8:	4604      	mov	r4, r0
   d5efa:	f000 fbb6 	bl	d666a <_ZdlPvj>
   d5efe:	4620      	mov	r0, r4
   d5f00:	bd10      	pop	{r4, pc}

000d5f02 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5f02:	b538      	push	{r3, r4, r5, lr}
   d5f04:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5f06:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5f08:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5f0a:	f7fe fdbb 	bl	d4a84 <HAL_USB_USART_Available_Data_For_Write>
   d5f0e:	2800      	cmp	r0, #0
   d5f10:	dc01      	bgt.n	d5f16 <_ZN9USBSerial5writeEh+0x14>
   d5f12:	7c60      	ldrb	r0, [r4, #17]
   d5f14:	b128      	cbz	r0, d5f22 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5f16:	4629      	mov	r1, r5
   d5f18:	7c20      	ldrb	r0, [r4, #16]
   d5f1a:	f7fe fdc3 	bl	d4aa4 <HAL_USB_USART_Send_Data>
   d5f1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5f22:	bd38      	pop	{r3, r4, r5, pc}

000d5f24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5f24:	b510      	push	{r4, lr}
   d5f26:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5f28:	2300      	movs	r3, #0
   d5f2a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5f30:	60a3      	str	r3, [r4, #8]
   d5f32:	4b05      	ldr	r3, [pc, #20]	; (d5f48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5f34:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5f36:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5f38:	4608      	mov	r0, r1
{
  _serial = serial;
   d5f3a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5f3c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5f3e:	4611      	mov	r1, r2
   d5f40:	f7fe fd88 	bl	d4a54 <HAL_USB_USART_Init>
}
   d5f44:	4620      	mov	r0, r4
   d5f46:	bd10      	pop	{r4, pc}
   d5f48:	000d7cec 	.word	0x000d7cec

000d5f4c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5f4c:	2200      	movs	r2, #0
   d5f4e:	7c00      	ldrb	r0, [r0, #16]
   d5f50:	f7fe bd88 	b.w	d4a64 <HAL_USB_USART_Begin>

000d5f54 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5f54:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5f56:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5f58:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5f5a:	2100      	movs	r1, #0
   d5f5c:	f001 fc81 	bl	d7862 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5f60:	4620      	mov	r0, r4
   d5f62:	bd10      	pop	{r4, pc}

000d5f64 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5f64:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5f66:	4d0e      	ldr	r5, [pc, #56]	; (d5fa0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5f68:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5f6a:	a801      	add	r0, sp, #4
   d5f6c:	f7ff fff2 	bl	d5f54 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5f70:	6829      	ldr	r1, [r5, #0]
   d5f72:	f011 0401 	ands.w	r4, r1, #1
   d5f76:	d110      	bne.n	d5f9a <_Z16_fetch_usbserialv+0x36>
   d5f78:	4628      	mov	r0, r5
   d5f7a:	f7fe f894 	bl	d40a6 <__cxa_guard_acquire>
   d5f7e:	b160      	cbz	r0, d5f9a <_Z16_fetch_usbserialv+0x36>
   d5f80:	aa01      	add	r2, sp, #4
   d5f82:	4621      	mov	r1, r4
   d5f84:	4807      	ldr	r0, [pc, #28]	; (d5fa4 <_Z16_fetch_usbserialv+0x40>)
   d5f86:	f7ff ffcd 	bl	d5f24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5f8a:	4628      	mov	r0, r5
   d5f8c:	f7fe f890 	bl	d40b0 <__cxa_guard_release>
   d5f90:	4a05      	ldr	r2, [pc, #20]	; (d5fa8 <_Z16_fetch_usbserialv+0x44>)
   d5f92:	4906      	ldr	r1, [pc, #24]	; (d5fac <_Z16_fetch_usbserialv+0x48>)
   d5f94:	4803      	ldr	r0, [pc, #12]	; (d5fa4 <_Z16_fetch_usbserialv+0x40>)
   d5f96:	f000 fb63 	bl	d6660 <__aeabi_atexit>
	return _usbserial;
}
   d5f9a:	4802      	ldr	r0, [pc, #8]	; (d5fa4 <_Z16_fetch_usbserialv+0x40>)
   d5f9c:	b007      	add	sp, #28
   d5f9e:	bd30      	pop	{r4, r5, pc}
   d5fa0:	2003e3d0 	.word	0x2003e3d0
   d5fa4:	2003e3d4 	.word	0x2003e3d4
   d5fa8:	2003e2b0 	.word	0x2003e2b0
   d5fac:	000d5ea5 	.word	0x000d5ea5

000d5fb0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5fb0:	2200      	movs	r2, #0
   d5fb2:	4611      	mov	r1, r2
   d5fb4:	6840      	ldr	r0, [r0, #4]
   d5fb6:	f7fe bdd1 	b.w	d4b5c <network_ready>

000d5fba <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5fba:	2200      	movs	r2, #0
   d5fbc:	4611      	mov	r1, r2
   d5fbe:	6840      	ldr	r0, [r0, #4]
   d5fc0:	f7fe bdec 	b.w	d4b9c <network_listening>

000d5fc4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5fc4:	2200      	movs	r2, #0
   d5fc6:	4611      	mov	r1, r2
   d5fc8:	6840      	ldr	r0, [r0, #4]
   d5fca:	f7fe bdf7 	b.w	d4bbc <network_get_listen_timeout>

000d5fce <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5fce:	2200      	movs	r2, #0
   d5fd0:	6840      	ldr	r0, [r0, #4]
   d5fd2:	f7fe bdeb 	b.w	d4bac <network_set_listen_timeout>

000d5fd6 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5fd6:	2200      	movs	r2, #0
   d5fd8:	f081 0101 	eor.w	r1, r1, #1
   d5fdc:	6840      	ldr	r0, [r0, #4]
   d5fde:	f7fe bdd5 	b.w	d4b8c <network_listen>

000d5fe2 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5fe2:	2300      	movs	r3, #0
   d5fe4:	461a      	mov	r2, r3
   d5fe6:	4619      	mov	r1, r3
   d5fe8:	6840      	ldr	r0, [r0, #4]
   d5fea:	f7fe bdc7 	b.w	d4b7c <network_off>

000d5fee <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d5fee:	2300      	movs	r3, #0
   d5ff0:	461a      	mov	r2, r3
   d5ff2:	4619      	mov	r1, r3
   d5ff4:	6840      	ldr	r0, [r0, #4]
   d5ff6:	f7fe bdb9 	b.w	d4b6c <network_on>

000d5ffa <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5ffa:	2200      	movs	r2, #0
   d5ffc:	4611      	mov	r1, r2
   d5ffe:	6840      	ldr	r0, [r0, #4]
   d6000:	f7fe bd9c 	b.w	d4b3c <network_connecting>

000d6004 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6004:	2200      	movs	r2, #0
   d6006:	2102      	movs	r1, #2
   d6008:	6840      	ldr	r0, [r0, #4]
   d600a:	f7fe bd9f 	b.w	d4b4c <network_disconnect>

000d600e <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d600e:	2300      	movs	r3, #0
   d6010:	461a      	mov	r2, r3
   d6012:	6840      	ldr	r0, [r0, #4]
   d6014:	f7fe bd8a 	b.w	d4b2c <network_connect>

000d6018 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d6018:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d601a:	4b1b      	ldr	r3, [pc, #108]	; (d6088 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d601c:	6003      	str	r3, [r0, #0]
   d601e:	2500      	movs	r5, #0
   d6020:	460f      	mov	r7, r1
   d6022:	3328      	adds	r3, #40	; 0x28
   d6024:	2618      	movs	r6, #24
   d6026:	b089      	sub	sp, #36	; 0x24
   d6028:	6043      	str	r3, [r0, #4]
   d602a:	6085      	str	r5, [r0, #8]
   d602c:	60c5      	str	r5, [r0, #12]
   d602e:	4632      	mov	r2, r6
   d6030:	4629      	mov	r1, r5
   d6032:	4604      	mov	r4, r0
   d6034:	3010      	adds	r0, #16
   d6036:	f001 fc14 	bl	d7862 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d603a:	462a      	mov	r2, r5
   d603c:	4629      	mov	r1, r5
   d603e:	6878      	ldr	r0, [r7, #4]
   d6040:	f7fe fd8c 	bl	d4b5c <network_ready>
   d6044:	b908      	cbnz	r0, d604a <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d6046:	60a0      	str	r0, [r4, #8]
            return sig;
   d6048:	e01b      	b.n	d6082 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d604a:	4629      	mov	r1, r5
   d604c:	4632      	mov	r2, r6
   d604e:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d6050:	9500      	str	r5, [sp, #0]
   d6052:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d6054:	f001 fc05 	bl	d7862 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d6058:	a902      	add	r1, sp, #8
   d605a:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d605c:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d6060:	f7fe fcf0 	bl	d4a44 <cellular_signal>
   d6064:	b110      	cbz	r0, d606c <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d6066:	2301      	movs	r3, #1
   d6068:	60a3      	str	r3, [r4, #8]
            return sig;
   d606a:	e00a      	b.n	d6082 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d606c:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d606e:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d6070:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d6072:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d6074:	b90b      	cbnz	r3, d607a <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d6076:	2302      	movs	r3, #2
   d6078:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d607a:	a902      	add	r1, sp, #8
   d607c:	4620      	mov	r0, r4
   d607e:	f7ff fb37 	bl	d56f0 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d6082:	4620      	mov	r0, r4
   d6084:	b009      	add	sp, #36	; 0x24
   d6086:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6088:	000d7c88 	.word	0x000d7c88

000d608c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d608c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d608e:	4c08      	ldr	r4, [pc, #32]	; (d60b0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d6090:	2528      	movs	r5, #40	; 0x28
   d6092:	462a      	mov	r2, r5
   d6094:	2100      	movs	r1, #0
   d6096:	4620      	mov	r0, r4
   d6098:	f001 fbe3 	bl	d7862 <memset>
        cid = -1;
   d609c:	f04f 33ff 	mov.w	r3, #4294967295
   d60a0:	6063      	str	r3, [r4, #4]
   d60a2:	4b04      	ldr	r3, [pc, #16]	; (d60b4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d60a4:	8025      	strh	r5, [r4, #0]
   d60a6:	2204      	movs	r2, #4
   d60a8:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d60aa:	4a03      	ldr	r2, [pc, #12]	; (d60b8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d60ac:	601a      	str	r2, [r3, #0]
   d60ae:	bd38      	pop	{r3, r4, r5, pc}
   d60b0:	2003e3f0 	.word	0x2003e3f0
   d60b4:	2003e3e8 	.word	0x2003e3e8
   d60b8:	000d7d1c 	.word	0x000d7d1c

000d60bc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d60bc:	4770      	bx	lr

000d60be <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d60be:	7441      	strb	r1, [r0, #17]
   d60c0:	4770      	bx	lr

000d60c2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d60c2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d60c4:	7c00      	ldrb	r0, [r0, #16]
   d60c6:	f7fe fc7d 	bl	d49c4 <HAL_USART_Available_Data_For_Write>
}
   d60ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d60ce:	bd08      	pop	{r3, pc}

000d60d0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d60d0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d60d2:	7c00      	ldrb	r0, [r0, #16]
   d60d4:	f7fe fc4e 	bl	d4974 <HAL_USART_Available_Data>
}
   d60d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d60dc:	bd08      	pop	{r3, pc}

000d60de <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d60de:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d60e0:	7c00      	ldrb	r0, [r0, #16]
   d60e2:	f7fe fc57 	bl	d4994 <HAL_USART_Peek_Data>
}
   d60e6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d60ea:	bf28      	it	cs
   d60ec:	f04f 30ff 	movcs.w	r0, #4294967295
   d60f0:	bd08      	pop	{r3, pc}

000d60f2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d60f2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d60f4:	7c00      	ldrb	r0, [r0, #16]
   d60f6:	f7fe fc45 	bl	d4984 <HAL_USART_Read_Data>
}
   d60fa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d60fe:	bf28      	it	cs
   d6100:	f04f 30ff 	movcs.w	r0, #4294967295
   d6104:	bd08      	pop	{r3, pc}

000d6106 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6106:	7c00      	ldrb	r0, [r0, #16]
   d6108:	f7fe bc4c 	b.w	d49a4 <HAL_USART_Flush_Data>

000d610c <_ZN11USARTSerialD0Ev>:
   d610c:	b510      	push	{r4, lr}
   d610e:	2114      	movs	r1, #20
   d6110:	4604      	mov	r4, r0
   d6112:	f000 faaa 	bl	d666a <_ZdlPvj>
   d6116:	4620      	mov	r0, r4
   d6118:	bd10      	pop	{r4, pc}

000d611a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d611a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d611c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d611e:	4604      	mov	r4, r0
   d6120:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6122:	b925      	cbnz	r5, d612e <_ZN11USARTSerial5writeEh+0x14>
   d6124:	7c00      	ldrb	r0, [r0, #16]
   d6126:	f7fe fc4d 	bl	d49c4 <HAL_USART_Available_Data_For_Write>
   d612a:	2800      	cmp	r0, #0
   d612c:	dd05      	ble.n	d613a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d612e:	4631      	mov	r1, r6
   d6130:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6136:	f7fe bc15 	b.w	d4964 <HAL_USART_Write_Data>
  }
  return 0;
}
   d613a:	4628      	mov	r0, r5
   d613c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6140 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6140:	b510      	push	{r4, lr}
   d6142:	4604      	mov	r4, r0
   d6144:	4608      	mov	r0, r1
   d6146:	4611      	mov	r1, r2
   d6148:	2200      	movs	r2, #0
   d614a:	6062      	str	r2, [r4, #4]
   d614c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6150:	60a2      	str	r2, [r4, #8]
   d6152:	4a05      	ldr	r2, [pc, #20]	; (d6168 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6154:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6156:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6158:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d615a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d615c:	461a      	mov	r2, r3
   d615e:	f7fe fbf9 	bl	d4954 <HAL_USART_Init>
}
   d6162:	4620      	mov	r0, r4
   d6164:	bd10      	pop	{r4, pc}
   d6166:	bf00      	nop
   d6168:	000d7d50 	.word	0x000d7d50

000d616c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d616c:	7c00      	ldrb	r0, [r0, #16]
   d616e:	f7fe bc21 	b.w	d49b4 <HAL_USART_Is_Enabled>
	...

000d6174 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6174:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6176:	4d0c      	ldr	r5, [pc, #48]	; (d61a8 <_Z22__fetch_global_Serial1v+0x34>)
   d6178:	6829      	ldr	r1, [r5, #0]
   d617a:	f011 0401 	ands.w	r4, r1, #1
   d617e:	d111      	bne.n	d61a4 <_Z22__fetch_global_Serial1v+0x30>
   d6180:	4628      	mov	r0, r5
   d6182:	f7fd ff90 	bl	d40a6 <__cxa_guard_acquire>
   d6186:	b168      	cbz	r0, d61a4 <_Z22__fetch_global_Serial1v+0x30>
   d6188:	4a08      	ldr	r2, [pc, #32]	; (d61ac <_Z22__fetch_global_Serial1v+0x38>)
   d618a:	4b09      	ldr	r3, [pc, #36]	; (d61b0 <_Z22__fetch_global_Serial1v+0x3c>)
   d618c:	4809      	ldr	r0, [pc, #36]	; (d61b4 <_Z22__fetch_global_Serial1v+0x40>)
   d618e:	4621      	mov	r1, r4
   d6190:	f7ff ffd6 	bl	d6140 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6194:	4628      	mov	r0, r5
   d6196:	f7fd ff8b 	bl	d40b0 <__cxa_guard_release>
   d619a:	4a07      	ldr	r2, [pc, #28]	; (d61b8 <_Z22__fetch_global_Serial1v+0x44>)
   d619c:	4907      	ldr	r1, [pc, #28]	; (d61bc <_Z22__fetch_global_Serial1v+0x48>)
   d619e:	4805      	ldr	r0, [pc, #20]	; (d61b4 <_Z22__fetch_global_Serial1v+0x40>)
   d61a0:	f000 fa5e 	bl	d6660 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d61a4:	4803      	ldr	r0, [pc, #12]	; (d61b4 <_Z22__fetch_global_Serial1v+0x40>)
   d61a6:	bd38      	pop	{r3, r4, r5, pc}
   d61a8:	2003e4b0 	.word	0x2003e4b0
   d61ac:	2003e4b4 	.word	0x2003e4b4
   d61b0:	2003e42c 	.word	0x2003e42c
   d61b4:	2003e418 	.word	0x2003e418
   d61b8:	2003e2b0 	.word	0x2003e2b0
   d61bc:	000d60bd 	.word	0x000d60bd

000d61c0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d61c0:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d61c2:	6883      	ldr	r3, [r0, #8]
   d61c4:	4604      	mov	r4, r0
   d61c6:	b90b      	cbnz	r3, d61cc <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d61c8:	f000 fa51 	bl	d666e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d61cc:	68c3      	ldr	r3, [r0, #12]
   d61ce:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d61d0:	68a3      	ldr	r3, [r4, #8]
   d61d2:	b11b      	cbz	r3, d61dc <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d61d4:	2203      	movs	r2, #3
   d61d6:	4621      	mov	r1, r4
   d61d8:	4620      	mov	r0, r4
   d61da:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d61dc:	4620      	mov	r0, r4
   d61de:	2110      	movs	r1, #16
}
   d61e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d61e4:	f000 ba41 	b.w	d666a <_ZdlPvj>

000d61e8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d61e8:	4770      	bx	lr

000d61ea <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d61ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d61ec:	4606      	mov	r6, r0
   d61ee:	4615      	mov	r5, r2
   d61f0:	460c      	mov	r4, r1
   d61f2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d61f4:	42bc      	cmp	r4, r7
   d61f6:	d006      	beq.n	d6206 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d61f8:	6833      	ldr	r3, [r6, #0]
   d61fa:	f814 1b01 	ldrb.w	r1, [r4], #1
   d61fe:	689b      	ldr	r3, [r3, #8]
   d6200:	4630      	mov	r0, r6
   d6202:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6204:	e7f6      	b.n	d61f4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6206:	4628      	mov	r0, r5
   d6208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d620a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d620a:	2200      	movs	r2, #0
   d620c:	7c00      	ldrb	r0, [r0, #16]
   d620e:	f7fe bbe1 	b.w	d49d4 <HAL_I2C_Write_Data>

000d6212 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6212:	2100      	movs	r1, #0
   d6214:	7c00      	ldrb	r0, [r0, #16]
   d6216:	f7fe bbe5 	b.w	d49e4 <HAL_I2C_Available_Data>

000d621a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d621a:	2100      	movs	r1, #0
   d621c:	7c00      	ldrb	r0, [r0, #16]
   d621e:	f7fe bbe9 	b.w	d49f4 <HAL_I2C_Read_Data>

000d6222 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6222:	2100      	movs	r1, #0
   d6224:	7c00      	ldrb	r0, [r0, #16]
   d6226:	f7fe bbed 	b.w	d4a04 <HAL_I2C_Peek_Data>

000d622a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d622a:	2100      	movs	r1, #0
   d622c:	7c00      	ldrb	r0, [r0, #16]
   d622e:	f7fe bbf1 	b.w	d4a14 <HAL_I2C_Flush_Data>

000d6232 <_ZN7TwoWireD0Ev>:
   d6232:	b510      	push	{r4, lr}
   d6234:	2114      	movs	r1, #20
   d6236:	4604      	mov	r4, r0
   d6238:	f000 fa17 	bl	d666a <_ZdlPvj>
   d623c:	4620      	mov	r0, r4
   d623e:	bd10      	pop	{r4, pc}

000d6240 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6240:	b510      	push	{r4, lr}
   d6242:	4604      	mov	r4, r0
   d6244:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6248:	4608      	mov	r0, r1
   d624a:	60a3      	str	r3, [r4, #8]
   d624c:	2100      	movs	r1, #0
   d624e:	4b04      	ldr	r3, [pc, #16]	; (d6260 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d6250:	7420      	strb	r0, [r4, #16]
   d6252:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6254:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d6256:	f7fe fbed 	bl	d4a34 <HAL_I2C_Init>

}
   d625a:	4620      	mov	r0, r4
   d625c:	bd10      	pop	{r4, pc}
   d625e:	bf00      	nop
   d6260:	000d7d80 	.word	0x000d7d80

000d6264 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6264:	2100      	movs	r1, #0
   d6266:	7c00      	ldrb	r0, [r0, #16]
   d6268:	f7fe bbdc 	b.w	d4a24 <HAL_I2C_Is_Enabled>

000d626c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d626c:	2200      	movs	r2, #0
   d626e:	4611      	mov	r1, r2
   d6270:	6840      	ldr	r0, [r0, #4]
   d6272:	f7fe bc93 	b.w	d4b9c <network_listening>

000d6276 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6276:	2200      	movs	r2, #0
   d6278:	4611      	mov	r1, r2
   d627a:	6840      	ldr	r0, [r0, #4]
   d627c:	f7fe bc9e 	b.w	d4bbc <network_get_listen_timeout>

000d6280 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6280:	2200      	movs	r2, #0
   d6282:	6840      	ldr	r0, [r0, #4]
   d6284:	f7fe bc92 	b.w	d4bac <network_set_listen_timeout>

000d6288 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6288:	2200      	movs	r2, #0
   d628a:	f081 0101 	eor.w	r1, r1, #1
   d628e:	6840      	ldr	r0, [r0, #4]
   d6290:	f7fe bc7c 	b.w	d4b8c <network_listen>

000d6294 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6294:	2300      	movs	r3, #0
   d6296:	461a      	mov	r2, r3
   d6298:	2101      	movs	r1, #1
   d629a:	6840      	ldr	r0, [r0, #4]
   d629c:	f7fe bc6e 	b.w	d4b7c <network_off>

000d62a0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d62a0:	2300      	movs	r3, #0
   d62a2:	461a      	mov	r2, r3
   d62a4:	4619      	mov	r1, r3
   d62a6:	6840      	ldr	r0, [r0, #4]
   d62a8:	f7fe bc60 	b.w	d4b6c <network_on>

000d62ac <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d62ac:	2200      	movs	r2, #0
   d62ae:	4611      	mov	r1, r2
   d62b0:	6840      	ldr	r0, [r0, #4]
   d62b2:	f7fe bc53 	b.w	d4b5c <network_ready>

000d62b6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d62b6:	2200      	movs	r2, #0
   d62b8:	4611      	mov	r1, r2
   d62ba:	6840      	ldr	r0, [r0, #4]
   d62bc:	f7fe bc3e 	b.w	d4b3c <network_connecting>

000d62c0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d62c0:	2200      	movs	r2, #0
   d62c2:	2102      	movs	r1, #2
   d62c4:	6840      	ldr	r0, [r0, #4]
   d62c6:	f7fe bc41 	b.w	d4b4c <network_disconnect>

000d62ca <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d62ca:	2300      	movs	r3, #0
   d62cc:	461a      	mov	r2, r3
   d62ce:	6840      	ldr	r0, [r0, #4]
   d62d0:	f7fe bc2c 	b.w	d4b2c <network_connect>

000d62d4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d62d4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d62d6:	4605      	mov	r5, r0
   d62d8:	b188      	cbz	r0, d62fe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d62da:	6804      	ldr	r4, [r0, #0]
   d62dc:	b14c      	cbz	r4, d62f2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d62de:	68a3      	ldr	r3, [r4, #8]
   d62e0:	b11b      	cbz	r3, d62ea <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d62e2:	2203      	movs	r2, #3
   d62e4:	4621      	mov	r1, r4
   d62e6:	4620      	mov	r0, r4
   d62e8:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d62ea:	2110      	movs	r1, #16
   d62ec:	4620      	mov	r0, r4
   d62ee:	f000 f9bc 	bl	d666a <_ZdlPvj>
   d62f2:	4628      	mov	r0, r5
   d62f4:	2114      	movs	r1, #20
      }
   d62f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d62fa:	f000 b9b6 	b.w	d666a <_ZdlPvj>
   d62fe:	bd38      	pop	{r3, r4, r5, pc}

000d6300 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6300:	b110      	cbz	r0, d6308 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6302:	6803      	ldr	r3, [r0, #0]
   d6304:	685b      	ldr	r3, [r3, #4]
   d6306:	4718      	bx	r3
   d6308:	4770      	bx	lr

000d630a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d630a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d630c:	6803      	ldr	r3, [r0, #0]
   d630e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6310:	b1bb      	cbz	r3, d6342 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6312:	6858      	ldr	r0, [r3, #4]
   d6314:	f7fe fade 	bl	d48d4 <os_thread_is_current>
   d6318:	b978      	cbnz	r0, d633a <_ZN6ThreadD1Ev+0x30>
   d631a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d631c:	7c5a      	ldrb	r2, [r3, #17]
   d631e:	b912      	cbnz	r2, d6326 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6320:	6858      	ldr	r0, [r3, #4]
   d6322:	f7fe fadf 	bl	d48e4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6326:	6823      	ldr	r3, [r4, #0]
   d6328:	6858      	ldr	r0, [r3, #4]
   d632a:	f7fe fae3 	bl	d48f4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d632e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6330:	2300      	movs	r3, #0
   d6332:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6334:	b128      	cbz	r0, d6342 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6336:	f7ff ffcd 	bl	d62d4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d633a:	6820      	ldr	r0, [r4, #0]
   d633c:	b108      	cbz	r0, d6342 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d633e:	f7ff ffc9 	bl	d62d4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6342:	4620      	mov	r0, r4
   d6344:	bd10      	pop	{r4, pc}
	...

000d6348 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6348:	b538      	push	{r3, r4, r5, lr}
   d634a:	4b0c      	ldr	r3, [pc, #48]	; (d637c <_ZN5spark9MeshClassD1Ev+0x34>)
   d634c:	6003      	str	r3, [r0, #0]
   d634e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6350:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d6354:	b108      	cbz	r0, d635a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6356:	f7fd fea4 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d635a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d635e:	b135      	cbz	r5, d636e <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6360:	4628      	mov	r0, r5
   d6362:	f7ff ffd2 	bl	d630a <_ZN6ThreadD1Ev>
   d6366:	2104      	movs	r1, #4
   d6368:	4628      	mov	r0, r5
   d636a:	f000 f97e 	bl	d666a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d636e:	68a0      	ldr	r0, [r4, #8]
   d6370:	b108      	cbz	r0, d6376 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d6372:	f7ff ffc5 	bl	d6300 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6376:	4620      	mov	r0, r4
   d6378:	bd38      	pop	{r3, r4, r5, pc}
   d637a:	bf00      	nop
   d637c:	000d7da8 	.word	0x000d7da8

000d6380 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6380:	b538      	push	{r3, r4, r5, lr}
   d6382:	4c0e      	ldr	r4, [pc, #56]	; (d63bc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6384:	4b0e      	ldr	r3, [pc, #56]	; (d63c0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6386:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6388:	2500      	movs	r5, #0
   d638a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d638c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6390:	6063      	str	r3, [r4, #4]
   d6392:	60a5      	str	r5, [r4, #8]
   d6394:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6398:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d639c:	f7fe faca 	bl	d4934 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d63a0:	4b08      	ldr	r3, [pc, #32]	; (d63c4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d63a2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d63a6:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d63aa:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d63ac:	4620      	mov	r0, r4
   d63ae:	4a06      	ldr	r2, [pc, #24]	; (d63c8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d63b0:	4906      	ldr	r1, [pc, #24]	; (d63cc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d63b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d63b6:	f000 b953 	b.w	d6660 <__aeabi_atexit>
   d63ba:	bf00      	nop
   d63bc:	2003e538 	.word	0x2003e538
   d63c0:	000d7ddc 	.word	0x000d7ddc
   d63c4:	000d7da8 	.word	0x000d7da8
   d63c8:	2003e2b0 	.word	0x2003e2b0
   d63cc:	000d6349 	.word	0x000d6349

000d63d0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d63d0:	2300      	movs	r3, #0
   d63d2:	461a      	mov	r2, r3
   d63d4:	6840      	ldr	r0, [r0, #4]
   d63d6:	f7fe bba9 	b.w	d4b2c <network_connect>

000d63da <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d63da:	2200      	movs	r2, #0
   d63dc:	2102      	movs	r1, #2
   d63de:	6840      	ldr	r0, [r0, #4]
   d63e0:	f7fe bbb4 	b.w	d4b4c <network_disconnect>

000d63e4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d63e4:	2200      	movs	r2, #0
   d63e6:	4611      	mov	r1, r2
   d63e8:	6840      	ldr	r0, [r0, #4]
   d63ea:	f7fe bba7 	b.w	d4b3c <network_connecting>

000d63ee <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d63ee:	2200      	movs	r2, #0
   d63f0:	4611      	mov	r1, r2
   d63f2:	6840      	ldr	r0, [r0, #4]
   d63f4:	f7fe bbb2 	b.w	d4b5c <network_ready>

000d63f8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d63f8:	2300      	movs	r3, #0
   d63fa:	461a      	mov	r2, r3
   d63fc:	4619      	mov	r1, r3
   d63fe:	6840      	ldr	r0, [r0, #4]
   d6400:	f7fe bbb4 	b.w	d4b6c <network_on>

000d6404 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6404:	2300      	movs	r3, #0
   d6406:	461a      	mov	r2, r3
   d6408:	4619      	mov	r1, r3
   d640a:	6840      	ldr	r0, [r0, #4]
   d640c:	f7fe bbb6 	b.w	d4b7c <network_off>

000d6410 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6410:	2200      	movs	r2, #0
   d6412:	f081 0101 	eor.w	r1, r1, #1
   d6416:	6840      	ldr	r0, [r0, #4]
   d6418:	f7fe bbb8 	b.w	d4b8c <network_listen>

000d641c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d641c:	2200      	movs	r2, #0
   d641e:	6840      	ldr	r0, [r0, #4]
   d6420:	f7fe bbc4 	b.w	d4bac <network_set_listen_timeout>

000d6424 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6424:	2200      	movs	r2, #0
   d6426:	4611      	mov	r1, r2
   d6428:	6840      	ldr	r0, [r0, #4]
   d642a:	f7fe bbc7 	b.w	d4bbc <network_get_listen_timeout>

000d642e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d642e:	2200      	movs	r2, #0
   d6430:	4611      	mov	r1, r2
   d6432:	6840      	ldr	r0, [r0, #4]
   d6434:	f7fe bbb2 	b.w	d4b9c <network_listening>

000d6438 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d643c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d643e:	b095      	sub	sp, #84	; 0x54
   d6440:	4616      	mov	r6, r2
   d6442:	460d      	mov	r5, r1
   d6444:	4607      	mov	r7, r0
    IPAddress addr;
   d6446:	f7ff fcf3 	bl	d5e30 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d644a:	4621      	mov	r1, r4
   d644c:	2220      	movs	r2, #32
   d644e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6450:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6452:	f001 fa06 	bl	d7862 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6456:	2340      	movs	r3, #64	; 0x40
   d6458:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d645a:	4621      	mov	r1, r4
   d645c:	466b      	mov	r3, sp
   d645e:	aa0c      	add	r2, sp, #48	; 0x30
   d6460:	4630      	mov	r0, r6
   d6462:	f7fe f9c7 	bl	d47f4 <netdb_getaddrinfo>
    if (!r) {
   d6466:	4604      	mov	r4, r0
   d6468:	2800      	cmp	r0, #0
   d646a:	d144      	bne.n	d64f6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d646c:	4602      	mov	r2, r0
   d646e:	2101      	movs	r1, #1
   d6470:	6868      	ldr	r0, [r5, #4]
   d6472:	f7fe fb73 	bl	d4b5c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6476:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6478:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d647a:	4622      	mov	r2, r4
   d647c:	6868      	ldr	r0, [r5, #4]
   d647e:	f7fe fb6d 	bl	d4b5c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6482:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6484:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6486:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6488:	2e00      	cmp	r6, #0
   d648a:	d034      	beq.n	d64f6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d648c:	2900      	cmp	r1, #0
   d648e:	d132      	bne.n	d64f6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6490:	6873      	ldr	r3, [r6, #4]
   d6492:	2b02      	cmp	r3, #2
   d6494:	d002      	beq.n	d649c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6496:	2b0a      	cmp	r3, #10
   d6498:	d009      	beq.n	d64ae <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d649a:	e02a      	b.n	d64f2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d649c:	f1b8 0f00 	cmp.w	r8, #0
   d64a0:	d027      	beq.n	d64f2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d64a2:	6971      	ldr	r1, [r6, #20]
   d64a4:	4638      	mov	r0, r7
   d64a6:	3104      	adds	r1, #4
   d64a8:	f7ff fcef 	bl	d5e8a <_ZN9IPAddressaSEPKh>
   d64ac:	e020      	b.n	d64f0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d64ae:	f1b9 0f00 	cmp.w	r9, #0
   d64b2:	d01e      	beq.n	d64f2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d64b4:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d64b6:	2211      	movs	r2, #17
   d64b8:	a801      	add	r0, sp, #4
   d64ba:	f001 f9d2 	bl	d7862 <memset>
                    a.v = 6;
   d64be:	2306      	movs	r3, #6
   d64c0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d64c4:	ad01      	add	r5, sp, #4
   d64c6:	f104 0308 	add.w	r3, r4, #8
   d64ca:	3418      	adds	r4, #24
   d64cc:	6818      	ldr	r0, [r3, #0]
   d64ce:	6859      	ldr	r1, [r3, #4]
   d64d0:	462a      	mov	r2, r5
   d64d2:	c203      	stmia	r2!, {r0, r1}
   d64d4:	3308      	adds	r3, #8
   d64d6:	42a3      	cmp	r3, r4
   d64d8:	4615      	mov	r5, r2
   d64da:	d1f7      	bne.n	d64cc <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d64dc:	a901      	add	r1, sp, #4
   d64de:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d64e0:	ad07      	add	r5, sp, #28
   d64e2:	f7ff fcb3 	bl	d5e4c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d64e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d64e8:	1d3c      	adds	r4, r7, #4
   d64ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d64ec:	682b      	ldr	r3, [r5, #0]
   d64ee:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d64f0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d64f2:	69f6      	ldr	r6, [r6, #28]
   d64f4:	e7c8      	b.n	d6488 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d64f6:	9800      	ldr	r0, [sp, #0]
   d64f8:	f7fe f974 	bl	d47e4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d64fc:	4638      	mov	r0, r7
   d64fe:	b015      	add	sp, #84	; 0x54
   d6500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6504 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6504:	4b02      	ldr	r3, [pc, #8]	; (d6510 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6506:	4a03      	ldr	r2, [pc, #12]	; (d6514 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6508:	601a      	str	r2, [r3, #0]
   d650a:	2200      	movs	r2, #0
   d650c:	605a      	str	r2, [r3, #4]
   d650e:	4770      	bx	lr
   d6510:	2003e70c 	.word	0x2003e70c
   d6514:	000d7ddc 	.word	0x000d7ddc

000d6518 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6518:	b510      	push	{r4, lr}
   d651a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d651c:	480f      	ldr	r0, [pc, #60]	; (d655c <pinAvailable+0x44>)
   d651e:	f7fe fca3 	bl	d4e68 <_ZN8SPIClass9isEnabledEv>
   d6522:	b128      	cbz	r0, d6530 <pinAvailable+0x18>
   d6524:	f1a4 030b 	sub.w	r3, r4, #11
   d6528:	2b02      	cmp	r3, #2
   d652a:	d801      	bhi.n	d6530 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d652c:	2000      	movs	r0, #0
   d652e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6530:	f000 f876 	bl	d6620 <_Z19__fetch_global_Wirev>
   d6534:	f7ff fe96 	bl	d6264 <_ZN7TwoWire9isEnabledEv>
   d6538:	b108      	cbz	r0, d653e <pinAvailable+0x26>
   d653a:	2c01      	cmp	r4, #1
   d653c:	d9f6      	bls.n	d652c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d653e:	f7ff fe19 	bl	d6174 <_Z22__fetch_global_Serial1v>
   d6542:	f7ff fe13 	bl	d616c <_ZN11USARTSerial9isEnabledEv>
   d6546:	b118      	cbz	r0, d6550 <pinAvailable+0x38>
   d6548:	f1a4 0309 	sub.w	r3, r4, #9
   d654c:	2b01      	cmp	r3, #1
   d654e:	d9ed      	bls.n	d652c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6550:	2c23      	cmp	r4, #35	; 0x23
   d6552:	bf8c      	ite	hi
   d6554:	2000      	movhi	r0, #0
   d6556:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6558:	bd10      	pop	{r4, pc}
   d655a:	bf00      	nop
   d655c:	2003e714 	.word	0x2003e714

000d6560 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6560:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6562:	b538      	push	{r3, r4, r5, lr}
   d6564:	4604      	mov	r4, r0
   d6566:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6568:	d80a      	bhi.n	d6580 <pinMode+0x20>
   d656a:	29ff      	cmp	r1, #255	; 0xff
   d656c:	d008      	beq.n	d6580 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d656e:	f7ff ffd3 	bl	d6518 <pinAvailable>
   d6572:	b128      	cbz	r0, d6580 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6574:	4629      	mov	r1, r5
   d6576:	4620      	mov	r0, r4
}
   d6578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d657c:	f7fe b94a 	b.w	d4814 <HAL_Pin_Mode>
   d6580:	bd38      	pop	{r3, r4, r5, pc}

000d6582 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6582:	b538      	push	{r3, r4, r5, lr}
   d6584:	4604      	mov	r4, r0
   d6586:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6588:	f7fe f94c 	bl	d4824 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d658c:	28ff      	cmp	r0, #255	; 0xff
   d658e:	d010      	beq.n	d65b2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6590:	2806      	cmp	r0, #6
   d6592:	d804      	bhi.n	d659e <digitalWrite+0x1c>
   d6594:	234d      	movs	r3, #77	; 0x4d
   d6596:	fa23 f000 	lsr.w	r0, r3, r0
   d659a:	07c3      	lsls	r3, r0, #31
   d659c:	d409      	bmi.n	d65b2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d659e:	4620      	mov	r0, r4
   d65a0:	f7ff ffba 	bl	d6518 <pinAvailable>
   d65a4:	b128      	cbz	r0, d65b2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d65a6:	4629      	mov	r1, r5
   d65a8:	4620      	mov	r0, r4
}
   d65aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d65ae:	f7fe b941 	b.w	d4834 <HAL_GPIO_Write>
   d65b2:	bd38      	pop	{r3, r4, r5, pc}

000d65b4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d65b4:	b510      	push	{r4, lr}
   d65b6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d65b8:	f7fe f934 	bl	d4824 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d65bc:	3804      	subs	r0, #4
   d65be:	b2c0      	uxtb	r0, r0
   d65c0:	2801      	cmp	r0, #1
   d65c2:	d908      	bls.n	d65d6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d65c4:	4620      	mov	r0, r4
   d65c6:	f7ff ffa7 	bl	d6518 <pinAvailable>
   d65ca:	b120      	cbz	r0, d65d6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d65cc:	4620      	mov	r0, r4
}
   d65ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d65d2:	f7fe b937 	b.w	d4844 <HAL_GPIO_Read>
}
   d65d6:	2000      	movs	r0, #0
   d65d8:	bd10      	pop	{r4, pc}
	...

000d65dc <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d65dc:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d65de:	4c0c      	ldr	r4, [pc, #48]	; (d6610 <_GLOBAL__sub_I_SPI+0x34>)
   d65e0:	4e0c      	ldr	r6, [pc, #48]	; (d6614 <_GLOBAL__sub_I_SPI+0x38>)
   d65e2:	4d0d      	ldr	r5, [pc, #52]	; (d6618 <_GLOBAL__sub_I_SPI+0x3c>)
   d65e4:	2100      	movs	r1, #0
   d65e6:	4620      	mov	r0, r4
   d65e8:	f7fe fb96 	bl	d4d18 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d65ec:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d65ee:	4c0b      	ldr	r4, [pc, #44]	; (d661c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d65f0:	4632      	mov	r2, r6
   d65f2:	4629      	mov	r1, r5
   d65f4:	f000 f834 	bl	d6660 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d65f8:	2101      	movs	r1, #1
   d65fa:	4620      	mov	r0, r4
   d65fc:	f7fe fb8c 	bl	d4d18 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6600:	4632      	mov	r2, r6
   d6602:	4629      	mov	r1, r5
   d6604:	4620      	mov	r0, r4
   d6606:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d660a:	f000 b829 	b.w	d6660 <__aeabi_atexit>
   d660e:	bf00      	nop
   d6610:	2003e714 	.word	0x2003e714
   d6614:	2003e2b0 	.word	0x2003e2b0
   d6618:	000d4d09 	.word	0x000d4d09
   d661c:	2003e724 	.word	0x2003e724

000d6620 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6620:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6622:	4d0b      	ldr	r5, [pc, #44]	; (d6650 <_Z19__fetch_global_Wirev+0x30>)
   d6624:	6829      	ldr	r1, [r5, #0]
   d6626:	f011 0401 	ands.w	r4, r1, #1
   d662a:	d10f      	bne.n	d664c <_Z19__fetch_global_Wirev+0x2c>
   d662c:	4628      	mov	r0, r5
   d662e:	f7fd fd3a 	bl	d40a6 <__cxa_guard_acquire>
   d6632:	b158      	cbz	r0, d664c <_Z19__fetch_global_Wirev+0x2c>
   d6634:	4621      	mov	r1, r4
   d6636:	4807      	ldr	r0, [pc, #28]	; (d6654 <_Z19__fetch_global_Wirev+0x34>)
   d6638:	f7ff fe02 	bl	d6240 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d663c:	4628      	mov	r0, r5
   d663e:	f7fd fd37 	bl	d40b0 <__cxa_guard_release>
   d6642:	4a05      	ldr	r2, [pc, #20]	; (d6658 <_Z19__fetch_global_Wirev+0x38>)
   d6644:	4905      	ldr	r1, [pc, #20]	; (d665c <_Z19__fetch_global_Wirev+0x3c>)
   d6646:	4803      	ldr	r0, [pc, #12]	; (d6654 <_Z19__fetch_global_Wirev+0x34>)
   d6648:	f000 f80a 	bl	d6660 <__aeabi_atexit>
	return wire;
}
   d664c:	4801      	ldr	r0, [pc, #4]	; (d6654 <_Z19__fetch_global_Wirev+0x34>)
   d664e:	bd38      	pop	{r3, r4, r5, pc}
   d6650:	2003e738 	.word	0x2003e738
   d6654:	2003e73c 	.word	0x2003e73c
   d6658:	2003e2b0 	.word	0x2003e2b0
   d665c:	000d61e9 	.word	0x000d61e9

000d6660 <__aeabi_atexit>:
   d6660:	460b      	mov	r3, r1
   d6662:	4601      	mov	r1, r0
   d6664:	4618      	mov	r0, r3
   d6666:	f001 b8e3 	b.w	d7830 <__cxa_atexit>

000d666a <_ZdlPvj>:
   d666a:	f7fd bd18 	b.w	d409e <_ZdlPv>

000d666e <_ZSt25__throw_bad_function_callv>:
   d666e:	b508      	push	{r3, lr}
   d6670:	f7fe faf4 	bl	d4c5c <abort>

000d6674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6674:	4b18      	ldr	r3, [pc, #96]	; (d66d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6676:	681a      	ldr	r2, [r3, #0]
   d6678:	07d1      	lsls	r1, r2, #31
   d667a:	bf5c      	itt	pl
   d667c:	2201      	movpl	r2, #1
   d667e:	601a      	strpl	r2, [r3, #0]
   d6680:	4b16      	ldr	r3, [pc, #88]	; (d66dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6682:	681a      	ldr	r2, [r3, #0]
   d6684:	07d2      	lsls	r2, r2, #31
   d6686:	bf5c      	itt	pl
   d6688:	2201      	movpl	r2, #1
   d668a:	601a      	strpl	r2, [r3, #0]
   d668c:	4b14      	ldr	r3, [pc, #80]	; (d66e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d668e:	681a      	ldr	r2, [r3, #0]
   d6690:	07d0      	lsls	r0, r2, #31
   d6692:	bf5c      	itt	pl
   d6694:	2201      	movpl	r2, #1
   d6696:	601a      	strpl	r2, [r3, #0]
   d6698:	4b12      	ldr	r3, [pc, #72]	; (d66e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d669a:	681a      	ldr	r2, [r3, #0]
   d669c:	07d1      	lsls	r1, r2, #31
   d669e:	bf5c      	itt	pl
   d66a0:	2201      	movpl	r2, #1
   d66a2:	601a      	strpl	r2, [r3, #0]
   d66a4:	4b10      	ldr	r3, [pc, #64]	; (d66e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d66a6:	681a      	ldr	r2, [r3, #0]
   d66a8:	07d2      	lsls	r2, r2, #31
   d66aa:	bf5c      	itt	pl
   d66ac:	2201      	movpl	r2, #1
   d66ae:	601a      	strpl	r2, [r3, #0]
   d66b0:	4b0e      	ldr	r3, [pc, #56]	; (d66ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d66b2:	681a      	ldr	r2, [r3, #0]
   d66b4:	07d0      	lsls	r0, r2, #31
   d66b6:	bf5c      	itt	pl
   d66b8:	2201      	movpl	r2, #1
   d66ba:	601a      	strpl	r2, [r3, #0]
   d66bc:	4b0c      	ldr	r3, [pc, #48]	; (d66f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d66be:	681a      	ldr	r2, [r3, #0]
   d66c0:	07d1      	lsls	r1, r2, #31
   d66c2:	bf5c      	itt	pl
   d66c4:	2201      	movpl	r2, #1
   d66c6:	601a      	strpl	r2, [r3, #0]
   d66c8:	4b0a      	ldr	r3, [pc, #40]	; (d66f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d66ca:	681a      	ldr	r2, [r3, #0]
   d66cc:	07d2      	lsls	r2, r2, #31
   d66ce:	bf5c      	itt	pl
   d66d0:	2201      	movpl	r2, #1
   d66d2:	601a      	strpl	r2, [r3, #0]
   d66d4:	4770      	bx	lr
   d66d6:	bf00      	nop
   d66d8:	2003e76c 	.word	0x2003e76c
   d66dc:	2003e768 	.word	0x2003e768
   d66e0:	2003e764 	.word	0x2003e764
   d66e4:	2003e760 	.word	0x2003e760
   d66e8:	2003e75c 	.word	0x2003e75c
   d66ec:	2003e758 	.word	0x2003e758
   d66f0:	2003e754 	.word	0x2003e754
   d66f4:	2003e750 	.word	0x2003e750

000d66f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d66f8:	4b24      	ldr	r3, [pc, #144]	; (d678c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d66fa:	681a      	ldr	r2, [r3, #0]
   d66fc:	07d0      	lsls	r0, r2, #31
   d66fe:	bf5c      	itt	pl
   d6700:	2201      	movpl	r2, #1
   d6702:	601a      	strpl	r2, [r3, #0]
   d6704:	4b22      	ldr	r3, [pc, #136]	; (d6790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6706:	681a      	ldr	r2, [r3, #0]
   d6708:	07d1      	lsls	r1, r2, #31
   d670a:	bf5c      	itt	pl
   d670c:	2201      	movpl	r2, #1
   d670e:	601a      	strpl	r2, [r3, #0]
   d6710:	4b20      	ldr	r3, [pc, #128]	; (d6794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6712:	681a      	ldr	r2, [r3, #0]
   d6714:	07d2      	lsls	r2, r2, #31
   d6716:	bf5c      	itt	pl
   d6718:	2201      	movpl	r2, #1
   d671a:	601a      	strpl	r2, [r3, #0]
   d671c:	4b1e      	ldr	r3, [pc, #120]	; (d6798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d671e:	681a      	ldr	r2, [r3, #0]
   d6720:	07d0      	lsls	r0, r2, #31
   d6722:	bf5c      	itt	pl
   d6724:	2201      	movpl	r2, #1
   d6726:	601a      	strpl	r2, [r3, #0]
   d6728:	4b1c      	ldr	r3, [pc, #112]	; (d679c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d672a:	681a      	ldr	r2, [r3, #0]
   d672c:	07d1      	lsls	r1, r2, #31
   d672e:	bf5c      	itt	pl
   d6730:	2201      	movpl	r2, #1
   d6732:	601a      	strpl	r2, [r3, #0]
   d6734:	4b1a      	ldr	r3, [pc, #104]	; (d67a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6736:	681a      	ldr	r2, [r3, #0]
   d6738:	07d2      	lsls	r2, r2, #31
   d673a:	bf5c      	itt	pl
   d673c:	2201      	movpl	r2, #1
   d673e:	601a      	strpl	r2, [r3, #0]
   d6740:	4b18      	ldr	r3, [pc, #96]	; (d67a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6742:	681a      	ldr	r2, [r3, #0]
   d6744:	07d0      	lsls	r0, r2, #31
   d6746:	bf5c      	itt	pl
   d6748:	2201      	movpl	r2, #1
   d674a:	601a      	strpl	r2, [r3, #0]
   d674c:	4b16      	ldr	r3, [pc, #88]	; (d67a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d674e:	681a      	ldr	r2, [r3, #0]
   d6750:	07d1      	lsls	r1, r2, #31
   d6752:	bf5c      	itt	pl
   d6754:	2201      	movpl	r2, #1
   d6756:	601a      	strpl	r2, [r3, #0]
   d6758:	4b14      	ldr	r3, [pc, #80]	; (d67ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d675a:	681a      	ldr	r2, [r3, #0]
   d675c:	07d2      	lsls	r2, r2, #31
   d675e:	bf5c      	itt	pl
   d6760:	2201      	movpl	r2, #1
   d6762:	601a      	strpl	r2, [r3, #0]
   d6764:	4b12      	ldr	r3, [pc, #72]	; (d67b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6766:	681a      	ldr	r2, [r3, #0]
   d6768:	07d0      	lsls	r0, r2, #31
   d676a:	bf5c      	itt	pl
   d676c:	2201      	movpl	r2, #1
   d676e:	601a      	strpl	r2, [r3, #0]
   d6770:	4b10      	ldr	r3, [pc, #64]	; (d67b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6772:	681a      	ldr	r2, [r3, #0]
   d6774:	07d1      	lsls	r1, r2, #31
   d6776:	bf5c      	itt	pl
   d6778:	2201      	movpl	r2, #1
   d677a:	601a      	strpl	r2, [r3, #0]
   d677c:	4b0e      	ldr	r3, [pc, #56]	; (d67b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d677e:	681a      	ldr	r2, [r3, #0]
   d6780:	07d2      	lsls	r2, r2, #31
   d6782:	bf5c      	itt	pl
   d6784:	2201      	movpl	r2, #1
   d6786:	601a      	strpl	r2, [r3, #0]
   d6788:	4770      	bx	lr
   d678a:	bf00      	nop
   d678c:	2003e79c 	.word	0x2003e79c
   d6790:	2003e798 	.word	0x2003e798
   d6794:	2003e794 	.word	0x2003e794
   d6798:	2003e790 	.word	0x2003e790
   d679c:	2003e78c 	.word	0x2003e78c
   d67a0:	2003e788 	.word	0x2003e788
   d67a4:	2003e784 	.word	0x2003e784
   d67a8:	2003e780 	.word	0x2003e780
   d67ac:	2003e77c 	.word	0x2003e77c
   d67b0:	2003e778 	.word	0x2003e778
   d67b4:	2003e774 	.word	0x2003e774
   d67b8:	2003e770 	.word	0x2003e770

000d67bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d67bc:	4b24      	ldr	r3, [pc, #144]	; (d6850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d67be:	681a      	ldr	r2, [r3, #0]
   d67c0:	07d0      	lsls	r0, r2, #31
   d67c2:	bf5c      	itt	pl
   d67c4:	2201      	movpl	r2, #1
   d67c6:	601a      	strpl	r2, [r3, #0]
   d67c8:	4b22      	ldr	r3, [pc, #136]	; (d6854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d67ca:	681a      	ldr	r2, [r3, #0]
   d67cc:	07d1      	lsls	r1, r2, #31
   d67ce:	bf5c      	itt	pl
   d67d0:	2201      	movpl	r2, #1
   d67d2:	601a      	strpl	r2, [r3, #0]
   d67d4:	4b20      	ldr	r3, [pc, #128]	; (d6858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d67d6:	681a      	ldr	r2, [r3, #0]
   d67d8:	07d2      	lsls	r2, r2, #31
   d67da:	bf5c      	itt	pl
   d67dc:	2201      	movpl	r2, #1
   d67de:	601a      	strpl	r2, [r3, #0]
   d67e0:	4b1e      	ldr	r3, [pc, #120]	; (d685c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d67e2:	681a      	ldr	r2, [r3, #0]
   d67e4:	07d0      	lsls	r0, r2, #31
   d67e6:	bf5c      	itt	pl
   d67e8:	2201      	movpl	r2, #1
   d67ea:	601a      	strpl	r2, [r3, #0]
   d67ec:	4b1c      	ldr	r3, [pc, #112]	; (d6860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d67ee:	681a      	ldr	r2, [r3, #0]
   d67f0:	07d1      	lsls	r1, r2, #31
   d67f2:	bf5c      	itt	pl
   d67f4:	2201      	movpl	r2, #1
   d67f6:	601a      	strpl	r2, [r3, #0]
   d67f8:	4b1a      	ldr	r3, [pc, #104]	; (d6864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d67fa:	681a      	ldr	r2, [r3, #0]
   d67fc:	07d2      	lsls	r2, r2, #31
   d67fe:	bf5c      	itt	pl
   d6800:	2201      	movpl	r2, #1
   d6802:	601a      	strpl	r2, [r3, #0]
   d6804:	4b18      	ldr	r3, [pc, #96]	; (d6868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6806:	681a      	ldr	r2, [r3, #0]
   d6808:	07d0      	lsls	r0, r2, #31
   d680a:	bf5c      	itt	pl
   d680c:	2201      	movpl	r2, #1
   d680e:	601a      	strpl	r2, [r3, #0]
   d6810:	4b16      	ldr	r3, [pc, #88]	; (d686c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6812:	681a      	ldr	r2, [r3, #0]
   d6814:	07d1      	lsls	r1, r2, #31
   d6816:	bf5c      	itt	pl
   d6818:	2201      	movpl	r2, #1
   d681a:	601a      	strpl	r2, [r3, #0]
   d681c:	4b14      	ldr	r3, [pc, #80]	; (d6870 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d681e:	681a      	ldr	r2, [r3, #0]
   d6820:	07d2      	lsls	r2, r2, #31
   d6822:	bf5c      	itt	pl
   d6824:	2201      	movpl	r2, #1
   d6826:	601a      	strpl	r2, [r3, #0]
   d6828:	4b12      	ldr	r3, [pc, #72]	; (d6874 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d682a:	681a      	ldr	r2, [r3, #0]
   d682c:	07d0      	lsls	r0, r2, #31
   d682e:	bf5c      	itt	pl
   d6830:	2201      	movpl	r2, #1
   d6832:	601a      	strpl	r2, [r3, #0]
   d6834:	4b10      	ldr	r3, [pc, #64]	; (d6878 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6836:	681a      	ldr	r2, [r3, #0]
   d6838:	07d1      	lsls	r1, r2, #31
   d683a:	bf5c      	itt	pl
   d683c:	2201      	movpl	r2, #1
   d683e:	601a      	strpl	r2, [r3, #0]
   d6840:	4b0e      	ldr	r3, [pc, #56]	; (d687c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6842:	681a      	ldr	r2, [r3, #0]
   d6844:	07d2      	lsls	r2, r2, #31
   d6846:	bf5c      	itt	pl
   d6848:	2201      	movpl	r2, #1
   d684a:	601a      	strpl	r2, [r3, #0]
   d684c:	4770      	bx	lr
   d684e:	bf00      	nop
   d6850:	2003e7cc 	.word	0x2003e7cc
   d6854:	2003e7c8 	.word	0x2003e7c8
   d6858:	2003e7c4 	.word	0x2003e7c4
   d685c:	2003e7c0 	.word	0x2003e7c0
   d6860:	2003e7bc 	.word	0x2003e7bc
   d6864:	2003e7b8 	.word	0x2003e7b8
   d6868:	2003e7b4 	.word	0x2003e7b4
   d686c:	2003e7b0 	.word	0x2003e7b0
   d6870:	2003e7ac 	.word	0x2003e7ac
   d6874:	2003e7a8 	.word	0x2003e7a8
   d6878:	2003e7a4 	.word	0x2003e7a4
   d687c:	2003e7a0 	.word	0x2003e7a0

000d6880 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6880:	4b18      	ldr	r3, [pc, #96]	; (d68e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6882:	681a      	ldr	r2, [r3, #0]
   d6884:	07d1      	lsls	r1, r2, #31
   d6886:	bf5c      	itt	pl
   d6888:	2201      	movpl	r2, #1
   d688a:	601a      	strpl	r2, [r3, #0]
   d688c:	4b16      	ldr	r3, [pc, #88]	; (d68e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d688e:	681a      	ldr	r2, [r3, #0]
   d6890:	07d2      	lsls	r2, r2, #31
   d6892:	bf5c      	itt	pl
   d6894:	2201      	movpl	r2, #1
   d6896:	601a      	strpl	r2, [r3, #0]
   d6898:	4b14      	ldr	r3, [pc, #80]	; (d68ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d689a:	681a      	ldr	r2, [r3, #0]
   d689c:	07d0      	lsls	r0, r2, #31
   d689e:	bf5c      	itt	pl
   d68a0:	2201      	movpl	r2, #1
   d68a2:	601a      	strpl	r2, [r3, #0]
   d68a4:	4b12      	ldr	r3, [pc, #72]	; (d68f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d68a6:	681a      	ldr	r2, [r3, #0]
   d68a8:	07d1      	lsls	r1, r2, #31
   d68aa:	bf5c      	itt	pl
   d68ac:	2201      	movpl	r2, #1
   d68ae:	601a      	strpl	r2, [r3, #0]
   d68b0:	4b10      	ldr	r3, [pc, #64]	; (d68f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d68b2:	681a      	ldr	r2, [r3, #0]
   d68b4:	07d2      	lsls	r2, r2, #31
   d68b6:	bf5c      	itt	pl
   d68b8:	2201      	movpl	r2, #1
   d68ba:	601a      	strpl	r2, [r3, #0]
   d68bc:	4b0e      	ldr	r3, [pc, #56]	; (d68f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d68be:	681a      	ldr	r2, [r3, #0]
   d68c0:	07d0      	lsls	r0, r2, #31
   d68c2:	bf5c      	itt	pl
   d68c4:	2201      	movpl	r2, #1
   d68c6:	601a      	strpl	r2, [r3, #0]
   d68c8:	4b0c      	ldr	r3, [pc, #48]	; (d68fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d68ca:	681a      	ldr	r2, [r3, #0]
   d68cc:	07d1      	lsls	r1, r2, #31
   d68ce:	bf5c      	itt	pl
   d68d0:	2201      	movpl	r2, #1
   d68d2:	601a      	strpl	r2, [r3, #0]
   d68d4:	4b0a      	ldr	r3, [pc, #40]	; (d6900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d68d6:	681a      	ldr	r2, [r3, #0]
   d68d8:	07d2      	lsls	r2, r2, #31
   d68da:	bf5c      	itt	pl
   d68dc:	2201      	movpl	r2, #1
   d68de:	601a      	strpl	r2, [r3, #0]
   d68e0:	4770      	bx	lr
   d68e2:	bf00      	nop
   d68e4:	2003e7ec 	.word	0x2003e7ec
   d68e8:	2003e7e8 	.word	0x2003e7e8
   d68ec:	2003e7e4 	.word	0x2003e7e4
   d68f0:	2003e7e0 	.word	0x2003e7e0
   d68f4:	2003e7dc 	.word	0x2003e7dc
   d68f8:	2003e7d8 	.word	0x2003e7d8
   d68fc:	2003e7d4 	.word	0x2003e7d4
   d6900:	2003e7d0 	.word	0x2003e7d0

000d6904 <sqrt>:
   d6904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6908:	ed2d 8b02 	vpush	{d8}
   d690c:	b08b      	sub	sp, #44	; 0x2c
   d690e:	ec55 4b10 	vmov	r4, r5, d0
   d6912:	f000 f857 	bl	d69c4 <__ieee754_sqrt>
   d6916:	4b29      	ldr	r3, [pc, #164]	; (d69bc <sqrt+0xb8>)
   d6918:	eeb0 8a40 	vmov.f32	s16, s0
   d691c:	eef0 8a60 	vmov.f32	s17, s1
   d6920:	f993 6000 	ldrsb.w	r6, [r3]
   d6924:	1c73      	adds	r3, r6, #1
   d6926:	d012      	beq.n	d694e <sqrt+0x4a>
   d6928:	4622      	mov	r2, r4
   d692a:	462b      	mov	r3, r5
   d692c:	4620      	mov	r0, r4
   d692e:	4629      	mov	r1, r5
   d6930:	f000 fd6c 	bl	d740c <__aeabi_dcmpun>
   d6934:	4607      	mov	r7, r0
   d6936:	b950      	cbnz	r0, d694e <sqrt+0x4a>
   d6938:	f04f 0800 	mov.w	r8, #0
   d693c:	f04f 0900 	mov.w	r9, #0
   d6940:	4620      	mov	r0, r4
   d6942:	4629      	mov	r1, r5
   d6944:	4642      	mov	r2, r8
   d6946:	464b      	mov	r3, r9
   d6948:	f000 fd38 	bl	d73bc <__aeabi_dcmplt>
   d694c:	b940      	cbnz	r0, d6960 <sqrt+0x5c>
   d694e:	eeb0 0a48 	vmov.f32	s0, s16
   d6952:	eef0 0a68 	vmov.f32	s1, s17
   d6956:	b00b      	add	sp, #44	; 0x2c
   d6958:	ecbd 8b02 	vpop	{d8}
   d695c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6960:	4b17      	ldr	r3, [pc, #92]	; (d69c0 <sqrt+0xbc>)
   d6962:	9708      	str	r7, [sp, #32]
   d6964:	2201      	movs	r2, #1
   d6966:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d696a:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d696e:	e88d 000c 	stmia.w	sp, {r2, r3}
   d6972:	b1b6      	cbz	r6, d69a2 <sqrt+0x9e>
   d6974:	4642      	mov	r2, r8
   d6976:	464b      	mov	r3, r9
   d6978:	4640      	mov	r0, r8
   d697a:	4649      	mov	r1, r9
   d697c:	f000 fbd6 	bl	d712c <__aeabi_ddiv>
   d6980:	2e02      	cmp	r6, #2
   d6982:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d6986:	d10e      	bne.n	d69a6 <sqrt+0xa2>
   d6988:	f7fe f978 	bl	d4c7c <__errno>
   d698c:	2321      	movs	r3, #33	; 0x21
   d698e:	6003      	str	r3, [r0, #0]
   d6990:	9b08      	ldr	r3, [sp, #32]
   d6992:	b973      	cbnz	r3, d69b2 <sqrt+0xae>
   d6994:	ed9d 0b06 	vldr	d0, [sp, #24]
   d6998:	b00b      	add	sp, #44	; 0x2c
   d699a:	ecbd 8b02 	vpop	{d8}
   d699e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d69a2:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d69a6:	4668      	mov	r0, sp
   d69a8:	f000 f8dc 	bl	d6b64 <matherr>
   d69ac:	2800      	cmp	r0, #0
   d69ae:	d1ef      	bne.n	d6990 <sqrt+0x8c>
   d69b0:	e7ea      	b.n	d6988 <sqrt+0x84>
   d69b2:	f7fe f963 	bl	d4c7c <__errno>
   d69b6:	9b08      	ldr	r3, [sp, #32]
   d69b8:	6003      	str	r3, [r0, #0]
   d69ba:	e7eb      	b.n	d6994 <sqrt+0x90>
   d69bc:	2003e244 	.word	0x2003e244
   d69c0:	000d7e08 	.word	0x000d7e08

000d69c4 <__ieee754_sqrt>:
   d69c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d69c8:	4965      	ldr	r1, [pc, #404]	; (d6b60 <__ieee754_sqrt+0x19c>)
   d69ca:	ec55 4b10 	vmov	r4, r5, d0
   d69ce:	460e      	mov	r6, r1
   d69d0:	4029      	ands	r1, r5
   d69d2:	42b1      	cmp	r1, r6
   d69d4:	f000 8097 	beq.w	d6b06 <__ieee754_sqrt+0x142>
   d69d8:	2d00      	cmp	r5, #0
   d69da:	462b      	mov	r3, r5
   d69dc:	ee10 2a10 	vmov	r2, s0
   d69e0:	dd74      	ble.n	d6acc <__ieee754_sqrt+0x108>
   d69e2:	152f      	asrs	r7, r5, #20
   d69e4:	d07f      	beq.n	d6ae6 <__ieee754_sqrt+0x122>
   d69e6:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d69ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d69ee:	07f9      	lsls	r1, r7, #31
   d69f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d69f4:	d465      	bmi.n	d6ac2 <__ieee754_sqrt+0xfe>
   d69f6:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d69fa:	2600      	movs	r6, #0
   d69fc:	440b      	add	r3, r1
   d69fe:	107f      	asrs	r7, r7, #1
   d6a00:	0052      	lsls	r2, r2, #1
   d6a02:	46b6      	mov	lr, r6
   d6a04:	2016      	movs	r0, #22
   d6a06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d6a0a:	eb0e 0401 	add.w	r4, lr, r1
   d6a0e:	429c      	cmp	r4, r3
   d6a10:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d6a14:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d6a18:	dc03      	bgt.n	d6a22 <__ieee754_sqrt+0x5e>
   d6a1a:	1b1b      	subs	r3, r3, r4
   d6a1c:	eb04 0e01 	add.w	lr, r4, r1
   d6a20:	440e      	add	r6, r1
   d6a22:	3801      	subs	r0, #1
   d6a24:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d6a28:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d6a2c:	d1ed      	bne.n	d6a0a <__ieee754_sqrt+0x46>
   d6a2e:	4684      	mov	ip, r0
   d6a30:	2420      	movs	r4, #32
   d6a32:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d6a36:	e009      	b.n	d6a4c <__ieee754_sqrt+0x88>
   d6a38:	d020      	beq.n	d6a7c <__ieee754_sqrt+0xb8>
   d6a3a:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d6a3e:	3c01      	subs	r4, #1
   d6a40:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d6a44:	442b      	add	r3, r5
   d6a46:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d6a4a:	d020      	beq.n	d6a8e <__ieee754_sqrt+0xca>
   d6a4c:	459e      	cmp	lr, r3
   d6a4e:	eb01 050c 	add.w	r5, r1, ip
   d6a52:	daf1      	bge.n	d6a38 <__ieee754_sqrt+0x74>
   d6a54:	2d00      	cmp	r5, #0
   d6a56:	eb05 0c01 	add.w	ip, r5, r1
   d6a5a:	db09      	blt.n	d6a70 <__ieee754_sqrt+0xac>
   d6a5c:	46f0      	mov	r8, lr
   d6a5e:	4295      	cmp	r5, r2
   d6a60:	ebce 0303 	rsb	r3, lr, r3
   d6a64:	d900      	bls.n	d6a68 <__ieee754_sqrt+0xa4>
   d6a66:	3b01      	subs	r3, #1
   d6a68:	1b52      	subs	r2, r2, r5
   d6a6a:	4408      	add	r0, r1
   d6a6c:	46c6      	mov	lr, r8
   d6a6e:	e7e4      	b.n	d6a3a <__ieee754_sqrt+0x76>
   d6a70:	f1bc 0f00 	cmp.w	ip, #0
   d6a74:	dbf2      	blt.n	d6a5c <__ieee754_sqrt+0x98>
   d6a76:	f10e 0801 	add.w	r8, lr, #1
   d6a7a:	e7f0      	b.n	d6a5e <__ieee754_sqrt+0x9a>
   d6a7c:	4295      	cmp	r5, r2
   d6a7e:	d81e      	bhi.n	d6abe <__ieee754_sqrt+0xfa>
   d6a80:	2d00      	cmp	r5, #0
   d6a82:	eb05 0c01 	add.w	ip, r5, r1
   d6a86:	db50      	blt.n	d6b2a <__ieee754_sqrt+0x166>
   d6a88:	4698      	mov	r8, r3
   d6a8a:	2300      	movs	r3, #0
   d6a8c:	e7ec      	b.n	d6a68 <__ieee754_sqrt+0xa4>
   d6a8e:	4313      	orrs	r3, r2
   d6a90:	d004      	beq.n	d6a9c <__ieee754_sqrt+0xd8>
   d6a92:	1c42      	adds	r2, r0, #1
   d6a94:	d04d      	beq.n	d6b32 <__ieee754_sqrt+0x16e>
   d6a96:	f000 0301 	and.w	r3, r0, #1
   d6a9a:	4418      	add	r0, r3
   d6a9c:	0840      	lsrs	r0, r0, #1
   d6a9e:	1071      	asrs	r1, r6, #1
   d6aa0:	07f3      	lsls	r3, r6, #31
   d6aa2:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d6aa6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d6aaa:	bf48      	it	mi
   d6aac:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d6ab0:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d6ab4:	4602      	mov	r2, r0
   d6ab6:	ec43 2b10 	vmov	d0, r2, r3
   d6aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6abe:	4673      	mov	r3, lr
   d6ac0:	e7bb      	b.n	d6a3a <__ieee754_sqrt+0x76>
   d6ac2:	005b      	lsls	r3, r3, #1
   d6ac4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d6ac8:	0052      	lsls	r2, r2, #1
   d6aca:	e794      	b.n	d69f6 <__ieee754_sqrt+0x32>
   d6acc:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d6ad0:	4321      	orrs	r1, r4
   d6ad2:	d028      	beq.n	d6b26 <__ieee754_sqrt+0x162>
   d6ad4:	bbad      	cbnz	r5, d6b42 <__ieee754_sqrt+0x17e>
   d6ad6:	462f      	mov	r7, r5
   d6ad8:	0ad3      	lsrs	r3, r2, #11
   d6ada:	3f15      	subs	r7, #21
   d6adc:	0552      	lsls	r2, r2, #21
   d6ade:	2b00      	cmp	r3, #0
   d6ae0:	d0fa      	beq.n	d6ad8 <__ieee754_sqrt+0x114>
   d6ae2:	02dd      	lsls	r5, r3, #11
   d6ae4:	d428      	bmi.n	d6b38 <__ieee754_sqrt+0x174>
   d6ae6:	2100      	movs	r1, #0
   d6ae8:	e000      	b.n	d6aec <__ieee754_sqrt+0x128>
   d6aea:	4601      	mov	r1, r0
   d6aec:	005b      	lsls	r3, r3, #1
   d6aee:	02dc      	lsls	r4, r3, #11
   d6af0:	f101 0001 	add.w	r0, r1, #1
   d6af4:	d5f9      	bpl.n	d6aea <__ieee754_sqrt+0x126>
   d6af6:	f1c0 0420 	rsb	r4, r0, #32
   d6afa:	fa22 f404 	lsr.w	r4, r2, r4
   d6afe:	4323      	orrs	r3, r4
   d6b00:	1a7f      	subs	r7, r7, r1
   d6b02:	4082      	lsls	r2, r0
   d6b04:	e76f      	b.n	d69e6 <__ieee754_sqrt+0x22>
   d6b06:	ee10 2a10 	vmov	r2, s0
   d6b0a:	462b      	mov	r3, r5
   d6b0c:	ee10 0a10 	vmov	r0, s0
   d6b10:	4629      	mov	r1, r5
   d6b12:	f000 f9e1 	bl	d6ed8 <__aeabi_dmul>
   d6b16:	4622      	mov	r2, r4
   d6b18:	462b      	mov	r3, r5
   d6b1a:	f000 f82b 	bl	d6b74 <__adddf3>
   d6b1e:	ec41 0b10 	vmov	d0, r0, r1
   d6b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6b2a:	f1bc 0f00 	cmp.w	ip, #0
   d6b2e:	daa2      	bge.n	d6a76 <__ieee754_sqrt+0xb2>
   d6b30:	e7aa      	b.n	d6a88 <__ieee754_sqrt+0xc4>
   d6b32:	3601      	adds	r6, #1
   d6b34:	4620      	mov	r0, r4
   d6b36:	e7b2      	b.n	d6a9e <__ieee754_sqrt+0xda>
   d6b38:	2420      	movs	r4, #32
   d6b3a:	f04f 31ff 	mov.w	r1, #4294967295
   d6b3e:	2000      	movs	r0, #0
   d6b40:	e7db      	b.n	d6afa <__ieee754_sqrt+0x136>
   d6b42:	ee10 2a10 	vmov	r2, s0
   d6b46:	462b      	mov	r3, r5
   d6b48:	4620      	mov	r0, r4
   d6b4a:	4629      	mov	r1, r5
   d6b4c:	f000 f810 	bl	d6b70 <__aeabi_dsub>
   d6b50:	4602      	mov	r2, r0
   d6b52:	460b      	mov	r3, r1
   d6b54:	f000 faea 	bl	d712c <__aeabi_ddiv>
   d6b58:	ec41 0b10 	vmov	d0, r0, r1
   d6b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6b60:	7ff00000 	.word	0x7ff00000

000d6b64 <matherr>:
   d6b64:	2000      	movs	r0, #0
   d6b66:	4770      	bx	lr

000d6b68 <__aeabi_drsub>:
   d6b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6b6c:	e002      	b.n	d6b74 <__adddf3>
   d6b6e:	bf00      	nop

000d6b70 <__aeabi_dsub>:
   d6b70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6b74 <__adddf3>:
   d6b74:	b530      	push	{r4, r5, lr}
   d6b76:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6b7a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6b7e:	ea94 0f05 	teq	r4, r5
   d6b82:	bf08      	it	eq
   d6b84:	ea90 0f02 	teqeq	r0, r2
   d6b88:	bf1f      	itttt	ne
   d6b8a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6b8e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6b92:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6b96:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6b9a:	f000 80e2 	beq.w	d6d62 <__adddf3+0x1ee>
   d6b9e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6ba2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6ba6:	bfb8      	it	lt
   d6ba8:	426d      	neglt	r5, r5
   d6baa:	dd0c      	ble.n	d6bc6 <__adddf3+0x52>
   d6bac:	442c      	add	r4, r5
   d6bae:	ea80 0202 	eor.w	r2, r0, r2
   d6bb2:	ea81 0303 	eor.w	r3, r1, r3
   d6bb6:	ea82 0000 	eor.w	r0, r2, r0
   d6bba:	ea83 0101 	eor.w	r1, r3, r1
   d6bbe:	ea80 0202 	eor.w	r2, r0, r2
   d6bc2:	ea81 0303 	eor.w	r3, r1, r3
   d6bc6:	2d36      	cmp	r5, #54	; 0x36
   d6bc8:	bf88      	it	hi
   d6bca:	bd30      	pophi	{r4, r5, pc}
   d6bcc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6bd0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6bd4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6bd8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6bdc:	d002      	beq.n	d6be4 <__adddf3+0x70>
   d6bde:	4240      	negs	r0, r0
   d6be0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6be4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6be8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6bec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6bf0:	d002      	beq.n	d6bf8 <__adddf3+0x84>
   d6bf2:	4252      	negs	r2, r2
   d6bf4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6bf8:	ea94 0f05 	teq	r4, r5
   d6bfc:	f000 80a7 	beq.w	d6d4e <__adddf3+0x1da>
   d6c00:	f1a4 0401 	sub.w	r4, r4, #1
   d6c04:	f1d5 0e20 	rsbs	lr, r5, #32
   d6c08:	db0d      	blt.n	d6c26 <__adddf3+0xb2>
   d6c0a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6c0e:	fa22 f205 	lsr.w	r2, r2, r5
   d6c12:	1880      	adds	r0, r0, r2
   d6c14:	f141 0100 	adc.w	r1, r1, #0
   d6c18:	fa03 f20e 	lsl.w	r2, r3, lr
   d6c1c:	1880      	adds	r0, r0, r2
   d6c1e:	fa43 f305 	asr.w	r3, r3, r5
   d6c22:	4159      	adcs	r1, r3
   d6c24:	e00e      	b.n	d6c44 <__adddf3+0xd0>
   d6c26:	f1a5 0520 	sub.w	r5, r5, #32
   d6c2a:	f10e 0e20 	add.w	lr, lr, #32
   d6c2e:	2a01      	cmp	r2, #1
   d6c30:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6c34:	bf28      	it	cs
   d6c36:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6c3a:	fa43 f305 	asr.w	r3, r3, r5
   d6c3e:	18c0      	adds	r0, r0, r3
   d6c40:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6c44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6c48:	d507      	bpl.n	d6c5a <__adddf3+0xe6>
   d6c4a:	f04f 0e00 	mov.w	lr, #0
   d6c4e:	f1dc 0c00 	rsbs	ip, ip, #0
   d6c52:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6c56:	eb6e 0101 	sbc.w	r1, lr, r1
   d6c5a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6c5e:	d31b      	bcc.n	d6c98 <__adddf3+0x124>
   d6c60:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6c64:	d30c      	bcc.n	d6c80 <__adddf3+0x10c>
   d6c66:	0849      	lsrs	r1, r1, #1
   d6c68:	ea5f 0030 	movs.w	r0, r0, rrx
   d6c6c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6c70:	f104 0401 	add.w	r4, r4, #1
   d6c74:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6c78:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6c7c:	f080 809a 	bcs.w	d6db4 <__adddf3+0x240>
   d6c80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6c84:	bf08      	it	eq
   d6c86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6c8a:	f150 0000 	adcs.w	r0, r0, #0
   d6c8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6c92:	ea41 0105 	orr.w	r1, r1, r5
   d6c96:	bd30      	pop	{r4, r5, pc}
   d6c98:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6c9c:	4140      	adcs	r0, r0
   d6c9e:	eb41 0101 	adc.w	r1, r1, r1
   d6ca2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6ca6:	f1a4 0401 	sub.w	r4, r4, #1
   d6caa:	d1e9      	bne.n	d6c80 <__adddf3+0x10c>
   d6cac:	f091 0f00 	teq	r1, #0
   d6cb0:	bf04      	itt	eq
   d6cb2:	4601      	moveq	r1, r0
   d6cb4:	2000      	moveq	r0, #0
   d6cb6:	fab1 f381 	clz	r3, r1
   d6cba:	bf08      	it	eq
   d6cbc:	3320      	addeq	r3, #32
   d6cbe:	f1a3 030b 	sub.w	r3, r3, #11
   d6cc2:	f1b3 0220 	subs.w	r2, r3, #32
   d6cc6:	da0c      	bge.n	d6ce2 <__adddf3+0x16e>
   d6cc8:	320c      	adds	r2, #12
   d6cca:	dd08      	ble.n	d6cde <__adddf3+0x16a>
   d6ccc:	f102 0c14 	add.w	ip, r2, #20
   d6cd0:	f1c2 020c 	rsb	r2, r2, #12
   d6cd4:	fa01 f00c 	lsl.w	r0, r1, ip
   d6cd8:	fa21 f102 	lsr.w	r1, r1, r2
   d6cdc:	e00c      	b.n	d6cf8 <__adddf3+0x184>
   d6cde:	f102 0214 	add.w	r2, r2, #20
   d6ce2:	bfd8      	it	le
   d6ce4:	f1c2 0c20 	rsble	ip, r2, #32
   d6ce8:	fa01 f102 	lsl.w	r1, r1, r2
   d6cec:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6cf0:	bfdc      	itt	le
   d6cf2:	ea41 010c 	orrle.w	r1, r1, ip
   d6cf6:	4090      	lslle	r0, r2
   d6cf8:	1ae4      	subs	r4, r4, r3
   d6cfa:	bfa2      	ittt	ge
   d6cfc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6d00:	4329      	orrge	r1, r5
   d6d02:	bd30      	popge	{r4, r5, pc}
   d6d04:	ea6f 0404 	mvn.w	r4, r4
   d6d08:	3c1f      	subs	r4, #31
   d6d0a:	da1c      	bge.n	d6d46 <__adddf3+0x1d2>
   d6d0c:	340c      	adds	r4, #12
   d6d0e:	dc0e      	bgt.n	d6d2e <__adddf3+0x1ba>
   d6d10:	f104 0414 	add.w	r4, r4, #20
   d6d14:	f1c4 0220 	rsb	r2, r4, #32
   d6d18:	fa20 f004 	lsr.w	r0, r0, r4
   d6d1c:	fa01 f302 	lsl.w	r3, r1, r2
   d6d20:	ea40 0003 	orr.w	r0, r0, r3
   d6d24:	fa21 f304 	lsr.w	r3, r1, r4
   d6d28:	ea45 0103 	orr.w	r1, r5, r3
   d6d2c:	bd30      	pop	{r4, r5, pc}
   d6d2e:	f1c4 040c 	rsb	r4, r4, #12
   d6d32:	f1c4 0220 	rsb	r2, r4, #32
   d6d36:	fa20 f002 	lsr.w	r0, r0, r2
   d6d3a:	fa01 f304 	lsl.w	r3, r1, r4
   d6d3e:	ea40 0003 	orr.w	r0, r0, r3
   d6d42:	4629      	mov	r1, r5
   d6d44:	bd30      	pop	{r4, r5, pc}
   d6d46:	fa21 f004 	lsr.w	r0, r1, r4
   d6d4a:	4629      	mov	r1, r5
   d6d4c:	bd30      	pop	{r4, r5, pc}
   d6d4e:	f094 0f00 	teq	r4, #0
   d6d52:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6d56:	bf06      	itte	eq
   d6d58:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6d5c:	3401      	addeq	r4, #1
   d6d5e:	3d01      	subne	r5, #1
   d6d60:	e74e      	b.n	d6c00 <__adddf3+0x8c>
   d6d62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6d66:	bf18      	it	ne
   d6d68:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6d6c:	d029      	beq.n	d6dc2 <__adddf3+0x24e>
   d6d6e:	ea94 0f05 	teq	r4, r5
   d6d72:	bf08      	it	eq
   d6d74:	ea90 0f02 	teqeq	r0, r2
   d6d78:	d005      	beq.n	d6d86 <__adddf3+0x212>
   d6d7a:	ea54 0c00 	orrs.w	ip, r4, r0
   d6d7e:	bf04      	itt	eq
   d6d80:	4619      	moveq	r1, r3
   d6d82:	4610      	moveq	r0, r2
   d6d84:	bd30      	pop	{r4, r5, pc}
   d6d86:	ea91 0f03 	teq	r1, r3
   d6d8a:	bf1e      	ittt	ne
   d6d8c:	2100      	movne	r1, #0
   d6d8e:	2000      	movne	r0, #0
   d6d90:	bd30      	popne	{r4, r5, pc}
   d6d92:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6d96:	d105      	bne.n	d6da4 <__adddf3+0x230>
   d6d98:	0040      	lsls	r0, r0, #1
   d6d9a:	4149      	adcs	r1, r1
   d6d9c:	bf28      	it	cs
   d6d9e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6da2:	bd30      	pop	{r4, r5, pc}
   d6da4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6da8:	bf3c      	itt	cc
   d6daa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6dae:	bd30      	popcc	{r4, r5, pc}
   d6db0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6db4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6db8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6dbc:	f04f 0000 	mov.w	r0, #0
   d6dc0:	bd30      	pop	{r4, r5, pc}
   d6dc2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6dc6:	bf1a      	itte	ne
   d6dc8:	4619      	movne	r1, r3
   d6dca:	4610      	movne	r0, r2
   d6dcc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6dd0:	bf1c      	itt	ne
   d6dd2:	460b      	movne	r3, r1
   d6dd4:	4602      	movne	r2, r0
   d6dd6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6dda:	bf06      	itte	eq
   d6ddc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6de0:	ea91 0f03 	teqeq	r1, r3
   d6de4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6de8:	bd30      	pop	{r4, r5, pc}
   d6dea:	bf00      	nop

000d6dec <__aeabi_ui2d>:
   d6dec:	f090 0f00 	teq	r0, #0
   d6df0:	bf04      	itt	eq
   d6df2:	2100      	moveq	r1, #0
   d6df4:	4770      	bxeq	lr
   d6df6:	b530      	push	{r4, r5, lr}
   d6df8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6dfc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6e00:	f04f 0500 	mov.w	r5, #0
   d6e04:	f04f 0100 	mov.w	r1, #0
   d6e08:	e750      	b.n	d6cac <__adddf3+0x138>
   d6e0a:	bf00      	nop

000d6e0c <__aeabi_i2d>:
   d6e0c:	f090 0f00 	teq	r0, #0
   d6e10:	bf04      	itt	eq
   d6e12:	2100      	moveq	r1, #0
   d6e14:	4770      	bxeq	lr
   d6e16:	b530      	push	{r4, r5, lr}
   d6e18:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6e1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6e20:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6e24:	bf48      	it	mi
   d6e26:	4240      	negmi	r0, r0
   d6e28:	f04f 0100 	mov.w	r1, #0
   d6e2c:	e73e      	b.n	d6cac <__adddf3+0x138>
   d6e2e:	bf00      	nop

000d6e30 <__aeabi_f2d>:
   d6e30:	0042      	lsls	r2, r0, #1
   d6e32:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6e36:	ea4f 0131 	mov.w	r1, r1, rrx
   d6e3a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6e3e:	bf1f      	itttt	ne
   d6e40:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6e44:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6e48:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6e4c:	4770      	bxne	lr
   d6e4e:	f092 0f00 	teq	r2, #0
   d6e52:	bf14      	ite	ne
   d6e54:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6e58:	4770      	bxeq	lr
   d6e5a:	b530      	push	{r4, r5, lr}
   d6e5c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6e60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6e64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6e68:	e720      	b.n	d6cac <__adddf3+0x138>
   d6e6a:	bf00      	nop

000d6e6c <__aeabi_ul2d>:
   d6e6c:	ea50 0201 	orrs.w	r2, r0, r1
   d6e70:	bf08      	it	eq
   d6e72:	4770      	bxeq	lr
   d6e74:	b530      	push	{r4, r5, lr}
   d6e76:	f04f 0500 	mov.w	r5, #0
   d6e7a:	e00a      	b.n	d6e92 <__aeabi_l2d+0x16>

000d6e7c <__aeabi_l2d>:
   d6e7c:	ea50 0201 	orrs.w	r2, r0, r1
   d6e80:	bf08      	it	eq
   d6e82:	4770      	bxeq	lr
   d6e84:	b530      	push	{r4, r5, lr}
   d6e86:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6e8a:	d502      	bpl.n	d6e92 <__aeabi_l2d+0x16>
   d6e8c:	4240      	negs	r0, r0
   d6e8e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6e92:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6e96:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6e9a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6e9e:	f43f aedc 	beq.w	d6c5a <__adddf3+0xe6>
   d6ea2:	f04f 0203 	mov.w	r2, #3
   d6ea6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6eaa:	bf18      	it	ne
   d6eac:	3203      	addne	r2, #3
   d6eae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6eb2:	bf18      	it	ne
   d6eb4:	3203      	addne	r2, #3
   d6eb6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6eba:	f1c2 0320 	rsb	r3, r2, #32
   d6ebe:	fa00 fc03 	lsl.w	ip, r0, r3
   d6ec2:	fa20 f002 	lsr.w	r0, r0, r2
   d6ec6:	fa01 fe03 	lsl.w	lr, r1, r3
   d6eca:	ea40 000e 	orr.w	r0, r0, lr
   d6ece:	fa21 f102 	lsr.w	r1, r1, r2
   d6ed2:	4414      	add	r4, r2
   d6ed4:	e6c1      	b.n	d6c5a <__adddf3+0xe6>
   d6ed6:	bf00      	nop

000d6ed8 <__aeabi_dmul>:
   d6ed8:	b570      	push	{r4, r5, r6, lr}
   d6eda:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6ede:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6ee2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6ee6:	bf1d      	ittte	ne
   d6ee8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6eec:	ea94 0f0c 	teqne	r4, ip
   d6ef0:	ea95 0f0c 	teqne	r5, ip
   d6ef4:	f000 f8de 	bleq	d70b4 <__aeabi_dmul+0x1dc>
   d6ef8:	442c      	add	r4, r5
   d6efa:	ea81 0603 	eor.w	r6, r1, r3
   d6efe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6f02:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6f06:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6f0a:	bf18      	it	ne
   d6f0c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6f10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6f14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6f18:	d038      	beq.n	d6f8c <__aeabi_dmul+0xb4>
   d6f1a:	fba0 ce02 	umull	ip, lr, r0, r2
   d6f1e:	f04f 0500 	mov.w	r5, #0
   d6f22:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6f26:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6f2a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6f2e:	f04f 0600 	mov.w	r6, #0
   d6f32:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6f36:	f09c 0f00 	teq	ip, #0
   d6f3a:	bf18      	it	ne
   d6f3c:	f04e 0e01 	orrne.w	lr, lr, #1
   d6f40:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6f44:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6f48:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6f4c:	d204      	bcs.n	d6f58 <__aeabi_dmul+0x80>
   d6f4e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6f52:	416d      	adcs	r5, r5
   d6f54:	eb46 0606 	adc.w	r6, r6, r6
   d6f58:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6f5c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6f60:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6f64:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6f68:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6f6c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6f70:	bf88      	it	hi
   d6f72:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6f76:	d81e      	bhi.n	d6fb6 <__aeabi_dmul+0xde>
   d6f78:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6f7c:	bf08      	it	eq
   d6f7e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6f82:	f150 0000 	adcs.w	r0, r0, #0
   d6f86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6f8a:	bd70      	pop	{r4, r5, r6, pc}
   d6f8c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6f90:	ea46 0101 	orr.w	r1, r6, r1
   d6f94:	ea40 0002 	orr.w	r0, r0, r2
   d6f98:	ea81 0103 	eor.w	r1, r1, r3
   d6f9c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6fa0:	bfc2      	ittt	gt
   d6fa2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6fa6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6faa:	bd70      	popgt	{r4, r5, r6, pc}
   d6fac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6fb0:	f04f 0e00 	mov.w	lr, #0
   d6fb4:	3c01      	subs	r4, #1
   d6fb6:	f300 80ab 	bgt.w	d7110 <__aeabi_dmul+0x238>
   d6fba:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6fbe:	bfde      	ittt	le
   d6fc0:	2000      	movle	r0, #0
   d6fc2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6fc6:	bd70      	pople	{r4, r5, r6, pc}
   d6fc8:	f1c4 0400 	rsb	r4, r4, #0
   d6fcc:	3c20      	subs	r4, #32
   d6fce:	da35      	bge.n	d703c <__aeabi_dmul+0x164>
   d6fd0:	340c      	adds	r4, #12
   d6fd2:	dc1b      	bgt.n	d700c <__aeabi_dmul+0x134>
   d6fd4:	f104 0414 	add.w	r4, r4, #20
   d6fd8:	f1c4 0520 	rsb	r5, r4, #32
   d6fdc:	fa00 f305 	lsl.w	r3, r0, r5
   d6fe0:	fa20 f004 	lsr.w	r0, r0, r4
   d6fe4:	fa01 f205 	lsl.w	r2, r1, r5
   d6fe8:	ea40 0002 	orr.w	r0, r0, r2
   d6fec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6ff0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6ff4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6ff8:	fa21 f604 	lsr.w	r6, r1, r4
   d6ffc:	eb42 0106 	adc.w	r1, r2, r6
   d7000:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7004:	bf08      	it	eq
   d7006:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d700a:	bd70      	pop	{r4, r5, r6, pc}
   d700c:	f1c4 040c 	rsb	r4, r4, #12
   d7010:	f1c4 0520 	rsb	r5, r4, #32
   d7014:	fa00 f304 	lsl.w	r3, r0, r4
   d7018:	fa20 f005 	lsr.w	r0, r0, r5
   d701c:	fa01 f204 	lsl.w	r2, r1, r4
   d7020:	ea40 0002 	orr.w	r0, r0, r2
   d7024:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7028:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d702c:	f141 0100 	adc.w	r1, r1, #0
   d7030:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7034:	bf08      	it	eq
   d7036:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d703a:	bd70      	pop	{r4, r5, r6, pc}
   d703c:	f1c4 0520 	rsb	r5, r4, #32
   d7040:	fa00 f205 	lsl.w	r2, r0, r5
   d7044:	ea4e 0e02 	orr.w	lr, lr, r2
   d7048:	fa20 f304 	lsr.w	r3, r0, r4
   d704c:	fa01 f205 	lsl.w	r2, r1, r5
   d7050:	ea43 0302 	orr.w	r3, r3, r2
   d7054:	fa21 f004 	lsr.w	r0, r1, r4
   d7058:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d705c:	fa21 f204 	lsr.w	r2, r1, r4
   d7060:	ea20 0002 	bic.w	r0, r0, r2
   d7064:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7068:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d706c:	bf08      	it	eq
   d706e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7072:	bd70      	pop	{r4, r5, r6, pc}
   d7074:	f094 0f00 	teq	r4, #0
   d7078:	d10f      	bne.n	d709a <__aeabi_dmul+0x1c2>
   d707a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d707e:	0040      	lsls	r0, r0, #1
   d7080:	eb41 0101 	adc.w	r1, r1, r1
   d7084:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7088:	bf08      	it	eq
   d708a:	3c01      	subeq	r4, #1
   d708c:	d0f7      	beq.n	d707e <__aeabi_dmul+0x1a6>
   d708e:	ea41 0106 	orr.w	r1, r1, r6
   d7092:	f095 0f00 	teq	r5, #0
   d7096:	bf18      	it	ne
   d7098:	4770      	bxne	lr
   d709a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d709e:	0052      	lsls	r2, r2, #1
   d70a0:	eb43 0303 	adc.w	r3, r3, r3
   d70a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d70a8:	bf08      	it	eq
   d70aa:	3d01      	subeq	r5, #1
   d70ac:	d0f7      	beq.n	d709e <__aeabi_dmul+0x1c6>
   d70ae:	ea43 0306 	orr.w	r3, r3, r6
   d70b2:	4770      	bx	lr
   d70b4:	ea94 0f0c 	teq	r4, ip
   d70b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d70bc:	bf18      	it	ne
   d70be:	ea95 0f0c 	teqne	r5, ip
   d70c2:	d00c      	beq.n	d70de <__aeabi_dmul+0x206>
   d70c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d70c8:	bf18      	it	ne
   d70ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d70ce:	d1d1      	bne.n	d7074 <__aeabi_dmul+0x19c>
   d70d0:	ea81 0103 	eor.w	r1, r1, r3
   d70d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d70d8:	f04f 0000 	mov.w	r0, #0
   d70dc:	bd70      	pop	{r4, r5, r6, pc}
   d70de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d70e2:	bf06      	itte	eq
   d70e4:	4610      	moveq	r0, r2
   d70e6:	4619      	moveq	r1, r3
   d70e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d70ec:	d019      	beq.n	d7122 <__aeabi_dmul+0x24a>
   d70ee:	ea94 0f0c 	teq	r4, ip
   d70f2:	d102      	bne.n	d70fa <__aeabi_dmul+0x222>
   d70f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d70f8:	d113      	bne.n	d7122 <__aeabi_dmul+0x24a>
   d70fa:	ea95 0f0c 	teq	r5, ip
   d70fe:	d105      	bne.n	d710c <__aeabi_dmul+0x234>
   d7100:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7104:	bf1c      	itt	ne
   d7106:	4610      	movne	r0, r2
   d7108:	4619      	movne	r1, r3
   d710a:	d10a      	bne.n	d7122 <__aeabi_dmul+0x24a>
   d710c:	ea81 0103 	eor.w	r1, r1, r3
   d7110:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7114:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7118:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d711c:	f04f 0000 	mov.w	r0, #0
   d7120:	bd70      	pop	{r4, r5, r6, pc}
   d7122:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7126:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d712a:	bd70      	pop	{r4, r5, r6, pc}

000d712c <__aeabi_ddiv>:
   d712c:	b570      	push	{r4, r5, r6, lr}
   d712e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7132:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7136:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d713a:	bf1d      	ittte	ne
   d713c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7140:	ea94 0f0c 	teqne	r4, ip
   d7144:	ea95 0f0c 	teqne	r5, ip
   d7148:	f000 f8a7 	bleq	d729a <__aeabi_ddiv+0x16e>
   d714c:	eba4 0405 	sub.w	r4, r4, r5
   d7150:	ea81 0e03 	eor.w	lr, r1, r3
   d7154:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7158:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d715c:	f000 8088 	beq.w	d7270 <__aeabi_ddiv+0x144>
   d7160:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7164:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7168:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d716c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7170:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7174:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7178:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d717c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7180:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7184:	429d      	cmp	r5, r3
   d7186:	bf08      	it	eq
   d7188:	4296      	cmpeq	r6, r2
   d718a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d718e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7192:	d202      	bcs.n	d719a <__aeabi_ddiv+0x6e>
   d7194:	085b      	lsrs	r3, r3, #1
   d7196:	ea4f 0232 	mov.w	r2, r2, rrx
   d719a:	1ab6      	subs	r6, r6, r2
   d719c:	eb65 0503 	sbc.w	r5, r5, r3
   d71a0:	085b      	lsrs	r3, r3, #1
   d71a2:	ea4f 0232 	mov.w	r2, r2, rrx
   d71a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d71aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d71ae:	ebb6 0e02 	subs.w	lr, r6, r2
   d71b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d71b6:	bf22      	ittt	cs
   d71b8:	1ab6      	subcs	r6, r6, r2
   d71ba:	4675      	movcs	r5, lr
   d71bc:	ea40 000c 	orrcs.w	r0, r0, ip
   d71c0:	085b      	lsrs	r3, r3, #1
   d71c2:	ea4f 0232 	mov.w	r2, r2, rrx
   d71c6:	ebb6 0e02 	subs.w	lr, r6, r2
   d71ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   d71ce:	bf22      	ittt	cs
   d71d0:	1ab6      	subcs	r6, r6, r2
   d71d2:	4675      	movcs	r5, lr
   d71d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d71d8:	085b      	lsrs	r3, r3, #1
   d71da:	ea4f 0232 	mov.w	r2, r2, rrx
   d71de:	ebb6 0e02 	subs.w	lr, r6, r2
   d71e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d71e6:	bf22      	ittt	cs
   d71e8:	1ab6      	subcs	r6, r6, r2
   d71ea:	4675      	movcs	r5, lr
   d71ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d71f0:	085b      	lsrs	r3, r3, #1
   d71f2:	ea4f 0232 	mov.w	r2, r2, rrx
   d71f6:	ebb6 0e02 	subs.w	lr, r6, r2
   d71fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d71fe:	bf22      	ittt	cs
   d7200:	1ab6      	subcs	r6, r6, r2
   d7202:	4675      	movcs	r5, lr
   d7204:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7208:	ea55 0e06 	orrs.w	lr, r5, r6
   d720c:	d018      	beq.n	d7240 <__aeabi_ddiv+0x114>
   d720e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7212:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7216:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d721a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d721e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7222:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7226:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d722a:	d1c0      	bne.n	d71ae <__aeabi_ddiv+0x82>
   d722c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7230:	d10b      	bne.n	d724a <__aeabi_ddiv+0x11e>
   d7232:	ea41 0100 	orr.w	r1, r1, r0
   d7236:	f04f 0000 	mov.w	r0, #0
   d723a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d723e:	e7b6      	b.n	d71ae <__aeabi_ddiv+0x82>
   d7240:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7244:	bf04      	itt	eq
   d7246:	4301      	orreq	r1, r0
   d7248:	2000      	moveq	r0, #0
   d724a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d724e:	bf88      	it	hi
   d7250:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7254:	f63f aeaf 	bhi.w	d6fb6 <__aeabi_dmul+0xde>
   d7258:	ebb5 0c03 	subs.w	ip, r5, r3
   d725c:	bf04      	itt	eq
   d725e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7262:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7266:	f150 0000 	adcs.w	r0, r0, #0
   d726a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d726e:	bd70      	pop	{r4, r5, r6, pc}
   d7270:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7274:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7278:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d727c:	bfc2      	ittt	gt
   d727e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7282:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7286:	bd70      	popgt	{r4, r5, r6, pc}
   d7288:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d728c:	f04f 0e00 	mov.w	lr, #0
   d7290:	3c01      	subs	r4, #1
   d7292:	e690      	b.n	d6fb6 <__aeabi_dmul+0xde>
   d7294:	ea45 0e06 	orr.w	lr, r5, r6
   d7298:	e68d      	b.n	d6fb6 <__aeabi_dmul+0xde>
   d729a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d729e:	ea94 0f0c 	teq	r4, ip
   d72a2:	bf08      	it	eq
   d72a4:	ea95 0f0c 	teqeq	r5, ip
   d72a8:	f43f af3b 	beq.w	d7122 <__aeabi_dmul+0x24a>
   d72ac:	ea94 0f0c 	teq	r4, ip
   d72b0:	d10a      	bne.n	d72c8 <__aeabi_ddiv+0x19c>
   d72b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d72b6:	f47f af34 	bne.w	d7122 <__aeabi_dmul+0x24a>
   d72ba:	ea95 0f0c 	teq	r5, ip
   d72be:	f47f af25 	bne.w	d710c <__aeabi_dmul+0x234>
   d72c2:	4610      	mov	r0, r2
   d72c4:	4619      	mov	r1, r3
   d72c6:	e72c      	b.n	d7122 <__aeabi_dmul+0x24a>
   d72c8:	ea95 0f0c 	teq	r5, ip
   d72cc:	d106      	bne.n	d72dc <__aeabi_ddiv+0x1b0>
   d72ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d72d2:	f43f aefd 	beq.w	d70d0 <__aeabi_dmul+0x1f8>
   d72d6:	4610      	mov	r0, r2
   d72d8:	4619      	mov	r1, r3
   d72da:	e722      	b.n	d7122 <__aeabi_dmul+0x24a>
   d72dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d72e0:	bf18      	it	ne
   d72e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d72e6:	f47f aec5 	bne.w	d7074 <__aeabi_dmul+0x19c>
   d72ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d72ee:	f47f af0d 	bne.w	d710c <__aeabi_dmul+0x234>
   d72f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d72f6:	f47f aeeb 	bne.w	d70d0 <__aeabi_dmul+0x1f8>
   d72fa:	e712      	b.n	d7122 <__aeabi_dmul+0x24a>

000d72fc <__gedf2>:
   d72fc:	f04f 3cff 	mov.w	ip, #4294967295
   d7300:	e006      	b.n	d7310 <__cmpdf2+0x4>
   d7302:	bf00      	nop

000d7304 <__ledf2>:
   d7304:	f04f 0c01 	mov.w	ip, #1
   d7308:	e002      	b.n	d7310 <__cmpdf2+0x4>
   d730a:	bf00      	nop

000d730c <__cmpdf2>:
   d730c:	f04f 0c01 	mov.w	ip, #1
   d7310:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7314:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7318:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d731c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7320:	bf18      	it	ne
   d7322:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d7326:	d01b      	beq.n	d7360 <__cmpdf2+0x54>
   d7328:	b001      	add	sp, #4
   d732a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d732e:	bf0c      	ite	eq
   d7330:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d7334:	ea91 0f03 	teqne	r1, r3
   d7338:	bf02      	ittt	eq
   d733a:	ea90 0f02 	teqeq	r0, r2
   d733e:	2000      	moveq	r0, #0
   d7340:	4770      	bxeq	lr
   d7342:	f110 0f00 	cmn.w	r0, #0
   d7346:	ea91 0f03 	teq	r1, r3
   d734a:	bf58      	it	pl
   d734c:	4299      	cmppl	r1, r3
   d734e:	bf08      	it	eq
   d7350:	4290      	cmpeq	r0, r2
   d7352:	bf2c      	ite	cs
   d7354:	17d8      	asrcs	r0, r3, #31
   d7356:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d735a:	f040 0001 	orr.w	r0, r0, #1
   d735e:	4770      	bx	lr
   d7360:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7364:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7368:	d102      	bne.n	d7370 <__cmpdf2+0x64>
   d736a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d736e:	d107      	bne.n	d7380 <__cmpdf2+0x74>
   d7370:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7374:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7378:	d1d6      	bne.n	d7328 <__cmpdf2+0x1c>
   d737a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d737e:	d0d3      	beq.n	d7328 <__cmpdf2+0x1c>
   d7380:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7384:	4770      	bx	lr
   d7386:	bf00      	nop

000d7388 <__aeabi_cdrcmple>:
   d7388:	4684      	mov	ip, r0
   d738a:	4610      	mov	r0, r2
   d738c:	4662      	mov	r2, ip
   d738e:	468c      	mov	ip, r1
   d7390:	4619      	mov	r1, r3
   d7392:	4663      	mov	r3, ip
   d7394:	e000      	b.n	d7398 <__aeabi_cdcmpeq>
   d7396:	bf00      	nop

000d7398 <__aeabi_cdcmpeq>:
   d7398:	b501      	push	{r0, lr}
   d739a:	f7ff ffb7 	bl	d730c <__cmpdf2>
   d739e:	2800      	cmp	r0, #0
   d73a0:	bf48      	it	mi
   d73a2:	f110 0f00 	cmnmi.w	r0, #0
   d73a6:	bd01      	pop	{r0, pc}

000d73a8 <__aeabi_dcmpeq>:
   d73a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d73ac:	f7ff fff4 	bl	d7398 <__aeabi_cdcmpeq>
   d73b0:	bf0c      	ite	eq
   d73b2:	2001      	moveq	r0, #1
   d73b4:	2000      	movne	r0, #0
   d73b6:	f85d fb08 	ldr.w	pc, [sp], #8
   d73ba:	bf00      	nop

000d73bc <__aeabi_dcmplt>:
   d73bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d73c0:	f7ff ffea 	bl	d7398 <__aeabi_cdcmpeq>
   d73c4:	bf34      	ite	cc
   d73c6:	2001      	movcc	r0, #1
   d73c8:	2000      	movcs	r0, #0
   d73ca:	f85d fb08 	ldr.w	pc, [sp], #8
   d73ce:	bf00      	nop

000d73d0 <__aeabi_dcmple>:
   d73d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d73d4:	f7ff ffe0 	bl	d7398 <__aeabi_cdcmpeq>
   d73d8:	bf94      	ite	ls
   d73da:	2001      	movls	r0, #1
   d73dc:	2000      	movhi	r0, #0
   d73de:	f85d fb08 	ldr.w	pc, [sp], #8
   d73e2:	bf00      	nop

000d73e4 <__aeabi_dcmpge>:
   d73e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d73e8:	f7ff ffce 	bl	d7388 <__aeabi_cdrcmple>
   d73ec:	bf94      	ite	ls
   d73ee:	2001      	movls	r0, #1
   d73f0:	2000      	movhi	r0, #0
   d73f2:	f85d fb08 	ldr.w	pc, [sp], #8
   d73f6:	bf00      	nop

000d73f8 <__aeabi_dcmpgt>:
   d73f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d73fc:	f7ff ffc4 	bl	d7388 <__aeabi_cdrcmple>
   d7400:	bf34      	ite	cc
   d7402:	2001      	movcc	r0, #1
   d7404:	2000      	movcs	r0, #0
   d7406:	f85d fb08 	ldr.w	pc, [sp], #8
   d740a:	bf00      	nop

000d740c <__aeabi_dcmpun>:
   d740c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7410:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7414:	d102      	bne.n	d741c <__aeabi_dcmpun+0x10>
   d7416:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d741a:	d10a      	bne.n	d7432 <__aeabi_dcmpun+0x26>
   d741c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7420:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7424:	d102      	bne.n	d742c <__aeabi_dcmpun+0x20>
   d7426:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d742a:	d102      	bne.n	d7432 <__aeabi_dcmpun+0x26>
   d742c:	f04f 0000 	mov.w	r0, #0
   d7430:	4770      	bx	lr
   d7432:	f04f 0001 	mov.w	r0, #1
   d7436:	4770      	bx	lr

000d7438 <__aeabi_d2iz>:
   d7438:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d743c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7440:	d215      	bcs.n	d746e <__aeabi_d2iz+0x36>
   d7442:	d511      	bpl.n	d7468 <__aeabi_d2iz+0x30>
   d7444:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7448:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d744c:	d912      	bls.n	d7474 <__aeabi_d2iz+0x3c>
   d744e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7452:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7456:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d745a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d745e:	fa23 f002 	lsr.w	r0, r3, r2
   d7462:	bf18      	it	ne
   d7464:	4240      	negne	r0, r0
   d7466:	4770      	bx	lr
   d7468:	f04f 0000 	mov.w	r0, #0
   d746c:	4770      	bx	lr
   d746e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7472:	d105      	bne.n	d7480 <__aeabi_d2iz+0x48>
   d7474:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d7478:	bf08      	it	eq
   d747a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d747e:	4770      	bx	lr
   d7480:	f04f 0000 	mov.w	r0, #0
   d7484:	4770      	bx	lr
   d7486:	bf00      	nop

000d7488 <__aeabi_d2uiz>:
   d7488:	004a      	lsls	r2, r1, #1
   d748a:	d211      	bcs.n	d74b0 <__aeabi_d2uiz+0x28>
   d748c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7490:	d211      	bcs.n	d74b6 <__aeabi_d2uiz+0x2e>
   d7492:	d50d      	bpl.n	d74b0 <__aeabi_d2uiz+0x28>
   d7494:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7498:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d749c:	d40e      	bmi.n	d74bc <__aeabi_d2uiz+0x34>
   d749e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d74a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d74a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d74aa:	fa23 f002 	lsr.w	r0, r3, r2
   d74ae:	4770      	bx	lr
   d74b0:	f04f 0000 	mov.w	r0, #0
   d74b4:	4770      	bx	lr
   d74b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d74ba:	d102      	bne.n	d74c2 <__aeabi_d2uiz+0x3a>
   d74bc:	f04f 30ff 	mov.w	r0, #4294967295
   d74c0:	4770      	bx	lr
   d74c2:	f04f 0000 	mov.w	r0, #0
   d74c6:	4770      	bx	lr

000d74c8 <__aeabi_uldivmod>:
   d74c8:	b953      	cbnz	r3, d74e0 <__aeabi_uldivmod+0x18>
   d74ca:	b94a      	cbnz	r2, d74e0 <__aeabi_uldivmod+0x18>
   d74cc:	2900      	cmp	r1, #0
   d74ce:	bf08      	it	eq
   d74d0:	2800      	cmpeq	r0, #0
   d74d2:	bf1c      	itt	ne
   d74d4:	f04f 31ff 	movne.w	r1, #4294967295
   d74d8:	f04f 30ff 	movne.w	r0, #4294967295
   d74dc:	f000 b9a2 	b.w	d7824 <__aeabi_idiv0>
   d74e0:	f1ad 0c08 	sub.w	ip, sp, #8
   d74e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d74e8:	f000 f82a 	bl	d7540 <__udivmoddi4>
   d74ec:	f8dd e004 	ldr.w	lr, [sp, #4]
   d74f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d74f4:	b004      	add	sp, #16
   d74f6:	4770      	bx	lr

000d74f8 <__aeabi_d2ulz>:
   d74f8:	b5d0      	push	{r4, r6, r7, lr}
   d74fa:	2200      	movs	r2, #0
   d74fc:	4b0e      	ldr	r3, [pc, #56]	; (d7538 <__aeabi_d2ulz+0x40>)
   d74fe:	4606      	mov	r6, r0
   d7500:	460f      	mov	r7, r1
   d7502:	f7ff fce9 	bl	d6ed8 <__aeabi_dmul>
   d7506:	f7ff ffbf 	bl	d7488 <__aeabi_d2uiz>
   d750a:	4604      	mov	r4, r0
   d750c:	f7ff fc6e 	bl	d6dec <__aeabi_ui2d>
   d7510:	2200      	movs	r2, #0
   d7512:	4b0a      	ldr	r3, [pc, #40]	; (d753c <__aeabi_d2ulz+0x44>)
   d7514:	f7ff fce0 	bl	d6ed8 <__aeabi_dmul>
   d7518:	4602      	mov	r2, r0
   d751a:	460b      	mov	r3, r1
   d751c:	4630      	mov	r0, r6
   d751e:	4639      	mov	r1, r7
   d7520:	f7ff fb26 	bl	d6b70 <__aeabi_dsub>
   d7524:	f7ff ffb0 	bl	d7488 <__aeabi_d2uiz>
   d7528:	4623      	mov	r3, r4
   d752a:	2200      	movs	r2, #0
   d752c:	ea42 0200 	orr.w	r2, r2, r0
   d7530:	4610      	mov	r0, r2
   d7532:	4619      	mov	r1, r3
   d7534:	bdd0      	pop	{r4, r6, r7, pc}
   d7536:	bf00      	nop
   d7538:	3df00000 	.word	0x3df00000
   d753c:	41f00000 	.word	0x41f00000

000d7540 <__udivmoddi4>:
   d7540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7544:	468c      	mov	ip, r1
   d7546:	460e      	mov	r6, r1
   d7548:	4604      	mov	r4, r0
   d754a:	9d08      	ldr	r5, [sp, #32]
   d754c:	2b00      	cmp	r3, #0
   d754e:	d150      	bne.n	d75f2 <__udivmoddi4+0xb2>
   d7550:	428a      	cmp	r2, r1
   d7552:	4617      	mov	r7, r2
   d7554:	d96c      	bls.n	d7630 <__udivmoddi4+0xf0>
   d7556:	fab2 fe82 	clz	lr, r2
   d755a:	f1be 0f00 	cmp.w	lr, #0
   d755e:	d00b      	beq.n	d7578 <__udivmoddi4+0x38>
   d7560:	f1ce 0420 	rsb	r4, lr, #32
   d7564:	fa20 f404 	lsr.w	r4, r0, r4
   d7568:	fa01 f60e 	lsl.w	r6, r1, lr
   d756c:	ea44 0c06 	orr.w	ip, r4, r6
   d7570:	fa02 f70e 	lsl.w	r7, r2, lr
   d7574:	fa00 f40e 	lsl.w	r4, r0, lr
   d7578:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d757c:	0c22      	lsrs	r2, r4, #16
   d757e:	fbbc f0f9 	udiv	r0, ip, r9
   d7582:	fa1f f887 	uxth.w	r8, r7
   d7586:	fb09 c610 	mls	r6, r9, r0, ip
   d758a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d758e:	fb00 f308 	mul.w	r3, r0, r8
   d7592:	42b3      	cmp	r3, r6
   d7594:	d909      	bls.n	d75aa <__udivmoddi4+0x6a>
   d7596:	19f6      	adds	r6, r6, r7
   d7598:	f100 32ff 	add.w	r2, r0, #4294967295
   d759c:	f080 8122 	bcs.w	d77e4 <__udivmoddi4+0x2a4>
   d75a0:	42b3      	cmp	r3, r6
   d75a2:	f240 811f 	bls.w	d77e4 <__udivmoddi4+0x2a4>
   d75a6:	3802      	subs	r0, #2
   d75a8:	443e      	add	r6, r7
   d75aa:	1af6      	subs	r6, r6, r3
   d75ac:	b2a2      	uxth	r2, r4
   d75ae:	fbb6 f3f9 	udiv	r3, r6, r9
   d75b2:	fb09 6613 	mls	r6, r9, r3, r6
   d75b6:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d75ba:	fb03 f808 	mul.w	r8, r3, r8
   d75be:	45a0      	cmp	r8, r4
   d75c0:	d909      	bls.n	d75d6 <__udivmoddi4+0x96>
   d75c2:	19e4      	adds	r4, r4, r7
   d75c4:	f103 32ff 	add.w	r2, r3, #4294967295
   d75c8:	f080 810a 	bcs.w	d77e0 <__udivmoddi4+0x2a0>
   d75cc:	45a0      	cmp	r8, r4
   d75ce:	f240 8107 	bls.w	d77e0 <__udivmoddi4+0x2a0>
   d75d2:	3b02      	subs	r3, #2
   d75d4:	443c      	add	r4, r7
   d75d6:	ebc8 0404 	rsb	r4, r8, r4
   d75da:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d75de:	2100      	movs	r1, #0
   d75e0:	2d00      	cmp	r5, #0
   d75e2:	d062      	beq.n	d76aa <__udivmoddi4+0x16a>
   d75e4:	fa24 f40e 	lsr.w	r4, r4, lr
   d75e8:	2300      	movs	r3, #0
   d75ea:	602c      	str	r4, [r5, #0]
   d75ec:	606b      	str	r3, [r5, #4]
   d75ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d75f2:	428b      	cmp	r3, r1
   d75f4:	d907      	bls.n	d7606 <__udivmoddi4+0xc6>
   d75f6:	2d00      	cmp	r5, #0
   d75f8:	d055      	beq.n	d76a6 <__udivmoddi4+0x166>
   d75fa:	2100      	movs	r1, #0
   d75fc:	e885 0041 	stmia.w	r5, {r0, r6}
   d7600:	4608      	mov	r0, r1
   d7602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7606:	fab3 f183 	clz	r1, r3
   d760a:	2900      	cmp	r1, #0
   d760c:	f040 8090 	bne.w	d7730 <__udivmoddi4+0x1f0>
   d7610:	42b3      	cmp	r3, r6
   d7612:	d302      	bcc.n	d761a <__udivmoddi4+0xda>
   d7614:	4282      	cmp	r2, r0
   d7616:	f200 80f8 	bhi.w	d780a <__udivmoddi4+0x2ca>
   d761a:	1a84      	subs	r4, r0, r2
   d761c:	eb66 0603 	sbc.w	r6, r6, r3
   d7620:	2001      	movs	r0, #1
   d7622:	46b4      	mov	ip, r6
   d7624:	2d00      	cmp	r5, #0
   d7626:	d040      	beq.n	d76aa <__udivmoddi4+0x16a>
   d7628:	e885 1010 	stmia.w	r5, {r4, ip}
   d762c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7630:	b912      	cbnz	r2, d7638 <__udivmoddi4+0xf8>
   d7632:	2701      	movs	r7, #1
   d7634:	fbb7 f7f2 	udiv	r7, r7, r2
   d7638:	fab7 fe87 	clz	lr, r7
   d763c:	f1be 0f00 	cmp.w	lr, #0
   d7640:	d135      	bne.n	d76ae <__udivmoddi4+0x16e>
   d7642:	1bf3      	subs	r3, r6, r7
   d7644:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d7648:	fa1f fc87 	uxth.w	ip, r7
   d764c:	2101      	movs	r1, #1
   d764e:	fbb3 f0f8 	udiv	r0, r3, r8
   d7652:	0c22      	lsrs	r2, r4, #16
   d7654:	fb08 3610 	mls	r6, r8, r0, r3
   d7658:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d765c:	fb0c f300 	mul.w	r3, ip, r0
   d7660:	42b3      	cmp	r3, r6
   d7662:	d907      	bls.n	d7674 <__udivmoddi4+0x134>
   d7664:	19f6      	adds	r6, r6, r7
   d7666:	f100 32ff 	add.w	r2, r0, #4294967295
   d766a:	d202      	bcs.n	d7672 <__udivmoddi4+0x132>
   d766c:	42b3      	cmp	r3, r6
   d766e:	f200 80ce 	bhi.w	d780e <__udivmoddi4+0x2ce>
   d7672:	4610      	mov	r0, r2
   d7674:	1af6      	subs	r6, r6, r3
   d7676:	b2a2      	uxth	r2, r4
   d7678:	fbb6 f3f8 	udiv	r3, r6, r8
   d767c:	fb08 6613 	mls	r6, r8, r3, r6
   d7680:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d7684:	fb0c fc03 	mul.w	ip, ip, r3
   d7688:	45a4      	cmp	ip, r4
   d768a:	d907      	bls.n	d769c <__udivmoddi4+0x15c>
   d768c:	19e4      	adds	r4, r4, r7
   d768e:	f103 32ff 	add.w	r2, r3, #4294967295
   d7692:	d202      	bcs.n	d769a <__udivmoddi4+0x15a>
   d7694:	45a4      	cmp	ip, r4
   d7696:	f200 80b5 	bhi.w	d7804 <__udivmoddi4+0x2c4>
   d769a:	4613      	mov	r3, r2
   d769c:	ebcc 0404 	rsb	r4, ip, r4
   d76a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d76a4:	e79c      	b.n	d75e0 <__udivmoddi4+0xa0>
   d76a6:	4629      	mov	r1, r5
   d76a8:	4628      	mov	r0, r5
   d76aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d76ae:	f1ce 0120 	rsb	r1, lr, #32
   d76b2:	fa06 f30e 	lsl.w	r3, r6, lr
   d76b6:	fa07 f70e 	lsl.w	r7, r7, lr
   d76ba:	fa20 f901 	lsr.w	r9, r0, r1
   d76be:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d76c2:	40ce      	lsrs	r6, r1
   d76c4:	ea49 0903 	orr.w	r9, r9, r3
   d76c8:	fbb6 faf8 	udiv	sl, r6, r8
   d76cc:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d76d0:	fb08 661a 	mls	r6, r8, sl, r6
   d76d4:	fa1f fc87 	uxth.w	ip, r7
   d76d8:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d76dc:	fb0a f20c 	mul.w	r2, sl, ip
   d76e0:	429a      	cmp	r2, r3
   d76e2:	fa00 f40e 	lsl.w	r4, r0, lr
   d76e6:	d90a      	bls.n	d76fe <__udivmoddi4+0x1be>
   d76e8:	19db      	adds	r3, r3, r7
   d76ea:	f10a 31ff 	add.w	r1, sl, #4294967295
   d76ee:	f080 8087 	bcs.w	d7800 <__udivmoddi4+0x2c0>
   d76f2:	429a      	cmp	r2, r3
   d76f4:	f240 8084 	bls.w	d7800 <__udivmoddi4+0x2c0>
   d76f8:	f1aa 0a02 	sub.w	sl, sl, #2
   d76fc:	443b      	add	r3, r7
   d76fe:	1a9b      	subs	r3, r3, r2
   d7700:	fa1f f989 	uxth.w	r9, r9
   d7704:	fbb3 f1f8 	udiv	r1, r3, r8
   d7708:	fb08 3311 	mls	r3, r8, r1, r3
   d770c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d7710:	fb01 f60c 	mul.w	r6, r1, ip
   d7714:	429e      	cmp	r6, r3
   d7716:	d907      	bls.n	d7728 <__udivmoddi4+0x1e8>
   d7718:	19db      	adds	r3, r3, r7
   d771a:	f101 32ff 	add.w	r2, r1, #4294967295
   d771e:	d26b      	bcs.n	d77f8 <__udivmoddi4+0x2b8>
   d7720:	429e      	cmp	r6, r3
   d7722:	d969      	bls.n	d77f8 <__udivmoddi4+0x2b8>
   d7724:	3902      	subs	r1, #2
   d7726:	443b      	add	r3, r7
   d7728:	1b9b      	subs	r3, r3, r6
   d772a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d772e:	e78e      	b.n	d764e <__udivmoddi4+0x10e>
   d7730:	f1c1 0e20 	rsb	lr, r1, #32
   d7734:	fa22 f40e 	lsr.w	r4, r2, lr
   d7738:	408b      	lsls	r3, r1
   d773a:	4323      	orrs	r3, r4
   d773c:	fa20 f70e 	lsr.w	r7, r0, lr
   d7740:	fa06 f401 	lsl.w	r4, r6, r1
   d7744:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d7748:	fa26 f60e 	lsr.w	r6, r6, lr
   d774c:	433c      	orrs	r4, r7
   d774e:	fbb6 f9fc 	udiv	r9, r6, ip
   d7752:	0c27      	lsrs	r7, r4, #16
   d7754:	fb0c 6619 	mls	r6, ip, r9, r6
   d7758:	fa1f f883 	uxth.w	r8, r3
   d775c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d7760:	fb09 f708 	mul.w	r7, r9, r8
   d7764:	42b7      	cmp	r7, r6
   d7766:	fa02 f201 	lsl.w	r2, r2, r1
   d776a:	fa00 fa01 	lsl.w	sl, r0, r1
   d776e:	d908      	bls.n	d7782 <__udivmoddi4+0x242>
   d7770:	18f6      	adds	r6, r6, r3
   d7772:	f109 30ff 	add.w	r0, r9, #4294967295
   d7776:	d241      	bcs.n	d77fc <__udivmoddi4+0x2bc>
   d7778:	42b7      	cmp	r7, r6
   d777a:	d93f      	bls.n	d77fc <__udivmoddi4+0x2bc>
   d777c:	f1a9 0902 	sub.w	r9, r9, #2
   d7780:	441e      	add	r6, r3
   d7782:	1bf6      	subs	r6, r6, r7
   d7784:	b2a0      	uxth	r0, r4
   d7786:	fbb6 f4fc 	udiv	r4, r6, ip
   d778a:	fb0c 6614 	mls	r6, ip, r4, r6
   d778e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d7792:	fb04 f808 	mul.w	r8, r4, r8
   d7796:	45b8      	cmp	r8, r7
   d7798:	d907      	bls.n	d77aa <__udivmoddi4+0x26a>
   d779a:	18ff      	adds	r7, r7, r3
   d779c:	f104 30ff 	add.w	r0, r4, #4294967295
   d77a0:	d228      	bcs.n	d77f4 <__udivmoddi4+0x2b4>
   d77a2:	45b8      	cmp	r8, r7
   d77a4:	d926      	bls.n	d77f4 <__udivmoddi4+0x2b4>
   d77a6:	3c02      	subs	r4, #2
   d77a8:	441f      	add	r7, r3
   d77aa:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d77ae:	ebc8 0707 	rsb	r7, r8, r7
   d77b2:	fba0 8902 	umull	r8, r9, r0, r2
   d77b6:	454f      	cmp	r7, r9
   d77b8:	4644      	mov	r4, r8
   d77ba:	464e      	mov	r6, r9
   d77bc:	d314      	bcc.n	d77e8 <__udivmoddi4+0x2a8>
   d77be:	d029      	beq.n	d7814 <__udivmoddi4+0x2d4>
   d77c0:	b365      	cbz	r5, d781c <__udivmoddi4+0x2dc>
   d77c2:	ebba 0304 	subs.w	r3, sl, r4
   d77c6:	eb67 0706 	sbc.w	r7, r7, r6
   d77ca:	fa07 fe0e 	lsl.w	lr, r7, lr
   d77ce:	40cb      	lsrs	r3, r1
   d77d0:	40cf      	lsrs	r7, r1
   d77d2:	ea4e 0303 	orr.w	r3, lr, r3
   d77d6:	e885 0088 	stmia.w	r5, {r3, r7}
   d77da:	2100      	movs	r1, #0
   d77dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d77e0:	4613      	mov	r3, r2
   d77e2:	e6f8      	b.n	d75d6 <__udivmoddi4+0x96>
   d77e4:	4610      	mov	r0, r2
   d77e6:	e6e0      	b.n	d75aa <__udivmoddi4+0x6a>
   d77e8:	ebb8 0402 	subs.w	r4, r8, r2
   d77ec:	eb69 0603 	sbc.w	r6, r9, r3
   d77f0:	3801      	subs	r0, #1
   d77f2:	e7e5      	b.n	d77c0 <__udivmoddi4+0x280>
   d77f4:	4604      	mov	r4, r0
   d77f6:	e7d8      	b.n	d77aa <__udivmoddi4+0x26a>
   d77f8:	4611      	mov	r1, r2
   d77fa:	e795      	b.n	d7728 <__udivmoddi4+0x1e8>
   d77fc:	4681      	mov	r9, r0
   d77fe:	e7c0      	b.n	d7782 <__udivmoddi4+0x242>
   d7800:	468a      	mov	sl, r1
   d7802:	e77c      	b.n	d76fe <__udivmoddi4+0x1be>
   d7804:	3b02      	subs	r3, #2
   d7806:	443c      	add	r4, r7
   d7808:	e748      	b.n	d769c <__udivmoddi4+0x15c>
   d780a:	4608      	mov	r0, r1
   d780c:	e70a      	b.n	d7624 <__udivmoddi4+0xe4>
   d780e:	3802      	subs	r0, #2
   d7810:	443e      	add	r6, r7
   d7812:	e72f      	b.n	d7674 <__udivmoddi4+0x134>
   d7814:	45c2      	cmp	sl, r8
   d7816:	d3e7      	bcc.n	d77e8 <__udivmoddi4+0x2a8>
   d7818:	463e      	mov	r6, r7
   d781a:	e7d1      	b.n	d77c0 <__udivmoddi4+0x280>
   d781c:	4629      	mov	r1, r5
   d781e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7822:	bf00      	nop

000d7824 <__aeabi_idiv0>:
   d7824:	4770      	bx	lr
   d7826:	bf00      	nop

000d7828 <atol>:
   d7828:	220a      	movs	r2, #10
   d782a:	2100      	movs	r1, #0
   d782c:	f000 b8fc 	b.w	d7a28 <strtol>

000d7830 <__cxa_atexit>:
   d7830:	b510      	push	{r4, lr}
   d7832:	4c05      	ldr	r4, [pc, #20]	; (d7848 <__cxa_atexit+0x18>)
   d7834:	4613      	mov	r3, r2
   d7836:	b12c      	cbz	r4, d7844 <__cxa_atexit+0x14>
   d7838:	460a      	mov	r2, r1
   d783a:	4601      	mov	r1, r0
   d783c:	2002      	movs	r0, #2
   d783e:	f3af 8000 	nop.w
   d7842:	bd10      	pop	{r4, pc}
   d7844:	4620      	mov	r0, r4
   d7846:	bd10      	pop	{r4, pc}
   d7848:	00000000 	.word	0x00000000

000d784c <memcpy>:
   d784c:	b510      	push	{r4, lr}
   d784e:	1e43      	subs	r3, r0, #1
   d7850:	440a      	add	r2, r1
   d7852:	4291      	cmp	r1, r2
   d7854:	d004      	beq.n	d7860 <memcpy+0x14>
   d7856:	f811 4b01 	ldrb.w	r4, [r1], #1
   d785a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d785e:	e7f8      	b.n	d7852 <memcpy+0x6>
   d7860:	bd10      	pop	{r4, pc}

000d7862 <memset>:
   d7862:	4402      	add	r2, r0
   d7864:	4603      	mov	r3, r0
   d7866:	4293      	cmp	r3, r2
   d7868:	d002      	beq.n	d7870 <memset+0xe>
   d786a:	f803 1b01 	strb.w	r1, [r3], #1
   d786e:	e7fa      	b.n	d7866 <memset+0x4>
   d7870:	4770      	bx	lr
	...

000d7874 <srand>:
   d7874:	b538      	push	{r3, r4, r5, lr}
   d7876:	4b12      	ldr	r3, [pc, #72]	; (d78c0 <srand+0x4c>)
   d7878:	681c      	ldr	r4, [r3, #0]
   d787a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d787c:	4605      	mov	r5, r0
   d787e:	b9d3      	cbnz	r3, d78b6 <srand+0x42>
   d7880:	2018      	movs	r0, #24
   d7882:	f7fd f9cb 	bl	d4c1c <malloc>
   d7886:	f243 330e 	movw	r3, #13070	; 0x330e
   d788a:	63a0      	str	r0, [r4, #56]	; 0x38
   d788c:	8003      	strh	r3, [r0, #0]
   d788e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7892:	8043      	strh	r3, [r0, #2]
   d7894:	f241 2334 	movw	r3, #4660	; 0x1234
   d7898:	8083      	strh	r3, [r0, #4]
   d789a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d789e:	80c3      	strh	r3, [r0, #6]
   d78a0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d78a4:	8103      	strh	r3, [r0, #8]
   d78a6:	2305      	movs	r3, #5
   d78a8:	8143      	strh	r3, [r0, #10]
   d78aa:	230b      	movs	r3, #11
   d78ac:	8183      	strh	r3, [r0, #12]
   d78ae:	2201      	movs	r2, #1
   d78b0:	2300      	movs	r3, #0
   d78b2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d78b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d78b8:	2200      	movs	r2, #0
   d78ba:	611d      	str	r5, [r3, #16]
   d78bc:	615a      	str	r2, [r3, #20]
   d78be:	bd38      	pop	{r3, r4, r5, pc}
   d78c0:	2003e2ac 	.word	0x2003e2ac

000d78c4 <strcpy>:
   d78c4:	4603      	mov	r3, r0
   d78c6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d78ca:	f803 2b01 	strb.w	r2, [r3], #1
   d78ce:	2a00      	cmp	r2, #0
   d78d0:	d1f9      	bne.n	d78c6 <strcpy+0x2>
   d78d2:	4770      	bx	lr

000d78d4 <strdup>:
   d78d4:	4b02      	ldr	r3, [pc, #8]	; (d78e0 <strdup+0xc>)
   d78d6:	4601      	mov	r1, r0
   d78d8:	6818      	ldr	r0, [r3, #0]
   d78da:	f000 b803 	b.w	d78e4 <_strdup_r>
   d78de:	bf00      	nop
   d78e0:	2003e2ac 	.word	0x2003e2ac

000d78e4 <_strdup_r>:
   d78e4:	b570      	push	{r4, r5, r6, lr}
   d78e6:	4606      	mov	r6, r0
   d78e8:	4608      	mov	r0, r1
   d78ea:	460c      	mov	r4, r1
   d78ec:	f000 f80d 	bl	d790a <strlen>
   d78f0:	1c45      	adds	r5, r0, #1
   d78f2:	4629      	mov	r1, r5
   d78f4:	4630      	mov	r0, r6
   d78f6:	f7fd f9b9 	bl	d4c6c <_malloc_r>
   d78fa:	4606      	mov	r6, r0
   d78fc:	b118      	cbz	r0, d7906 <_strdup_r+0x22>
   d78fe:	462a      	mov	r2, r5
   d7900:	4621      	mov	r1, r4
   d7902:	f7ff ffa3 	bl	d784c <memcpy>
   d7906:	4630      	mov	r0, r6
   d7908:	bd70      	pop	{r4, r5, r6, pc}

000d790a <strlen>:
   d790a:	4603      	mov	r3, r0
   d790c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7910:	2a00      	cmp	r2, #0
   d7912:	d1fb      	bne.n	d790c <strlen+0x2>
   d7914:	1a18      	subs	r0, r3, r0
   d7916:	3801      	subs	r0, #1
   d7918:	4770      	bx	lr
	...

000d791c <_strtol_r>:
   d791c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7920:	4680      	mov	r8, r0
   d7922:	4840      	ldr	r0, [pc, #256]	; (d7a24 <_strtol_r+0x108>)
   d7924:	f8d0 9000 	ldr.w	r9, [r0]
   d7928:	460f      	mov	r7, r1
   d792a:	463d      	mov	r5, r7
   d792c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7930:	eb09 0004 	add.w	r0, r9, r4
   d7934:	7840      	ldrb	r0, [r0, #1]
   d7936:	f000 0008 	and.w	r0, r0, #8
   d793a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d793e:	b108      	cbz	r0, d7944 <_strtol_r+0x28>
   d7940:	462f      	mov	r7, r5
   d7942:	e7f2      	b.n	d792a <_strtol_r+0xe>
   d7944:	2c2d      	cmp	r4, #45	; 0x2d
   d7946:	d103      	bne.n	d7950 <_strtol_r+0x34>
   d7948:	1cbd      	adds	r5, r7, #2
   d794a:	787c      	ldrb	r4, [r7, #1]
   d794c:	2601      	movs	r6, #1
   d794e:	e003      	b.n	d7958 <_strtol_r+0x3c>
   d7950:	2c2b      	cmp	r4, #43	; 0x2b
   d7952:	bf04      	itt	eq
   d7954:	787c      	ldrbeq	r4, [r7, #1]
   d7956:	1cbd      	addeq	r5, r7, #2
   d7958:	b113      	cbz	r3, d7960 <_strtol_r+0x44>
   d795a:	2b10      	cmp	r3, #16
   d795c:	d10a      	bne.n	d7974 <_strtol_r+0x58>
   d795e:	e05b      	b.n	d7a18 <_strtol_r+0xfc>
   d7960:	2c30      	cmp	r4, #48	; 0x30
   d7962:	d157      	bne.n	d7a14 <_strtol_r+0xf8>
   d7964:	7828      	ldrb	r0, [r5, #0]
   d7966:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d796a:	2858      	cmp	r0, #88	; 0x58
   d796c:	d14d      	bne.n	d7a0a <_strtol_r+0xee>
   d796e:	786c      	ldrb	r4, [r5, #1]
   d7970:	2310      	movs	r3, #16
   d7972:	3502      	adds	r5, #2
   d7974:	2e00      	cmp	r6, #0
   d7976:	bf14      	ite	ne
   d7978:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d797c:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d7980:	2700      	movs	r7, #0
   d7982:	fbbc faf3 	udiv	sl, ip, r3
   d7986:	4638      	mov	r0, r7
   d7988:	fb03 cc1a 	mls	ip, r3, sl, ip
   d798c:	eb09 0e04 	add.w	lr, r9, r4
   d7990:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7994:	f01e 0f04 	tst.w	lr, #4
   d7998:	d001      	beq.n	d799e <_strtol_r+0x82>
   d799a:	3c30      	subs	r4, #48	; 0x30
   d799c:	e00b      	b.n	d79b6 <_strtol_r+0x9a>
   d799e:	f01e 0e03 	ands.w	lr, lr, #3
   d79a2:	d01b      	beq.n	d79dc <_strtol_r+0xc0>
   d79a4:	f1be 0f01 	cmp.w	lr, #1
   d79a8:	bf0c      	ite	eq
   d79aa:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d79ae:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d79b2:	ebce 0404 	rsb	r4, lr, r4
   d79b6:	42a3      	cmp	r3, r4
   d79b8:	dd10      	ble.n	d79dc <_strtol_r+0xc0>
   d79ba:	f1b7 3fff 	cmp.w	r7, #4294967295
   d79be:	d00a      	beq.n	d79d6 <_strtol_r+0xba>
   d79c0:	4550      	cmp	r0, sl
   d79c2:	d806      	bhi.n	d79d2 <_strtol_r+0xb6>
   d79c4:	d101      	bne.n	d79ca <_strtol_r+0xae>
   d79c6:	4564      	cmp	r4, ip
   d79c8:	dc03      	bgt.n	d79d2 <_strtol_r+0xb6>
   d79ca:	fb03 4000 	mla	r0, r3, r0, r4
   d79ce:	2701      	movs	r7, #1
   d79d0:	e001      	b.n	d79d6 <_strtol_r+0xba>
   d79d2:	f04f 37ff 	mov.w	r7, #4294967295
   d79d6:	f815 4b01 	ldrb.w	r4, [r5], #1
   d79da:	e7d7      	b.n	d798c <_strtol_r+0x70>
   d79dc:	1c7b      	adds	r3, r7, #1
   d79de:	d10c      	bne.n	d79fa <_strtol_r+0xde>
   d79e0:	2e00      	cmp	r6, #0
   d79e2:	f04f 0322 	mov.w	r3, #34	; 0x22
   d79e6:	bf14      	ite	ne
   d79e8:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d79ec:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d79f0:	f8c8 3000 	str.w	r3, [r8]
   d79f4:	b92a      	cbnz	r2, d7a02 <_strtol_r+0xe6>
   d79f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d79fa:	b106      	cbz	r6, d79fe <_strtol_r+0xe2>
   d79fc:	4240      	negs	r0, r0
   d79fe:	b172      	cbz	r2, d7a1e <_strtol_r+0x102>
   d7a00:	b107      	cbz	r7, d7a04 <_strtol_r+0xe8>
   d7a02:	1e69      	subs	r1, r5, #1
   d7a04:	6011      	str	r1, [r2, #0]
   d7a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7a0a:	2430      	movs	r4, #48	; 0x30
   d7a0c:	2b00      	cmp	r3, #0
   d7a0e:	d1b1      	bne.n	d7974 <_strtol_r+0x58>
   d7a10:	2308      	movs	r3, #8
   d7a12:	e7af      	b.n	d7974 <_strtol_r+0x58>
   d7a14:	230a      	movs	r3, #10
   d7a16:	e7ad      	b.n	d7974 <_strtol_r+0x58>
   d7a18:	2c30      	cmp	r4, #48	; 0x30
   d7a1a:	d0a3      	beq.n	d7964 <_strtol_r+0x48>
   d7a1c:	e7aa      	b.n	d7974 <_strtol_r+0x58>
   d7a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7a22:	bf00      	nop
   d7a24:	2003e248 	.word	0x2003e248

000d7a28 <strtol>:
   d7a28:	4613      	mov	r3, r2
   d7a2a:	460a      	mov	r2, r1
   d7a2c:	4601      	mov	r1, r0
   d7a2e:	4802      	ldr	r0, [pc, #8]	; (d7a38 <strtol+0x10>)
   d7a30:	6800      	ldr	r0, [r0, #0]
   d7a32:	f7ff bf73 	b.w	d791c <_strtol_r>
   d7a36:	bf00      	nop
   d7a38:	2003e2ac 	.word	0x2003e2ac

000d7a3c <dynalib_user>:
   d7a3c:	000d4021 000d405d 000d4089 000d408d     !@..]@...@...@..
   d7a4c:	00000000 41206e49 6d72616c 616c4100     ....In Alarm.Ala
   d7a5c:	52206d72 74657365 61562000 3a65756c     rm Reset. Value:
   d7a6c:	72490020 3020736d 4400203a 72657972      .Irms 0: .Dryer
   d7a7c:	616c415f 005f6d72 65736552 72445f74     _Alarm_.Reset_Dr
   d7a8c:	00726579 6e676953 535f6c61 6e657274     yer.Signal_Stren
   d7a9c:	00687467 6e676953 515f6c61 696c6175     gth.Signal_Quali
   d7aac:	50007974 7265776f 706d4100 00300073     ty.Power.Amps.0.

000d7abc <_ZL5ALARM>:
   d7abc:	08060504                                ....

000d7ac0 <_ZL5rPins>:
   d7ac0:	00020003 00000001                       ........

000d7ac8 <_ZTVN8particle13__SPISettingsE>:
	...
   d7ad0:	000d45d5 61666564 20746c75 42534d00     .E..default .MSB
   d7ae0:	42534c00 50533c00 74655349 676e6974     .LSB.<SPISetting
   d7af0:	65642073 6c756166 3c003e74 53495053     s default>.<SPIS
   d7b00:	69747465 2073676e 6c257325 73252075     ettings %s%lu %s
   d7b10:	444f4d20 3e642545 00000000               MODE%d>....

000d7b1c <_ZTVN5spark13EthernetClassE>:
	...
   d7b24:	000d4ceb 000d4ce1 000d4cd7 000d4ccd     .L...L...L...L..
   d7b34:	000d4cc1 000d4cb5 000d4ca9 000d4ca1     .L...L...L...L..
   d7b44:	000d4c97 000d4c8d 000d6439              .L...L..9d..

000d7b50 <_ZTV8SPIClass>:
	...
   d7b58:	000d4d09 000d4d0b                       .M...M..

000d7b60 <_ZL14clock_divisors>:
   d7b60:	18100800 38302820 006e616e 0066766f     .... (08nan.ovf.
   d7b70:	6e69002e 61620066 53006475 61697265     ..inf.baud.Seria
   d7b80:	6553006c 6c616972 79740031 70006570     l.Serial1.type.p
   d7b90:	6d617261 646d6300 00646900 00646e68     aram.cmd.id.hnd.
   d7ba0:	6d727473 6c696600 766c0074 6461006c     strm.filt.lvl.ad
   d7bb0:	6e614864 72656c64 6d657200 4865766f     dHandler.removeH
   d7bc0:	6c646e61 65007265 486d756e 6c646e61     andler.enumHandl
   d7bd0:	00737265 4e4f534a 65727453 6f4c6d61     ers.JSONStreamLo
   d7be0:	6e614867 72656c64 70706100 31302500     gHandler.app.%01
   d7bf0:	00207530 2500205d 202c0064 3a292800     0u .] .%d., .():
   d7c00:	5b200020 646f6300 203d2065 00692500      . [.code = .%i.
   d7c10:	61746564 20736c69 0d00203d 6e6c000a     details = ....ln
   d7c20:	006e6600 65646f63 74656400 006c6961     .fn.code.detail.
   d7c30:	656e6f6e 61727400 69006563 006f666e     none.trace.info.
   d7c40:	6e726177 72726500 7000726f 63696e61     warn.error.panic
   d7c50:	6c6c6100 25005a00 6433302b 3230253a     .all.Z.%+03d:%02
   d7c60:	59250075 2d6d252d 25546425 4d253a48     u.%Y-%m-%dT%H:%M
   d7c70:	2553253a 7361007a 6d697463 00000065     :%S%z.asctime...

000d7c80 <_ZTV14CellularSignal>:
	...
   d7c88:	000d55e9 000d567b 000d55eb 000d56bd     .U..{V...U...V..
   d7c98:	000d55f1 000d5689 000d561d 000d5649     .U...V...V..IV..
   d7ca8:	fffffffc 00000000 000d5673              ........sV..

000d7cb4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7cbc:	000d57dd 000d57e3 000d5827 000d57f1     .W...W..'X...W..
   d7ccc:	000d57df                                .W..

000d7cd0 <_ZTV9IPAddress>:
	...
   d7cd8:	000d5dcd 000d5dbd 000d5dbf              .]...]...]..

000d7ce4 <_ZTV9USBSerial>:
	...
   d7cec:	000d5ea5 000d5ef5 000d5f03 000d5259     .^...^..._..YR..
   d7cfc:	000d5ee1 000d5ea7 000d5ebd 000d5eef     .^...^...^...^..
   d7d0c:	000d5ed3 000d5ea1                       .^...^..

000d7d14 <_ZTVN5spark13CellularClassE>:
	...
   d7d1c:	000d600f 000d6005 000d5ffb 000d5fb1     .`...`..._..._..
   d7d2c:	000d5fef 000d5fe3 000d5fd7 000d5fcf     ._..._..._..._..
   d7d3c:	000d5fc5 000d5fbb 000d6439              ._..._..9d..

000d7d48 <_ZTV11USARTSerial>:
	...
   d7d50:	000d60bd 000d610d 000d611b 000d5259     .`...a...a..YR..
   d7d60:	000d60d1 000d60f3 000d60df 000d6107     .`...`...`...a..
   d7d70:	000d60bf 000d60c3                       .`...`..

000d7d78 <_ZTV7TwoWire>:
	...
   d7d80:	000d61e9 000d6233 000d620b 000d61eb     .a..3b...b...a..
   d7d90:	000d6213 000d621b 000d6223 000d622b     .b...b..#b..+b..

000d7da0 <_ZTVN5spark9MeshClassE>:
	...
   d7da8:	000d62cb 000d62c1 000d62b7 000d62ad     .b...b...b...b..
   d7db8:	000d62a1 000d6295 000d6289 000d6281     .b...b...b...b..
   d7dc8:	000d6277 000d626d 000d6439              wb..mb..9d..

000d7dd4 <_ZTVN5spark12NetworkClassE>:
	...
   d7ddc:	000d63d1 000d63db 000d63e5 000d63ef     .c...c...c...c..
   d7dec:	000d63f9 000d6405 000d6411 000d641d     .c...d...d...d..
   d7dfc:	000d6425 000d642f 000d6439 74727173     %d../d..9d..sqrt
   d7e0c:	00000000                                ....

000d7e10 <_ctype_>:
   d7e10:	20202000 20202020 28282020 20282828     .         ((((( 
   d7e20:	20202020 20202020 20202020 20202020                     
   d7e30:	10108820 10101010 10101010 10101010      ...............
   d7e40:	04040410 04040404 10040404 10101010     ................
   d7e50:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d7e60:	01010101 01010101 01010101 10101010     ................
   d7e70:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d7e80:	02020202 02020202 02020202 10101010     ................
   d7e90:	00000020 00000000 00000000 00000000      ...............
	...

000d7f14 <__sf_fake_stdin>:
	...

000d7f34 <__sf_fake_stdout>:
	...

000d7f54 <__sf_fake_stderr>:
	...
   d7f74:	00000043                                         C.

000d7f76 <link_const_variable_data_end>:
	...

000d7f78 <link_constructors_location>:
   d7f78:	000d44f9 	.word	0x000d44f9
   d7f7c:	000d46b5 	.word	0x000d46b5
   d7f80:	000d47e1 	.word	0x000d47e1
   d7f84:	000d4cf5 	.word	0x000d4cf5
   d7f88:	000d4e71 	.word	0x000d4e71
   d7f8c:	000d5249 	.word	0x000d5249
   d7f90:	000d5565 	.word	0x000d5565
   d7f94:	000d5575 	.word	0x000d5575
   d7f98:	000d55cd 	.word	0x000d55cd
   d7f9c:	000d608d 	.word	0x000d608d
   d7fa0:	000d6381 	.word	0x000d6381
   d7fa4:	000d6505 	.word	0x000d6505
   d7fa8:	000d65dd 	.word	0x000d65dd
   d7fac:	000d6675 	.word	0x000d6675
   d7fb0:	000d66f9 	.word	0x000d66f9
   d7fb4:	000d67bd 	.word	0x000d67bd
   d7fb8:	000d6881 	.word	0x000d6881

000d7fbc <link_constructors_end>:
   d7fbc:	00000000 	.word	0x00000000
