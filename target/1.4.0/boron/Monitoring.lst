
c:/Users/erosn/ownCloud/ParticleProjects/Monitoring/target/1.4.0/boron/Monitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003fb0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d7fd0  000d7fd0  00007fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000000  2003f400  2003f400  00018074  2**0
                  CONTENTS
  5 .data         00000070  2003e240  000d7fd8  0000e240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000540  2003e2b0  2003e2b0  0001e2b0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000d8048  000d8048  00018048  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d8070  000d8070  00018070  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000f0568  00000000  00000000  00018074  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001419e  00000000  00000000  001085dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00020351  00000000  00000000  0011c77a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002870  00000000  00000000  0013cacb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004a00  00000000  00000000  0013f33b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003b82c  00000000  00000000  00143d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003332a  00000000  00000000  0017f567  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001051b3  00000000  00000000  001b2891  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000d7d4  00000000  00000000  002b7a44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fc0f 	bl	d7854 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fc14 	bl	d786a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e240 	.word	0x2003e240
   d404c:	000d7fd8 	.word	0x000d7fd8
   d4050:	2003e2b0 	.word	0x2003e2b0
   d4054:	2003e2b0 	.word	0x2003e2b0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 fba7 	bl	d57b0 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d7fcc 	.word	0x000d7fcc
   d4084:	000d7f80 	.word	0x000d7f80

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b9c2 	b.w	d4410 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f8a3 	bl	d41d8 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 bb59 	b.w	d574c <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bdc3 	b.w	d4c24 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bdc9 	b.w	d4c34 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bdc7 	b.w	d4c34 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   d40b6:	6810      	ldr	r0, [r2, #0]
   d40b8:	4770      	bx	lr
	...

000d40bc <__tcf_0>:
String Amps = "0";

const uint8_t ALARM[alarmCount] = {D4, D5, D6, D8};
int alarmValues[alarmCount] = {0, 0, 0, 0};
byte alarmState[alarmCount] = {0, 0, 0, 0};
String names[alarmCount];
   d40bc:	b510      	push	{r4, lr}
   d40be:	4c09      	ldr	r4, [pc, #36]	; (d40e4 <__tcf_0+0x28>)
   d40c0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d40c4:	f000 ff98 	bl	d4ff8 <_ZN6StringD1Ev>
   d40c8:	f104 0020 	add.w	r0, r4, #32
   d40cc:	f000 ff94 	bl	d4ff8 <_ZN6StringD1Ev>
   d40d0:	f104 0010 	add.w	r0, r4, #16
   d40d4:	f000 ff90 	bl	d4ff8 <_ZN6StringD1Ev>
   d40d8:	4620      	mov	r0, r4
   d40da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d40de:	f000 bf8b 	b.w	d4ff8 <_ZN6StringD1Ev>
   d40e2:	bf00      	nop
   d40e4:	2003e31c 	.word	0x2003e31c

000d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d40e8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d40ea:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d40ec:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d40ee:	b17c      	cbz	r4, d4110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40f0:	6863      	ldr	r3, [r4, #4]
   d40f2:	3b01      	subs	r3, #1
   d40f4:	6063      	str	r3, [r4, #4]
   d40f6:	b95b      	cbnz	r3, d4110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d40f8:	6823      	ldr	r3, [r4, #0]
   d40fa:	4620      	mov	r0, r4
   d40fc:	689b      	ldr	r3, [r3, #8]
   d40fe:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4100:	68a3      	ldr	r3, [r4, #8]
   d4102:	3b01      	subs	r3, #1
   d4104:	60a3      	str	r3, [r4, #8]
   d4106:	b91b      	cbnz	r3, d4110 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4108:	6823      	ldr	r3, [r4, #0]
   d410a:	4620      	mov	r0, r4
   d410c:	68db      	ldr	r3, [r3, #12]
   d410e:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4110:	4628      	mov	r0, r5
   d4112:	bd38      	pop	{r3, r4, r5, pc}

000d4114 <_Z8setAlarmbi>:
  Serial.print(Irms * 118);
  Serial.print(" ");
  Serial.println(Irms);
}

void setAlarm(bool inAlarm, int alarmNum){
   d4114:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4116:	b08d      	sub	sp, #52	; 0x34
   d4118:	4607      	mov	r7, r0
   d411a:	460c      	mov	r4, r1
  String alarmStr = "In Alarm";
   d411c:	a804      	add	r0, sp, #16
   d411e:	4927      	ldr	r1, [pc, #156]	; (d41bc <_Z8setAlarmbi+0xa8>)
   d4120:	4d27      	ldr	r5, [pc, #156]	; (d41c0 <_Z8setAlarmbi+0xac>)
   d4122:	4e28      	ldr	r6, [pc, #160]	; (d41c4 <_Z8setAlarmbi+0xb0>)
   d4124:	f000 ffaf 	bl	d5086 <_ZN6StringC1EPK19__FlashStringHelper>
  if(inAlarm){
   d4128:	b14f      	cbz	r7, d413e <_Z8setAlarmbi+0x2a>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d412a:	f000 fbcf 	bl	d48cc <HAL_Timer_Get_Milli_Seconds>
    //strip.setPixelColor(alarmNum, BRIGHTNESS, 0, 0);
    if(((millis() - debounceTime) > DEBOUNCE_DELAY) && alarmState[alarmNum] == 0){
   d412e:	682b      	ldr	r3, [r5, #0]
   d4130:	1ac0      	subs	r0, r0, r3
   d4132:	28c8      	cmp	r0, #200	; 0xc8
   d4134:	d901      	bls.n	d413a <_Z8setAlarmbi+0x26>
   d4136:	5d33      	ldrb	r3, [r6, r4]
   d4138:	b18b      	cbz	r3, d415e <_Z8setAlarmbi+0x4a>
      Particle.publish(names[alarmNum], alarmStr, 259200, PRIVATE);
      debounceTime = millis();
    }
    alarmState[alarmNum] = 1;
   d413a:	2301      	movs	r3, #1
   d413c:	e009      	b.n	d4152 <_Z8setAlarmbi+0x3e>
   d413e:	f000 fbc5 	bl	d48cc <HAL_Timer_Get_Milli_Seconds>
    return;
  }

  //strip.setPixelColor(alarmNum, 0, 0, 0);
  if(((millis() - debounceTime) > DEBOUNCE_DELAY) && alarmState[alarmNum] == 1){
   d4142:	682b      	ldr	r3, [r5, #0]
   d4144:	1ac0      	subs	r0, r0, r3
   d4146:	28c8      	cmp	r0, #200	; 0xc8
   d4148:	d902      	bls.n	d4150 <_Z8setAlarmbi+0x3c>
   d414a:	5d33      	ldrb	r3, [r6, r4]
   d414c:	2b01      	cmp	r3, #1
   d414e:	d019      	beq.n	d4184 <_Z8setAlarmbi+0x70>
    Particle.publish(names[alarmNum], String("Alarm Reset"), 259200, PRIVATE);
    debounceTime = millis();
  }
  alarmState[alarmNum] = 0;
   d4150:	2300      	movs	r3, #0
  Serial.print(" ");
  Serial.println(Irms);
}

void setAlarm(bool inAlarm, int alarmNum){
  String alarmStr = "In Alarm";
   d4152:	a804      	add	r0, sp, #16
  //strip.setPixelColor(alarmNum, 0, 0, 0);
  if(((millis() - debounceTime) > DEBOUNCE_DELAY) && alarmState[alarmNum] == 1){
    Particle.publish(names[alarmNum], String("Alarm Reset"), 259200, PRIVATE);
    debounceTime = millis();
  }
  alarmState[alarmNum] = 0;
   d4154:	5533      	strb	r3, [r6, r4]
  Serial.print(" ");
  Serial.println(Irms);
}

void setAlarm(bool inAlarm, int alarmNum){
  String alarmStr = "In Alarm";
   d4156:	f000 ff4f 	bl	d4ff8 <_ZN6StringD1Ev>
  if(((millis() - debounceTime) > DEBOUNCE_DELAY) && alarmState[alarmNum] == 1){
    Particle.publish(names[alarmNum], String("Alarm Reset"), 259200, PRIVATE);
    debounceTime = millis();
  }
  alarmState[alarmNum] = 0;
}
   d415a:	b00d      	add	sp, #52	; 0x34
   d415c:	bdf0      	pop	{r4, r5, r6, r7, pc}
void setAlarm(bool inAlarm, int alarmNum){
  String alarmStr = "In Alarm";
  if(inAlarm){
    //strip.setPixelColor(alarmNum, BRIGHTNESS, 0, 0);
    if(((millis() - debounceTime) > DEBOUNCE_DELAY) && alarmState[alarmNum] == 0){
      Particle.publish(names[alarmNum], alarmStr, 259200, PRIVATE);
   d415e:	0123      	lsls	r3, r4, #4
   d4160:	4a19      	ldr	r2, [pc, #100]	; (d41c8 <_Z8setAlarmbi+0xb4>)
   d4162:	58d1      	ldr	r1, [r2, r3]
   d4164:	4b19      	ldr	r3, [pc, #100]	; (d41cc <_Z8setAlarmbi+0xb8>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4166:	9a04      	ldr	r2, [sp, #16]
   d4168:	781b      	ldrb	r3, [r3, #0]
   d416a:	f88d 3000 	strb.w	r3, [sp]
   d416e:	a808      	add	r0, sp, #32
   d4170:	4b17      	ldr	r3, [pc, #92]	; (d41d0 <_Z8setAlarmbi+0xbc>)
   d4172:	f001 fca5 	bl	d5ac0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4176:	a809      	add	r0, sp, #36	; 0x24
   d4178:	f7ff ffb6 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d417c:	f000 fba6 	bl	d48cc <HAL_Timer_Get_Milli_Seconds>
      debounceTime = millis();
   d4180:	6028      	str	r0, [r5, #0]
   d4182:	e7da      	b.n	d413a <_Z8setAlarmbi+0x26>
    return;
  }

  //strip.setPixelColor(alarmNum, 0, 0, 0);
  if(((millis() - debounceTime) > DEBOUNCE_DELAY) && alarmState[alarmNum] == 1){
    Particle.publish(names[alarmNum], String("Alarm Reset"), 259200, PRIVATE);
   d4184:	0123      	lsls	r3, r4, #4
   d4186:	4a10      	ldr	r2, [pc, #64]	; (d41c8 <_Z8setAlarmbi+0xb4>)
   d4188:	4912      	ldr	r1, [pc, #72]	; (d41d4 <_Z8setAlarmbi+0xc0>)
   d418a:	58d7      	ldr	r7, [r2, r3]
   d418c:	a808      	add	r0, sp, #32
   d418e:	f000 ff7a 	bl	d5086 <_ZN6StringC1EPK19__FlashStringHelper>
   d4192:	4b0e      	ldr	r3, [pc, #56]	; (d41cc <_Z8setAlarmbi+0xb8>)
   d4194:	9a08      	ldr	r2, [sp, #32]
   d4196:	781b      	ldrb	r3, [r3, #0]
   d4198:	f88d 3000 	strb.w	r3, [sp]
   d419c:	4639      	mov	r1, r7
   d419e:	4b0c      	ldr	r3, [pc, #48]	; (d41d0 <_Z8setAlarmbi+0xbc>)
   d41a0:	a802      	add	r0, sp, #8
   d41a2:	f001 fc8d 	bl	d5ac0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d41a6:	a803      	add	r0, sp, #12
   d41a8:	f7ff ff9e 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d41ac:	a808      	add	r0, sp, #32
   d41ae:	f000 ff23 	bl	d4ff8 <_ZN6StringD1Ev>
   d41b2:	f000 fb8b 	bl	d48cc <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   d41b6:	6028      	str	r0, [r5, #0]
   d41b8:	e7ca      	b.n	d4150 <_Z8setAlarmbi+0x3c>
   d41ba:	bf00      	nop
   d41bc:	000d7a58 	.word	0x000d7a58
   d41c0:	2003e2c4 	.word	0x2003e2c4
   d41c4:	2003e36c 	.word	0x2003e36c
   d41c8:	2003e31c 	.word	0x2003e31c
   d41cc:	2003e318 	.word	0x2003e318
   d41d0:	0003f480 	.word	0x0003f480
   d41d4:	000d7a61 	.word	0x000d7a61

000d41d8 <loop>:
  Particle.variable("Power", power);
  Particle.variable("Amps", Amps);
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d41d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d41dc:	ed2d 8b04 	vpush	{d8-d9}

  for(int i = 0; i < alarmCount; i++){
    alarmValues[i] = digitalRead(ALARM[i]);
   d41e0:	4d59      	ldr	r5, [pc, #356]	; (d4348 <loop+0x170>)
   d41e2:	f8df a190 	ldr.w	sl, [pc, #400]	; d4374 <loop+0x19c>
  Particle.variable("Power", power);
  Particle.variable("Amps", Amps);
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d41e6:	b092      	sub	sp, #72	; 0x48

  for(int i = 0; i < alarmCount; i++){
   d41e8:	2400      	movs	r4, #0
   d41ea:	46a9      	mov	r9, r5
    alarmValues[i] = digitalRead(ALARM[i]);
   d41ec:	f81a 0004 	ldrb.w	r0, [sl, r4]
   d41f0:	f002 f9e4 	bl	d65bc <digitalRead>
    alarmValues[i] == HIGH ? setAlarm(true, i) : setAlarm(false, i);
   d41f4:	2801      	cmp	r0, #1

// loop() runs over and over again, as quickly as it can execute.
void loop() {

  for(int i = 0; i < alarmCount; i++){
    alarmValues[i] = digitalRead(ALARM[i]);
   d41f6:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
    alarmValues[i] == HIGH ? setAlarm(true, i) : setAlarm(false, i);
   d41fa:	4621      	mov	r1, r4
   d41fc:	bf18      	it	ne
   d41fe:	2000      	movne	r0, #0
   d4200:	f7ff ff88 	bl	d4114 <_Z8setAlarmbi>
    
    #if MONITOR_DEBUG
    Serial.print(String(i) + " Value: " + String(alarmValues[i]));
   d4204:	f001 feb2 	bl	d5f6c <_Z16_fetch_usbserialv>
   d4208:	220a      	movs	r2, #10
   d420a:	4621      	mov	r1, r4
   d420c:	4606      	mov	r6, r0
   d420e:	4668      	mov	r0, sp
   d4210:	f000 ff9c 	bl	d514c <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4214:	4669      	mov	r1, sp
   d4216:	a804      	add	r0, sp, #16
   d4218:	f000 ff74 	bl	d5104 <_ZN6StringC1ERKS_>
   d421c:	494b      	ldr	r1, [pc, #300]	; (d434c <loop+0x174>)
   d421e:	a804      	add	r0, sp, #16
   d4220:	f000 fff7 	bl	d5212 <_ZplRK15StringSumHelperPKc>
   d4224:	ea4f 0884 	mov.w	r8, r4, lsl #2
   d4228:	220a      	movs	r2, #10
   d422a:	4607      	mov	r7, r0
   d422c:	f859 1008 	ldr.w	r1, [r9, r8]
   d4230:	a808      	add	r0, sp, #32
   d4232:	f000 ff8b 	bl	d514c <_ZN6StringC1Eih>
   d4236:	a908      	add	r1, sp, #32
   d4238:	4638      	mov	r0, r7
   d423a:	f000 ffde 	bl	d51fa <_ZplRK15StringSumHelperRK6String>
   d423e:	6801      	ldr	r1, [r0, #0]
   d4240:	4630      	mov	r0, r6
   d4242:	f001 f833 	bl	d52ac <_ZN5Print5printEPKc>
   d4246:	a808      	add	r0, sp, #32
   d4248:	f000 fed6 	bl	d4ff8 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d424c:	a804      	add	r0, sp, #16
   d424e:	f000 fed3 	bl	d4ff8 <_ZN6StringD1Ev>
   d4252:	4668      	mov	r0, sp
   d4254:	f000 fed0 	bl	d4ff8 <_ZN6StringD1Ev>
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {

  for(int i = 0; i < alarmCount; i++){
   d4258:	3401      	adds	r4, #1
    alarmValues[i] = digitalRead(ALARM[i]);
    alarmValues[i] == HIGH ? setAlarm(true, i) : setAlarm(false, i);
    
    #if MONITOR_DEBUG
    Serial.print(String(i) + " Value: " + String(alarmValues[i]));
    Serial.print(" ");
   d425a:	f001 fe87 	bl	d5f6c <_Z16_fetch_usbserialv>
   d425e:	493c      	ldr	r1, [pc, #240]	; (d4350 <loop+0x178>)
   d4260:	f001 f824 	bl	d52ac <_ZN5Print5printEPKc>
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {

  for(int i = 0; i < alarmCount; i++){
   d4264:	2c04      	cmp	r4, #4
   d4266:	d1c1      	bne.n	d41ec <loop+0x14>
    Serial.print(String(i) + " Value: " + String(alarmValues[i]));
    Serial.print(" ");
    #endif
  }
  #if MONITOR_DEBUG
  Serial.println();
   d4268:	f001 fe80 	bl	d5f6c <_Z16_fetch_usbserialv>
   d426c:	f001 f825 	bl	d52ba <_ZN5Print7printlnEv>
  #endif

  CellularSignal sig = Cellular.RSSI();
   d4270:	4938      	ldr	r1, [pc, #224]	; (d4354 <loop+0x17c>)
   d4272:	a808      	add	r0, sp, #32
   d4274:	f001 fed4 	bl	d6020 <_ZN5spark13CellularClass4RSSIEv>
  signalStrength = String(sig.getStrength());
   d4278:	a808      	add	r0, sp, #32
   d427a:	f001 fa23 	bl	d56c4 <_ZNK14CellularSignal11getStrengthEv>
   d427e:	2106      	movs	r1, #6
   d4280:	a804      	add	r0, sp, #16
   d4282:	f000 ff76 	bl	d5172 <_ZN6StringC1Efi>
   d4286:	a904      	add	r1, sp, #16
   d4288:	4833      	ldr	r0, [pc, #204]	; (d4358 <loop+0x180>)
   d428a:	f000 ff46 	bl	d511a <_ZN6StringaSEOS_>
   d428e:	a804      	add	r0, sp, #16
   d4290:	f000 feb2 	bl	d4ff8 <_ZN6StringD1Ev>
  signalQuality = String(sig.getQuality());
   d4294:	a808      	add	r0, sp, #32
   d4296:	f001 f9fb 	bl	d5690 <_ZNK14CellularSignal10getQualityEv>
   d429a:	2106      	movs	r1, #6
   d429c:	a804      	add	r0, sp, #16
   d429e:	f000 ff68 	bl	d5172 <_ZN6StringC1Efi>
   d42a2:	a904      	add	r1, sp, #16
   d42a4:	482d      	ldr	r0, [pc, #180]	; (d435c <loop+0x184>)
   d42a6:	f000 ff38 	bl	d511a <_ZN6StringaSEOS_>
   d42aa:	a804      	add	r0, sp, #16
   d42ac:	f000 fea4 	bl	d4ff8 <_ZN6StringD1Ev>

  Serial.print("Irms 0: ");
   d42b0:	f001 fe5c 	bl	d5f6c <_Z16_fetch_usbserialv>
   d42b4:	492a      	ldr	r1, [pc, #168]	; (d4360 <loop+0x188>)
   d42b6:	f000 fff9 	bl	d52ac <_ZN5Print5printEPKc>
  double Irms = monitor.processAdc(0);
   d42ba:	2100      	movs	r1, #0
   d42bc:	4829      	ldr	r0, [pc, #164]	; (d4364 <loop+0x18c>)
   d42be:	f000 fa87 	bl	d47d0 <_ZN14CurrentMonitor10processAdcEh>
  Amps = String(Irms);
   d42c2:	2106      	movs	r1, #6
   d42c4:	a804      	add	r0, sp, #16
  CellularSignal sig = Cellular.RSSI();
  signalStrength = String(sig.getStrength());
  signalQuality = String(sig.getQuality());

  Serial.print("Irms 0: ");
  double Irms = monitor.processAdc(0);
   d42c6:	eeb0 8a40 	vmov.f32	s16, s0
   d42ca:	eef0 8a60 	vmov.f32	s17, s1
  Amps = String(Irms);
   d42ce:	f000 ff6a 	bl	d51a6 <_ZN6StringC1Edi>
   d42d2:	a904      	add	r1, sp, #16
   d42d4:	4824      	ldr	r0, [pc, #144]	; (d4368 <loop+0x190>)
   d42d6:	f000 ff20 	bl	d511a <_ZN6StringaSEOS_>
   d42da:	a804      	add	r0, sp, #16
   d42dc:	f000 fe8c 	bl	d4ff8 <_ZN6StringD1Ev>
  power = String(Irms * 118);
   d42e0:	2200      	movs	r2, #0
   d42e2:	4b22      	ldr	r3, [pc, #136]	; (d436c <loop+0x194>)
   d42e4:	ec51 0b18 	vmov	r0, r1, d8
   d42e8:	f002 fdfa 	bl	d6ee0 <__aeabi_dmul>
   d42ec:	ec41 0b19 	vmov	d9, r0, r1
   d42f0:	2106      	movs	r1, #6
   d42f2:	eeb0 0a49 	vmov.f32	s0, s18
   d42f6:	eef0 0a69 	vmov.f32	s1, s19
   d42fa:	a804      	add	r0, sp, #16
   d42fc:	f000 ff53 	bl	d51a6 <_ZN6StringC1Edi>
   d4300:	a904      	add	r1, sp, #16
   d4302:	481b      	ldr	r0, [pc, #108]	; (d4370 <loop+0x198>)
   d4304:	f000 ff09 	bl	d511a <_ZN6StringaSEOS_>
   d4308:	a804      	add	r0, sp, #16
   d430a:	f000 fe75 	bl	d4ff8 <_ZN6StringD1Ev>
  Serial.print(Irms * 118);
   d430e:	f001 fe2d 	bl	d5f6c <_Z16_fetch_usbserialv>
   d4312:	eeb0 0a49 	vmov.f32	s0, s18
   d4316:	eef0 0a69 	vmov.f32	s1, s19
   d431a:	2102      	movs	r1, #2
   d431c:	f001 f8de 	bl	d54dc <_ZN5Print5printEdi>
  Serial.print(" ");
   d4320:	f001 fe24 	bl	d5f6c <_Z16_fetch_usbserialv>
   d4324:	490a      	ldr	r1, [pc, #40]	; (d4350 <loop+0x178>)
   d4326:	f000 ffc1 	bl	d52ac <_ZN5Print5printEPKc>
  Serial.println(Irms);
   d432a:	f001 fe1f 	bl	d5f6c <_Z16_fetch_usbserialv>
   d432e:	eeb0 0a48 	vmov.f32	s0, s16
   d4332:	eef0 0a68 	vmov.f32	s1, s17
   d4336:	2102      	movs	r1, #2
   d4338:	f001 f8d3 	bl	d54e2 <_ZN5Print7printlnEdi>
}
   d433c:	b012      	add	sp, #72	; 0x48
   d433e:	ecbd 8b04 	vpop	{d8-d9}
   d4342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4346:	bf00      	nop
   d4348:	2003e390 	.word	0x2003e390
   d434c:	000d7a6d 	.word	0x000d7a6d
   d4350:	000d7c03 	.word	0x000d7c03
   d4354:	2003e3e8 	.word	0x2003e3e8
   d4358:	2003e2b4 	.word	0x2003e2b4
   d435c:	2003e380 	.word	0x2003e380
   d4360:	000d7a76 	.word	0x000d7a76
   d4364:	2003e2c8 	.word	0x2003e2c8
   d4368:	2003e370 	.word	0x2003e370
   d436c:	405d8000 	.word	0x405d8000
   d4370:	2003e35c 	.word	0x2003e35c
   d4374:	000d7ac4 	.word	0x000d7ac4

000d4378 <_Z10alarmReset6String>:
    debounceTime = millis();
  }
  alarmState[alarmNum] = 0;
}

int alarmReset(String alarmNum){
   d4378:	b530      	push	{r4, r5, lr}
   d437a:	b089      	sub	sp, #36	; 0x24
  int alarm = alarmNum.toInt();
   d437c:	f000 ff5b 	bl	d5236 <_ZNK6String5toIntEv>
  if(alarm < 1 || alarm > relayCount){
   d4380:	1e44      	subs	r4, r0, #1
   d4382:	2c03      	cmp	r4, #3
   d4384:	d827      	bhi.n	d43d6 <_Z10alarmReset6String+0x5e>
    return 0;
  }
  digitalWrite(rPins[alarm-1], LOW);
   d4386:	4b15      	ldr	r3, [pc, #84]	; (d43dc <_Z10alarmReset6String+0x64>)
   d4388:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
   d438c:	2100      	movs	r1, #0
   d438e:	4628      	mov	r0, r5
   d4390:	f002 f8fb 	bl	d658a <digitalWrite>
  delay(500);
   d4394:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4398:	f001 f8fa 	bl	d5590 <delay>
  digitalWrite(rPins[alarm-1], HIGH);
   d439c:	2101      	movs	r1, #1
   d439e:	4628      	mov	r0, r5
   d43a0:	f002 f8f3 	bl	d658a <digitalWrite>
  Particle.publish(names[alarm-1], String("Alarm Reset"), 259200, PRIVATE);
   d43a4:	0124      	lsls	r4, r4, #4
   d43a6:	4b0e      	ldr	r3, [pc, #56]	; (d43e0 <_Z10alarmReset6String+0x68>)
   d43a8:	490e      	ldr	r1, [pc, #56]	; (d43e4 <_Z10alarmReset6String+0x6c>)
   d43aa:	591c      	ldr	r4, [r3, r4]
   d43ac:	a804      	add	r0, sp, #16
   d43ae:	f000 fe6a 	bl	d5086 <_ZN6StringC1EPK19__FlashStringHelper>
   d43b2:	4b0d      	ldr	r3, [pc, #52]	; (d43e8 <_Z10alarmReset6String+0x70>)
   d43b4:	9a04      	ldr	r2, [sp, #16]
   d43b6:	781b      	ldrb	r3, [r3, #0]
   d43b8:	f88d 3000 	strb.w	r3, [sp]
   d43bc:	4621      	mov	r1, r4
   d43be:	4b0b      	ldr	r3, [pc, #44]	; (d43ec <_Z10alarmReset6String+0x74>)
   d43c0:	a802      	add	r0, sp, #8
   d43c2:	f001 fb7d 	bl	d5ac0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d43c6:	a803      	add	r0, sp, #12
   d43c8:	f7ff fe8e 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43cc:	a804      	add	r0, sp, #16
   d43ce:	f000 fe13 	bl	d4ff8 <_ZN6StringD1Ev>
  return 1;
   d43d2:	2001      	movs	r0, #1
   d43d4:	e000      	b.n	d43d8 <_Z10alarmReset6String+0x60>
}

int alarmReset(String alarmNum){
  int alarm = alarmNum.toInt();
  if(alarm < 1 || alarm > relayCount){
    return 0;
   d43d6:	2000      	movs	r0, #0
  digitalWrite(rPins[alarm-1], LOW);
  delay(500);
  digitalWrite(rPins[alarm-1], HIGH);
  Particle.publish(names[alarm-1], String("Alarm Reset"), 259200, PRIVATE);
  return 1;
   d43d8:	b009      	add	sp, #36	; 0x24
   d43da:	bd30      	pop	{r4, r5, pc}
   d43dc:	000d7ac8 	.word	0x000d7ac8
   d43e0:	2003e31c 	.word	0x2003e31c
   d43e4:	000d7a61 	.word	0x000d7a61
   d43e8:	2003e318 	.word	0x2003e318
   d43ec:	0003f480 	.word	0x0003f480

000d43f0 <_ZN10CloudClass8variableIA5_cI6StringEEEbRKT_DpRKT0_>:
};

class CloudClass {
  public:
    template <typename T, class ... Types>
    static inline bool variable(const T &name, const Types& ... args)
   d43f0:	b507      	push	{r0, r1, r2, lr}

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra;
        extra.size = sizeof(extra);
   d43f2:	2308      	movs	r3, #8
   d43f4:	f8ad 3000 	strh.w	r3, [sp]
        extra.update = update_string_variable;
   d43f8:	4b04      	ldr	r3, [pc, #16]	; (d440c <_ZN10CloudClass8variableIA5_cI6StringEEEbRKT_DpRKT0_+0x1c>)
   d43fa:	9301      	str	r3, [sp, #4]
        return CLOUD_FN(spark_variable(varKey, userVar, CloudVariableTypeString::value(), &extra), false);
   d43fc:	2204      	movs	r2, #4
   d43fe:	466b      	mov	r3, sp
   d4400:	f000 fbe8 	bl	d4bd4 <spark_variable>
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_VAR_KEY_LENGTH + 1,
            "\n\nIn Particle.variable, name must be " __XSTRING(USER_VAR_KEY_LENGTH) " characters or less\n\n");

        return _variable(name, args...);
    }
   d4404:	b003      	add	sp, #12
   d4406:	f85d fb04 	ldr.w	pc, [sp], #4
   d440a:	bf00      	nop
   d440c:	000d40b7 	.word	0x000d40b7

000d4410 <setup>:
// function declarations
void setAlarm(bool inAlarm, int alarmNum);
int alarmReset(String alarmNum);

// setup() runs once, when the device is first turned on.
void setup() {
   d4410:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4412:	b089      	sub	sp, #36	; 0x24

  if(MONITOR_DEBUG){
    Serial.begin();
   d4414:	f001 fdaa 	bl	d5f6c <_Z16_fetch_usbserialv>
   d4418:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d441c:	f001 fd9a 	bl	d5f54 <_ZN9USBSerial5beginEl>
  }

  for(int i = 0; i < alarmCount; i++){
    pinMode(ALARM[i], INPUT);
   d4420:	4f25      	ldr	r7, [pc, #148]	; (d44b8 <setup+0xa8>)
    names[i] = "Dryer_Alarm_" + String(i+1);
   d4422:	4d26      	ldr	r5, [pc, #152]	; (d44bc <setup+0xac>)

  if(MONITOR_DEBUG){
    Serial.begin();
  }

  for(int i = 0; i < alarmCount; i++){
   d4424:	2400      	movs	r4, #0
    pinMode(ALARM[i], INPUT);
   d4426:	5d38      	ldrb	r0, [r7, r4]
   d4428:	2100      	movs	r1, #0
   d442a:	f002 f89d 	bl	d6568 <pinMode>
   d442e:	4626      	mov	r6, r4
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4430:	4923      	ldr	r1, [pc, #140]	; (d44c0 <setup+0xb0>)
    names[i] = "Dryer_Alarm_" + String(i+1);
   d4432:	3401      	adds	r4, #1
   d4434:	a804      	add	r0, sp, #16
   d4436:	f000 fe26 	bl	d5086 <_ZN6StringC1EPK19__FlashStringHelper>
   d443a:	220a      	movs	r2, #10
   d443c:	4621      	mov	r1, r4
   d443e:	4668      	mov	r0, sp
   d4440:	f000 fe84 	bl	d514c <_ZN6StringC1Eih>
   d4444:	4669      	mov	r1, sp
   d4446:	a804      	add	r0, sp, #16
   d4448:	f000 fed7 	bl	d51fa <_ZplRK15StringSumHelperRK6String>
   d444c:	4601      	mov	r1, r0
   d444e:	eb05 1006 	add.w	r0, r5, r6, lsl #4
   d4452:	f000 fe48 	bl	d50e6 <_ZN6StringaSERKS_>
   d4456:	4668      	mov	r0, sp
   d4458:	f000 fdce 	bl	d4ff8 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d445c:	a804      	add	r0, sp, #16
   d445e:	f000 fdcb 	bl	d4ff8 <_ZN6StringD1Ev>

  if(MONITOR_DEBUG){
    Serial.begin();
  }

  for(int i = 0; i < alarmCount; i++){
   d4462:	2c04      	cmp	r4, #4
   d4464:	d1df      	bne.n	d4426 <setup+0x16>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d4466:	4a17      	ldr	r2, [pc, #92]	; (d44c4 <setup+0xb4>)
   d4468:	4917      	ldr	r1, [pc, #92]	; (d44c8 <setup+0xb8>)
   d446a:	4818      	ldr	r0, [pc, #96]	; (d44cc <setup+0xbc>)
  }

  Particle.function("Reset_Dryer", alarmReset);

  for(int i = 0; i < relayCount; i++){
    pinMode(rPins[i], OUTPUT);
   d446c:	4e18      	ldr	r6, [pc, #96]	; (d44d0 <setup+0xc0>)
   d446e:	f001 fa17 	bl	d58a0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    names[i] = "Dryer_Alarm_" + String(i+1);
  }

  Particle.function("Reset_Dryer", alarmReset);

  for(int i = 0; i < relayCount; i++){
   d4472:	2400      	movs	r4, #0
    pinMode(rPins[i], OUTPUT);
   d4474:	f836 5014 	ldrh.w	r5, [r6, r4, lsl #1]
   d4478:	2101      	movs	r1, #1
   d447a:	4628      	mov	r0, r5
   d447c:	f002 f874 	bl	d6568 <pinMode>
    names[i] = "Dryer_Alarm_" + String(i+1);
  }

  Particle.function("Reset_Dryer", alarmReset);

  for(int i = 0; i < relayCount; i++){
   d4480:	3401      	adds	r4, #1
    pinMode(rPins[i], OUTPUT);
    digitalWrite(rPins[i], HIGH);
   d4482:	2101      	movs	r1, #1
   d4484:	4628      	mov	r0, r5
   d4486:	f002 f880 	bl	d658a <digitalWrite>
    names[i] = "Dryer_Alarm_" + String(i+1);
  }

  Particle.function("Reset_Dryer", alarmReset);

  for(int i = 0; i < relayCount; i++){
   d448a:	2c04      	cmp	r4, #4
   d448c:	d1f2      	bne.n	d4474 <setup+0x64>
    pinMode(rPins[i], OUTPUT);
    digitalWrite(rPins[i], HIGH);
  }

  //adc.begin(SCK, MOSI, MISO, SS);
  monitor.begin();
   d448e:	4811      	ldr	r0, [pc, #68]	; (d44d4 <setup+0xc4>)
   d4490:	f000 f932 	bl	d46f8 <_ZN14CurrentMonitor5beginEv>

  Particle.variable("Signal_Strength", signalStrength);
   d4494:	4910      	ldr	r1, [pc, #64]	; (d44d8 <setup+0xc8>)
   d4496:	4811      	ldr	r0, [pc, #68]	; (d44dc <setup+0xcc>)
   d4498:	f7ff ffaa 	bl	d43f0 <_ZN10CloudClass8variableIA5_cI6StringEEEbRKT_DpRKT0_>
  Particle.variable("Signal_Quality", signalQuality);
   d449c:	4910      	ldr	r1, [pc, #64]	; (d44e0 <setup+0xd0>)
   d449e:	4811      	ldr	r0, [pc, #68]	; (d44e4 <setup+0xd4>)
   d44a0:	f7ff ffa6 	bl	d43f0 <_ZN10CloudClass8variableIA5_cI6StringEEEbRKT_DpRKT0_>
  Particle.variable("Power", power);
   d44a4:	4910      	ldr	r1, [pc, #64]	; (d44e8 <setup+0xd8>)
   d44a6:	4811      	ldr	r0, [pc, #68]	; (d44ec <setup+0xdc>)
   d44a8:	f7ff ffa2 	bl	d43f0 <_ZN10CloudClass8variableIA5_cI6StringEEEbRKT_DpRKT0_>
  Particle.variable("Amps", Amps);
   d44ac:	4910      	ldr	r1, [pc, #64]	; (d44f0 <setup+0xe0>)
   d44ae:	4811      	ldr	r0, [pc, #68]	; (d44f4 <setup+0xe4>)
   d44b0:	f7ff ff9e 	bl	d43f0 <_ZN10CloudClass8variableIA5_cI6StringEEEbRKT_DpRKT0_>
}
   d44b4:	b009      	add	sp, #36	; 0x24
   d44b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d44b8:	000d7ac4 	.word	0x000d7ac4
   d44bc:	2003e31c 	.word	0x2003e31c
   d44c0:	000d7a7f 	.word	0x000d7a7f
   d44c4:	000d7a8c 	.word	0x000d7a8c
   d44c8:	000d4379 	.word	0x000d4379
   d44cc:	000d5875 	.word	0x000d5875
   d44d0:	000d7ac8 	.word	0x000d7ac8
   d44d4:	2003e2c8 	.word	0x2003e2c8
   d44d8:	2003e2b4 	.word	0x2003e2b4
   d44dc:	000d7a98 	.word	0x000d7a98
   d44e0:	2003e380 	.word	0x2003e380
   d44e4:	000d7aa8 	.word	0x000d7aa8
   d44e8:	2003e35c 	.word	0x2003e35c
   d44ec:	000d7ab7 	.word	0x000d7ab7
   d44f0:	2003e370 	.word	0x2003e370
   d44f4:	000d7abd 	.word	0x000d7abd

000d44f8 <_GLOBAL__sub_I_debounceTime>:
  digitalWrite(rPins[alarm-1], LOW);
  delay(500);
  digitalWrite(rPins[alarm-1], HIGH);
  Particle.publish(names[alarm-1], String("Alarm Reset"), 259200, PRIVATE);
  return 1;
   d44f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d44fa:	4b29      	ldr	r3, [pc, #164]	; (d45a0 <_GLOBAL__sub_I_debounceTime+0xa8>)
const uint8_t relayCount = 4;
const uint8_t alarmCount = 4;
const uint16_t rPins[relayCount] = {D3, D2, D1, D0};
unsigned long debounceTime = millis();
unsigned const int DEBOUNCE_DELAY = 200;
String signalStrength = "0";
   d44fc:	4e29      	ldr	r6, [pc, #164]	; (d45a4 <_GLOBAL__sub_I_debounceTime+0xac>)
   d44fe:	4f2a      	ldr	r7, [pc, #168]	; (d45a8 <_GLOBAL__sub_I_debounceTime+0xb0>)
   d4500:	4c2a      	ldr	r4, [pc, #168]	; (d45ac <_GLOBAL__sub_I_debounceTime+0xb4>)
   d4502:	4d2b      	ldr	r5, [pc, #172]	; (d45b0 <_GLOBAL__sub_I_debounceTime+0xb8>)
   d4504:	2201      	movs	r2, #1
   d4506:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4508:	f000 f980 	bl	d480c <HAL_Pin_Map>
   d450c:	f000 f9de 	bl	d48cc <HAL_Timer_Get_Milli_Seconds>
#define MONITOR_DEBUG true

const uint8_t relayCount = 4;
const uint8_t alarmCount = 4;
const uint16_t rPins[relayCount] = {D3, D2, D1, D0};
unsigned long debounceTime = millis();
   d4510:	4b28      	ldr	r3, [pc, #160]	; (d45b4 <_GLOBAL__sub_I_debounceTime+0xbc>)
unsigned const int DEBOUNCE_DELAY = 200;
String signalStrength = "0";
   d4512:	4631      	mov	r1, r6
#define MONITOR_DEBUG true

const uint8_t relayCount = 4;
const uint8_t alarmCount = 4;
const uint16_t rPins[relayCount] = {D3, D2, D1, D0};
unsigned long debounceTime = millis();
   d4514:	6018      	str	r0, [r3, #0]
unsigned const int DEBOUNCE_DELAY = 200;
String signalStrength = "0";
   d4516:	4638      	mov	r0, r7
   d4518:	f000 fdb5 	bl	d5086 <_ZN6StringC1EPK19__FlashStringHelper>
   d451c:	4638      	mov	r0, r7
String signalQuality = "0";
   d451e:	4f26      	ldr	r7, [pc, #152]	; (d45b8 <_GLOBAL__sub_I_debounceTime+0xc0>)
const uint8_t relayCount = 4;
const uint8_t alarmCount = 4;
const uint16_t rPins[relayCount] = {D3, D2, D1, D0};
unsigned long debounceTime = millis();
unsigned const int DEBOUNCE_DELAY = 200;
String signalStrength = "0";
   d4520:	4622      	mov	r2, r4
   d4522:	4629      	mov	r1, r5
   d4524:	f002 f8a0 	bl	d6668 <__aeabi_atexit>
String signalQuality = "0";
   d4528:	4631      	mov	r1, r6
   d452a:	4638      	mov	r0, r7
   d452c:	f000 fdab 	bl	d5086 <_ZN6StringC1EPK19__FlashStringHelper>
   d4530:	4638      	mov	r0, r7
String power = "0";
   d4532:	4f22      	ldr	r7, [pc, #136]	; (d45bc <_GLOBAL__sub_I_debounceTime+0xc4>)
const uint8_t alarmCount = 4;
const uint16_t rPins[relayCount] = {D3, D2, D1, D0};
unsigned long debounceTime = millis();
unsigned const int DEBOUNCE_DELAY = 200;
String signalStrength = "0";
String signalQuality = "0";
   d4534:	4622      	mov	r2, r4
   d4536:	4629      	mov	r1, r5
   d4538:	f002 f896 	bl	d6668 <__aeabi_atexit>
String power = "0";
   d453c:	4631      	mov	r1, r6
   d453e:	4638      	mov	r0, r7
   d4540:	f000 fda1 	bl	d5086 <_ZN6StringC1EPK19__FlashStringHelper>
   d4544:	4638      	mov	r0, r7
String Amps = "0";
   d4546:	4f1e      	ldr	r7, [pc, #120]	; (d45c0 <_GLOBAL__sub_I_debounceTime+0xc8>)
const uint16_t rPins[relayCount] = {D3, D2, D1, D0};
unsigned long debounceTime = millis();
unsigned const int DEBOUNCE_DELAY = 200;
String signalStrength = "0";
String signalQuality = "0";
String power = "0";
   d4548:	4622      	mov	r2, r4
   d454a:	4629      	mov	r1, r5
   d454c:	f002 f88c 	bl	d6668 <__aeabi_atexit>
String Amps = "0";
   d4550:	4631      	mov	r1, r6
   d4552:	4638      	mov	r0, r7
   d4554:	f000 fd97 	bl	d5086 <_ZN6StringC1EPK19__FlashStringHelper>

const uint8_t ALARM[alarmCount] = {D4, D5, D6, D8};
int alarmValues[alarmCount] = {0, 0, 0, 0};
byte alarmState[alarmCount] = {0, 0, 0, 0};
String names[alarmCount];
   d4558:	4e1a      	ldr	r6, [pc, #104]	; (d45c4 <_GLOBAL__sub_I_debounceTime+0xcc>)
unsigned long debounceTime = millis();
unsigned const int DEBOUNCE_DELAY = 200;
String signalStrength = "0";
String signalQuality = "0";
String power = "0";
String Amps = "0";
   d455a:	4629      	mov	r1, r5

const uint8_t ALARM[alarmCount] = {D4, D5, D6, D8};
int alarmValues[alarmCount] = {0, 0, 0, 0};
byte alarmState[alarmCount] = {0, 0, 0, 0};
String names[alarmCount];
   d455c:	4d1a      	ldr	r5, [pc, #104]	; (d45c8 <_GLOBAL__sub_I_debounceTime+0xd0>)
unsigned long debounceTime = millis();
unsigned const int DEBOUNCE_DELAY = 200;
String signalStrength = "0";
String signalQuality = "0";
String power = "0";
String Amps = "0";
   d455e:	4622      	mov	r2, r4
   d4560:	4638      	mov	r0, r7
   d4562:	f002 f881 	bl	d6668 <__aeabi_atexit>

const uint8_t ALARM[alarmCount] = {D4, D5, D6, D8};
int alarmValues[alarmCount] = {0, 0, 0, 0};
byte alarmState[alarmCount] = {0, 0, 0, 0};
String names[alarmCount];
   d4566:	4631      	mov	r1, r6
   d4568:	4628      	mov	r0, r5
   d456a:	f000 fd8c 	bl	d5086 <_ZN6StringC1EPK19__FlashStringHelper>
   d456e:	4631      	mov	r1, r6
   d4570:	f105 0010 	add.w	r0, r5, #16
   d4574:	f000 fd87 	bl	d5086 <_ZN6StringC1EPK19__FlashStringHelper>
   d4578:	4631      	mov	r1, r6
   d457a:	f105 0020 	add.w	r0, r5, #32
   d457e:	f000 fd82 	bl	d5086 <_ZN6StringC1EPK19__FlashStringHelper>
   d4582:	4631      	mov	r1, r6
   d4584:	f105 0030 	add.w	r0, r5, #48	; 0x30
   d4588:	f000 fd7d 	bl	d5086 <_ZN6StringC1EPK19__FlashStringHelper>
   d458c:	4622      	mov	r2, r4
   d458e:	490f      	ldr	r1, [pc, #60]	; (d45cc <_GLOBAL__sub_I_debounceTime+0xd4>)
   d4590:	2000      	movs	r0, #0
   d4592:	f002 f869 	bl	d6668 <__aeabi_atexit>

//current adc chip
CurrentMonitor monitor;
   d4596:	480e      	ldr	r0, [pc, #56]	; (d45d0 <_GLOBAL__sub_I_debounceTime+0xd8>)
  digitalWrite(rPins[alarm-1], LOW);
  delay(500);
  digitalWrite(rPins[alarm-1], HIGH);
  Particle.publish(names[alarm-1], String("Alarm Reset"), 259200, PRIVATE);
  return 1;
   d4598:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
int alarmValues[alarmCount] = {0, 0, 0, 0};
byte alarmState[alarmCount] = {0, 0, 0, 0};
String names[alarmCount];

//current adc chip
CurrentMonitor monitor;
   d459c:	f000 b890 	b.w	d46c0 <_ZN14CurrentMonitorC1Ev>
   d45a0:	2003e318 	.word	0x2003e318
   d45a4:	000d7ac2 	.word	0x000d7ac2
   d45a8:	2003e2b4 	.word	0x2003e2b4
   d45ac:	2003e2b0 	.word	0x2003e2b0
   d45b0:	000d4ff9 	.word	0x000d4ff9
   d45b4:	2003e2c4 	.word	0x2003e2c4
   d45b8:	2003e380 	.word	0x2003e380
   d45bc:	2003e35c 	.word	0x2003e35c
   d45c0:	2003e370 	.word	0x2003e370
   d45c4:	000d7c25 	.word	0x000d7c25
   d45c8:	2003e31c 	.word	0x2003e31c
   d45cc:	000d40bd 	.word	0x000d40bd
   d45d0:	2003e2c8 	.word	0x2003e2c8

000d45d4 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d45d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d45d6:	4602      	mov	r2, r0
   d45d8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d45da:	7913      	ldrb	r3, [r2, #4]
   d45dc:	6895      	ldr	r5, [r2, #8]
   d45de:	b133      	cbz	r3, d45ee <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d45e0:	b93d      	cbnz	r5, d45f2 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d45e2:	490c      	ldr	r1, [pc, #48]	; (d4614 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d45e4:	b004      	add	sp, #16
   d45e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d45ea:	f000 be5f 	b.w	d52ac <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d45ee:	4b0a      	ldr	r3, [pc, #40]	; (d4618 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d45f0:	e000      	b.n	d45f4 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d45f2:	4b0a      	ldr	r3, [pc, #40]	; (d461c <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d45f4:	7b16      	ldrb	r6, [r2, #12]
   d45f6:	4c0a      	ldr	r4, [pc, #40]	; (d4620 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d45f8:	490a      	ldr	r1, [pc, #40]	; (d4624 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d45fa:	7b52      	ldrb	r2, [r2, #13]
   d45fc:	9202      	str	r2, [sp, #8]
   d45fe:	2e01      	cmp	r6, #1
   d4600:	bf08      	it	eq
   d4602:	4621      	moveq	r1, r4
   d4604:	9101      	str	r1, [sp, #4]
   d4606:	9500      	str	r5, [sp, #0]
   d4608:	4a07      	ldr	r2, [pc, #28]	; (d4628 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d460a:	2100      	movs	r1, #0
   d460c:	f000 ff74 	bl	d54f8 <_ZN5Print11printf_implEbPKcz>
  }
   d4610:	b004      	add	sp, #16
   d4612:	bd70      	pop	{r4, r5, r6, pc}
   d4614:	000d7aed 	.word	0x000d7aed
   d4618:	000d7c25 	.word	0x000d7c25
   d461c:	000d7adc 	.word	0x000d7adc
   d4620:	000d7ae5 	.word	0x000d7ae5
   d4624:	000d7ae9 	.word	0x000d7ae9
   d4628:	000d7b03 	.word	0x000d7b03

000d462c <_ZN10ADC128S102C1Ev>:
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d462c:	4a05      	ldr	r2, [pc, #20]	; (d4644 <_ZN10ADC128S102C1Ev+0x18>)
   d462e:	6002      	str	r2, [r0, #0]
   d4630:	2200      	movs	r2, #0
   d4632:	7102      	strb	r2, [r0, #4]
   d4634:	4a04      	ldr	r2, [pc, #16]	; (d4648 <_ZN10ADC128S102C1Ev+0x1c>)
   d4636:	6082      	str	r2, [r0, #8]
   d4638:	2201      	movs	r2, #1
   d463a:	7302      	strb	r2, [r0, #12]
   d463c:	2202      	movs	r2, #2
   d463e:	7342      	strb	r2, [r0, #13]

/**
 * Constructor.
 */
ADC128S102::ADC128S102()
{}
   d4640:	4770      	bx	lr
   d4642:	bf00      	nop
   d4644:	000d7ad8 	.word	0x000d7ad8
   d4648:	00d59f80 	.word	0x00d59f80

000d464c <_ZN10ADC128S1025beginEv>:

/**
 * Use this in the setup() method to initialize the hardware and begin SPI if it hasn't already.
 */
void ADC128S102::begin()
{
   d464c:	b508      	push	{r3, lr}
    // initialize hardware
    pinMode(SS, OUTPUT);
   d464e:	200e      	movs	r0, #14
   d4650:	2101      	movs	r1, #1
   d4652:	f001 ff89 	bl	d6568 <pinMode>
    SPI.begin();
   d4656:	4802      	ldr	r0, [pc, #8]	; (d4660 <_ZN10ADC128S1025beginEv+0x14>)
}
   d4658:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 */
void ADC128S102::begin()
{
    // initialize hardware
    pinMode(SS, OUTPUT);
    SPI.begin();
   d465c:	f000 bb74 	b.w	d4d48 <_ZN8SPIClass5beginEv>
   d4660:	2003e714 	.word	0x2003e714

000d4664 <_ZN10ADC128S1027readADCEa>:
}

/**
 * Supply the channel number to read the Analog value converted to 12-bit
 */
int16_t ADC128S102::readADC(int8_t channel){
   d4664:	b570      	push	{r4, r5, r6, lr}

    SPI.beginTransaction(settings);
   d4666:	4d12      	ldr	r5, [pc, #72]	; (d46b0 <_ZN10ADC128S1027readADCEa+0x4c>)
}

/**
 * Supply the channel number to read the Analog value converted to 12-bit
 */
int16_t ADC128S102::readADC(int8_t channel){
   d4668:	4604      	mov	r4, r0
   d466a:	460e      	mov	r6, r1

    SPI.beginTransaction(settings);
   d466c:	4601      	mov	r1, r0
   d466e:	4628      	mov	r0, r5
   d4670:	f000 fb88 	bl	d4d84 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
    digitalWrite(SS, LOW); // Drive Slave Select LOW to select chip
   d4674:	2100      	movs	r1, #0
   d4676:	200e      	movs	r0, #14
   d4678:	f001 ff87 	bl	d658a <digitalWrite>
    
    byte control = channel << 3; // DONTC DONTC ADD2 ADD1 ADD0 DONTC DONTC DONTC
    buffer = SPI.transfer(control);
   d467c:	00f1      	lsls	r1, r6, #3
   d467e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
   d4682:	4628      	mov	r0, r5
   d4684:	f000 fbee 	bl	d4e64 <_ZN8SPIClass8transferEh>
    buffer <<= 8;
   d4688:	0200      	lsls	r0, r0, #8
   d468a:	8220      	strh	r0, [r4, #16]
    buffer |= SPI.transfer(0);
   d468c:	2100      	movs	r1, #0
   d468e:	4628      	mov	r0, r5
   d4690:	f000 fbe8 	bl	d4e64 <_ZN8SPIClass8transferEh>
   d4694:	8a23      	ldrh	r3, [r4, #16]
   d4696:	4318      	orrs	r0, r3
   d4698:	8220      	strh	r0, [r4, #16]

    digitalWrite(SS, HIGH); // Drive Slave Select HIGH so other hardware can use SPI
   d469a:	2101      	movs	r1, #1
   d469c:	200e      	movs	r0, #14
   d469e:	f001 ff74 	bl	d658a <digitalWrite>
    SPI.endTransaction();
   d46a2:	4628      	mov	r0, r5
   d46a4:	f000 fb55 	bl	d4d52 <_ZN8SPIClass14endTransactionEv>

    return buffer;
}
   d46a8:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
   d46ac:	bd70      	pop	{r4, r5, r6, pc}
   d46ae:	bf00      	nop
   d46b0:	2003e714 	.word	0x2003e714

000d46b4 <_GLOBAL__sub_I__ZN10ADC128S102C2Ev>:
   d46b4:	f000 b8aa 	b.w	d480c <HAL_Pin_Map>

000d46b8 <_GLOBAL__sub_I__ZN7MCP30085beginEhP8SPIClass>:
   d46b8:	f000 b8a8 	b.w	d480c <HAL_Pin_Map>

000d46bc <_GLOBAL__sub_I__ZN7lpd8806C2Et>:
   d46bc:	f000 b8a6 	b.w	d480c <HAL_Pin_Map>

000d46c0 <_ZN14CurrentMonitorC1Ev>:
#include "CurrentMonitor.h"

/**
 * Constructor.
 */
CurrentMonitor::CurrentMonitor()
   d46c0:	b510      	push	{r4, lr}
   d46c2:	4604      	mov	r4, r0
   d46c4:	f7ff ffb2 	bl	d462c <_ZN10ADC128S102C1Ev>
   d46c8:	a307      	add	r3, pc, #28	; (adr r3, d46e8 <_ZN14CurrentMonitorC1Ev+0x28>)
   d46ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46ce:	e9c4 2306 	strd	r2, r3, [r4, #24]
   d46d2:	a307      	add	r3, pc, #28	; (adr r3, d46f0 <_ZN14CurrentMonitorC1Ev+0x30>)
   d46d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46d8:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
   d46dc:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
   d46e0:	64a3      	str	r3, [r4, #72]	; 0x48
{
  // be sure not to call anything that requires hardware be initialized here, put those in begin()
}
   d46e2:	4620      	mov	r0, r4
   d46e4:	bd10      	pop	{r4, pc}
   d46e6:	bf00      	nop
   d46e8:	00000000 	.word	0x00000000
   d46ec:	40a00400 	.word	0x40a00400
   d46f0:	66666666 	.word	0x66666666
   d46f4:	40460666 	.word	0x40460666

000d46f8 <_ZN14CurrentMonitor5beginEv>:
 * Example method.
 */
void CurrentMonitor::begin()
{
    // initialize hardware
    adc.begin();
   d46f8:	f7ff bfa8 	b.w	d464c <_ZN10ADC128S1025beginEv>
   d46fc:	0000      	movs	r0, r0
	...

000d4700 <_ZN14CurrentMonitor13calculateIrmsEh>:
/**
 * Private: Receives analog reading from given channel and calculates Irms.
 * The Irms is calculated from a numberOfSamples to receive a more accurate number
 */
double CurrentMonitor::calculateIrms(uint8_t channel)
{
   d4700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4704:	4604      	mov	r4, r0
    int SupplyVoltage = readVcc();


  for (unsigned int n = 0; n < numberOfSamples; n++)
   d4706:	2500      	movs	r5, #0
  {
    sampleI = adc.readADC(channel);
   d4708:	fa4f fa81 	sxtb.w	sl, r1
double CurrentMonitor::calculateIrms(uint8_t channel)
{
    int SupplyVoltage = readVcc();


  for (unsigned int n = 0; n < numberOfSamples; n++)
   d470c:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   d470e:	42b5      	cmp	r5, r6
   d4710:	d230      	bcs.n	d4774 <_ZN14CurrentMonitor13calculateIrmsEh+0x74>
  {
    sampleI = adc.readADC(channel);
   d4712:	4651      	mov	r1, sl
   d4714:	4620      	mov	r0, r4
   d4716:	f7ff ffa5 	bl	d4664 <_ZN10ADC128S1027readADCEa>
   d471a:	6160      	str	r0, [r4, #20]

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset,
    //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (double)((double)(sampleI-offsetI))/1024);
   d471c:	f002 fb7a 	bl	d6e14 <__aeabi_i2d>
   d4720:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
   d4724:	4632      	mov	r2, r6
   d4726:	463b      	mov	r3, r7
   d4728:	4680      	mov	r8, r0
   d472a:	4689      	mov	r9, r1
   d472c:	f002 fa24 	bl	d6b78 <__aeabi_dsub>
   d4730:	2200      	movs	r2, #0
   d4732:	4b25      	ldr	r3, [pc, #148]	; (d47c8 <_ZN14CurrentMonitor13calculateIrmsEh+0xc8>)
   d4734:	f002 fbd4 	bl	d6ee0 <__aeabi_dmul>
   d4738:	4632      	mov	r2, r6
   d473a:	463b      	mov	r3, r7
   d473c:	f002 fa1e 	bl	d6b7c <__adddf3>
   d4740:	4602      	mov	r2, r0
   d4742:	460b      	mov	r3, r1
   d4744:	e9c4 2306 	strd	r2, r3, [r4, #24]
    filteredI = sampleI - offsetI;
   d4748:	4640      	mov	r0, r8
   d474a:	4649      	mov	r1, r9
   d474c:	f002 fa14 	bl	d6b78 <__aeabi_dsub>
   d4750:	4602      	mov	r2, r0
   d4752:	460b      	mov	r3, r1
   d4754:	e9c4 2308 	strd	r2, r3, [r4, #32]

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
   d4758:	f002 fbc2 	bl	d6ee0 <__aeabi_dmul>
   d475c:	4602      	mov	r2, r0
   d475e:	460b      	mov	r3, r1
   d4760:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
    // 2) sum
    sumI += sqI;
   d4764:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
   d4768:	f002 fa08 	bl	d6b7c <__adddf3>
double CurrentMonitor::calculateIrms(uint8_t channel)
{
    int SupplyVoltage = readVcc();


  for (unsigned int n = 0; n < numberOfSamples; n++)
   d476c:	3501      	adds	r5, #1

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
    // 2) sum
    sumI += sqI;
   d476e:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
double CurrentMonitor::calculateIrms(uint8_t channel)
{
    int SupplyVoltage = readVcc();


  for (unsigned int n = 0; n < numberOfSamples; n++)
   d4772:	e7cb      	b.n	d470c <_ZN14CurrentMonitor13calculateIrmsEh+0xc>
    sqI = filteredI * filteredI;
    // 2) sum
    sumI += sqI;
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d4774:	a312      	add	r3, pc, #72	; (adr r3, d47c0 <_ZN14CurrentMonitor13calculateIrmsEh+0xc0>)
   d4776:	e9d3 2300 	ldrd	r2, r3, [r3]
   d477a:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
   d477e:	f002 fbaf 	bl	d6ee0 <__aeabi_dmul>
   d4782:	4680      	mov	r8, r0
  Irms = I_RATIO * sqrt(sumI / numberOfSamples);
   d4784:	4630      	mov	r0, r6
    sqI = filteredI * filteredI;
    // 2) sum
    sumI += sqI;
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d4786:	4689      	mov	r9, r1
  Irms = I_RATIO * sqrt(sumI / numberOfSamples);
   d4788:	f002 fb34 	bl	d6df4 <__aeabi_ui2d>
   d478c:	4602      	mov	r2, r0
   d478e:	460b      	mov	r3, r1
   d4790:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
   d4794:	f002 fcce 	bl	d7134 <__aeabi_ddiv>
   d4798:	ec41 0b10 	vmov	d0, r0, r1
   d479c:	f002 f8b6 	bl	d690c <sqrt>
   d47a0:	4640      	mov	r0, r8
   d47a2:	ec53 2b10 	vmov	r2, r3, d0
   d47a6:	4649      	mov	r1, r9
   d47a8:	f002 fb9a 	bl	d6ee0 <__aeabi_dmul>

  //Reset accumulators
  sumI = 0;
   d47ac:	2200      	movs	r2, #0
   d47ae:	2300      	movs	r3, #0
    // 2) sum
    sumI += sqI;
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
  Irms = I_RATIO * sqrt(sumI / numberOfSamples);
   d47b0:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38

  //Reset accumulators
  sumI = 0;
   d47b4:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
  //--------------------------------------------------------------------------------------
  return Irms;
}
   d47b8:	ec41 0b10 	vmov	d0, r0, r1
   d47bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d47c0:	66666666 	.word	0x66666666
   d47c4:	3f4a6666 	.word	0x3f4a6666
   d47c8:	3f500000 	.word	0x3f500000
   d47cc:	00000000 	.word	0x00000000

000d47d0 <_ZN14CurrentMonitor10processAdcEh>:
 * Processes the given channel and returns the calculated Irms value.
 */
double CurrentMonitor::processAdc(uint8_t adcChannel)
{

    if(adcChannel < 0 || adcChannel > 7){
   d47d0:	2907      	cmp	r1, #7
   d47d2:	d801      	bhi.n	d47d8 <_ZN14CurrentMonitor10processAdcEh+0x8>
        return -1;
    }
    return calculateIrms(adcChannel);
   d47d4:	f7ff bf94 	b.w	d4700 <_ZN14CurrentMonitor13calculateIrmsEh>
}
   d47d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d47e0 <_ZN14CurrentMonitor10processAdcEh+0x10>
   d47dc:	4770      	bx	lr
   d47de:	bf00      	nop
   d47e0:	00000000 	.word	0x00000000
   d47e4:	bff00000 	.word	0xbff00000

000d47e8 <_GLOBAL__sub_I__ZN14CurrentMonitorC2Ev>:
   d47e8:	f000 b810 	b.w	d480c <HAL_Pin_Map>

000d47ec <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <netdb_freeaddrinfo+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	689b      	ldr	r3, [r3, #8]
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	00030268 	.word	0x00030268

000d47fc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <netdb_getaddrinfo+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	68db      	ldr	r3, [r3, #12]
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	00030268 	.word	0x00030268

000d480c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b02      	ldr	r3, [pc, #8]	; (d4818 <HAL_Pin_Map+0xc>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	681b      	ldr	r3, [r3, #0]
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	bd08      	pop	{r3, pc}
   d4818:	0003022c 	.word	0x0003022c

000d481c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b02      	ldr	r3, [pc, #8]	; (d4828 <HAL_Pin_Mode+0xc>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	689b      	ldr	r3, [r3, #8]
   d4824:	9301      	str	r3, [sp, #4]
   d4826:	bd08      	pop	{r3, pc}
   d4828:	0003022c 	.word	0x0003022c

000d482c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <HAL_Get_Pin_Mode+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	68db      	ldr	r3, [r3, #12]
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	0003022c 	.word	0x0003022c

000d483c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <HAL_GPIO_Write+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	691b      	ldr	r3, [r3, #16]
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	0003022c 	.word	0x0003022c

000d484c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <HAL_GPIO_Read+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	695b      	ldr	r3, [r3, #20]
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	0003022c 	.word	0x0003022c

000d485c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <HAL_SPI_Begin+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	681b      	ldr	r3, [r3, #0]
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	00030230 	.word	0x00030230

000d486c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <HAL_SPI_Send_Receive_Data+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	695b      	ldr	r3, [r3, #20]
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	00030230 	.word	0x00030230

000d487c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <HAL_SPI_Init+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	69db      	ldr	r3, [r3, #28]
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	00030230 	.word	0x00030230

000d488c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <HAL_SPI_Is_Enabled+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	6a1b      	ldr	r3, [r3, #32]
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	00030230 	.word	0x00030230

000d489c <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <HAL_SPI_Info+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	00030230 	.word	0x00030230

000d48ac <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b02      	ldr	r3, [pc, #8]	; (d48b8 <HAL_SPI_Set_Settings+0xc>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d48b4:	9301      	str	r3, [sp, #4]
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	00030230 	.word	0x00030230

000d48bc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d48bc:	b508      	push	{r3, lr}
   d48be:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <HAL_RNG_GetRandomNumber+0xc>)
   d48c0:	681b      	ldr	r3, [r3, #0]
   d48c2:	685b      	ldr	r3, [r3, #4]
   d48c4:	9301      	str	r3, [sp, #4]
   d48c6:	bd08      	pop	{r3, pc}
   d48c8:	00030218 	.word	0x00030218

000d48cc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d48cc:	b508      	push	{r3, lr}
   d48ce:	4b02      	ldr	r3, [pc, #8]	; (d48d8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d48d0:	681b      	ldr	r3, [r3, #0]
   d48d2:	695b      	ldr	r3, [r3, #20]
   d48d4:	9301      	str	r3, [sp, #4]
   d48d6:	bd08      	pop	{r3, pc}
   d48d8:	00030218 	.word	0x00030218

000d48dc <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d48dc:	b508      	push	{r3, lr}
   d48de:	4b02      	ldr	r3, [pc, #8]	; (d48e8 <os_thread_is_current+0xc>)
   d48e0:	681b      	ldr	r3, [r3, #0]
   d48e2:	689b      	ldr	r3, [r3, #8]
   d48e4:	9301      	str	r3, [sp, #4]
   d48e6:	bd08      	pop	{r3, pc}
   d48e8:	00030248 	.word	0x00030248

000d48ec <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d48ec:	b508      	push	{r3, lr}
   d48ee:	4b02      	ldr	r3, [pc, #8]	; (d48f8 <os_thread_join+0xc>)
   d48f0:	681b      	ldr	r3, [r3, #0]
   d48f2:	691b      	ldr	r3, [r3, #16]
   d48f4:	9301      	str	r3, [sp, #4]
   d48f6:	bd08      	pop	{r3, pc}
   d48f8:	00030248 	.word	0x00030248

000d48fc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d48fc:	b508      	push	{r3, lr}
   d48fe:	4b02      	ldr	r3, [pc, #8]	; (d4908 <os_thread_cleanup+0xc>)
   d4900:	681b      	ldr	r3, [r3, #0]
   d4902:	695b      	ldr	r3, [r3, #20]
   d4904:	9301      	str	r3, [sp, #4]
   d4906:	bd08      	pop	{r3, pc}
   d4908:	00030248 	.word	0x00030248

000d490c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d490c:	b508      	push	{r3, lr}
   d490e:	4b02      	ldr	r3, [pc, #8]	; (d4918 <os_mutex_create+0xc>)
   d4910:	681b      	ldr	r3, [r3, #0]
   d4912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4914:	9301      	str	r3, [sp, #4]
   d4916:	bd08      	pop	{r3, pc}
   d4918:	00030248 	.word	0x00030248

000d491c <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d491c:	b508      	push	{r3, lr}
   d491e:	4b02      	ldr	r3, [pc, #8]	; (d4928 <os_mutex_lock+0xc>)
   d4920:	681b      	ldr	r3, [r3, #0]
   d4922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4924:	9301      	str	r3, [sp, #4]
   d4926:	bd08      	pop	{r3, pc}
   d4928:	00030248 	.word	0x00030248

000d492c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d492c:	b508      	push	{r3, lr}
   d492e:	4b02      	ldr	r3, [pc, #8]	; (d4938 <os_mutex_unlock+0xc>)
   d4930:	681b      	ldr	r3, [r3, #0]
   d4932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4934:	9301      	str	r3, [sp, #4]
   d4936:	bd08      	pop	{r3, pc}
   d4938:	00030248 	.word	0x00030248

000d493c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d493c:	b508      	push	{r3, lr}
   d493e:	4b02      	ldr	r3, [pc, #8]	; (d4948 <os_mutex_recursive_create+0xc>)
   d4940:	681b      	ldr	r3, [r3, #0]
   d4942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4944:	9301      	str	r3, [sp, #4]
   d4946:	bd08      	pop	{r3, pc}
   d4948:	00030248 	.word	0x00030248

000d494c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d494c:	b508      	push	{r3, lr}
   d494e:	4b02      	ldr	r3, [pc, #8]	; (d4958 <inet_inet_ntop+0xc>)
   d4950:	681b      	ldr	r3, [r3, #0]
   d4952:	695b      	ldr	r3, [r3, #20]
   d4954:	9301      	str	r3, [sp, #4]
   d4956:	bd08      	pop	{r3, pc}
   d4958:	00030264 	.word	0x00030264

000d495c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d495c:	b508      	push	{r3, lr}
   d495e:	4b02      	ldr	r3, [pc, #8]	; (d4968 <HAL_USART_Init+0xc>)
   d4960:	681b      	ldr	r3, [r3, #0]
   d4962:	681b      	ldr	r3, [r3, #0]
   d4964:	9301      	str	r3, [sp, #4]
   d4966:	bd08      	pop	{r3, pc}
   d4968:	0003023c 	.word	0x0003023c

000d496c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d496c:	b508      	push	{r3, lr}
   d496e:	4b02      	ldr	r3, [pc, #8]	; (d4978 <HAL_USART_Write_Data+0xc>)
   d4970:	681b      	ldr	r3, [r3, #0]
   d4972:	68db      	ldr	r3, [r3, #12]
   d4974:	9301      	str	r3, [sp, #4]
   d4976:	bd08      	pop	{r3, pc}
   d4978:	0003023c 	.word	0x0003023c

000d497c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d497c:	b508      	push	{r3, lr}
   d497e:	4b02      	ldr	r3, [pc, #8]	; (d4988 <HAL_USART_Available_Data+0xc>)
   d4980:	681b      	ldr	r3, [r3, #0]
   d4982:	691b      	ldr	r3, [r3, #16]
   d4984:	9301      	str	r3, [sp, #4]
   d4986:	bd08      	pop	{r3, pc}
   d4988:	0003023c 	.word	0x0003023c

000d498c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d498c:	b508      	push	{r3, lr}
   d498e:	4b02      	ldr	r3, [pc, #8]	; (d4998 <HAL_USART_Read_Data+0xc>)
   d4990:	681b      	ldr	r3, [r3, #0]
   d4992:	695b      	ldr	r3, [r3, #20]
   d4994:	9301      	str	r3, [sp, #4]
   d4996:	bd08      	pop	{r3, pc}
   d4998:	0003023c 	.word	0x0003023c

000d499c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d499c:	b508      	push	{r3, lr}
   d499e:	4b02      	ldr	r3, [pc, #8]	; (d49a8 <HAL_USART_Peek_Data+0xc>)
   d49a0:	681b      	ldr	r3, [r3, #0]
   d49a2:	699b      	ldr	r3, [r3, #24]
   d49a4:	9301      	str	r3, [sp, #4]
   d49a6:	bd08      	pop	{r3, pc}
   d49a8:	0003023c 	.word	0x0003023c

000d49ac <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d49ac:	b508      	push	{r3, lr}
   d49ae:	4b02      	ldr	r3, [pc, #8]	; (d49b8 <HAL_USART_Flush_Data+0xc>)
   d49b0:	681b      	ldr	r3, [r3, #0]
   d49b2:	69db      	ldr	r3, [r3, #28]
   d49b4:	9301      	str	r3, [sp, #4]
   d49b6:	bd08      	pop	{r3, pc}
   d49b8:	0003023c 	.word	0x0003023c

000d49bc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d49bc:	b508      	push	{r3, lr}
   d49be:	4b02      	ldr	r3, [pc, #8]	; (d49c8 <HAL_USART_Is_Enabled+0xc>)
   d49c0:	681b      	ldr	r3, [r3, #0]
   d49c2:	6a1b      	ldr	r3, [r3, #32]
   d49c4:	9301      	str	r3, [sp, #4]
   d49c6:	bd08      	pop	{r3, pc}
   d49c8:	0003023c 	.word	0x0003023c

000d49cc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d49cc:	b508      	push	{r3, lr}
   d49ce:	4b02      	ldr	r3, [pc, #8]	; (d49d8 <HAL_USART_Available_Data_For_Write+0xc>)
   d49d0:	681b      	ldr	r3, [r3, #0]
   d49d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d49d4:	9301      	str	r3, [sp, #4]
   d49d6:	bd08      	pop	{r3, pc}
   d49d8:	0003023c 	.word	0x0003023c

000d49dc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d49dc:	b508      	push	{r3, lr}
   d49de:	4b02      	ldr	r3, [pc, #8]	; (d49e8 <HAL_I2C_Write_Data+0xc>)
   d49e0:	681b      	ldr	r3, [r3, #0]
   d49e2:	6a1b      	ldr	r3, [r3, #32]
   d49e4:	9301      	str	r3, [sp, #4]
   d49e6:	bd08      	pop	{r3, pc}
   d49e8:	00030228 	.word	0x00030228

000d49ec <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d49ec:	b508      	push	{r3, lr}
   d49ee:	4b02      	ldr	r3, [pc, #8]	; (d49f8 <HAL_I2C_Available_Data+0xc>)
   d49f0:	681b      	ldr	r3, [r3, #0]
   d49f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d49f4:	9301      	str	r3, [sp, #4]
   d49f6:	bd08      	pop	{r3, pc}
   d49f8:	00030228 	.word	0x00030228

000d49fc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d49fc:	b508      	push	{r3, lr}
   d49fe:	4b02      	ldr	r3, [pc, #8]	; (d4a08 <HAL_I2C_Read_Data+0xc>)
   d4a00:	681b      	ldr	r3, [r3, #0]
   d4a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a04:	9301      	str	r3, [sp, #4]
   d4a06:	bd08      	pop	{r3, pc}
   d4a08:	00030228 	.word	0x00030228

000d4a0c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4a0c:	b508      	push	{r3, lr}
   d4a0e:	4b02      	ldr	r3, [pc, #8]	; (d4a18 <HAL_I2C_Peek_Data+0xc>)
   d4a10:	681b      	ldr	r3, [r3, #0]
   d4a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a14:	9301      	str	r3, [sp, #4]
   d4a16:	bd08      	pop	{r3, pc}
   d4a18:	00030228 	.word	0x00030228

000d4a1c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4a1c:	b508      	push	{r3, lr}
   d4a1e:	4b02      	ldr	r3, [pc, #8]	; (d4a28 <HAL_I2C_Flush_Data+0xc>)
   d4a20:	681b      	ldr	r3, [r3, #0]
   d4a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a24:	9301      	str	r3, [sp, #4]
   d4a26:	bd08      	pop	{r3, pc}
   d4a28:	00030228 	.word	0x00030228

000d4a2c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4a2c:	b508      	push	{r3, lr}
   d4a2e:	4b02      	ldr	r3, [pc, #8]	; (d4a38 <HAL_I2C_Is_Enabled+0xc>)
   d4a30:	681b      	ldr	r3, [r3, #0]
   d4a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a34:	9301      	str	r3, [sp, #4]
   d4a36:	bd08      	pop	{r3, pc}
   d4a38:	00030228 	.word	0x00030228

000d4a3c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4a3c:	b508      	push	{r3, lr}
   d4a3e:	4b02      	ldr	r3, [pc, #8]	; (d4a48 <HAL_I2C_Init+0xc>)
   d4a40:	681b      	ldr	r3, [r3, #0]
   d4a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4a44:	9301      	str	r3, [sp, #4]
   d4a46:	bd08      	pop	{r3, pc}
   d4a48:	00030228 	.word	0x00030228

000d4a4c <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d4a4c:	b508      	push	{r3, lr}
   d4a4e:	4b02      	ldr	r3, [pc, #8]	; (d4a58 <cellular_signal+0xc>)
   d4a50:	681b      	ldr	r3, [r3, #0]
   d4a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a54:	9301      	str	r3, [sp, #4]
   d4a56:	bd08      	pop	{r3, pc}
   d4a58:	00030274 	.word	0x00030274

000d4a5c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4a5c:	b508      	push	{r3, lr}
   d4a5e:	4b02      	ldr	r3, [pc, #8]	; (d4a68 <HAL_USB_USART_Init+0xc>)
   d4a60:	681b      	ldr	r3, [r3, #0]
   d4a62:	681b      	ldr	r3, [r3, #0]
   d4a64:	9301      	str	r3, [sp, #4]
   d4a66:	bd08      	pop	{r3, pc}
   d4a68:	0003024c 	.word	0x0003024c

000d4a6c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4a6c:	b508      	push	{r3, lr}
   d4a6e:	4b02      	ldr	r3, [pc, #8]	; (d4a78 <HAL_USB_USART_Begin+0xc>)
   d4a70:	681b      	ldr	r3, [r3, #0]
   d4a72:	685b      	ldr	r3, [r3, #4]
   d4a74:	9301      	str	r3, [sp, #4]
   d4a76:	bd08      	pop	{r3, pc}
   d4a78:	0003024c 	.word	0x0003024c

000d4a7c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4a7c:	b508      	push	{r3, lr}
   d4a7e:	4b02      	ldr	r3, [pc, #8]	; (d4a88 <HAL_USB_USART_Available_Data+0xc>)
   d4a80:	681b      	ldr	r3, [r3, #0]
   d4a82:	691b      	ldr	r3, [r3, #16]
   d4a84:	9301      	str	r3, [sp, #4]
   d4a86:	bd08      	pop	{r3, pc}
   d4a88:	0003024c 	.word	0x0003024c

000d4a8c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4a8c:	b508      	push	{r3, lr}
   d4a8e:	4b02      	ldr	r3, [pc, #8]	; (d4a98 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4a90:	681b      	ldr	r3, [r3, #0]
   d4a92:	695b      	ldr	r3, [r3, #20]
   d4a94:	9301      	str	r3, [sp, #4]
   d4a96:	bd08      	pop	{r3, pc}
   d4a98:	0003024c 	.word	0x0003024c

000d4a9c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4a9c:	b508      	push	{r3, lr}
   d4a9e:	4b02      	ldr	r3, [pc, #8]	; (d4aa8 <HAL_USB_USART_Receive_Data+0xc>)
   d4aa0:	681b      	ldr	r3, [r3, #0]
   d4aa2:	699b      	ldr	r3, [r3, #24]
   d4aa4:	9301      	str	r3, [sp, #4]
   d4aa6:	bd08      	pop	{r3, pc}
   d4aa8:	0003024c 	.word	0x0003024c

000d4aac <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4aac:	b508      	push	{r3, lr}
   d4aae:	4b02      	ldr	r3, [pc, #8]	; (d4ab8 <HAL_USB_USART_Send_Data+0xc>)
   d4ab0:	681b      	ldr	r3, [r3, #0]
   d4ab2:	69db      	ldr	r3, [r3, #28]
   d4ab4:	9301      	str	r3, [sp, #4]
   d4ab6:	bd08      	pop	{r3, pc}
   d4ab8:	0003024c 	.word	0x0003024c

000d4abc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4abc:	b508      	push	{r3, lr}
   d4abe:	4b02      	ldr	r3, [pc, #8]	; (d4ac8 <HAL_USB_USART_Flush_Data+0xc>)
   d4ac0:	681b      	ldr	r3, [r3, #0]
   d4ac2:	6a1b      	ldr	r3, [r3, #32]
   d4ac4:	9301      	str	r3, [sp, #4]
   d4ac6:	bd08      	pop	{r3, pc}
   d4ac8:	0003024c 	.word	0x0003024c

000d4acc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4acc:	b508      	push	{r3, lr}
   d4ace:	4b02      	ldr	r3, [pc, #8]	; (d4ad8 <set_system_mode+0xc>)
   d4ad0:	681b      	ldr	r3, [r3, #0]
   d4ad2:	685b      	ldr	r3, [r3, #4]
   d4ad4:	9301      	str	r3, [sp, #4]
   d4ad6:	bd08      	pop	{r3, pc}
   d4ad8:	00030220 	.word	0x00030220

000d4adc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4adc:	b508      	push	{r3, lr}
   d4ade:	4b02      	ldr	r3, [pc, #8]	; (d4ae8 <system_delay_ms+0xc>)
   d4ae0:	681b      	ldr	r3, [r3, #0]
   d4ae2:	695b      	ldr	r3, [r3, #20]
   d4ae4:	9301      	str	r3, [sp, #4]
   d4ae6:	bd08      	pop	{r3, pc}
   d4ae8:	00030220 	.word	0x00030220

000d4aec <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4aec:	b508      	push	{r3, lr}
   d4aee:	4b02      	ldr	r3, [pc, #8]	; (d4af8 <application_thread_current+0xc>)
   d4af0:	681b      	ldr	r3, [r3, #0]
   d4af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4af4:	9301      	str	r3, [sp, #4]
   d4af6:	bd08      	pop	{r3, pc}
   d4af8:	00030220 	.word	0x00030220

000d4afc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4afc:	b508      	push	{r3, lr}
   d4afe:	4b02      	ldr	r3, [pc, #8]	; (d4b08 <application_thread_invoke+0xc>)
   d4b00:	681b      	ldr	r3, [r3, #0]
   d4b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4b04:	9301      	str	r3, [sp, #4]
   d4b06:	bd08      	pop	{r3, pc}
   d4b08:	00030220 	.word	0x00030220

000d4b0c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4b0c:	b508      	push	{r3, lr}
   d4b0e:	4b03      	ldr	r3, [pc, #12]	; (d4b1c <system_ctrl_set_app_request_handler+0x10>)
   d4b10:	681b      	ldr	r3, [r3, #0]
   d4b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4b16:	9301      	str	r3, [sp, #4]
   d4b18:	bd08      	pop	{r3, pc}
   d4b1a:	0000      	.short	0x0000
   d4b1c:	00030220 	.word	0x00030220

000d4b20 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b03      	ldr	r3, [pc, #12]	; (d4b30 <system_ctrl_set_result+0x10>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4b2a:	9301      	str	r3, [sp, #4]
   d4b2c:	bd08      	pop	{r3, pc}
   d4b2e:	0000      	.short	0x0000
   d4b30:	00030220 	.word	0x00030220

000d4b34 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b34:	b508      	push	{r3, lr}
   d4b36:	4b02      	ldr	r3, [pc, #8]	; (d4b40 <network_connect+0xc>)
   d4b38:	681b      	ldr	r3, [r3, #0]
   d4b3a:	685b      	ldr	r3, [r3, #4]
   d4b3c:	9301      	str	r3, [sp, #4]
   d4b3e:	bd08      	pop	{r3, pc}
   d4b40:	00030240 	.word	0x00030240

000d4b44 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4b44:	b508      	push	{r3, lr}
   d4b46:	4b02      	ldr	r3, [pc, #8]	; (d4b50 <network_connecting+0xc>)
   d4b48:	681b      	ldr	r3, [r3, #0]
   d4b4a:	689b      	ldr	r3, [r3, #8]
   d4b4c:	9301      	str	r3, [sp, #4]
   d4b4e:	bd08      	pop	{r3, pc}
   d4b50:	00030240 	.word	0x00030240

000d4b54 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4b54:	b508      	push	{r3, lr}
   d4b56:	4b02      	ldr	r3, [pc, #8]	; (d4b60 <network_disconnect+0xc>)
   d4b58:	681b      	ldr	r3, [r3, #0]
   d4b5a:	68db      	ldr	r3, [r3, #12]
   d4b5c:	9301      	str	r3, [sp, #4]
   d4b5e:	bd08      	pop	{r3, pc}
   d4b60:	00030240 	.word	0x00030240

000d4b64 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4b64:	b508      	push	{r3, lr}
   d4b66:	4b02      	ldr	r3, [pc, #8]	; (d4b70 <network_ready+0xc>)
   d4b68:	681b      	ldr	r3, [r3, #0]
   d4b6a:	691b      	ldr	r3, [r3, #16]
   d4b6c:	9301      	str	r3, [sp, #4]
   d4b6e:	bd08      	pop	{r3, pc}
   d4b70:	00030240 	.word	0x00030240

000d4b74 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b02      	ldr	r3, [pc, #8]	; (d4b80 <network_on+0xc>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	695b      	ldr	r3, [r3, #20]
   d4b7c:	9301      	str	r3, [sp, #4]
   d4b7e:	bd08      	pop	{r3, pc}
   d4b80:	00030240 	.word	0x00030240

000d4b84 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b84:	b508      	push	{r3, lr}
   d4b86:	4b02      	ldr	r3, [pc, #8]	; (d4b90 <network_off+0xc>)
   d4b88:	681b      	ldr	r3, [r3, #0]
   d4b8a:	699b      	ldr	r3, [r3, #24]
   d4b8c:	9301      	str	r3, [sp, #4]
   d4b8e:	bd08      	pop	{r3, pc}
   d4b90:	00030240 	.word	0x00030240

000d4b94 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4b94:	b508      	push	{r3, lr}
   d4b96:	4b02      	ldr	r3, [pc, #8]	; (d4ba0 <network_listen+0xc>)
   d4b98:	681b      	ldr	r3, [r3, #0]
   d4b9a:	69db      	ldr	r3, [r3, #28]
   d4b9c:	9301      	str	r3, [sp, #4]
   d4b9e:	bd08      	pop	{r3, pc}
   d4ba0:	00030240 	.word	0x00030240

000d4ba4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4ba4:	b508      	push	{r3, lr}
   d4ba6:	4b02      	ldr	r3, [pc, #8]	; (d4bb0 <network_listening+0xc>)
   d4ba8:	681b      	ldr	r3, [r3, #0]
   d4baa:	6a1b      	ldr	r3, [r3, #32]
   d4bac:	9301      	str	r3, [sp, #4]
   d4bae:	bd08      	pop	{r3, pc}
   d4bb0:	00030240 	.word	0x00030240

000d4bb4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4bb4:	b508      	push	{r3, lr}
   d4bb6:	4b02      	ldr	r3, [pc, #8]	; (d4bc0 <network_set_listen_timeout+0xc>)
   d4bb8:	681b      	ldr	r3, [r3, #0]
   d4bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4bbc:	9301      	str	r3, [sp, #4]
   d4bbe:	bd08      	pop	{r3, pc}
   d4bc0:	00030240 	.word	0x00030240

000d4bc4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4bc4:	b508      	push	{r3, lr}
   d4bc6:	4b02      	ldr	r3, [pc, #8]	; (d4bd0 <network_get_listen_timeout+0xc>)
   d4bc8:	681b      	ldr	r3, [r3, #0]
   d4bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4bcc:	9301      	str	r3, [sp, #4]
   d4bce:	bd08      	pop	{r3, pc}
   d4bd0:	00030240 	.word	0x00030240

000d4bd4 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4bd4:	b508      	push	{r3, lr}
   d4bd6:	4b02      	ldr	r3, [pc, #8]	; (d4be0 <spark_variable+0xc>)
   d4bd8:	681b      	ldr	r3, [r3, #0]
   d4bda:	681b      	ldr	r3, [r3, #0]
   d4bdc:	9301      	str	r3, [sp, #4]
   d4bde:	bd08      	pop	{r3, pc}
   d4be0:	00030244 	.word	0x00030244

000d4be4 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4be4:	b508      	push	{r3, lr}
   d4be6:	4b02      	ldr	r3, [pc, #8]	; (d4bf0 <spark_function+0xc>)
   d4be8:	681b      	ldr	r3, [r3, #0]
   d4bea:	685b      	ldr	r3, [r3, #4]
   d4bec:	9301      	str	r3, [sp, #4]
   d4bee:	bd08      	pop	{r3, pc}
   d4bf0:	00030244 	.word	0x00030244

000d4bf4 <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4bf4:	b508      	push	{r3, lr}
   d4bf6:	4b02      	ldr	r3, [pc, #8]	; (d4c00 <spark_cloud_flag_connected+0xc>)
   d4bf8:	681b      	ldr	r3, [r3, #0]
   d4bfa:	695b      	ldr	r3, [r3, #20]
   d4bfc:	9301      	str	r3, [sp, #4]
   d4bfe:	bd08      	pop	{r3, pc}
   d4c00:	00030244 	.word	0x00030244

000d4c04 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4c04:	b508      	push	{r3, lr}
   d4c06:	4b02      	ldr	r3, [pc, #8]	; (d4c10 <spark_send_event+0xc>)
   d4c08:	681b      	ldr	r3, [r3, #0]
   d4c0a:	6a1b      	ldr	r3, [r3, #32]
   d4c0c:	9301      	str	r3, [sp, #4]
   d4c0e:	bd08      	pop	{r3, pc}
   d4c10:	00030244 	.word	0x00030244

000d4c14 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4c14:	b508      	push	{r3, lr}
   d4c16:	4b02      	ldr	r3, [pc, #8]	; (d4c20 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4c18:	681b      	ldr	r3, [r3, #0]
   d4c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4c1c:	9301      	str	r3, [sp, #4]
   d4c1e:	bd08      	pop	{r3, pc}
   d4c20:	00030244 	.word	0x00030244

000d4c24 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4c24:	b508      	push	{r3, lr}
   d4c26:	4b02      	ldr	r3, [pc, #8]	; (d4c30 <malloc+0xc>)
   d4c28:	681b      	ldr	r3, [r3, #0]
   d4c2a:	681b      	ldr	r3, [r3, #0]
   d4c2c:	9301      	str	r3, [sp, #4]
   d4c2e:	bd08      	pop	{r3, pc}
   d4c30:	0003021c 	.word	0x0003021c

000d4c34 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4c34:	b508      	push	{r3, lr}
   d4c36:	4b02      	ldr	r3, [pc, #8]	; (d4c40 <free+0xc>)
   d4c38:	681b      	ldr	r3, [r3, #0]
   d4c3a:	685b      	ldr	r3, [r3, #4]
   d4c3c:	9301      	str	r3, [sp, #4]
   d4c3e:	bd08      	pop	{r3, pc}
   d4c40:	0003021c 	.word	0x0003021c

000d4c44 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4c44:	b508      	push	{r3, lr}
   d4c46:	4b02      	ldr	r3, [pc, #8]	; (d4c50 <realloc+0xc>)
   d4c48:	681b      	ldr	r3, [r3, #0]
   d4c4a:	689b      	ldr	r3, [r3, #8]
   d4c4c:	9301      	str	r3, [sp, #4]
   d4c4e:	bd08      	pop	{r3, pc}
   d4c50:	0003021c 	.word	0x0003021c

000d4c54 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4c54:	b508      	push	{r3, lr}
   d4c56:	4b02      	ldr	r3, [pc, #8]	; (d4c60 <vsnprintf+0xc>)
   d4c58:	681b      	ldr	r3, [r3, #0]
   d4c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4c5c:	9301      	str	r3, [sp, #4]
   d4c5e:	bd08      	pop	{r3, pc}
   d4c60:	0003021c 	.word	0x0003021c

000d4c64 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4c64:	b508      	push	{r3, lr}
   d4c66:	4b02      	ldr	r3, [pc, #8]	; (d4c70 <abort+0xc>)
   d4c68:	681b      	ldr	r3, [r3, #0]
   d4c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4c6c:	9301      	str	r3, [sp, #4]
   d4c6e:	bd08      	pop	{r3, pc}
   d4c70:	0003021c 	.word	0x0003021c

000d4c74 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4c74:	b508      	push	{r3, lr}
   d4c76:	4b02      	ldr	r3, [pc, #8]	; (d4c80 <_malloc_r+0xc>)
   d4c78:	681b      	ldr	r3, [r3, #0]
   d4c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c7c:	9301      	str	r3, [sp, #4]
   d4c7e:	bd08      	pop	{r3, pc}
   d4c80:	0003021c 	.word	0x0003021c

000d4c84 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4c84:	b508      	push	{r3, lr}
   d4c86:	4b02      	ldr	r3, [pc, #8]	; (d4c90 <__errno+0xc>)
   d4c88:	681b      	ldr	r3, [r3, #0]
   d4c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4c8c:	9301      	str	r3, [sp, #4]
   d4c8e:	bd08      	pop	{r3, pc}
   d4c90:	0003021c 	.word	0x0003021c

000d4c94 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4c94:	2200      	movs	r2, #0
   d4c96:	4611      	mov	r1, r2
   d4c98:	6840      	ldr	r0, [r0, #4]
   d4c9a:	f7ff bf83 	b.w	d4ba4 <network_listening>

000d4c9e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4c9e:	2200      	movs	r2, #0
   d4ca0:	4611      	mov	r1, r2
   d4ca2:	6840      	ldr	r0, [r0, #4]
   d4ca4:	f7ff bf8e 	b.w	d4bc4 <network_get_listen_timeout>

000d4ca8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4ca8:	2200      	movs	r2, #0
   d4caa:	6840      	ldr	r0, [r0, #4]
   d4cac:	f7ff bf82 	b.w	d4bb4 <network_set_listen_timeout>

000d4cb0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4cb0:	2200      	movs	r2, #0
   d4cb2:	f081 0101 	eor.w	r1, r1, #1
   d4cb6:	6840      	ldr	r0, [r0, #4]
   d4cb8:	f7ff bf6c 	b.w	d4b94 <network_listen>

000d4cbc <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4cbc:	2300      	movs	r3, #0
   d4cbe:	461a      	mov	r2, r3
   d4cc0:	4619      	mov	r1, r3
   d4cc2:	6840      	ldr	r0, [r0, #4]
   d4cc4:	f7ff bf5e 	b.w	d4b84 <network_off>

000d4cc8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4cc8:	2300      	movs	r3, #0
   d4cca:	461a      	mov	r2, r3
   d4ccc:	4619      	mov	r1, r3
   d4cce:	6840      	ldr	r0, [r0, #4]
   d4cd0:	f7ff bf50 	b.w	d4b74 <network_on>

000d4cd4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4cd4:	2200      	movs	r2, #0
   d4cd6:	4611      	mov	r1, r2
   d4cd8:	6840      	ldr	r0, [r0, #4]
   d4cda:	f7ff bf43 	b.w	d4b64 <network_ready>

000d4cde <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4cde:	2200      	movs	r2, #0
   d4ce0:	4611      	mov	r1, r2
   d4ce2:	6840      	ldr	r0, [r0, #4]
   d4ce4:	f7ff bf2e 	b.w	d4b44 <network_connecting>

000d4ce8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4ce8:	2200      	movs	r2, #0
   d4cea:	2102      	movs	r1, #2
   d4cec:	6840      	ldr	r0, [r0, #4]
   d4cee:	f7ff bf31 	b.w	d4b54 <network_disconnect>

000d4cf2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4cf2:	2300      	movs	r3, #0
   d4cf4:	461a      	mov	r2, r3
   d4cf6:	6840      	ldr	r0, [r0, #4]
   d4cf8:	f7ff bf1c 	b.w	d4b34 <network_connect>

000d4cfc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4cfc:	4b02      	ldr	r3, [pc, #8]	; (d4d08 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4cfe:	2203      	movs	r2, #3
   d4d00:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4d02:	4a02      	ldr	r2, [pc, #8]	; (d4d0c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4d04:	601a      	str	r2, [r3, #0]
   d4d06:	4770      	bx	lr
   d4d08:	2003e3a0 	.word	0x2003e3a0
   d4d0c:	000d7b2c 	.word	0x000d7b2c

000d4d10 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4d10:	4770      	bx	lr

000d4d12 <_ZN8SPIClassD0Ev>:
   d4d12:	b510      	push	{r4, lr}
   d4d14:	2110      	movs	r1, #16
   d4d16:	4604      	mov	r4, r0
   d4d18:	f001 fcab 	bl	d6672 <_ZdlPvj>
   d4d1c:	4620      	mov	r0, r4
   d4d1e:	bd10      	pop	{r4, pc}

000d4d20 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4d20:	b570      	push	{r4, r5, r6, lr}
   d4d22:	4b08      	ldr	r3, [pc, #32]	; (d4d44 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4d24:	6003      	str	r3, [r0, #0]
   d4d26:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4d28:	2500      	movs	r5, #0
   d4d2a:	460e      	mov	r6, r1
   d4d2c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4d30:	f7ff fdec 	bl	d490c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4d34:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4d36:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4d38:	f7ff fda0 	bl	d487c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4d3c:	60a5      	str	r5, [r4, #8]
}
   d4d3e:	4620      	mov	r0, r4
   d4d40:	bd70      	pop	{r4, r5, r6, pc}
   d4d42:	bf00      	nop
   d4d44:	000d7b60 	.word	0x000d7b60

000d4d48 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d4d48:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d4d4c:	7900      	ldrb	r0, [r0, #4]
   d4d4e:	f7ff bd85 	b.w	d485c <HAL_SPI_Begin>

000d4d52 <_ZN8SPIClass14endTransactionEv>:
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
    void unlock() { os_mutex_unlock(handle_); }
   d4d52:	68c0      	ldr	r0, [r0, #12]
   d4d54:	f7ff bdea 	b.w	d492c <os_mutex_unlock>

000d4d58 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d4d58:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
   d4d5a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d4d5c:	6018      	str	r0, [r3, #0]
   d4d5e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
   d4d60:	6818      	ldr	r0, [r3, #0]
   d4d62:	4288      	cmp	r0, r1
   d4d64:	b2e5      	uxtb	r5, r4
   d4d66:	d906      	bls.n	d4d76 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d4d68:	3401      	adds	r4, #1
   d4d6a:	2c08      	cmp	r4, #8
   d4d6c:	d002      	beq.n	d4d74 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
   d4d6e:	0840      	lsrs	r0, r0, #1
   d4d70:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
   d4d72:	e7f5      	b.n	d4d60 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d4d74:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d4d76:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d4d78:	5d5b      	ldrb	r3, [r3, r5]
   d4d7a:	7013      	strb	r3, [r2, #0]
   d4d7c:	bd30      	pop	{r4, r5, pc}
   d4d7e:	bf00      	nop
   d4d80:	000d7b68 	.word	0x000d7b68

000d4d84 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
  lock();
  return 0;
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d4d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4d88:	4680      	mov	r8, r0
   d4d8a:	b08f      	sub	sp, #60	; 0x3c
            os_mutex_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
   d4d8c:	68c0      	ldr	r0, [r0, #12]
   d4d8e:	460f      	mov	r7, r1
   d4d90:	f7ff fdc4 	bl	d491c <os_mutex_lock>
  lock();
  // Get Current SPISettings
  hal_spi_info_t info;
  querySpiInfo(_spi, &info);
   d4d94:	f898 4004 	ldrb.w	r4, [r8, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   d4d98:	2214      	movs	r2, #20
   d4d9a:	2100      	movs	r1, #0
   d4d9c:	a809      	add	r0, sp, #36	; 0x24
   d4d9e:	f002 fd64 	bl	d786a <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   d4da2:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   d4da4:	4620      	mov	r0, r4
   d4da6:	2200      	movs	r2, #0
   d4da8:	a909      	add	r1, sp, #36	; 0x24
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   d4daa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  HAL_SPI_Info(spi, info, nullptr);
   d4dae:	f7ff fd75 	bl	d489c <HAL_SPI_Info>
}

static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
  if (!info->enabled || info->default_settings)
   d4db2:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d4db6:	b14c      	cbz	r4, d4dcc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
   d4db8:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d4dbc:	b92d      	cbnz	r5, d4dca <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d4dbe:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   d4dc0:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d4dc4:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d4dc8:	e003      	b.n	d4dd2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d4dca:	2400      	movs	r4, #0
   d4dcc:	46a1      	mov	r9, r4
   d4dce:	4626      	mov	r6, r4
   d4dd0:	2501      	movs	r5, #1
   d4dd2:	793b      	ldrb	r3, [r7, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d4dd4:	b10d      	cbz	r5, d4dda <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
   d4dd6:	2b00      	cmp	r3, #0
   d4dd8:	d140      	bne.n	d4e5c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
      return true;

    if (default_ == other.default_ &&
   d4dda:	429d      	cmp	r5, r3
   d4ddc:	d10b      	bne.n	d4df6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
   d4dde:	68ba      	ldr	r2, [r7, #8]
   d4de0:	42b2      	cmp	r2, r6
   d4de2:	d108      	bne.n	d4df6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d4de4:	f88d 9020 	strb.w	r9, [sp, #32]
   d4de8:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d4dec:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d4df0:	89ba      	ldrh	r2, [r7, #12]
   d4df2:	4291      	cmp	r1, r2
   d4df4:	d032      	beq.n	d4e5c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
  querySpiInfo(_spi, &info);
  particle::__SPISettings current = spiSettingsFromSpiInfo(&info);
  // If they differ, reconfigure SPI peripheral
  if (settings != current)
  {
    if (!settings.default_) {
   d4df6:	bb23      	cbnz	r3, d4e42 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xbe>
      uint8_t divisor = 0;
   d4df8:	f88d 300f 	strb.w	r3, [sp, #15]
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);
   d4dfc:	f10d 020f 	add.w	r2, sp, #15
   d4e00:	ab04      	add	r3, sp, #16
   d4e02:	68b9      	ldr	r1, [r7, #8]
   d4e04:	980a      	ldr	r0, [sp, #40]	; 0x28
   d4e06:	f7ff ffa7 	bl	d4d58 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d4e0a:	793b      	ldrb	r3, [r7, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d4e0c:	b105      	cbz	r5, d4e10 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
   d4e0e:	bb13      	cbnz	r3, d4e56 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d4e10:	42ab      	cmp	r3, r5
   d4e12:	d009      	beq.n	d4e28 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>

      if (!(current <= settings && clock == current.clock_)) {
        HAL_SPI_Set_Settings(_spi, 0, divisor, settings.bitOrder_, settings.dataMode_, nullptr);
   d4e14:	2100      	movs	r1, #0
   d4e16:	7b3b      	ldrb	r3, [r7, #12]
   d4e18:	9101      	str	r1, [sp, #4]
   d4e1a:	7b7c      	ldrb	r4, [r7, #13]
   d4e1c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d4e20:	f898 0004 	ldrb.w	r0, [r8, #4]
   d4e24:	9400      	str	r4, [sp, #0]
   d4e26:	e013      	b.n	d4e50 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xcc>
   d4e28:	68bb      	ldr	r3, [r7, #8]
   d4e2a:	42b3      	cmp	r3, r6
   d4e2c:	d3f2      	bcc.n	d4e14 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d4e2e:	f88d 9020 	strb.w	r9, [sp, #32]
   d4e32:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d4e36:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d4e3a:	89bb      	ldrh	r3, [r7, #12]
   d4e3c:	429a      	cmp	r2, r3
   d4e3e:	d1e9      	bne.n	d4e14 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
   d4e40:	e009      	b.n	d4e56 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      }
    } else {
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
   d4e42:	2300      	movs	r3, #0
   d4e44:	f898 0004 	ldrb.w	r0, [r8, #4]
   d4e48:	9301      	str	r3, [sp, #4]
   d4e4a:	9300      	str	r3, [sp, #0]
   d4e4c:	461a      	mov	r2, r3
   d4e4e:	2101      	movs	r1, #1
   d4e50:	f7ff fd2c 	bl	d48ac <HAL_SPI_Set_Settings>
   d4e54:	e002      	b.n	d4e5c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
    if (!settings.default_) {
      uint8_t divisor = 0;
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);

      if (!(current <= settings && clock == current.clock_)) {
   d4e56:	9b04      	ldr	r3, [sp, #16]
   d4e58:	42b3      	cmp	r3, r6
   d4e5a:	d1db      	bne.n	d4e14 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
    }
  }

  return 0;
}
   d4e5c:	2000      	movs	r0, #0
   d4e5e:	b00f      	add	sp, #60	; 0x3c
   d4e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4e64 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d4e64:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   d4e66:	7900      	ldrb	r0, [r0, #4]
   d4e68:	f7ff fd00 	bl	d486c <HAL_SPI_Send_Receive_Data>
}
   d4e6c:	b2c0      	uxtb	r0, r0
   d4e6e:	bd08      	pop	{r3, pc}

000d4e70 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d4e70:	7900      	ldrb	r0, [r0, #4]
   d4e72:	f7ff bd0b 	b.w	d488c <HAL_SPI_Is_Enabled>
	...

000d4e78 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4e78:	4b04      	ldr	r3, [pc, #16]	; (d4e8c <_GLOBAL__sub_I_System+0x14>)
   d4e7a:	2000      	movs	r0, #0
   d4e7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4e80:	7018      	strb	r0, [r3, #0]
   d4e82:	8058      	strh	r0, [r3, #2]
   d4e84:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4e86:	f7ff be21 	b.w	d4acc <set_system_mode>
   d4e8a:	bf00      	nop
   d4e8c:	2003e3a8 	.word	0x2003e3a8

000d4e90 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d4e90:	b510      	push	{r4, lr}
   d4e92:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d4e94:	f002 fd3d 	bl	d7912 <strlen>
   d4e98:	3801      	subs	r0, #1
   d4e9a:	1823      	adds	r3, r4, r0
   d4e9c:	4620      	mov	r0, r4
	while(i<j){
   d4e9e:	4298      	cmp	r0, r3
   d4ea0:	d206      	bcs.n	d4eb0 <_Z11str_reversePc+0x20>
		c = *i;
   d4ea2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d4ea4:	7819      	ldrb	r1, [r3, #0]
   d4ea6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d4eaa:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d4eae:	e7f6      	b.n	d4e9e <_Z11str_reversePc+0xe>
   d4eb0:	bd10      	pop	{r4, pc}

000d4eb2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4eb2:	b570      	push	{r4, r5, r6, lr}
   d4eb4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d4eb6:	1e91      	subs	r1, r2, #2
   d4eb8:	2922      	cmp	r1, #34	; 0x22
   d4eba:	d820      	bhi.n	d4efe <ultoa+0x4c>
   d4ebc:	4625      	mov	r5, r4
   d4ebe:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4ec0:	b910      	cbnz	r0, d4ec8 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4ec2:	4423      	add	r3, r4
            *ptr++ = '0';
   d4ec4:	2230      	movs	r2, #48	; 0x30
   d4ec6:	e00e      	b.n	d4ee6 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d4ec8:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d4ecc:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d4ed0:	b2c1      	uxtb	r1, r0
   d4ed2:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d4ed6:	2809      	cmp	r0, #9
                *ptr += '0';
   d4ed8:	bf94      	ite	ls
   d4eda:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d4edc:	3157      	addhi	r1, #87	; 0x57
   d4ede:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d4ee2:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4ee4:	e7eb      	b.n	d4ebe <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4ee6:	4299      	cmp	r1, r3
   d4ee8:	d202      	bcs.n	d4ef0 <ultoa+0x3e>
            *ptr++ = '0';
   d4eea:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4eee:	e7fa      	b.n	d4ee6 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d4ef0:	2300      	movs	r3, #0
	str_reverse(buffer);
   d4ef2:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d4ef4:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d4ef6:	f7ff ffcb 	bl	d4e90 <_Z11str_reversePc>
	return buffer;
   d4efa:	4620      	mov	r0, r4
   d4efc:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d4efe:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d4f00:	bd70      	pop	{r4, r5, r6, pc}

000d4f02 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4f02:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d4f04:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4f06:	460c      	mov	r4, r1
   d4f08:	4615      	mov	r5, r2
	if(a<0){
   d4f0a:	da0b      	bge.n	d4f24 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d4f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d4f10:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d4f14:	bf14      	ite	ne
   d4f16:	4258      	negne	r0, r3
   d4f18:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d4f1a:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d4f1c:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d4f1e:	462a      	mov	r2, r5
   d4f20:	4419      	add	r1, r3
   d4f22:	e000      	b.n	d4f26 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d4f24:	2301      	movs	r3, #1
   d4f26:	f7ff ffc4 	bl	d4eb2 <ultoa>
	}
	return buffer;
}
   d4f2a:	4620      	mov	r0, r4
   d4f2c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4f30 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d4f30:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4f34:	ec59 8b10 	vmov	r8, r9, d0
   d4f38:	4607      	mov	r7, r0
   d4f3a:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d4f3c:	2200      	movs	r2, #0
   d4f3e:	2300      	movs	r3, #0
   d4f40:	ee10 0a10 	vmov	r0, s0
   d4f44:	4649      	mov	r1, r9
   d4f46:	f002 fa3d 	bl	d73c4 <__aeabi_dcmplt>
   d4f4a:	b128      	cbz	r0, d4f58 <_Z4dtoadhPc+0x28>
        val = -val;
   d4f4c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d4f50:	4699      	mov	r9, r3
        *sout++ = '-';
   d4f52:	232d      	movs	r3, #45	; 0x2d
   d4f54:	7033      	strb	r3, [r6, #0]
   d4f56:	3601      	adds	r6, #1
   d4f58:	2300      	movs	r3, #0
    }
    long scale = 1;
   d4f5a:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d4f5c:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d4f5e:	b2d9      	uxtb	r1, r3
   d4f60:	428f      	cmp	r7, r1
   d4f62:	d902      	bls.n	d4f6a <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d4f64:	4354      	muls	r4, r2
   d4f66:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d4f68:	e7f9      	b.n	d4f5e <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d4f6a:	4620      	mov	r0, r4
   d4f6c:	f001 ff52 	bl	d6e14 <__aeabi_i2d>
   d4f70:	4642      	mov	r2, r8
   d4f72:	464b      	mov	r3, r9
   d4f74:	f001 ffb4 	bl	d6ee0 <__aeabi_dmul>
   d4f78:	4682      	mov	sl, r0
   d4f7a:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d4f7c:	f002 fac0 	bl	d7500 <__aeabi_d2ulz>
   d4f80:	4680      	mov	r8, r0
   d4f82:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d4f84:	f001 ff76 	bl	d6e74 <__aeabi_ul2d>
   d4f88:	4602      	mov	r2, r0
   d4f8a:	460b      	mov	r3, r1
   d4f8c:	4650      	mov	r0, sl
   d4f8e:	4659      	mov	r1, fp
   d4f90:	f001 fdf2 	bl	d6b78 <__aeabi_dsub>
   d4f94:	2200      	movs	r2, #0
   d4f96:	4b17      	ldr	r3, [pc, #92]	; (d4ff4 <_Z4dtoadhPc+0xc4>)
   d4f98:	f002 fa28 	bl	d73ec <__aeabi_dcmpge>
   d4f9c:	b118      	cbz	r0, d4fa6 <_Z4dtoadhPc+0x76>
        fixed++;
   d4f9e:	f118 0801 	adds.w	r8, r8, #1
   d4fa2:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d4fa6:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d4fa8:	4622      	mov	r2, r4
   d4faa:	462b      	mov	r3, r5
   d4fac:	4640      	mov	r0, r8
   d4fae:	4649      	mov	r1, r9
   d4fb0:	f002 fa8e 	bl	d74d0 <__aeabi_uldivmod>
   d4fb4:	2301      	movs	r3, #1
   d4fb6:	220a      	movs	r2, #10
   d4fb8:	4631      	mov	r1, r6
   d4fba:	f7ff ff7a 	bl	d4eb2 <ultoa>
    if (prec) {
   d4fbe:	b1af      	cbz	r7, d4fec <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d4fc0:	4630      	mov	r0, r6
   d4fc2:	f002 fca6 	bl	d7912 <strlen>
        *sout++ = '.';
   d4fc6:	232e      	movs	r3, #46	; 0x2e
   d4fc8:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d4fca:	3001      	adds	r0, #1
   d4fcc:	4406      	add	r6, r0
   d4fce:	4622      	mov	r2, r4
   d4fd0:	462b      	mov	r3, r5
   d4fd2:	4640      	mov	r0, r8
   d4fd4:	4649      	mov	r1, r9
   d4fd6:	f002 fa7b 	bl	d74d0 <__aeabi_uldivmod>
   d4fda:	463b      	mov	r3, r7
   d4fdc:	4610      	mov	r0, r2
   d4fde:	4631      	mov	r1, r6
   d4fe0:	220a      	movs	r2, #10
    }
}
   d4fe2:	b001      	add	sp, #4
   d4fe4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d4fe8:	f7ff bf63 	b.w	d4eb2 <ultoa>
    }
}
   d4fec:	b001      	add	sp, #4
   d4fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4ff2:	bf00      	nop
   d4ff4:	3fe00000 	.word	0x3fe00000

000d4ff8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4ff8:	b510      	push	{r4, lr}
   d4ffa:	4604      	mov	r4, r0
{
	free(buffer);
   d4ffc:	6800      	ldr	r0, [r0, #0]
   d4ffe:	f7ff fe19 	bl	d4c34 <free>
}
   d5002:	4620      	mov	r0, r4
   d5004:	bd10      	pop	{r4, pc}

000d5006 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5006:	b510      	push	{r4, lr}
   d5008:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d500a:	6800      	ldr	r0, [r0, #0]
   d500c:	b108      	cbz	r0, d5012 <_ZN6String10invalidateEv+0xc>
   d500e:	f7ff fe11 	bl	d4c34 <free>
	buffer = NULL;
   d5012:	2300      	movs	r3, #0
   d5014:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5016:	60a3      	str	r3, [r4, #8]
   d5018:	6063      	str	r3, [r4, #4]
   d501a:	bd10      	pop	{r4, pc}

000d501c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d501c:	b538      	push	{r3, r4, r5, lr}
   d501e:	4604      	mov	r4, r0
   d5020:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5022:	6800      	ldr	r0, [r0, #0]
   d5024:	3101      	adds	r1, #1
   d5026:	f7ff fe0d 	bl	d4c44 <realloc>
	if (newbuffer) {
   d502a:	b110      	cbz	r0, d5032 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d502c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5030:	2001      	movs	r0, #1
	}
	return 0;
}
   d5032:	bd38      	pop	{r3, r4, r5, pc}

000d5034 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5034:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5036:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5038:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d503a:	b113      	cbz	r3, d5042 <_ZN6String7reserveEj+0xe>
   d503c:	6843      	ldr	r3, [r0, #4]
   d503e:	428b      	cmp	r3, r1
   d5040:	d207      	bcs.n	d5052 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5042:	4620      	mov	r0, r4
   d5044:	f7ff ffea 	bl	d501c <_ZN6String12changeBufferEj>
   d5048:	b120      	cbz	r0, d5054 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d504a:	68a3      	ldr	r3, [r4, #8]
   d504c:	b90b      	cbnz	r3, d5052 <_ZN6String7reserveEj+0x1e>
   d504e:	6822      	ldr	r2, [r4, #0]
   d5050:	7013      	strb	r3, [r2, #0]
   d5052:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5054:	bd10      	pop	{r4, pc}

000d5056 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5056:	b570      	push	{r4, r5, r6, lr}
   d5058:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d505a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d505c:	4604      	mov	r4, r0
   d505e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5060:	f7ff ffe8 	bl	d5034 <_ZN6String7reserveEj>
   d5064:	b918      	cbnz	r0, d506e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5066:	4620      	mov	r0, r4
   d5068:	f7ff ffcd 	bl	d5006 <_ZN6String10invalidateEv>
		return *this;
   d506c:	e009      	b.n	d5082 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d506e:	462a      	mov	r2, r5
   d5070:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5072:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5074:	6820      	ldr	r0, [r4, #0]
   d5076:	f002 fbed 	bl	d7854 <memcpy>
	buffer[len] = 0;
   d507a:	6822      	ldr	r2, [r4, #0]
   d507c:	68a3      	ldr	r3, [r4, #8]
   d507e:	2100      	movs	r1, #0
   d5080:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5082:	4620      	mov	r0, r4
   d5084:	bd70      	pop	{r4, r5, r6, pc}

000d5086 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5086:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5088:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d508a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d508c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d508e:	6043      	str	r3, [r0, #4]
	len = 0;
   d5090:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5092:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5094:	460d      	mov	r5, r1
   d5096:	b139      	cbz	r1, d50a8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5098:	4608      	mov	r0, r1
   d509a:	f002 fc3a 	bl	d7912 <strlen>
   d509e:	4629      	mov	r1, r5
   d50a0:	4602      	mov	r2, r0
   d50a2:	4620      	mov	r0, r4
   d50a4:	f7ff ffd7 	bl	d5056 <_ZN6String4copyEPKcj>
}
   d50a8:	4620      	mov	r0, r4
   d50aa:	bd38      	pop	{r3, r4, r5, pc}

000d50ac <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d50ac:	b538      	push	{r3, r4, r5, lr}
   d50ae:	4605      	mov	r5, r0
	if (buffer) {
   d50b0:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d50b2:	460c      	mov	r4, r1
	if (buffer) {
   d50b4:	b160      	cbz	r0, d50d0 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d50b6:	686a      	ldr	r2, [r5, #4]
   d50b8:	688b      	ldr	r3, [r1, #8]
   d50ba:	429a      	cmp	r2, r3
   d50bc:	d306      	bcc.n	d50cc <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d50be:	6809      	ldr	r1, [r1, #0]
   d50c0:	f002 fc04 	bl	d78cc <strcpy>
			len = rhs.len;
   d50c4:	68a3      	ldr	r3, [r4, #8]
   d50c6:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d50c8:	2300      	movs	r3, #0
   d50ca:	e00a      	b.n	d50e2 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d50cc:	f7ff fdb2 	bl	d4c34 <free>
		}
	}
	buffer = rhs.buffer;
   d50d0:	6823      	ldr	r3, [r4, #0]
   d50d2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d50d4:	6863      	ldr	r3, [r4, #4]
   d50d6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d50d8:	68a3      	ldr	r3, [r4, #8]
   d50da:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d50dc:	2300      	movs	r3, #0
   d50de:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d50e0:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d50e2:	60a3      	str	r3, [r4, #8]
   d50e4:	bd38      	pop	{r3, r4, r5, pc}

000d50e6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d50e6:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d50e8:	b510      	push	{r4, lr}
   d50ea:	460b      	mov	r3, r1
   d50ec:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d50ee:	d007      	beq.n	d5100 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d50f0:	6809      	ldr	r1, [r1, #0]
   d50f2:	b119      	cbz	r1, d50fc <_ZN6StringaSERKS_+0x16>
   d50f4:	689a      	ldr	r2, [r3, #8]
   d50f6:	f7ff ffae 	bl	d5056 <_ZN6String4copyEPKcj>
   d50fa:	e001      	b.n	d5100 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d50fc:	f7ff ff83 	bl	d5006 <_ZN6String10invalidateEv>

	return *this;
}
   d5100:	4620      	mov	r0, r4
   d5102:	bd10      	pop	{r4, pc}

000d5104 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5104:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5106:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5108:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d510a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d510c:	6043      	str	r3, [r0, #4]
	len = 0;
   d510e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5110:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5112:	f7ff ffe8 	bl	d50e6 <_ZN6StringaSERKS_>
}
   d5116:	4620      	mov	r0, r4
   d5118:	bd10      	pop	{r4, pc}

000d511a <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d511a:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d511c:	b510      	push	{r4, lr}
   d511e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d5120:	d001      	beq.n	d5126 <_ZN6StringaSEOS_+0xc>
   d5122:	f7ff ffc3 	bl	d50ac <_ZN6String4moveERS_>
	return *this;
}
   d5126:	4620      	mov	r0, r4
   d5128:	bd10      	pop	{r4, pc}

000d512a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d512a:	b538      	push	{r3, r4, r5, lr}
   d512c:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d512e:	460c      	mov	r4, r1
   d5130:	b141      	cbz	r1, d5144 <_ZN6StringaSEPKc+0x1a>
   d5132:	4608      	mov	r0, r1
   d5134:	f002 fbed 	bl	d7912 <strlen>
   d5138:	4621      	mov	r1, r4
   d513a:	4602      	mov	r2, r0
   d513c:	4628      	mov	r0, r5
   d513e:	f7ff ff8a 	bl	d5056 <_ZN6String4copyEPKcj>
   d5142:	e001      	b.n	d5148 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5144:	f7ff ff5f 	bl	d5006 <_ZN6String10invalidateEv>

	return *this;
}
   d5148:	4628      	mov	r0, r5
   d514a:	bd38      	pop	{r3, r4, r5, pc}

000d514c <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d514c:	b510      	push	{r4, lr}
   d514e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5150:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5152:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5154:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d5156:	6063      	str	r3, [r4, #4]
	len = 0;
   d5158:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d515a:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d515c:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d515e:	a901      	add	r1, sp, #4
   d5160:	f7ff fecf 	bl	d4f02 <itoa>
	*this = buf;
   d5164:	a901      	add	r1, sp, #4
   d5166:	4620      	mov	r0, r4
   d5168:	f7ff ffdf 	bl	d512a <_ZN6StringaSEPKc>
}
   d516c:	4620      	mov	r0, r4
   d516e:	b00a      	add	sp, #40	; 0x28
   d5170:	bd10      	pop	{r4, pc}

000d5172 <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d5172:	b530      	push	{r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5174:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d5176:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5178:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d517a:	6043      	str	r3, [r0, #4]
	len = 0;
   d517c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d517e:	7303      	strb	r3, [r0, #12]
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d5180:	4604      	mov	r4, r0
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d5182:	ee10 0a10 	vmov	r0, s0
   d5186:	b2cd      	uxtb	r5, r1
   d5188:	f001 fe56 	bl	d6e38 <__aeabi_f2d>
   d518c:	ec41 0b10 	vmov	d0, r0, r1
   d5190:	a901      	add	r1, sp, #4
   d5192:	4628      	mov	r0, r5
   d5194:	f7ff fecc 	bl	d4f30 <_Z4dtoadhPc>
        *this = buf;
   d5198:	a901      	add	r1, sp, #4
   d519a:	4620      	mov	r0, r4
   d519c:	f7ff ffc5 	bl	d512a <_ZN6StringaSEPKc>
}
   d51a0:	4620      	mov	r0, r4
   d51a2:	b00b      	add	sp, #44	; 0x2c
   d51a4:	bd30      	pop	{r4, r5, pc}

000d51a6 <_ZN6StringC1Edi>:

String::String(double value, int decimalPlaces)
   d51a6:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d51a8:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d51aa:	b08a      	sub	sp, #40	; 0x28
   d51ac:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d51ae:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d51b0:	6043      	str	r3, [r0, #4]
	len = 0;
   d51b2:	6083      	str	r3, [r0, #8]
	flags = 0;
   d51b4:	7303      	strb	r3, [r0, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d51b6:	b2c8      	uxtb	r0, r1
   d51b8:	a901      	add	r1, sp, #4
   d51ba:	f7ff feb9 	bl	d4f30 <_Z4dtoadhPc>
        *this = buf;
   d51be:	a901      	add	r1, sp, #4
   d51c0:	4620      	mov	r0, r4
   d51c2:	f7ff ffb2 	bl	d512a <_ZN6StringaSEPKc>
}
   d51c6:	4620      	mov	r0, r4
   d51c8:	b00a      	add	sp, #40	; 0x28
   d51ca:	bd10      	pop	{r4, pc}

000d51cc <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d51cc:	b570      	push	{r4, r5, r6, lr}
   d51ce:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d51d0:	460e      	mov	r6, r1
   d51d2:	b909      	cbnz	r1, d51d8 <_ZN6String6concatEPKcj+0xc>
   d51d4:	2000      	movs	r0, #0
   d51d6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d51d8:	b16a      	cbz	r2, d51f6 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d51da:	6883      	ldr	r3, [r0, #8]
   d51dc:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d51de:	4629      	mov	r1, r5
   d51e0:	f7ff ff28 	bl	d5034 <_ZN6String7reserveEj>
   d51e4:	2800      	cmp	r0, #0
   d51e6:	d0f5      	beq.n	d51d4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d51e8:	6820      	ldr	r0, [r4, #0]
   d51ea:	68a3      	ldr	r3, [r4, #8]
   d51ec:	4631      	mov	r1, r6
   d51ee:	4418      	add	r0, r3
   d51f0:	f002 fb6c 	bl	d78cc <strcpy>
	len = newlen;
   d51f4:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d51f6:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d51f8:	bd70      	pop	{r4, r5, r6, pc}

000d51fa <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d51fa:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d51fc:	688a      	ldr	r2, [r1, #8]
   d51fe:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d5200:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d5202:	f7ff ffe3 	bl	d51cc <_ZN6String6concatEPKcj>
   d5206:	b910      	cbnz	r0, d520e <_ZplRK15StringSumHelperRK6String+0x14>
   d5208:	4620      	mov	r0, r4
   d520a:	f7ff fefc 	bl	d5006 <_ZN6String10invalidateEv>
	return a;
}
   d520e:	4620      	mov	r0, r4
   d5210:	bd10      	pop	{r4, pc}

000d5212 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d5212:	b538      	push	{r3, r4, r5, lr}
   d5214:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d5216:	460d      	mov	r5, r1
   d5218:	b141      	cbz	r1, d522c <_ZplRK15StringSumHelperPKc+0x1a>
   d521a:	4608      	mov	r0, r1
   d521c:	f002 fb79 	bl	d7912 <strlen>
   d5220:	4629      	mov	r1, r5
   d5222:	4602      	mov	r2, r0
   d5224:	4620      	mov	r0, r4
   d5226:	f7ff ffd1 	bl	d51cc <_ZN6String6concatEPKcj>
   d522a:	b910      	cbnz	r0, d5232 <_ZplRK15StringSumHelperPKc+0x20>
   d522c:	4620      	mov	r0, r4
   d522e:	f7ff feea 	bl	d5006 <_ZN6String10invalidateEv>
	return a;
}
   d5232:	4620      	mov	r0, r4
   d5234:	bd38      	pop	{r3, r4, r5, pc}

000d5236 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d5236:	6800      	ldr	r0, [r0, #0]
   d5238:	b108      	cbz	r0, d523e <_ZNK6String5toIntEv+0x8>
   d523a:	f002 baf9 	b.w	d7830 <atol>
	return 0;
}
   d523e:	4770      	bx	lr

000d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5240:	680b      	ldr	r3, [r1, #0]
   d5242:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5244:	b113      	cbz	r3, d524c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5246:	685a      	ldr	r2, [r3, #4]
   d5248:	3201      	adds	r2, #1
   d524a:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d524c:	4770      	bx	lr
	...

000d5250 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5250:	4802      	ldr	r0, [pc, #8]	; (d525c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5252:	2300      	movs	r3, #0
   d5254:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5256:	f7ff bb71 	b.w	d493c <os_mutex_recursive_create>
   d525a:	bf00      	nop
   d525c:	2003e3b0 	.word	0x2003e3b0

000d5260 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5262:	4606      	mov	r6, r0
   d5264:	460d      	mov	r5, r1
   d5266:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5268:	2400      	movs	r4, #0
  while (size--) {
   d526a:	42bd      	cmp	r5, r7
   d526c:	d00c      	beq.n	d5288 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d526e:	6833      	ldr	r3, [r6, #0]
   d5270:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5274:	689b      	ldr	r3, [r3, #8]
   d5276:	4630      	mov	r0, r6
   d5278:	4798      	blx	r3
     if (chunk>=0)
   d527a:	2800      	cmp	r0, #0
   d527c:	db01      	blt.n	d5282 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d527e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5280:	e7f3      	b.n	d526a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5282:	2c00      	cmp	r4, #0
   d5284:	bf08      	it	eq
   d5286:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5288:	4620      	mov	r0, r4
   d528a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d528c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d528c:	b570      	push	{r4, r5, r6, lr}
   d528e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5290:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5292:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5294:	b149      	cbz	r1, d52aa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5296:	f002 fb3c 	bl	d7912 <strlen>
   d529a:	682b      	ldr	r3, [r5, #0]
   d529c:	4602      	mov	r2, r0
   d529e:	4621      	mov	r1, r4
   d52a0:	4628      	mov	r0, r5
   d52a2:	68db      	ldr	r3, [r3, #12]
    }
   d52a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d52a8:	4718      	bx	r3
    }
   d52aa:	bd70      	pop	{r4, r5, r6, pc}

000d52ac <_ZN5Print5printEPKc>:
   d52ac:	b508      	push	{r3, lr}
   d52ae:	f7ff ffed 	bl	d528c <_ZN5Print5writeEPKc>
   d52b2:	bd08      	pop	{r3, pc}

000d52b4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d52b4:	6803      	ldr	r3, [r0, #0]
   d52b6:	689b      	ldr	r3, [r3, #8]
   d52b8:	4718      	bx	r3

000d52ba <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d52ba:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d52bc:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d52be:	4605      	mov	r5, r0
  size_t n = print('\r');
   d52c0:	f7ff fff8 	bl	d52b4 <_ZN5Print5printEc>
  n += print('\n');
   d52c4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d52c6:	4604      	mov	r4, r0
  n += print('\n');
   d52c8:	4628      	mov	r0, r5
   d52ca:	f7ff fff3 	bl	d52b4 <_ZN5Print5printEc>
  return n;
}
   d52ce:	4420      	add	r0, r4
   d52d0:	bd38      	pop	{r3, r4, r5, pc}

000d52d2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d52d2:	b530      	push	{r4, r5, lr}
   d52d4:	b08b      	sub	sp, #44	; 0x2c
   d52d6:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d52d8:	2100      	movs	r1, #0
   d52da:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d52de:	2a01      	cmp	r2, #1
   d52e0:	bf98      	it	ls
   d52e2:	220a      	movls	r2, #10
   d52e4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d52e8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d52ec:	fb05 3312 	mls	r3, r5, r2, r3
   d52f0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d52f4:	2b09      	cmp	r3, #9
   d52f6:	bf94      	ite	ls
   d52f8:	3330      	addls	r3, #48	; 0x30
   d52fa:	3337      	addhi	r3, #55	; 0x37
   d52fc:	b2db      	uxtb	r3, r3
   d52fe:	4621      	mov	r1, r4
   d5300:	f804 3901 	strb.w	r3, [r4], #-1
   d5304:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5306:	2d00      	cmp	r5, #0
   d5308:	d1ee      	bne.n	d52e8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d530a:	f7ff ffbf 	bl	d528c <_ZN5Print5writeEPKc>
}
   d530e:	b00b      	add	sp, #44	; 0x2c
   d5310:	bd30      	pop	{r4, r5, pc}

000d5312 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5312:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5314:	b92a      	cbnz	r2, d5322 <_ZN5Print5printEmi+0x10>
   d5316:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5318:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d531c:	689b      	ldr	r3, [r3, #8]
   d531e:	b2c9      	uxtb	r1, r1
   d5320:	4718      	bx	r3
  else return printNumber(n, base);
   d5322:	b2d2      	uxtb	r2, r2
}
   d5324:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5328:	f7ff bfd3 	b.w	d52d2 <_ZN5Print11printNumberEmh>

000d532c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d532c:	f7ff bff1 	b.w	d5312 <_ZN5Print5printEmi>

000d5330 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d5330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5334:	4607      	mov	r7, r0
   d5336:	460e      	mov	r6, r1
  if (base == 0) {
   d5338:	4615      	mov	r5, r2
   d533a:	b92a      	cbnz	r2, d5348 <_ZN5Print5printEli+0x18>
    return write(n);
   d533c:	6803      	ldr	r3, [r0, #0]
   d533e:	b2c9      	uxtb	r1, r1
   d5340:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d5346:	4718      	bx	r3
  } else if (base == 10) {
   d5348:	2a0a      	cmp	r2, #10
   d534a:	d102      	bne.n	d5352 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d534c:	2900      	cmp	r1, #0
   d534e:	da01      	bge.n	d5354 <_ZN5Print5printEli+0x24>
   d5350:	e004      	b.n	d535c <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5352:	b2d2      	uxtb	r2, r2
  }
}
   d5354:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5358:	f7ff bfbb 	b.w	d52d2 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d535c:	212d      	movs	r1, #45	; 0x2d
   d535e:	f7ff ffa9 	bl	d52b4 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d5362:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5364:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d5366:	4271      	negs	r1, r6
   d5368:	4638      	mov	r0, r7
   d536a:	f7ff ffb2 	bl	d52d2 <_ZN5Print11printNumberEmh>
   d536e:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5374 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d5374:	f7ff bfdc 	b.w	d5330 <_ZN5Print5printEli>

000d5378 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d5378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d537c:	ec57 6b10 	vmov	r6, r7, d0
   d5380:	4682      	mov	sl, r0
   d5382:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d5384:	ee10 2a10 	vmov	r2, s0
   d5388:	463b      	mov	r3, r7
   d538a:	ee10 0a10 	vmov	r0, s0
   d538e:	4639      	mov	r1, r7
   d5390:	f002 f840 	bl	d7414 <__aeabi_dcmpun>
   d5394:	b108      	cbz	r0, d539a <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5396:	4948      	ldr	r1, [pc, #288]	; (d54b8 <_ZN5Print10printFloatEdh+0x140>)
   d5398:	e012      	b.n	d53c0 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d539a:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d539e:	f04f 32ff 	mov.w	r2, #4294967295
   d53a2:	4b46      	ldr	r3, [pc, #280]	; (d54bc <_ZN5Print10printFloatEdh+0x144>)
   d53a4:	4630      	mov	r0, r6
   d53a6:	4649      	mov	r1, r9
   d53a8:	f002 f834 	bl	d7414 <__aeabi_dcmpun>
   d53ac:	b968      	cbnz	r0, d53ca <_ZN5Print10printFloatEdh+0x52>
   d53ae:	f04f 32ff 	mov.w	r2, #4294967295
   d53b2:	4b42      	ldr	r3, [pc, #264]	; (d54bc <_ZN5Print10printFloatEdh+0x144>)
   d53b4:	4630      	mov	r0, r6
   d53b6:	4649      	mov	r1, r9
   d53b8:	f002 f80e 	bl	d73d8 <__aeabi_dcmple>
   d53bc:	b928      	cbnz	r0, d53ca <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d53be:	4940      	ldr	r1, [pc, #256]	; (d54c0 <_ZN5Print10printFloatEdh+0x148>)
   d53c0:	4650      	mov	r0, sl
   d53c2:	f7ff ff63 	bl	d528c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d53c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d53ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d53ce:	4b3d      	ldr	r3, [pc, #244]	; (d54c4 <_ZN5Print10printFloatEdh+0x14c>)
   d53d0:	4630      	mov	r0, r6
   d53d2:	4639      	mov	r1, r7
   d53d4:	f002 f814 	bl	d7400 <__aeabi_dcmpgt>
   d53d8:	b108      	cbz	r0, d53de <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d53da:	493b      	ldr	r1, [pc, #236]	; (d54c8 <_ZN5Print10printFloatEdh+0x150>)
   d53dc:	e7f0      	b.n	d53c0 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d53de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d53e2:	4b3a      	ldr	r3, [pc, #232]	; (d54cc <_ZN5Print10printFloatEdh+0x154>)
   d53e4:	4630      	mov	r0, r6
   d53e6:	4639      	mov	r1, r7
   d53e8:	f001 ffec 	bl	d73c4 <__aeabi_dcmplt>
   d53ec:	2800      	cmp	r0, #0
   d53ee:	d1f4      	bne.n	d53da <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d53f0:	2200      	movs	r2, #0
   d53f2:	2300      	movs	r3, #0
   d53f4:	4630      	mov	r0, r6
   d53f6:	4639      	mov	r1, r7
   d53f8:	f001 ffe4 	bl	d73c4 <__aeabi_dcmplt>
   d53fc:	b140      	cbz	r0, d5410 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d53fe:	212d      	movs	r1, #45	; 0x2d
   d5400:	4650      	mov	r0, sl
   d5402:	f7ff ff57 	bl	d52b4 <_ZN5Print5printEc>
     number = -number;
   d5406:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d540a:	4604      	mov	r4, r0
     number = -number;
   d540c:	461f      	mov	r7, r3
   d540e:	e000      	b.n	d5412 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5410:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5412:	492f      	ldr	r1, [pc, #188]	; (d54d0 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5414:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5418:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d541a:	fa5f f388 	uxtb.w	r3, r8
   d541e:	429d      	cmp	r5, r3
   d5420:	d906      	bls.n	d5430 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d5422:	2200      	movs	r2, #0
   d5424:	4b2b      	ldr	r3, [pc, #172]	; (d54d4 <_ZN5Print10printFloatEdh+0x15c>)
   d5426:	f001 fe85 	bl	d7134 <__aeabi_ddiv>
   d542a:	f108 0801 	add.w	r8, r8, #1
   d542e:	e7f4      	b.n	d541a <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d5430:	4632      	mov	r2, r6
   d5432:	463b      	mov	r3, r7
   d5434:	f001 fba2 	bl	d6b7c <__adddf3>
   d5438:	460f      	mov	r7, r1
   d543a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d543c:	f002 f828 	bl	d7490 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5440:	220a      	movs	r2, #10
   d5442:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d5444:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5446:	4650      	mov	r0, sl
   d5448:	f7ff ff43 	bl	d52d2 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d544c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d544e:	b37d      	cbz	r5, d54b0 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d5450:	4640      	mov	r0, r8
   d5452:	f001 fccf 	bl	d6df4 <__aeabi_ui2d>
   d5456:	4602      	mov	r2, r0
   d5458:	460b      	mov	r3, r1
   d545a:	4630      	mov	r0, r6
   d545c:	4639      	mov	r1, r7
   d545e:	f001 fb8b 	bl	d6b78 <__aeabi_dsub>
   d5462:	4606      	mov	r6, r0
   d5464:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5466:	4650      	mov	r0, sl
   d5468:	491b      	ldr	r1, [pc, #108]	; (d54d8 <_ZN5Print10printFloatEdh+0x160>)
   d546a:	f7ff ff0f 	bl	d528c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d546e:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d5470:	4b18      	ldr	r3, [pc, #96]	; (d54d4 <_ZN5Print10printFloatEdh+0x15c>)
   d5472:	2200      	movs	r2, #0
   d5474:	4630      	mov	r0, r6
   d5476:	4639      	mov	r1, r7
   d5478:	f001 fd32 	bl	d6ee0 <__aeabi_dmul>
   d547c:	460f      	mov	r7, r1
   d547e:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d5480:	f001 ffde 	bl	d7440 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d5484:	220a      	movs	r2, #10
   d5486:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d5488:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d548a:	4650      	mov	r0, sl
   d548c:	f7ff ff50 	bl	d5330 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d5490:	4404      	add	r4, r0
    remainder -= toPrint;
   d5492:	4640      	mov	r0, r8
   d5494:	f001 fcbe 	bl	d6e14 <__aeabi_i2d>
   d5498:	4602      	mov	r2, r0
   d549a:	460b      	mov	r3, r1
   d549c:	4630      	mov	r0, r6
   d549e:	4639      	mov	r1, r7
   d54a0:	f001 fb6a 	bl	d6b78 <__aeabi_dsub>
   d54a4:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d54a6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d54aa:	4606      	mov	r6, r0
   d54ac:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d54ae:	d1df      	bne.n	d5470 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d54b0:	4620      	mov	r0, r4
   d54b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d54b6:	bf00      	nop
   d54b8:	000d7b70 	.word	0x000d7b70
   d54bc:	7fefffff 	.word	0x7fefffff
   d54c0:	000d7b7a 	.word	0x000d7b7a
   d54c4:	41efffff 	.word	0x41efffff
   d54c8:	000d7b74 	.word	0x000d7b74
   d54cc:	c1efffff 	.word	0xc1efffff
   d54d0:	3fe00000 	.word	0x3fe00000
   d54d4:	40240000 	.word	0x40240000
   d54d8:	000d7b78 	.word	0x000d7b78

000d54dc <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d54dc:	b2c9      	uxtb	r1, r1
   d54de:	f7ff bf4b 	b.w	d5378 <_ZN5Print10printFloatEdh>

000d54e2 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d54e2:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d54e4:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d54e6:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d54e8:	f7ff ff46 	bl	d5378 <_ZN5Print10printFloatEdh>
   d54ec:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d54ee:	4628      	mov	r0, r5
   d54f0:	f7ff fee3 	bl	d52ba <_ZN5Print7printlnEv>
  return n;
}
   d54f4:	4420      	add	r0, r4
   d54f6:	bd38      	pop	{r3, r4, r5, pc}

000d54f8 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d54f8:	b40c      	push	{r2, r3}
   d54fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d54fe:	b087      	sub	sp, #28
   d5500:	af00      	add	r7, sp, #0
   d5502:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5506:	4605      	mov	r5, r0
   d5508:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d550c:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d550e:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5510:	4623      	mov	r3, r4
   d5512:	464a      	mov	r2, r9
   d5514:	2114      	movs	r1, #20
   d5516:	1d38      	adds	r0, r7, #4
   d5518:	f7ff fb9c 	bl	d4c54 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d551c:	2813      	cmp	r0, #19
   d551e:	d805      	bhi.n	d552c <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5520:	1d39      	adds	r1, r7, #4
   d5522:	4628      	mov	r0, r5
   d5524:	f7ff feb2 	bl	d528c <_ZN5Print5writeEPKc>
   d5528:	4604      	mov	r4, r0
   d552a:	e013      	b.n	d5554 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d552c:	f100 0308 	add.w	r3, r0, #8
   d5530:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d5534:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5536:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d553a:	1c41      	adds	r1, r0, #1
   d553c:	4623      	mov	r3, r4
   d553e:	464a      	mov	r2, r9
   d5540:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5542:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5544:	f7ff fb86 	bl	d4c54 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5548:	4669      	mov	r1, sp
   d554a:	4628      	mov	r0, r5
   d554c:	f7ff fe9e 	bl	d528c <_ZN5Print5writeEPKc>
   d5550:	4604      	mov	r4, r0
   d5552:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5554:	b11e      	cbz	r6, d555e <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5556:	4628      	mov	r0, r5
   d5558:	f7ff feaf 	bl	d52ba <_ZN5Print7printlnEv>
   d555c:	4404      	add	r4, r0
    return n;
}
   d555e:	4620      	mov	r0, r4
   d5560:	371c      	adds	r7, #28
   d5562:	46bd      	mov	sp, r7
   d5564:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5568:	b002      	add	sp, #8
   d556a:	4770      	bx	lr

000d556c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d556c:	4b01      	ldr	r3, [pc, #4]	; (d5574 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d556e:	4a02      	ldr	r2, [pc, #8]	; (d5578 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5570:	601a      	str	r2, [r3, #0]
   d5572:	4770      	bx	lr
   d5574:	2003e3b4 	.word	0x2003e3b4
   d5578:	000d7bf1 	.word	0x000d7bf1

000d557c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d557c:	4b02      	ldr	r3, [pc, #8]	; (d5588 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d557e:	681a      	ldr	r2, [r3, #0]
   d5580:	4b02      	ldr	r3, [pc, #8]	; (d558c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5582:	601a      	str	r2, [r3, #0]
   d5584:	4770      	bx	lr
   d5586:	bf00      	nop
   d5588:	2003e240 	.word	0x2003e240
   d558c:	2003e3b8 	.word	0x2003e3b8

000d5590 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5590:	2100      	movs	r1, #0
   d5592:	f7ff baa3 	b.w	d4adc <system_delay_ms>

000d5596 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5596:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5598:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d559a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d559c:	b113      	cbz	r3, d55a4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d559e:	2203      	movs	r2, #3
   d55a0:	4601      	mov	r1, r0
   d55a2:	4798      	blx	r3
    }
   d55a4:	4620      	mov	r0, r4
   d55a6:	bd10      	pop	{r4, pc}

000d55a8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d55a8:	b510      	push	{r4, lr}
   d55aa:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d55ac:	f7ff fff3 	bl	d5596 <_ZNSt14_Function_baseD1Ev>
   d55b0:	4620      	mov	r0, r4
   d55b2:	bd10      	pop	{r4, pc}

000d55b4 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d55b4:	b513      	push	{r0, r1, r4, lr}
   d55b6:	460b      	mov	r3, r1
   d55b8:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55ba:	c803      	ldmia	r0, {r0, r1}
   d55bc:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d55c0:	e893 0003 	ldmia.w	r3, {r0, r1}
   d55c4:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d55c8:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d55cc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d55d0:	b002      	add	sp, #8
   d55d2:	bd10      	pop	{r4, pc}

000d55d4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d55d4:	4803      	ldr	r0, [pc, #12]	; (d55e4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d55d6:	4a04      	ldr	r2, [pc, #16]	; (d55e8 <_GLOBAL__sub_I_RGB+0x14>)
   d55d8:	4904      	ldr	r1, [pc, #16]	; (d55ec <_GLOBAL__sub_I_RGB+0x18>)
   d55da:	2300      	movs	r3, #0
   d55dc:	6083      	str	r3, [r0, #8]
   d55de:	f001 b843 	b.w	d6668 <__aeabi_atexit>
   d55e2:	bf00      	nop
   d55e4:	2003e3bc 	.word	0x2003e3bc
   d55e8:	2003e2b0 	.word	0x2003e2b0
   d55ec:	000d55a9 	.word	0x000d55a9

000d55f0 <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d55f0:	4770      	bx	lr

000d55f2 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d55f2:	7d00      	ldrb	r0, [r0, #20]
   d55f4:	4770      	bx	lr
	...

000d55f8 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d55f8:	7d03      	ldrb	r3, [r0, #20]
   d55fa:	b11b      	cbz	r3, d5604 <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d55fc:	6983      	ldr	r3, [r0, #24]
   d55fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d5602:	d102      	bne.n	d560a <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d5604:	ed9f 0a05 	vldr	s0, [pc, #20]	; d561c <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d5608:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d560a:	ee07 3a90 	vmov	s15, r3
   d560e:	ed9f 7a04 	vldr	s14, [pc, #16]	; d5620 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d5612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5616:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d561a:	4770      	bx	lr
   d561c:	00000000 	.word	0x00000000
   d5620:	42c80000 	.word	0x42c80000

000d5624 <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d5624:	7d03      	ldrb	r3, [r0, #20]
   d5626:	b11b      	cbz	r3, d5630 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d5628:	6a03      	ldr	r3, [r0, #32]
   d562a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d562e:	d102      	bne.n	d5636 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d5630:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5648 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d5634:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d5636:	ee07 3a90 	vmov	s15, r3
   d563a:	ed9f 7a04 	vldr	s14, [pc, #16]	; d564c <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d563e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5642:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d5646:	4770      	bx	lr
   d5648:	00000000 	.word	0x00000000
   d564c:	42c80000 	.word	0x42c80000

000d5650 <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
   d5650:	b570      	push	{r4, r5, r6, lr}
   d5652:	460d      	mov	r5, r1
   d5654:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d5656:	220a      	movs	r2, #10
   d5658:	6881      	ldr	r1, [r0, #8]
   d565a:	4628      	mov	r0, r5
   d565c:	f7ff fe8a 	bl	d5374 <_ZN5Print5printEii>
    n += p.print(',');
   d5660:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d5662:	4604      	mov	r4, r0
    n += p.print(',');
   d5664:	4628      	mov	r0, r5
   d5666:	f7ff fe25 	bl	d52b4 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d566a:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d566c:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d566e:	68f1      	ldr	r1, [r6, #12]
   d5670:	4628      	mov	r0, r5
   d5672:	f7ff fe7f 	bl	d5374 <_ZN5Print5printEii>
    return n;
}
   d5676:	4420      	add	r0, r4
   d5678:	bd70      	pop	{r4, r5, r6, pc}

000d567a <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d567a:	f1a0 0004 	sub.w	r0, r0, #4
   d567e:	f7ff bfe7 	b.w	d5650 <_ZNK14CellularSignal7printToER5Print>

000d5682 <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d5682:	b510      	push	{r4, lr}
   d5684:	2128      	movs	r1, #40	; 0x28
   d5686:	4604      	mov	r4, r0
   d5688:	f000 fff3 	bl	d6672 <_ZdlPvj>
   d568c:	4620      	mov	r0, r4
   d568e:	bd10      	pop	{r4, pc}

000d5690 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d5690:	7d03      	ldrb	r3, [r0, #20]
   d5692:	b17b      	cbz	r3, d56b4 <_ZNK14CellularSignal10getQualityEv+0x24>
   d5694:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d5696:	2b00      	cmp	r3, #0
   d5698:	db0c      	blt.n	d56b4 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d569a:	ee07 3a90 	vmov	s15, r3
   d569e:	eddf 6a07 	vldr	s13, [pc, #28]	; d56bc <_ZNK14CellularSignal10getQualityEv+0x2c>
   d56a2:	ed9f 0a07 	vldr	s0, [pc, #28]	; d56c0 <_ZNK14CellularSignal10getQualityEv+0x30>
   d56a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d56aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d56ae:	ee27 0a80 	vmul.f32	s0, s15, s0
   d56b2:	4770      	bx	lr
    }

    return -1.0f;
   d56b4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d56b8:	4770      	bx	lr
   d56ba:	bf00      	nop
   d56bc:	477fff00 	.word	0x477fff00
   d56c0:	42c80000 	.word	0x42c80000

000d56c4 <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d56c4:	7d03      	ldrb	r3, [r0, #20]
   d56c6:	b17b      	cbz	r3, d56e8 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d56c8:	69c3      	ldr	r3, [r0, #28]
   d56ca:	2b00      	cmp	r3, #0
   d56cc:	db0c      	blt.n	d56e8 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d56ce:	ee07 3a90 	vmov	s15, r3
   d56d2:	eddf 6a07 	vldr	s13, [pc, #28]	; d56f0 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d56d6:	ed9f 0a07 	vldr	s0, [pc, #28]	; d56f4 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d56da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d56de:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d56e2:	ee27 0a80 	vmul.f32	s0, s15, s0
   d56e6:	4770      	bx	lr
    }

    return -1.0f;
   d56e8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d56ec:	4770      	bx	lr
   d56ee:	bf00      	nop
   d56f0:	477fff00 	.word	0x477fff00
   d56f4:	42c80000 	.word	0x42c80000

000d56f8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d56f8:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d56fa:	460d      	mov	r5, r1
   d56fc:	f100 0410 	add.w	r4, r0, #16
   d5700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5704:	e895 0003 	ldmia.w	r5, {r0, r1}
   d5708:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d570c:	2001      	movs	r0, #1
   d570e:	bd30      	pop	{r4, r5, pc}

000d5710 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5710:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5712:	4b0c      	ldr	r3, [pc, #48]	; (d5744 <serialEventRun+0x34>)
   d5714:	b133      	cbz	r3, d5724 <serialEventRun+0x14>
   d5716:	f000 fc29 	bl	d5f6c <_Z16_fetch_usbserialv>
   d571a:	6803      	ldr	r3, [r0, #0]
   d571c:	691b      	ldr	r3, [r3, #16]
   d571e:	4798      	blx	r3
   d5720:	2800      	cmp	r0, #0
   d5722:	dc09      	bgt.n	d5738 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5724:	4b08      	ldr	r3, [pc, #32]	; (d5748 <serialEventRun+0x38>)
   d5726:	b163      	cbz	r3, d5742 <serialEventRun+0x32>
   d5728:	f000 fd28 	bl	d617c <_Z22__fetch_global_Serial1v>
   d572c:	6803      	ldr	r3, [r0, #0]
   d572e:	691b      	ldr	r3, [r3, #16]
   d5730:	4798      	blx	r3
   d5732:	2800      	cmp	r0, #0
   d5734:	dc03      	bgt.n	d573e <serialEventRun+0x2e>
   d5736:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5738:	f3af 8000 	nop.w
   d573c:	e7f2      	b.n	d5724 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d573e:	f3af 8000 	nop.w
   d5742:	bd08      	pop	{r3, pc}
	...

000d574c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d574c:	b508      	push	{r3, lr}
	serialEventRun();
   d574e:	f7ff ffdf 	bl	d5710 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5752:	f7ff f8bb 	bl	d48cc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5756:	4b01      	ldr	r3, [pc, #4]	; (d575c <_post_loop+0x10>)
   d5758:	6018      	str	r0, [r3, #0]
   d575a:	bd08      	pop	{r3, pc}
   d575c:	2003e734 	.word	0x2003e734

000d5760 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5760:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5762:	2300      	movs	r3, #0
   d5764:	9300      	str	r3, [sp, #0]
   d5766:	461a      	mov	r2, r3
   d5768:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d576c:	f7ff f9d8 	bl	d4b20 <system_ctrl_set_result>
}
   d5770:	b003      	add	sp, #12
   d5772:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5778 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5778:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d577a:	8843      	ldrh	r3, [r0, #2]
   d577c:	2b0a      	cmp	r3, #10
   d577e:	d008      	beq.n	d5792 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5780:	2b50      	cmp	r3, #80	; 0x50
   d5782:	d109      	bne.n	d5798 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5784:	4b09      	ldr	r3, [pc, #36]	; (d57ac <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5786:	681b      	ldr	r3, [r3, #0]
   d5788:	b13b      	cbz	r3, d579a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d578a:	b003      	add	sp, #12
   d578c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5790:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5792:	f7ff ffe5 	bl	d5760 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5796:	e006      	b.n	d57a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5798:	2300      	movs	r3, #0
   d579a:	9300      	str	r3, [sp, #0]
   d579c:	461a      	mov	r2, r3
   d579e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d57a2:	f7ff f9bd 	bl	d4b20 <system_ctrl_set_result>
        break;
    }
}
   d57a6:	b003      	add	sp, #12
   d57a8:	f85d fb04 	ldr.w	pc, [sp], #4
   d57ac:	2003e3cc 	.word	0x2003e3cc

000d57b0 <module_user_init_hook>:

void module_user_init_hook()
{
   d57b0:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d57b2:	f7ff f883 	bl	d48bc <HAL_RNG_GetRandomNumber>
   d57b6:	4604      	mov	r4, r0
    srand(seed);
   d57b8:	f002 f860 	bl	d787c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d57bc:	4b07      	ldr	r3, [pc, #28]	; (d57dc <module_user_init_hook+0x2c>)
   d57be:	b113      	cbz	r3, d57c6 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d57c0:	4620      	mov	r0, r4
   d57c2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d57c6:	2100      	movs	r1, #0
   d57c8:	4804      	ldr	r0, [pc, #16]	; (d57dc <module_user_init_hook+0x2c>)
   d57ca:	f7ff fa23 	bl	d4c14 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d57ce:	2100      	movs	r1, #0
   d57d0:	4803      	ldr	r0, [pc, #12]	; (d57e0 <module_user_init_hook+0x30>)
}
   d57d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d57d6:	f7ff b999 	b.w	d4b0c <system_ctrl_set_app_request_handler>
   d57da:	bf00      	nop
   d57dc:	00000000 	.word	0x00000000
   d57e0:	000d5779 	.word	0x000d5779

000d57e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d57e4:	4770      	bx	lr

000d57e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d57e6:	2000      	movs	r0, #0
   d57e8:	4770      	bx	lr

000d57ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d57ea:	b510      	push	{r4, lr}
   d57ec:	2110      	movs	r1, #16
   d57ee:	4604      	mov	r4, r0
   d57f0:	f000 ff3f 	bl	d6672 <_ZdlPvj>
   d57f4:	4620      	mov	r0, r4
   d57f6:	bd10      	pop	{r4, pc}

000d57f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d57f8:	b508      	push	{r3, lr}
      { delete this; }
   d57fa:	b108      	cbz	r0, d5800 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d57fc:	f7ff fff5 	bl	d57ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5800:	bd08      	pop	{r3, pc}

000d5802 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5802:	2200      	movs	r2, #0
   d5804:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5806:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5808:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d580c:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d580e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d5812:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5814:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5816:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5818:	680c      	ldr	r4, [r1, #0]
   d581a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d581c:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d581e:	bd10      	pop	{r4, pc}

000d5820 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5820:	b510      	push	{r4, lr}
   d5822:	4604      	mov	r4, r0
    free((void*)msg_);
   d5824:	6800      	ldr	r0, [r0, #0]
   d5826:	f7ff fa05 	bl	d4c34 <free>
}
   d582a:	4620      	mov	r0, r4
   d582c:	bd10      	pop	{r4, pc}

000d582e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d582e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5830:	68c4      	ldr	r4, [r0, #12]
   d5832:	b1f4      	cbz	r4, d5872 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5834:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5836:	2b02      	cmp	r3, #2
   d5838:	d103      	bne.n	d5842 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d583a:	f104 000c 	add.w	r0, r4, #12
   d583e:	f7ff ffef 	bl	d5820 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5842:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5844:	b135      	cbz	r5, d5854 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5846:	4628      	mov	r0, r5
   d5848:	f7ff fea5 	bl	d5596 <_ZNSt14_Function_baseD1Ev>
   d584c:	2110      	movs	r1, #16
   d584e:	4628      	mov	r0, r5
   d5850:	f000 ff0f 	bl	d6672 <_ZdlPvj>
   d5854:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5856:	b135      	cbz	r5, d5866 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5858:	4628      	mov	r0, r5
   d585a:	f7ff fe9c 	bl	d5596 <_ZNSt14_Function_baseD1Ev>
   d585e:	2110      	movs	r1, #16
   d5860:	4628      	mov	r0, r5
   d5862:	f000 ff06 	bl	d6672 <_ZdlPvj>
   d5866:	4620      	mov	r0, r4
   d5868:	2114      	movs	r1, #20
   d586a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d586e:	f000 bf00 	b.w	d6672 <_ZdlPvj>
   d5872:	bd38      	pop	{r3, r4, r5, pc}

000d5874 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d5874:	b510      	push	{r4, lr}
   d5876:	b088      	sub	sp, #32
   d5878:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d587a:	4668      	mov	r0, sp
   d587c:	f7ff fc03 	bl	d5086 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d5880:	4669      	mov	r1, sp
   d5882:	a804      	add	r0, sp, #16
   d5884:	f7ff fc3e 	bl	d5104 <_ZN6StringC1ERKS_>
   d5888:	a804      	add	r0, sp, #16
   d588a:	47a0      	blx	r4
   d588c:	4604      	mov	r4, r0
   d588e:	a804      	add	r0, sp, #16
   d5890:	f7ff fbb2 	bl	d4ff8 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5894:	4668      	mov	r0, sp
   d5896:	f7ff fbaf 	bl	d4ff8 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d589a:	4620      	mov	r0, r4
   d589c:	b008      	add	sp, #32
   d589e:	bd10      	pop	{r4, pc}

000d58a0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d58a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d58a2:	2410      	movs	r4, #16
   d58a4:	b085      	sub	sp, #20
   d58a6:	4607      	mov	r7, r0
   d58a8:	460e      	mov	r6, r1
   d58aa:	4615      	mov	r5, r2
   d58ac:	2100      	movs	r1, #0
   d58ae:	4622      	mov	r2, r4
   d58b0:	4668      	mov	r0, sp
   d58b2:	f001 ffda 	bl	d786a <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d58b6:	2200      	movs	r2, #0
   d58b8:	4669      	mov	r1, sp
   d58ba:	4610      	mov	r0, r2
         size = sizeof(*this);
   d58bc:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d58c0:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d58c2:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d58c4:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d58c6:	f7ff f98d 	bl	d4be4 <spark_function>
}
   d58ca:	b005      	add	sp, #20
   d58cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d58ce <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d58ce:	b513      	push	{r0, r1, r4, lr}
   d58d0:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d58d2:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d58d6:	2300      	movs	r3, #0
   d58d8:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d58da:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d58dc:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d58de:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d58e0:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d58e2:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d58e4:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d58e6:	f7fe fbff 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d58ea:	4620      	mov	r0, r4
   d58ec:	b002      	add	sp, #8
   d58ee:	bd10      	pop	{r4, pc}

000d58f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d58f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d58f2:	460c      	mov	r4, r1
   d58f4:	ad02      	add	r5, sp, #8
   d58f6:	f854 3b04 	ldr.w	r3, [r4], #4
   d58fa:	f845 3d08 	str.w	r3, [r5, #-8]!
   d58fe:	4606      	mov	r6, r0
   d5900:	460f      	mov	r7, r1
   d5902:	a801      	add	r0, sp, #4
   d5904:	4621      	mov	r1, r4
   d5906:	f7ff fc9b 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d590a:	4629      	mov	r1, r5
   d590c:	4630      	mov	r0, r6
   d590e:	f7ff ffde 	bl	d58ce <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5912:	a801      	add	r0, sp, #4
   d5914:	f7fe fbe8 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5918:	4620      	mov	r0, r4
   d591a:	f7fe fbe5 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d591e:	4638      	mov	r0, r7
   d5920:	2108      	movs	r1, #8
   d5922:	f000 fea6 	bl	d6672 <_ZdlPvj>
        return p;
    }
   d5926:	4630      	mov	r0, r6
   d5928:	b003      	add	sp, #12
   d592a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d592c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d592c:	b538      	push	{r3, r4, r5, lr}
   d592e:	2300      	movs	r3, #0
   d5930:	4604      	mov	r4, r0
   d5932:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5934:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5936:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5938:	f7fe fbaf 	bl	d409a <_Znwj>
   d593c:	b128      	cbz	r0, d594a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d593e:	2301      	movs	r3, #1
   d5940:	6043      	str	r3, [r0, #4]
   d5942:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5944:	4b02      	ldr	r3, [pc, #8]	; (d5950 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5946:	6003      	str	r3, [r0, #0]
   d5948:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d594a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d594c:	4620      	mov	r0, r4
   d594e:	bd38      	pop	{r3, r4, r5, pc}
   d5950:	000d7cc4 	.word	0x000d7cc4

000d5954 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5954:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5956:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5958:	b90a      	cbnz	r2, d595e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d595a:	f000 fe8c 	bl	d6676 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d595e:	68c3      	ldr	r3, [r0, #12]
    }
   d5960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5964:	4718      	bx	r3

000d5966 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5966:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5968:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d596a:	f100 0110 	add.w	r1, r0, #16
   d596e:	f7ff fff1 	bl	d5954 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5972:	bd08      	pop	{r3, pc}

000d5974 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5974:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5976:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5978:	b90a      	cbnz	r2, d597e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d597a:	f000 fe7c 	bl	d6676 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d597e:	68c3      	ldr	r3, [r0, #12]
    }
   d5980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5984:	4718      	bx	r3

000d5986 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5986:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5988:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d598a:	f100 0110 	add.w	r1, r0, #16
   d598e:	f7ff fff1 	bl	d5974 <_ZNKSt8functionIFvRKbEEclES1_>
   d5992:	bd08      	pop	{r3, pc}

000d5994 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5994:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5996:	2300      	movs	r3, #0
   d5998:	6083      	str	r3, [r0, #8]
   d599a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d599c:	4604      	mov	r4, r0
   d599e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d59a0:	b12b      	cbz	r3, d59ae <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d59a2:	2202      	movs	r2, #2
   d59a4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d59a6:	68eb      	ldr	r3, [r5, #12]
   d59a8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d59aa:	68ab      	ldr	r3, [r5, #8]
   d59ac:	60a3      	str	r3, [r4, #8]
	}
    }
   d59ae:	4620      	mov	r0, r4
   d59b0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d59b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d59b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d59b6:	b089      	sub	sp, #36	; 0x24
   d59b8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d59ba:	4668      	mov	r0, sp
   d59bc:	f7ff ff21 	bl	d5802 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d59c0:	2300      	movs	r3, #0
   d59c2:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d59c6:	f04f 0202 	mov.w	r2, #2
   d59ca:	e8d4 3f4f 	ldrexb	r3, [r4]
   d59ce:	2b00      	cmp	r3, #0
   d59d0:	d103      	bne.n	d59da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d59d2:	e8c4 2f41 	strexb	r1, r2, [r4]
   d59d6:	2900      	cmp	r1, #0
   d59d8:	d1f7      	bne.n	d59ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d59da:	d002      	beq.n	d59e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d59dc:	f88d 3008 	strb.w	r3, [sp, #8]
   d59e0:	e063      	b.n	d5aaa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d59e2:	f114 050c 	adds.w	r5, r4, #12
   d59e6:	d003      	beq.n	d59f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d59e8:	4669      	mov	r1, sp
   d59ea:	4628      	mov	r0, r5
   d59ec:	f7ff ff09 	bl	d5802 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d59f0:	f3bf 8f5f 	dmb	sy
   d59f4:	2301      	movs	r3, #1
   d59f6:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d59f8:	2000      	movs	r0, #0
   d59fa:	f104 0308 	add.w	r3, r4, #8
   d59fe:	f3bf 8f5f 	dmb	sy
   d5a02:	e853 6f00 	ldrex	r6, [r3]
   d5a06:	e843 0200 	strex	r2, r0, [r3]
   d5a0a:	2a00      	cmp	r2, #0
   d5a0c:	d1f9      	bne.n	d5a02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d5a0e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5a12:	2e00      	cmp	r6, #0
   d5a14:	d049      	beq.n	d5aaa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5a16:	f7ff f869 	bl	d4aec <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5a1a:	b120      	cbz	r0, d5a26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5a1c:	4629      	mov	r1, r5
   d5a1e:	4630      	mov	r0, r6
   d5a20:	f7ff ff98 	bl	d5954 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5a24:	e03a      	b.n	d5a9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5a26:	4631      	mov	r1, r6
   d5a28:	a802      	add	r0, sp, #8
   d5a2a:	f7ff ffb3 	bl	d5994 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5a2e:	68e0      	ldr	r0, [r4, #12]
   d5a30:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5a34:	b108      	cbz	r0, d5a3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5a36:	f001 ff51 	bl	d78dc <strdup>
   d5a3a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5a3c:	2010      	movs	r0, #16
   d5a3e:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5a42:	f7fe fb2a 	bl	d409a <_Znwj>
   d5a46:	4605      	mov	r5, r0
   d5a48:	b1e8      	cbz	r0, d5a86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5a4a:	2700      	movs	r7, #0
   d5a4c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5a4e:	2018      	movs	r0, #24
   d5a50:	f7fe fb23 	bl	d409a <_Znwj>
   d5a54:	4604      	mov	r4, r0
   d5a56:	b188      	cbz	r0, d5a7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5a58:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5a5a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5a5c:	a802      	add	r0, sp, #8
   d5a5e:	f7ff fda9 	bl	d55b4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a62:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5a64:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a66:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a68:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5a6a:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5a6c:	a906      	add	r1, sp, #24
   d5a6e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a70:	60e3      	str	r3, [r4, #12]
   d5a72:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5a76:	9205      	str	r2, [sp, #20]
   d5a78:	f7ff fec3 	bl	d5802 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5a7c:	4b0d      	ldr	r3, [pc, #52]	; (d5ab4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d5a7e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5a80:	4b0d      	ldr	r3, [pc, #52]	; (d5ab8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5a82:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5a84:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5a86:	a806      	add	r0, sp, #24
   d5a88:	f7ff feca 	bl	d5820 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a8c:	a802      	add	r0, sp, #8
   d5a8e:	f7ff fd82 	bl	d5596 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5a92:	2200      	movs	r2, #0
   d5a94:	4629      	mov	r1, r5
   d5a96:	4809      	ldr	r0, [pc, #36]	; (d5abc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5a98:	f7ff f830 	bl	d4afc <application_thread_invoke>
   d5a9c:	4630      	mov	r0, r6
   d5a9e:	f7ff fd7a 	bl	d5596 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5aa2:	2110      	movs	r1, #16
   d5aa4:	4630      	mov	r0, r6
   d5aa6:	f000 fde4 	bl	d6672 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d5aaa:	4668      	mov	r0, sp
   d5aac:	f7ff feb8 	bl	d5820 <_ZN8particle5ErrorD1Ev>
    }
   d5ab0:	b009      	add	sp, #36	; 0x24
   d5ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5ab4:	000d5967 	.word	0x000d5967
   d5ab8:	000d5bdd 	.word	0x000d5bdd
   d5abc:	000d61c9 	.word	0x000d61c9

000d5ac0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5ac4:	b08b      	sub	sp, #44	; 0x2c
   d5ac6:	4606      	mov	r6, r0
   d5ac8:	460f      	mov	r7, r1
   d5aca:	4690      	mov	r8, r2
   d5acc:	4699      	mov	r9, r3
   d5ace:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5ad2:	f7ff f88f 	bl	d4bf4 <spark_cloud_flag_connected>
   d5ad6:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d5ad8:	4683      	mov	fp, r0
   d5ada:	bb30      	cbnz	r0, d5b2a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5adc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5ae0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5ae2:	a905      	add	r1, sp, #20
   d5ae4:	4628      	mov	r0, r5
   d5ae6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5aea:	f7ff fe8a 	bl	d5802 <_ZN8particle5ErrorC1EOS0_>
   d5aee:	2014      	movs	r0, #20
   d5af0:	f7fe fad3 	bl	d409a <_Znwj>
   d5af4:	4604      	mov	r4, r0
   d5af6:	b158      	cbz	r0, d5b10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5af8:	2302      	movs	r3, #2
   d5afa:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5afc:	2301      	movs	r3, #1
   d5afe:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5b00:	f8c0 b004 	str.w	fp, [r0, #4]
   d5b04:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5b08:	4629      	mov	r1, r5
   d5b0a:	300c      	adds	r0, #12
   d5b0c:	f7ff fe79 	bl	d5802 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5b10:	4630      	mov	r0, r6
   d5b12:	4621      	mov	r1, r4
   d5b14:	f840 4b04 	str.w	r4, [r0], #4
   d5b18:	f7ff ff08 	bl	d592c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5b1c:	4628      	mov	r0, r5
   d5b1e:	f7ff fe7f 	bl	d5820 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5b22:	a805      	add	r0, sp, #20
   d5b24:	f7ff fe7c 	bl	d5820 <_ZN8particle5ErrorD1Ev>
   d5b28:	e052      	b.n	d5bd0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5b2a:	2400      	movs	r4, #0
   d5b2c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5b2e:	2014      	movs	r0, #20
   d5b30:	606c      	str	r4, [r5, #4]
   d5b32:	60ac      	str	r4, [r5, #8]
   d5b34:	9307      	str	r3, [sp, #28]
   d5b36:	f7fe fab0 	bl	d409a <_Znwj>
   d5b3a:	4601      	mov	r1, r0
   d5b3c:	b118      	cbz	r0, d5b46 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d5b3e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5b40:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5b42:	6044      	str	r4, [r0, #4]
   d5b44:	6084      	str	r4, [r0, #8]
   d5b46:	a804      	add	r0, sp, #16
   d5b48:	9103      	str	r1, [sp, #12]
   d5b4a:	f7ff feef 	bl	d592c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5b4e:	4b22      	ldr	r3, [pc, #136]	; (d5bd8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5b50:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5b52:	2008      	movs	r0, #8
   d5b54:	f7fe faa1 	bl	d409a <_Znwj>
   d5b58:	4604      	mov	r4, r0
   d5b5a:	b128      	cbz	r0, d5b68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5b5c:	9b03      	ldr	r3, [sp, #12]
   d5b5e:	f840 3b04 	str.w	r3, [r0], #4
   d5b62:	a904      	add	r1, sp, #16
   d5b64:	f7ff fb6c 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5b68:	9500      	str	r5, [sp, #0]
   d5b6a:	fa5f f38a 	uxtb.w	r3, sl
   d5b6e:	464a      	mov	r2, r9
   d5b70:	4641      	mov	r1, r8
   d5b72:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5b74:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5b76:	f7ff f845 	bl	d4c04 <spark_send_event>
   d5b7a:	b920      	cbnz	r0, d5b86 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5b7c:	9b03      	ldr	r3, [sp, #12]
   d5b7e:	785b      	ldrb	r3, [r3, #1]
   d5b80:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5b84:	b183      	cbz	r3, d5ba8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5b86:	9b03      	ldr	r3, [sp, #12]
   d5b88:	9305      	str	r3, [sp, #20]
   d5b8a:	a904      	add	r1, sp, #16
   d5b8c:	a806      	add	r0, sp, #24
   d5b8e:	f7ff fb57 	bl	d5240 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5b92:	a905      	add	r1, sp, #20
   d5b94:	4630      	mov	r0, r6
   d5b96:	f7ff fe9a 	bl	d58ce <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5b9a:	a806      	add	r0, sp, #24
   d5b9c:	f7fe faa4 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ba0:	a804      	add	r0, sp, #16
   d5ba2:	f7fe faa1 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ba6:	e013      	b.n	d5bd0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5ba8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5bac:	a905      	add	r1, sp, #20
   d5bae:	a803      	add	r0, sp, #12
   d5bb0:	9205      	str	r2, [sp, #20]
   d5bb2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5bb6:	f7ff fefd 	bl	d59b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5bba:	a805      	add	r0, sp, #20
   d5bbc:	f7ff fe30 	bl	d5820 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5bc0:	a805      	add	r0, sp, #20
   d5bc2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5bc4:	f7ff fe94 	bl	d58f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d5bc8:	a806      	add	r0, sp, #24
   d5bca:	f7fe fa8d 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5bce:	e7da      	b.n	d5b86 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d5bd0:	4630      	mov	r0, r6
   d5bd2:	b00b      	add	sp, #44	; 0x2c
   d5bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5bd8:	000d5d4d 	.word	0x000d5d4d

000d5bdc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5bdc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5be0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5be2:	d006      	beq.n	d5bf2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5be4:	2a03      	cmp	r2, #3
   d5be6:	d017      	beq.n	d5c18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5be8:	2a01      	cmp	r2, #1
   d5bea:	d122      	bne.n	d5c32 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5bec:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5bee:	6003      	str	r3, [r0, #0]
	      break;
   d5bf0:	e01f      	b.n	d5c32 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5bf2:	2018      	movs	r0, #24
   d5bf4:	680e      	ldr	r6, [r1, #0]
   d5bf6:	f7fe fa50 	bl	d409a <_Znwj>
   d5bfa:	4605      	mov	r5, r0
   d5bfc:	b150      	cbz	r0, d5c14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5bfe:	4631      	mov	r1, r6
   d5c00:	f7ff fec8 	bl	d5994 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5c04:	6930      	ldr	r0, [r6, #16]
   d5c06:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5c0a:	b108      	cbz	r0, d5c10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5c0c:	f001 fe66 	bl	d78dc <strdup>
   d5c10:	6128      	str	r0, [r5, #16]
   d5c12:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5c14:	6025      	str	r5, [r4, #0]
   d5c16:	e00c      	b.n	d5c32 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5c18:	6804      	ldr	r4, [r0, #0]
   d5c1a:	b154      	cbz	r4, d5c32 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5c1c:	f104 0010 	add.w	r0, r4, #16
   d5c20:	f7ff fdfe 	bl	d5820 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5c24:	4620      	mov	r0, r4
   d5c26:	f7ff fcb6 	bl	d5596 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5c2a:	2118      	movs	r1, #24
   d5c2c:	4620      	mov	r0, r4
   d5c2e:	f000 fd20 	bl	d6672 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5c32:	2000      	movs	r0, #0
   d5c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c36 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5c36:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5c38:	2300      	movs	r3, #0
   d5c3a:	6083      	str	r3, [r0, #8]
   d5c3c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5c3e:	4604      	mov	r4, r0
   d5c40:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5c42:	b12b      	cbz	r3, d5c50 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5c44:	2202      	movs	r2, #2
   d5c46:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5c48:	68eb      	ldr	r3, [r5, #12]
   d5c4a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5c4c:	68ab      	ldr	r3, [r5, #8]
   d5c4e:	60a3      	str	r3, [r4, #8]
	}
    }
   d5c50:	4620      	mov	r0, r4
   d5c52:	bd38      	pop	{r3, r4, r5, pc}

000d5c54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5c54:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5c56:	b570      	push	{r4, r5, r6, lr}
   d5c58:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5c5a:	d006      	beq.n	d5c6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5c5c:	2a03      	cmp	r2, #3
   d5c5e:	d011      	beq.n	d5c84 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5c60:	2a01      	cmp	r2, #1
   d5c62:	d118      	bne.n	d5c96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5c64:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5c66:	6003      	str	r3, [r0, #0]
	      break;
   d5c68:	e015      	b.n	d5c96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5c6a:	2014      	movs	r0, #20
   d5c6c:	680e      	ldr	r6, [r1, #0]
   d5c6e:	f7fe fa14 	bl	d409a <_Znwj>
   d5c72:	4605      	mov	r5, r0
   d5c74:	b120      	cbz	r0, d5c80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5c76:	4631      	mov	r1, r6
   d5c78:	f7ff ffdd 	bl	d5c36 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5c7c:	7c33      	ldrb	r3, [r6, #16]
   d5c7e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5c80:	6025      	str	r5, [r4, #0]
   d5c82:	e008      	b.n	d5c96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5c84:	6804      	ldr	r4, [r0, #0]
   d5c86:	b134      	cbz	r4, d5c96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5c88:	4620      	mov	r0, r4
   d5c8a:	f7ff fc84 	bl	d5596 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5c8e:	2114      	movs	r1, #20
   d5c90:	4620      	mov	r0, r4
   d5c92:	f000 fcee 	bl	d6672 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5c96:	2000      	movs	r0, #0
   d5c98:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5c9c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5c9c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5c9e:	2300      	movs	r3, #0
   d5ca0:	b087      	sub	sp, #28
   d5ca2:	460c      	mov	r4, r1
   d5ca4:	f3bf 8f5f 	dmb	sy
   d5ca8:	e850 6f00 	ldrex	r6, [r0]
   d5cac:	e840 3200 	strex	r2, r3, [r0]
   d5cb0:	2a00      	cmp	r2, #0
   d5cb2:	d1f9      	bne.n	d5ca8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5cb4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5cb8:	2e00      	cmp	r6, #0
   d5cba:	d03f      	beq.n	d5d3c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5cbc:	4618      	mov	r0, r3
   d5cbe:	f7fe ff15 	bl	d4aec <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5cc2:	4607      	mov	r7, r0
   d5cc4:	b120      	cbz	r0, d5cd0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5cc6:	4621      	mov	r1, r4
   d5cc8:	4630      	mov	r0, r6
   d5cca:	f7ff fe53 	bl	d5974 <_ZNKSt8functionIFvRKbEEclES1_>
   d5cce:	e02e      	b.n	d5d2e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5cd0:	4631      	mov	r1, r6
   d5cd2:	a801      	add	r0, sp, #4
   d5cd4:	f7ff ffaf 	bl	d5c36 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5cd8:	7823      	ldrb	r3, [r4, #0]
   d5cda:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5cde:	2010      	movs	r0, #16
   d5ce0:	f7fe f9db 	bl	d409a <_Znwj>
   d5ce4:	4605      	mov	r5, r0
   d5ce6:	b1d0      	cbz	r0, d5d1e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5ce8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5cea:	2014      	movs	r0, #20
   d5cec:	f7fe f9d5 	bl	d409a <_Znwj>
   d5cf0:	4604      	mov	r4, r0
   d5cf2:	b178      	cbz	r0, d5d14 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5cf4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5cf6:	4601      	mov	r1, r0
   d5cf8:	a801      	add	r0, sp, #4
   d5cfa:	f7ff fc5b 	bl	d55b4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5cfe:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5d00:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d02:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d04:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5d06:	9203      	str	r2, [sp, #12]
   d5d08:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d0a:	60e3      	str	r3, [r4, #12]
   d5d0c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5d10:	9204      	str	r2, [sp, #16]
   d5d12:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5d14:	4b0a      	ldr	r3, [pc, #40]	; (d5d40 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5d16:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5d18:	4b0a      	ldr	r3, [pc, #40]	; (d5d44 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5d1a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5d1c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5d1e:	a801      	add	r0, sp, #4
   d5d20:	f7ff fc39 	bl	d5596 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5d24:	2200      	movs	r2, #0
   d5d26:	4629      	mov	r1, r5
   d5d28:	4807      	ldr	r0, [pc, #28]	; (d5d48 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5d2a:	f7fe fee7 	bl	d4afc <application_thread_invoke>
   d5d2e:	4630      	mov	r0, r6
   d5d30:	f7ff fc31 	bl	d5596 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5d34:	2110      	movs	r1, #16
   d5d36:	4630      	mov	r0, r6
   d5d38:	f000 fc9b 	bl	d6672 <_ZdlPvj>
        }
    }
   d5d3c:	b007      	add	sp, #28
   d5d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5d40:	000d5987 	.word	0x000d5987
   d5d44:	000d5c55 	.word	0x000d5c55
   d5d48:	000d61c9 	.word	0x000d61c9

000d5d4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5d4c:	b530      	push	{r4, r5, lr}
   d5d4e:	b085      	sub	sp, #20
   d5d50:	4604      	mov	r4, r0
   d5d52:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5d54:	4668      	mov	r0, sp
   d5d56:	4611      	mov	r1, r2
   d5d58:	f7ff fdca 	bl	d58f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5d5c:	b17c      	cbz	r4, d5d7e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5d5e:	b224      	sxth	r4, r4
   d5d60:	4628      	mov	r0, r5
   d5d62:	b10d      	cbz	r5, d5d68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5d64:	f001 fdba 	bl	d78dc <strdup>
   d5d68:	9002      	str	r0, [sp, #8]
   d5d6a:	a902      	add	r1, sp, #8
   d5d6c:	4668      	mov	r0, sp
   d5d6e:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5d72:	f7ff fe1f 	bl	d59b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5d76:	a802      	add	r0, sp, #8
   d5d78:	f7ff fd52 	bl	d5820 <_ZN8particle5ErrorD1Ev>
   d5d7c:	e01d      	b.n	d5dba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5d7e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5d80:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5d84:	f04f 0201 	mov.w	r2, #1
   d5d88:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5d8c:	42a3      	cmp	r3, r4
   d5d8e:	d103      	bne.n	d5d98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5d90:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5d94:	2900      	cmp	r1, #0
   d5d96:	d1f7      	bne.n	d5d88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5d98:	d002      	beq.n	d5da0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5d9a:	f88d 3008 	strb.w	r3, [sp, #8]
   d5d9e:	e00c      	b.n	d5dba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5da0:	f110 010c 	adds.w	r1, r0, #12
   d5da4:	f04f 0301 	mov.w	r3, #1
   d5da8:	bf18      	it	ne
   d5daa:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5dac:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5db0:	3004      	adds	r0, #4
   d5db2:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5db6:	f7ff ff71 	bl	d5c9c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5dba:	a801      	add	r0, sp, #4
   d5dbc:	f7fe f994 	bl	d40e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5dc0:	b005      	add	sp, #20
   d5dc2:	bd30      	pop	{r4, r5, pc}

000d5dc4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5dc4:	4770      	bx	lr

000d5dc6 <_ZN9IPAddressD0Ev>:
   d5dc6:	b510      	push	{r4, lr}
   d5dc8:	2118      	movs	r1, #24
   d5dca:	4604      	mov	r4, r0
   d5dcc:	f000 fc51 	bl	d6672 <_ZdlPvj>
   d5dd0:	4620      	mov	r0, r4
   d5dd2:	bd10      	pop	{r4, pc}

000d5dd4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5dd6:	7d03      	ldrb	r3, [r0, #20]
   d5dd8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5dda:	b08d      	sub	sp, #52	; 0x34
   d5ddc:	460e      	mov	r6, r1
   d5dde:	f100 0704 	add.w	r7, r0, #4
   d5de2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5de6:	d002      	beq.n	d5dee <_ZNK9IPAddress7printToER5Print+0x1a>
   d5de8:	f100 0508 	add.w	r5, r0, #8
   d5dec:	e018      	b.n	d5e20 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5dee:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5df0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5df2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5df6:	232f      	movs	r3, #47	; 0x2f
   d5df8:	462a      	mov	r2, r5
   d5dfa:	200a      	movs	r0, #10
   d5dfc:	f7fe fda6 	bl	d494c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5e00:	4628      	mov	r0, r5
   d5e02:	f001 fd86 	bl	d7912 <strlen>
   d5e06:	6833      	ldr	r3, [r6, #0]
   d5e08:	4602      	mov	r2, r0
   d5e0a:	68db      	ldr	r3, [r3, #12]
   d5e0c:	4629      	mov	r1, r5
   d5e0e:	4630      	mov	r0, r6
   d5e10:	4798      	blx	r3
   d5e12:	e00f      	b.n	d5e34 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5e14:	b124      	cbz	r4, d5e20 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5e16:	212e      	movs	r1, #46	; 0x2e
   d5e18:	4630      	mov	r0, r6
   d5e1a:	f7ff fa4b 	bl	d52b4 <_ZN5Print5printEc>
   d5e1e:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5e20:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5e24:	220a      	movs	r2, #10
   d5e26:	4630      	mov	r0, r6
   d5e28:	f7ff fa80 	bl	d532c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5e2c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5e2e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5e30:	d1f0      	bne.n	d5e14 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5e32:	4620      	mov	r0, r4
    }
    return n;
}
   d5e34:	b00d      	add	sp, #52	; 0x34
   d5e36:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5e38 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5e38:	b510      	push	{r4, lr}
   d5e3a:	4b05      	ldr	r3, [pc, #20]	; (d5e50 <_ZN9IPAddressC1Ev+0x18>)
   d5e3c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5e3e:	2211      	movs	r2, #17
   d5e40:	f840 3b04 	str.w	r3, [r0], #4
   d5e44:	2100      	movs	r1, #0
   d5e46:	f001 fd10 	bl	d786a <memset>
{
    clear();
}
   d5e4a:	4620      	mov	r0, r4
   d5e4c:	bd10      	pop	{r4, pc}
   d5e4e:	bf00      	nop
   d5e50:	000d7ce0 	.word	0x000d7ce0

000d5e54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5e54:	4603      	mov	r3, r0
   d5e56:	4a07      	ldr	r2, [pc, #28]	; (d5e74 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5e58:	b510      	push	{r4, lr}
   d5e5a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5e5e:	f101 0210 	add.w	r2, r1, #16
   d5e62:	f851 4b04 	ldr.w	r4, [r1], #4
   d5e66:	f843 4b04 	str.w	r4, [r3], #4
   d5e6a:	4291      	cmp	r1, r2
   d5e6c:	d1f9      	bne.n	d5e62 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5e6e:	780a      	ldrb	r2, [r1, #0]
   d5e70:	701a      	strb	r2, [r3, #0]
}
   d5e72:	bd10      	pop	{r4, pc}
   d5e74:	000d7ce0 	.word	0x000d7ce0

000d5e78 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5e78:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5e7a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5e7e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5e82:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5e86:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5e8a:	2304      	movs	r3, #4
   d5e8c:	6041      	str	r1, [r0, #4]
   d5e8e:	7503      	strb	r3, [r0, #20]
   d5e90:	bd10      	pop	{r4, pc}

000d5e92 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5e92:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5e94:	780d      	ldrb	r5, [r1, #0]
   d5e96:	788b      	ldrb	r3, [r1, #2]
   d5e98:	784a      	ldrb	r2, [r1, #1]
   d5e9a:	78c9      	ldrb	r1, [r1, #3]
   d5e9c:	9100      	str	r1, [sp, #0]
   d5e9e:	4629      	mov	r1, r5
   d5ea0:	f7ff ffea 	bl	d5e78 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5ea4:	b003      	add	sp, #12
   d5ea6:	bd30      	pop	{r4, r5, pc}

000d5ea8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5ea8:	7441      	strb	r1, [r0, #17]
   d5eaa:	4770      	bx	lr

000d5eac <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5eac:	4770      	bx	lr

000d5eae <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5eae:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5eb0:	2100      	movs	r1, #0
   d5eb2:	7c00      	ldrb	r0, [r0, #16]
   d5eb4:	f7fe fdf2 	bl	d4a9c <HAL_USB_USART_Receive_Data>
}
   d5eb8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5ebc:	bf28      	it	cs
   d5ebe:	f04f 30ff 	movcs.w	r0, #4294967295
   d5ec2:	bd08      	pop	{r3, pc}

000d5ec4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5ec4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5ec6:	2101      	movs	r1, #1
   d5ec8:	7c00      	ldrb	r0, [r0, #16]
   d5eca:	f7fe fde7 	bl	d4a9c <HAL_USB_USART_Receive_Data>
}
   d5ece:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5ed2:	bf28      	it	cs
   d5ed4:	f04f 30ff 	movcs.w	r0, #4294967295
   d5ed8:	bd08      	pop	{r3, pc}

000d5eda <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5eda:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5edc:	7c00      	ldrb	r0, [r0, #16]
   d5ede:	f7fe fdd5 	bl	d4a8c <HAL_USB_USART_Available_Data_For_Write>
}
   d5ee2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ee6:	bd08      	pop	{r3, pc}

000d5ee8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5ee8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5eea:	7c00      	ldrb	r0, [r0, #16]
   d5eec:	f7fe fdc6 	bl	d4a7c <HAL_USB_USART_Available_Data>
}
   d5ef0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ef4:	bd08      	pop	{r3, pc}

000d5ef6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5ef6:	7c00      	ldrb	r0, [r0, #16]
   d5ef8:	f7fe bde0 	b.w	d4abc <HAL_USB_USART_Flush_Data>

000d5efc <_ZN9USBSerialD0Ev>:
   d5efc:	b510      	push	{r4, lr}
   d5efe:	2114      	movs	r1, #20
   d5f00:	4604      	mov	r4, r0
   d5f02:	f000 fbb6 	bl	d6672 <_ZdlPvj>
   d5f06:	4620      	mov	r0, r4
   d5f08:	bd10      	pop	{r4, pc}

000d5f0a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5f0a:	b538      	push	{r3, r4, r5, lr}
   d5f0c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5f0e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5f10:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5f12:	f7fe fdbb 	bl	d4a8c <HAL_USB_USART_Available_Data_For_Write>
   d5f16:	2800      	cmp	r0, #0
   d5f18:	dc01      	bgt.n	d5f1e <_ZN9USBSerial5writeEh+0x14>
   d5f1a:	7c60      	ldrb	r0, [r4, #17]
   d5f1c:	b128      	cbz	r0, d5f2a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5f1e:	4629      	mov	r1, r5
   d5f20:	7c20      	ldrb	r0, [r4, #16]
   d5f22:	f7fe fdc3 	bl	d4aac <HAL_USB_USART_Send_Data>
   d5f26:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5f2a:	bd38      	pop	{r3, r4, r5, pc}

000d5f2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5f2c:	b510      	push	{r4, lr}
   d5f2e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5f30:	2300      	movs	r3, #0
   d5f32:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5f34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5f38:	60a3      	str	r3, [r4, #8]
   d5f3a:	4b05      	ldr	r3, [pc, #20]	; (d5f50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5f3c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5f3e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5f40:	4608      	mov	r0, r1
{
  _serial = serial;
   d5f42:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5f44:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5f46:	4611      	mov	r1, r2
   d5f48:	f7fe fd88 	bl	d4a5c <HAL_USB_USART_Init>
}
   d5f4c:	4620      	mov	r0, r4
   d5f4e:	bd10      	pop	{r4, pc}
   d5f50:	000d7cf4 	.word	0x000d7cf4

000d5f54 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5f54:	2200      	movs	r2, #0
   d5f56:	7c00      	ldrb	r0, [r0, #16]
   d5f58:	f7fe bd88 	b.w	d4a6c <HAL_USB_USART_Begin>

000d5f5c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5f5c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5f5e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5f60:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5f62:	2100      	movs	r1, #0
   d5f64:	f001 fc81 	bl	d786a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5f68:	4620      	mov	r0, r4
   d5f6a:	bd10      	pop	{r4, pc}

000d5f6c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5f6c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5f6e:	4d0e      	ldr	r5, [pc, #56]	; (d5fa8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5f70:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5f72:	a801      	add	r0, sp, #4
   d5f74:	f7ff fff2 	bl	d5f5c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5f78:	6829      	ldr	r1, [r5, #0]
   d5f7a:	f011 0401 	ands.w	r4, r1, #1
   d5f7e:	d110      	bne.n	d5fa2 <_Z16_fetch_usbserialv+0x36>
   d5f80:	4628      	mov	r0, r5
   d5f82:	f7fe f890 	bl	d40a6 <__cxa_guard_acquire>
   d5f86:	b160      	cbz	r0, d5fa2 <_Z16_fetch_usbserialv+0x36>
   d5f88:	aa01      	add	r2, sp, #4
   d5f8a:	4621      	mov	r1, r4
   d5f8c:	4807      	ldr	r0, [pc, #28]	; (d5fac <_Z16_fetch_usbserialv+0x40>)
   d5f8e:	f7ff ffcd 	bl	d5f2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5f92:	4628      	mov	r0, r5
   d5f94:	f7fe f88c 	bl	d40b0 <__cxa_guard_release>
   d5f98:	4a05      	ldr	r2, [pc, #20]	; (d5fb0 <_Z16_fetch_usbserialv+0x44>)
   d5f9a:	4906      	ldr	r1, [pc, #24]	; (d5fb4 <_Z16_fetch_usbserialv+0x48>)
   d5f9c:	4803      	ldr	r0, [pc, #12]	; (d5fac <_Z16_fetch_usbserialv+0x40>)
   d5f9e:	f000 fb63 	bl	d6668 <__aeabi_atexit>
	return _usbserial;
}
   d5fa2:	4802      	ldr	r0, [pc, #8]	; (d5fac <_Z16_fetch_usbserialv+0x40>)
   d5fa4:	b007      	add	sp, #28
   d5fa6:	bd30      	pop	{r4, r5, pc}
   d5fa8:	2003e3d0 	.word	0x2003e3d0
   d5fac:	2003e3d4 	.word	0x2003e3d4
   d5fb0:	2003e2b0 	.word	0x2003e2b0
   d5fb4:	000d5ead 	.word	0x000d5ead

000d5fb8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5fb8:	2200      	movs	r2, #0
   d5fba:	4611      	mov	r1, r2
   d5fbc:	6840      	ldr	r0, [r0, #4]
   d5fbe:	f7fe bdd1 	b.w	d4b64 <network_ready>

000d5fc2 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5fc2:	2200      	movs	r2, #0
   d5fc4:	4611      	mov	r1, r2
   d5fc6:	6840      	ldr	r0, [r0, #4]
   d5fc8:	f7fe bdec 	b.w	d4ba4 <network_listening>

000d5fcc <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5fcc:	2200      	movs	r2, #0
   d5fce:	4611      	mov	r1, r2
   d5fd0:	6840      	ldr	r0, [r0, #4]
   d5fd2:	f7fe bdf7 	b.w	d4bc4 <network_get_listen_timeout>

000d5fd6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5fd6:	2200      	movs	r2, #0
   d5fd8:	6840      	ldr	r0, [r0, #4]
   d5fda:	f7fe bdeb 	b.w	d4bb4 <network_set_listen_timeout>

000d5fde <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5fde:	2200      	movs	r2, #0
   d5fe0:	f081 0101 	eor.w	r1, r1, #1
   d5fe4:	6840      	ldr	r0, [r0, #4]
   d5fe6:	f7fe bdd5 	b.w	d4b94 <network_listen>

000d5fea <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5fea:	2300      	movs	r3, #0
   d5fec:	461a      	mov	r2, r3
   d5fee:	4619      	mov	r1, r3
   d5ff0:	6840      	ldr	r0, [r0, #4]
   d5ff2:	f7fe bdc7 	b.w	d4b84 <network_off>

000d5ff6 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d5ff6:	2300      	movs	r3, #0
   d5ff8:	461a      	mov	r2, r3
   d5ffa:	4619      	mov	r1, r3
   d5ffc:	6840      	ldr	r0, [r0, #4]
   d5ffe:	f7fe bdb9 	b.w	d4b74 <network_on>

000d6002 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6002:	2200      	movs	r2, #0
   d6004:	4611      	mov	r1, r2
   d6006:	6840      	ldr	r0, [r0, #4]
   d6008:	f7fe bd9c 	b.w	d4b44 <network_connecting>

000d600c <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d600c:	2200      	movs	r2, #0
   d600e:	2102      	movs	r1, #2
   d6010:	6840      	ldr	r0, [r0, #4]
   d6012:	f7fe bd9f 	b.w	d4b54 <network_disconnect>

000d6016 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6016:	2300      	movs	r3, #0
   d6018:	461a      	mov	r2, r3
   d601a:	6840      	ldr	r0, [r0, #4]
   d601c:	f7fe bd8a 	b.w	d4b34 <network_connect>

000d6020 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d6020:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d6022:	4b1b      	ldr	r3, [pc, #108]	; (d6090 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d6024:	6003      	str	r3, [r0, #0]
   d6026:	2500      	movs	r5, #0
   d6028:	460f      	mov	r7, r1
   d602a:	3328      	adds	r3, #40	; 0x28
   d602c:	2618      	movs	r6, #24
   d602e:	b089      	sub	sp, #36	; 0x24
   d6030:	6043      	str	r3, [r0, #4]
   d6032:	6085      	str	r5, [r0, #8]
   d6034:	60c5      	str	r5, [r0, #12]
   d6036:	4632      	mov	r2, r6
   d6038:	4629      	mov	r1, r5
   d603a:	4604      	mov	r4, r0
   d603c:	3010      	adds	r0, #16
   d603e:	f001 fc14 	bl	d786a <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d6042:	462a      	mov	r2, r5
   d6044:	4629      	mov	r1, r5
   d6046:	6878      	ldr	r0, [r7, #4]
   d6048:	f7fe fd8c 	bl	d4b64 <network_ready>
   d604c:	b908      	cbnz	r0, d6052 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d604e:	60a0      	str	r0, [r4, #8]
            return sig;
   d6050:	e01b      	b.n	d608a <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d6052:	4629      	mov	r1, r5
   d6054:	4632      	mov	r2, r6
   d6056:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d6058:	9500      	str	r5, [sp, #0]
   d605a:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d605c:	f001 fc05 	bl	d786a <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d6060:	a902      	add	r1, sp, #8
   d6062:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d6064:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d6068:	f7fe fcf0 	bl	d4a4c <cellular_signal>
   d606c:	b110      	cbz	r0, d6074 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d606e:	2301      	movs	r3, #1
   d6070:	60a3      	str	r3, [r4, #8]
            return sig;
   d6072:	e00a      	b.n	d608a <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d6074:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d6076:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d6078:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d607a:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d607c:	b90b      	cbnz	r3, d6082 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d607e:	2302      	movs	r3, #2
   d6080:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d6082:	a902      	add	r1, sp, #8
   d6084:	4620      	mov	r0, r4
   d6086:	f7ff fb37 	bl	d56f8 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d608a:	4620      	mov	r0, r4
   d608c:	b009      	add	sp, #36	; 0x24
   d608e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6090:	000d7c90 	.word	0x000d7c90

000d6094 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d6094:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d6096:	4c08      	ldr	r4, [pc, #32]	; (d60b8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d6098:	2528      	movs	r5, #40	; 0x28
   d609a:	462a      	mov	r2, r5
   d609c:	2100      	movs	r1, #0
   d609e:	4620      	mov	r0, r4
   d60a0:	f001 fbe3 	bl	d786a <memset>
        cid = -1;
   d60a4:	f04f 33ff 	mov.w	r3, #4294967295
   d60a8:	6063      	str	r3, [r4, #4]
   d60aa:	4b04      	ldr	r3, [pc, #16]	; (d60bc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d60ac:	8025      	strh	r5, [r4, #0]
   d60ae:	2204      	movs	r2, #4
   d60b0:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d60b2:	4a03      	ldr	r2, [pc, #12]	; (d60c0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d60b4:	601a      	str	r2, [r3, #0]
   d60b6:	bd38      	pop	{r3, r4, r5, pc}
   d60b8:	2003e3f0 	.word	0x2003e3f0
   d60bc:	2003e3e8 	.word	0x2003e3e8
   d60c0:	000d7d24 	.word	0x000d7d24

000d60c4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d60c4:	4770      	bx	lr

000d60c6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d60c6:	7441      	strb	r1, [r0, #17]
   d60c8:	4770      	bx	lr

000d60ca <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d60ca:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d60cc:	7c00      	ldrb	r0, [r0, #16]
   d60ce:	f7fe fc7d 	bl	d49cc <HAL_USART_Available_Data_For_Write>
}
   d60d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d60d6:	bd08      	pop	{r3, pc}

000d60d8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d60d8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d60da:	7c00      	ldrb	r0, [r0, #16]
   d60dc:	f7fe fc4e 	bl	d497c <HAL_USART_Available_Data>
}
   d60e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d60e4:	bd08      	pop	{r3, pc}

000d60e6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d60e6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d60e8:	7c00      	ldrb	r0, [r0, #16]
   d60ea:	f7fe fc57 	bl	d499c <HAL_USART_Peek_Data>
}
   d60ee:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d60f2:	bf28      	it	cs
   d60f4:	f04f 30ff 	movcs.w	r0, #4294967295
   d60f8:	bd08      	pop	{r3, pc}

000d60fa <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d60fa:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d60fc:	7c00      	ldrb	r0, [r0, #16]
   d60fe:	f7fe fc45 	bl	d498c <HAL_USART_Read_Data>
}
   d6102:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6106:	bf28      	it	cs
   d6108:	f04f 30ff 	movcs.w	r0, #4294967295
   d610c:	bd08      	pop	{r3, pc}

000d610e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d610e:	7c00      	ldrb	r0, [r0, #16]
   d6110:	f7fe bc4c 	b.w	d49ac <HAL_USART_Flush_Data>

000d6114 <_ZN11USARTSerialD0Ev>:
   d6114:	b510      	push	{r4, lr}
   d6116:	2114      	movs	r1, #20
   d6118:	4604      	mov	r4, r0
   d611a:	f000 faaa 	bl	d6672 <_ZdlPvj>
   d611e:	4620      	mov	r0, r4
   d6120:	bd10      	pop	{r4, pc}

000d6122 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6122:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6124:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6126:	4604      	mov	r4, r0
   d6128:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d612a:	b925      	cbnz	r5, d6136 <_ZN11USARTSerial5writeEh+0x14>
   d612c:	7c00      	ldrb	r0, [r0, #16]
   d612e:	f7fe fc4d 	bl	d49cc <HAL_USART_Available_Data_For_Write>
   d6132:	2800      	cmp	r0, #0
   d6134:	dd05      	ble.n	d6142 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6136:	4631      	mov	r1, r6
   d6138:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d613a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d613e:	f7fe bc15 	b.w	d496c <HAL_USART_Write_Data>
  }
  return 0;
}
   d6142:	4628      	mov	r0, r5
   d6144:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6148 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6148:	b510      	push	{r4, lr}
   d614a:	4604      	mov	r4, r0
   d614c:	4608      	mov	r0, r1
   d614e:	4611      	mov	r1, r2
   d6150:	2200      	movs	r2, #0
   d6152:	6062      	str	r2, [r4, #4]
   d6154:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6158:	60a2      	str	r2, [r4, #8]
   d615a:	4a05      	ldr	r2, [pc, #20]	; (d6170 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d615c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d615e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6160:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6162:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6164:	461a      	mov	r2, r3
   d6166:	f7fe fbf9 	bl	d495c <HAL_USART_Init>
}
   d616a:	4620      	mov	r0, r4
   d616c:	bd10      	pop	{r4, pc}
   d616e:	bf00      	nop
   d6170:	000d7d58 	.word	0x000d7d58

000d6174 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6174:	7c00      	ldrb	r0, [r0, #16]
   d6176:	f7fe bc21 	b.w	d49bc <HAL_USART_Is_Enabled>
	...

000d617c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d617c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d617e:	4d0c      	ldr	r5, [pc, #48]	; (d61b0 <_Z22__fetch_global_Serial1v+0x34>)
   d6180:	6829      	ldr	r1, [r5, #0]
   d6182:	f011 0401 	ands.w	r4, r1, #1
   d6186:	d111      	bne.n	d61ac <_Z22__fetch_global_Serial1v+0x30>
   d6188:	4628      	mov	r0, r5
   d618a:	f7fd ff8c 	bl	d40a6 <__cxa_guard_acquire>
   d618e:	b168      	cbz	r0, d61ac <_Z22__fetch_global_Serial1v+0x30>
   d6190:	4a08      	ldr	r2, [pc, #32]	; (d61b4 <_Z22__fetch_global_Serial1v+0x38>)
   d6192:	4b09      	ldr	r3, [pc, #36]	; (d61b8 <_Z22__fetch_global_Serial1v+0x3c>)
   d6194:	4809      	ldr	r0, [pc, #36]	; (d61bc <_Z22__fetch_global_Serial1v+0x40>)
   d6196:	4621      	mov	r1, r4
   d6198:	f7ff ffd6 	bl	d6148 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d619c:	4628      	mov	r0, r5
   d619e:	f7fd ff87 	bl	d40b0 <__cxa_guard_release>
   d61a2:	4a07      	ldr	r2, [pc, #28]	; (d61c0 <_Z22__fetch_global_Serial1v+0x44>)
   d61a4:	4907      	ldr	r1, [pc, #28]	; (d61c4 <_Z22__fetch_global_Serial1v+0x48>)
   d61a6:	4805      	ldr	r0, [pc, #20]	; (d61bc <_Z22__fetch_global_Serial1v+0x40>)
   d61a8:	f000 fa5e 	bl	d6668 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d61ac:	4803      	ldr	r0, [pc, #12]	; (d61bc <_Z22__fetch_global_Serial1v+0x40>)
   d61ae:	bd38      	pop	{r3, r4, r5, pc}
   d61b0:	2003e4b0 	.word	0x2003e4b0
   d61b4:	2003e4b4 	.word	0x2003e4b4
   d61b8:	2003e42c 	.word	0x2003e42c
   d61bc:	2003e418 	.word	0x2003e418
   d61c0:	2003e2b0 	.word	0x2003e2b0
   d61c4:	000d60c5 	.word	0x000d60c5

000d61c8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d61c8:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d61ca:	6883      	ldr	r3, [r0, #8]
   d61cc:	4604      	mov	r4, r0
   d61ce:	b90b      	cbnz	r3, d61d4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d61d0:	f000 fa51 	bl	d6676 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d61d4:	68c3      	ldr	r3, [r0, #12]
   d61d6:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d61d8:	68a3      	ldr	r3, [r4, #8]
   d61da:	b11b      	cbz	r3, d61e4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d61dc:	2203      	movs	r2, #3
   d61de:	4621      	mov	r1, r4
   d61e0:	4620      	mov	r0, r4
   d61e2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d61e4:	4620      	mov	r0, r4
   d61e6:	2110      	movs	r1, #16
}
   d61e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d61ec:	f000 ba41 	b.w	d6672 <_ZdlPvj>

000d61f0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d61f0:	4770      	bx	lr

000d61f2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d61f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d61f4:	4606      	mov	r6, r0
   d61f6:	4615      	mov	r5, r2
   d61f8:	460c      	mov	r4, r1
   d61fa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d61fc:	42bc      	cmp	r4, r7
   d61fe:	d006      	beq.n	d620e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6200:	6833      	ldr	r3, [r6, #0]
   d6202:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6206:	689b      	ldr	r3, [r3, #8]
   d6208:	4630      	mov	r0, r6
   d620a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d620c:	e7f6      	b.n	d61fc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d620e:	4628      	mov	r0, r5
   d6210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6212 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6212:	2200      	movs	r2, #0
   d6214:	7c00      	ldrb	r0, [r0, #16]
   d6216:	f7fe bbe1 	b.w	d49dc <HAL_I2C_Write_Data>

000d621a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d621a:	2100      	movs	r1, #0
   d621c:	7c00      	ldrb	r0, [r0, #16]
   d621e:	f7fe bbe5 	b.w	d49ec <HAL_I2C_Available_Data>

000d6222 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6222:	2100      	movs	r1, #0
   d6224:	7c00      	ldrb	r0, [r0, #16]
   d6226:	f7fe bbe9 	b.w	d49fc <HAL_I2C_Read_Data>

000d622a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d622a:	2100      	movs	r1, #0
   d622c:	7c00      	ldrb	r0, [r0, #16]
   d622e:	f7fe bbed 	b.w	d4a0c <HAL_I2C_Peek_Data>

000d6232 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6232:	2100      	movs	r1, #0
   d6234:	7c00      	ldrb	r0, [r0, #16]
   d6236:	f7fe bbf1 	b.w	d4a1c <HAL_I2C_Flush_Data>

000d623a <_ZN7TwoWireD0Ev>:
   d623a:	b510      	push	{r4, lr}
   d623c:	2114      	movs	r1, #20
   d623e:	4604      	mov	r4, r0
   d6240:	f000 fa17 	bl	d6672 <_ZdlPvj>
   d6244:	4620      	mov	r0, r4
   d6246:	bd10      	pop	{r4, pc}

000d6248 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6248:	b510      	push	{r4, lr}
   d624a:	4604      	mov	r4, r0
   d624c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6250:	4608      	mov	r0, r1
   d6252:	60a3      	str	r3, [r4, #8]
   d6254:	2100      	movs	r1, #0
   d6256:	4b04      	ldr	r3, [pc, #16]	; (d6268 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d6258:	7420      	strb	r0, [r4, #16]
   d625a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d625c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d625e:	f7fe fbed 	bl	d4a3c <HAL_I2C_Init>

}
   d6262:	4620      	mov	r0, r4
   d6264:	bd10      	pop	{r4, pc}
   d6266:	bf00      	nop
   d6268:	000d7d88 	.word	0x000d7d88

000d626c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d626c:	2100      	movs	r1, #0
   d626e:	7c00      	ldrb	r0, [r0, #16]
   d6270:	f7fe bbdc 	b.w	d4a2c <HAL_I2C_Is_Enabled>

000d6274 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6274:	2200      	movs	r2, #0
   d6276:	4611      	mov	r1, r2
   d6278:	6840      	ldr	r0, [r0, #4]
   d627a:	f7fe bc93 	b.w	d4ba4 <network_listening>

000d627e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d627e:	2200      	movs	r2, #0
   d6280:	4611      	mov	r1, r2
   d6282:	6840      	ldr	r0, [r0, #4]
   d6284:	f7fe bc9e 	b.w	d4bc4 <network_get_listen_timeout>

000d6288 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6288:	2200      	movs	r2, #0
   d628a:	6840      	ldr	r0, [r0, #4]
   d628c:	f7fe bc92 	b.w	d4bb4 <network_set_listen_timeout>

000d6290 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6290:	2200      	movs	r2, #0
   d6292:	f081 0101 	eor.w	r1, r1, #1
   d6296:	6840      	ldr	r0, [r0, #4]
   d6298:	f7fe bc7c 	b.w	d4b94 <network_listen>

000d629c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d629c:	2300      	movs	r3, #0
   d629e:	461a      	mov	r2, r3
   d62a0:	2101      	movs	r1, #1
   d62a2:	6840      	ldr	r0, [r0, #4]
   d62a4:	f7fe bc6e 	b.w	d4b84 <network_off>

000d62a8 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d62a8:	2300      	movs	r3, #0
   d62aa:	461a      	mov	r2, r3
   d62ac:	4619      	mov	r1, r3
   d62ae:	6840      	ldr	r0, [r0, #4]
   d62b0:	f7fe bc60 	b.w	d4b74 <network_on>

000d62b4 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d62b4:	2200      	movs	r2, #0
   d62b6:	4611      	mov	r1, r2
   d62b8:	6840      	ldr	r0, [r0, #4]
   d62ba:	f7fe bc53 	b.w	d4b64 <network_ready>

000d62be <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d62be:	2200      	movs	r2, #0
   d62c0:	4611      	mov	r1, r2
   d62c2:	6840      	ldr	r0, [r0, #4]
   d62c4:	f7fe bc3e 	b.w	d4b44 <network_connecting>

000d62c8 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d62c8:	2200      	movs	r2, #0
   d62ca:	2102      	movs	r1, #2
   d62cc:	6840      	ldr	r0, [r0, #4]
   d62ce:	f7fe bc41 	b.w	d4b54 <network_disconnect>

000d62d2 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d62d2:	2300      	movs	r3, #0
   d62d4:	461a      	mov	r2, r3
   d62d6:	6840      	ldr	r0, [r0, #4]
   d62d8:	f7fe bc2c 	b.w	d4b34 <network_connect>

000d62dc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d62dc:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d62de:	4605      	mov	r5, r0
   d62e0:	b188      	cbz	r0, d6306 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d62e2:	6804      	ldr	r4, [r0, #0]
   d62e4:	b14c      	cbz	r4, d62fa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d62e6:	68a3      	ldr	r3, [r4, #8]
   d62e8:	b11b      	cbz	r3, d62f2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d62ea:	2203      	movs	r2, #3
   d62ec:	4621      	mov	r1, r4
   d62ee:	4620      	mov	r0, r4
   d62f0:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d62f2:	2110      	movs	r1, #16
   d62f4:	4620      	mov	r0, r4
   d62f6:	f000 f9bc 	bl	d6672 <_ZdlPvj>
   d62fa:	4628      	mov	r0, r5
   d62fc:	2114      	movs	r1, #20
      }
   d62fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6302:	f000 b9b6 	b.w	d6672 <_ZdlPvj>
   d6306:	bd38      	pop	{r3, r4, r5, pc}

000d6308 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6308:	b110      	cbz	r0, d6310 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d630a:	6803      	ldr	r3, [r0, #0]
   d630c:	685b      	ldr	r3, [r3, #4]
   d630e:	4718      	bx	r3
   d6310:	4770      	bx	lr

000d6312 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6312:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6314:	6803      	ldr	r3, [r0, #0]
   d6316:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6318:	b1bb      	cbz	r3, d634a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d631a:	6858      	ldr	r0, [r3, #4]
   d631c:	f7fe fade 	bl	d48dc <os_thread_is_current>
   d6320:	b978      	cbnz	r0, d6342 <_ZN6ThreadD1Ev+0x30>
   d6322:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6324:	7c5a      	ldrb	r2, [r3, #17]
   d6326:	b912      	cbnz	r2, d632e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6328:	6858      	ldr	r0, [r3, #4]
   d632a:	f7fe fadf 	bl	d48ec <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d632e:	6823      	ldr	r3, [r4, #0]
   d6330:	6858      	ldr	r0, [r3, #4]
   d6332:	f7fe fae3 	bl	d48fc <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6336:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6338:	2300      	movs	r3, #0
   d633a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d633c:	b128      	cbz	r0, d634a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d633e:	f7ff ffcd 	bl	d62dc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6342:	6820      	ldr	r0, [r4, #0]
   d6344:	b108      	cbz	r0, d634a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6346:	f7ff ffc9 	bl	d62dc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d634a:	4620      	mov	r0, r4
   d634c:	bd10      	pop	{r4, pc}
	...

000d6350 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6350:	b538      	push	{r3, r4, r5, lr}
   d6352:	4b0c      	ldr	r3, [pc, #48]	; (d6384 <_ZN5spark9MeshClassD1Ev+0x34>)
   d6354:	6003      	str	r3, [r0, #0]
   d6356:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6358:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d635c:	b108      	cbz	r0, d6362 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d635e:	f7fd fea0 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6362:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d6366:	b135      	cbz	r5, d6376 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6368:	4628      	mov	r0, r5
   d636a:	f7ff ffd2 	bl	d6312 <_ZN6ThreadD1Ev>
   d636e:	2104      	movs	r1, #4
   d6370:	4628      	mov	r0, r5
   d6372:	f000 f97e 	bl	d6672 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6376:	68a0      	ldr	r0, [r4, #8]
   d6378:	b108      	cbz	r0, d637e <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d637a:	f7ff ffc5 	bl	d6308 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d637e:	4620      	mov	r0, r4
   d6380:	bd38      	pop	{r3, r4, r5, pc}
   d6382:	bf00      	nop
   d6384:	000d7db0 	.word	0x000d7db0

000d6388 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6388:	b538      	push	{r3, r4, r5, lr}
   d638a:	4c0e      	ldr	r4, [pc, #56]	; (d63c4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d638c:	4b0e      	ldr	r3, [pc, #56]	; (d63c8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d638e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6390:	2500      	movs	r5, #0
   d6392:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6394:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6398:	6063      	str	r3, [r4, #4]
   d639a:	60a5      	str	r5, [r4, #8]
   d639c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d63a0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d63a4:	f7fe faca 	bl	d493c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d63a8:	4b08      	ldr	r3, [pc, #32]	; (d63cc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d63aa:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d63ae:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d63b2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d63b4:	4620      	mov	r0, r4
   d63b6:	4a06      	ldr	r2, [pc, #24]	; (d63d0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d63b8:	4906      	ldr	r1, [pc, #24]	; (d63d4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d63ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d63be:	f000 b953 	b.w	d6668 <__aeabi_atexit>
   d63c2:	bf00      	nop
   d63c4:	2003e538 	.word	0x2003e538
   d63c8:	000d7de4 	.word	0x000d7de4
   d63cc:	000d7db0 	.word	0x000d7db0
   d63d0:	2003e2b0 	.word	0x2003e2b0
   d63d4:	000d6351 	.word	0x000d6351

000d63d8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d63d8:	2300      	movs	r3, #0
   d63da:	461a      	mov	r2, r3
   d63dc:	6840      	ldr	r0, [r0, #4]
   d63de:	f7fe bba9 	b.w	d4b34 <network_connect>

000d63e2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d63e2:	2200      	movs	r2, #0
   d63e4:	2102      	movs	r1, #2
   d63e6:	6840      	ldr	r0, [r0, #4]
   d63e8:	f7fe bbb4 	b.w	d4b54 <network_disconnect>

000d63ec <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d63ec:	2200      	movs	r2, #0
   d63ee:	4611      	mov	r1, r2
   d63f0:	6840      	ldr	r0, [r0, #4]
   d63f2:	f7fe bba7 	b.w	d4b44 <network_connecting>

000d63f6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d63f6:	2200      	movs	r2, #0
   d63f8:	4611      	mov	r1, r2
   d63fa:	6840      	ldr	r0, [r0, #4]
   d63fc:	f7fe bbb2 	b.w	d4b64 <network_ready>

000d6400 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6400:	2300      	movs	r3, #0
   d6402:	461a      	mov	r2, r3
   d6404:	4619      	mov	r1, r3
   d6406:	6840      	ldr	r0, [r0, #4]
   d6408:	f7fe bbb4 	b.w	d4b74 <network_on>

000d640c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d640c:	2300      	movs	r3, #0
   d640e:	461a      	mov	r2, r3
   d6410:	4619      	mov	r1, r3
   d6412:	6840      	ldr	r0, [r0, #4]
   d6414:	f7fe bbb6 	b.w	d4b84 <network_off>

000d6418 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6418:	2200      	movs	r2, #0
   d641a:	f081 0101 	eor.w	r1, r1, #1
   d641e:	6840      	ldr	r0, [r0, #4]
   d6420:	f7fe bbb8 	b.w	d4b94 <network_listen>

000d6424 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6424:	2200      	movs	r2, #0
   d6426:	6840      	ldr	r0, [r0, #4]
   d6428:	f7fe bbc4 	b.w	d4bb4 <network_set_listen_timeout>

000d642c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d642c:	2200      	movs	r2, #0
   d642e:	4611      	mov	r1, r2
   d6430:	6840      	ldr	r0, [r0, #4]
   d6432:	f7fe bbc7 	b.w	d4bc4 <network_get_listen_timeout>

000d6436 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6436:	2200      	movs	r2, #0
   d6438:	4611      	mov	r1, r2
   d643a:	6840      	ldr	r0, [r0, #4]
   d643c:	f7fe bbb2 	b.w	d4ba4 <network_listening>

000d6440 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6444:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6446:	b095      	sub	sp, #84	; 0x54
   d6448:	4616      	mov	r6, r2
   d644a:	460d      	mov	r5, r1
   d644c:	4607      	mov	r7, r0
    IPAddress addr;
   d644e:	f7ff fcf3 	bl	d5e38 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6452:	4621      	mov	r1, r4
   d6454:	2220      	movs	r2, #32
   d6456:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6458:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d645a:	f001 fa06 	bl	d786a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d645e:	2340      	movs	r3, #64	; 0x40
   d6460:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6462:	4621      	mov	r1, r4
   d6464:	466b      	mov	r3, sp
   d6466:	aa0c      	add	r2, sp, #48	; 0x30
   d6468:	4630      	mov	r0, r6
   d646a:	f7fe f9c7 	bl	d47fc <netdb_getaddrinfo>
    if (!r) {
   d646e:	4604      	mov	r4, r0
   d6470:	2800      	cmp	r0, #0
   d6472:	d144      	bne.n	d64fe <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6474:	4602      	mov	r2, r0
   d6476:	2101      	movs	r1, #1
   d6478:	6868      	ldr	r0, [r5, #4]
   d647a:	f7fe fb73 	bl	d4b64 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d647e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6480:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6482:	4622      	mov	r2, r4
   d6484:	6868      	ldr	r0, [r5, #4]
   d6486:	f7fe fb6d 	bl	d4b64 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d648a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d648c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d648e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6490:	2e00      	cmp	r6, #0
   d6492:	d034      	beq.n	d64fe <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6494:	2900      	cmp	r1, #0
   d6496:	d132      	bne.n	d64fe <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6498:	6873      	ldr	r3, [r6, #4]
   d649a:	2b02      	cmp	r3, #2
   d649c:	d002      	beq.n	d64a4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d649e:	2b0a      	cmp	r3, #10
   d64a0:	d009      	beq.n	d64b6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d64a2:	e02a      	b.n	d64fa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d64a4:	f1b8 0f00 	cmp.w	r8, #0
   d64a8:	d027      	beq.n	d64fa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d64aa:	6971      	ldr	r1, [r6, #20]
   d64ac:	4638      	mov	r0, r7
   d64ae:	3104      	adds	r1, #4
   d64b0:	f7ff fcef 	bl	d5e92 <_ZN9IPAddressaSEPKh>
   d64b4:	e020      	b.n	d64f8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d64b6:	f1b9 0f00 	cmp.w	r9, #0
   d64ba:	d01e      	beq.n	d64fa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d64bc:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d64be:	2211      	movs	r2, #17
   d64c0:	a801      	add	r0, sp, #4
   d64c2:	f001 f9d2 	bl	d786a <memset>
                    a.v = 6;
   d64c6:	2306      	movs	r3, #6
   d64c8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d64cc:	ad01      	add	r5, sp, #4
   d64ce:	f104 0308 	add.w	r3, r4, #8
   d64d2:	3418      	adds	r4, #24
   d64d4:	6818      	ldr	r0, [r3, #0]
   d64d6:	6859      	ldr	r1, [r3, #4]
   d64d8:	462a      	mov	r2, r5
   d64da:	c203      	stmia	r2!, {r0, r1}
   d64dc:	3308      	adds	r3, #8
   d64de:	42a3      	cmp	r3, r4
   d64e0:	4615      	mov	r5, r2
   d64e2:	d1f7      	bne.n	d64d4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d64e4:	a901      	add	r1, sp, #4
   d64e6:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d64e8:	ad07      	add	r5, sp, #28
   d64ea:	f7ff fcb3 	bl	d5e54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d64ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d64f0:	1d3c      	adds	r4, r7, #4
   d64f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d64f4:	682b      	ldr	r3, [r5, #0]
   d64f6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d64f8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d64fa:	69f6      	ldr	r6, [r6, #28]
   d64fc:	e7c8      	b.n	d6490 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d64fe:	9800      	ldr	r0, [sp, #0]
   d6500:	f7fe f974 	bl	d47ec <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6504:	4638      	mov	r0, r7
   d6506:	b015      	add	sp, #84	; 0x54
   d6508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d650c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d650c:	4b02      	ldr	r3, [pc, #8]	; (d6518 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d650e:	4a03      	ldr	r2, [pc, #12]	; (d651c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6510:	601a      	str	r2, [r3, #0]
   d6512:	2200      	movs	r2, #0
   d6514:	605a      	str	r2, [r3, #4]
   d6516:	4770      	bx	lr
   d6518:	2003e70c 	.word	0x2003e70c
   d651c:	000d7de4 	.word	0x000d7de4

000d6520 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6520:	b510      	push	{r4, lr}
   d6522:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6524:	480f      	ldr	r0, [pc, #60]	; (d6564 <pinAvailable+0x44>)
   d6526:	f7fe fca3 	bl	d4e70 <_ZN8SPIClass9isEnabledEv>
   d652a:	b128      	cbz	r0, d6538 <pinAvailable+0x18>
   d652c:	f1a4 030b 	sub.w	r3, r4, #11
   d6530:	2b02      	cmp	r3, #2
   d6532:	d801      	bhi.n	d6538 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6534:	2000      	movs	r0, #0
   d6536:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6538:	f000 f876 	bl	d6628 <_Z19__fetch_global_Wirev>
   d653c:	f7ff fe96 	bl	d626c <_ZN7TwoWire9isEnabledEv>
   d6540:	b108      	cbz	r0, d6546 <pinAvailable+0x26>
   d6542:	2c01      	cmp	r4, #1
   d6544:	d9f6      	bls.n	d6534 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6546:	f7ff fe19 	bl	d617c <_Z22__fetch_global_Serial1v>
   d654a:	f7ff fe13 	bl	d6174 <_ZN11USARTSerial9isEnabledEv>
   d654e:	b118      	cbz	r0, d6558 <pinAvailable+0x38>
   d6550:	f1a4 0309 	sub.w	r3, r4, #9
   d6554:	2b01      	cmp	r3, #1
   d6556:	d9ed      	bls.n	d6534 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6558:	2c23      	cmp	r4, #35	; 0x23
   d655a:	bf8c      	ite	hi
   d655c:	2000      	movhi	r0, #0
   d655e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6560:	bd10      	pop	{r4, pc}
   d6562:	bf00      	nop
   d6564:	2003e714 	.word	0x2003e714

000d6568 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6568:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d656a:	b538      	push	{r3, r4, r5, lr}
   d656c:	4604      	mov	r4, r0
   d656e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6570:	d80a      	bhi.n	d6588 <pinMode+0x20>
   d6572:	29ff      	cmp	r1, #255	; 0xff
   d6574:	d008      	beq.n	d6588 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6576:	f7ff ffd3 	bl	d6520 <pinAvailable>
   d657a:	b128      	cbz	r0, d6588 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d657c:	4629      	mov	r1, r5
   d657e:	4620      	mov	r0, r4
}
   d6580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6584:	f7fe b94a 	b.w	d481c <HAL_Pin_Mode>
   d6588:	bd38      	pop	{r3, r4, r5, pc}

000d658a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d658a:	b538      	push	{r3, r4, r5, lr}
   d658c:	4604      	mov	r4, r0
   d658e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6590:	f7fe f94c 	bl	d482c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6594:	28ff      	cmp	r0, #255	; 0xff
   d6596:	d010      	beq.n	d65ba <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6598:	2806      	cmp	r0, #6
   d659a:	d804      	bhi.n	d65a6 <digitalWrite+0x1c>
   d659c:	234d      	movs	r3, #77	; 0x4d
   d659e:	fa23 f000 	lsr.w	r0, r3, r0
   d65a2:	07c3      	lsls	r3, r0, #31
   d65a4:	d409      	bmi.n	d65ba <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d65a6:	4620      	mov	r0, r4
   d65a8:	f7ff ffba 	bl	d6520 <pinAvailable>
   d65ac:	b128      	cbz	r0, d65ba <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d65ae:	4629      	mov	r1, r5
   d65b0:	4620      	mov	r0, r4
}
   d65b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d65b6:	f7fe b941 	b.w	d483c <HAL_GPIO_Write>
   d65ba:	bd38      	pop	{r3, r4, r5, pc}

000d65bc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d65bc:	b510      	push	{r4, lr}
   d65be:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d65c0:	f7fe f934 	bl	d482c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d65c4:	3804      	subs	r0, #4
   d65c6:	b2c0      	uxtb	r0, r0
   d65c8:	2801      	cmp	r0, #1
   d65ca:	d908      	bls.n	d65de <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d65cc:	4620      	mov	r0, r4
   d65ce:	f7ff ffa7 	bl	d6520 <pinAvailable>
   d65d2:	b120      	cbz	r0, d65de <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d65d4:	4620      	mov	r0, r4
}
   d65d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d65da:	f7fe b937 	b.w	d484c <HAL_GPIO_Read>
}
   d65de:	2000      	movs	r0, #0
   d65e0:	bd10      	pop	{r4, pc}
	...

000d65e4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d65e4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d65e6:	4c0c      	ldr	r4, [pc, #48]	; (d6618 <_GLOBAL__sub_I_SPI+0x34>)
   d65e8:	4e0c      	ldr	r6, [pc, #48]	; (d661c <_GLOBAL__sub_I_SPI+0x38>)
   d65ea:	4d0d      	ldr	r5, [pc, #52]	; (d6620 <_GLOBAL__sub_I_SPI+0x3c>)
   d65ec:	2100      	movs	r1, #0
   d65ee:	4620      	mov	r0, r4
   d65f0:	f7fe fb96 	bl	d4d20 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d65f4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d65f6:	4c0b      	ldr	r4, [pc, #44]	; (d6624 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d65f8:	4632      	mov	r2, r6
   d65fa:	4629      	mov	r1, r5
   d65fc:	f000 f834 	bl	d6668 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6600:	2101      	movs	r1, #1
   d6602:	4620      	mov	r0, r4
   d6604:	f7fe fb8c 	bl	d4d20 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6608:	4632      	mov	r2, r6
   d660a:	4629      	mov	r1, r5
   d660c:	4620      	mov	r0, r4
   d660e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6612:	f000 b829 	b.w	d6668 <__aeabi_atexit>
   d6616:	bf00      	nop
   d6618:	2003e714 	.word	0x2003e714
   d661c:	2003e2b0 	.word	0x2003e2b0
   d6620:	000d4d11 	.word	0x000d4d11
   d6624:	2003e724 	.word	0x2003e724

000d6628 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6628:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d662a:	4d0b      	ldr	r5, [pc, #44]	; (d6658 <_Z19__fetch_global_Wirev+0x30>)
   d662c:	6829      	ldr	r1, [r5, #0]
   d662e:	f011 0401 	ands.w	r4, r1, #1
   d6632:	d10f      	bne.n	d6654 <_Z19__fetch_global_Wirev+0x2c>
   d6634:	4628      	mov	r0, r5
   d6636:	f7fd fd36 	bl	d40a6 <__cxa_guard_acquire>
   d663a:	b158      	cbz	r0, d6654 <_Z19__fetch_global_Wirev+0x2c>
   d663c:	4621      	mov	r1, r4
   d663e:	4807      	ldr	r0, [pc, #28]	; (d665c <_Z19__fetch_global_Wirev+0x34>)
   d6640:	f7ff fe02 	bl	d6248 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6644:	4628      	mov	r0, r5
   d6646:	f7fd fd33 	bl	d40b0 <__cxa_guard_release>
   d664a:	4a05      	ldr	r2, [pc, #20]	; (d6660 <_Z19__fetch_global_Wirev+0x38>)
   d664c:	4905      	ldr	r1, [pc, #20]	; (d6664 <_Z19__fetch_global_Wirev+0x3c>)
   d664e:	4803      	ldr	r0, [pc, #12]	; (d665c <_Z19__fetch_global_Wirev+0x34>)
   d6650:	f000 f80a 	bl	d6668 <__aeabi_atexit>
	return wire;
}
   d6654:	4801      	ldr	r0, [pc, #4]	; (d665c <_Z19__fetch_global_Wirev+0x34>)
   d6656:	bd38      	pop	{r3, r4, r5, pc}
   d6658:	2003e738 	.word	0x2003e738
   d665c:	2003e73c 	.word	0x2003e73c
   d6660:	2003e2b0 	.word	0x2003e2b0
   d6664:	000d61f1 	.word	0x000d61f1

000d6668 <__aeabi_atexit>:
   d6668:	460b      	mov	r3, r1
   d666a:	4601      	mov	r1, r0
   d666c:	4618      	mov	r0, r3
   d666e:	f001 b8e3 	b.w	d7838 <__cxa_atexit>

000d6672 <_ZdlPvj>:
   d6672:	f7fd bd14 	b.w	d409e <_ZdlPv>

000d6676 <_ZSt25__throw_bad_function_callv>:
   d6676:	b508      	push	{r3, lr}
   d6678:	f7fe faf4 	bl	d4c64 <abort>

000d667c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d667c:	4b18      	ldr	r3, [pc, #96]	; (d66e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d667e:	681a      	ldr	r2, [r3, #0]
   d6680:	07d1      	lsls	r1, r2, #31
   d6682:	bf5c      	itt	pl
   d6684:	2201      	movpl	r2, #1
   d6686:	601a      	strpl	r2, [r3, #0]
   d6688:	4b16      	ldr	r3, [pc, #88]	; (d66e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d668a:	681a      	ldr	r2, [r3, #0]
   d668c:	07d2      	lsls	r2, r2, #31
   d668e:	bf5c      	itt	pl
   d6690:	2201      	movpl	r2, #1
   d6692:	601a      	strpl	r2, [r3, #0]
   d6694:	4b14      	ldr	r3, [pc, #80]	; (d66e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6696:	681a      	ldr	r2, [r3, #0]
   d6698:	07d0      	lsls	r0, r2, #31
   d669a:	bf5c      	itt	pl
   d669c:	2201      	movpl	r2, #1
   d669e:	601a      	strpl	r2, [r3, #0]
   d66a0:	4b12      	ldr	r3, [pc, #72]	; (d66ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d66a2:	681a      	ldr	r2, [r3, #0]
   d66a4:	07d1      	lsls	r1, r2, #31
   d66a6:	bf5c      	itt	pl
   d66a8:	2201      	movpl	r2, #1
   d66aa:	601a      	strpl	r2, [r3, #0]
   d66ac:	4b10      	ldr	r3, [pc, #64]	; (d66f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d66ae:	681a      	ldr	r2, [r3, #0]
   d66b0:	07d2      	lsls	r2, r2, #31
   d66b2:	bf5c      	itt	pl
   d66b4:	2201      	movpl	r2, #1
   d66b6:	601a      	strpl	r2, [r3, #0]
   d66b8:	4b0e      	ldr	r3, [pc, #56]	; (d66f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d66ba:	681a      	ldr	r2, [r3, #0]
   d66bc:	07d0      	lsls	r0, r2, #31
   d66be:	bf5c      	itt	pl
   d66c0:	2201      	movpl	r2, #1
   d66c2:	601a      	strpl	r2, [r3, #0]
   d66c4:	4b0c      	ldr	r3, [pc, #48]	; (d66f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d66c6:	681a      	ldr	r2, [r3, #0]
   d66c8:	07d1      	lsls	r1, r2, #31
   d66ca:	bf5c      	itt	pl
   d66cc:	2201      	movpl	r2, #1
   d66ce:	601a      	strpl	r2, [r3, #0]
   d66d0:	4b0a      	ldr	r3, [pc, #40]	; (d66fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d66d2:	681a      	ldr	r2, [r3, #0]
   d66d4:	07d2      	lsls	r2, r2, #31
   d66d6:	bf5c      	itt	pl
   d66d8:	2201      	movpl	r2, #1
   d66da:	601a      	strpl	r2, [r3, #0]
   d66dc:	4770      	bx	lr
   d66de:	bf00      	nop
   d66e0:	2003e76c 	.word	0x2003e76c
   d66e4:	2003e768 	.word	0x2003e768
   d66e8:	2003e764 	.word	0x2003e764
   d66ec:	2003e760 	.word	0x2003e760
   d66f0:	2003e75c 	.word	0x2003e75c
   d66f4:	2003e758 	.word	0x2003e758
   d66f8:	2003e754 	.word	0x2003e754
   d66fc:	2003e750 	.word	0x2003e750

000d6700 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6700:	4b24      	ldr	r3, [pc, #144]	; (d6794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6702:	681a      	ldr	r2, [r3, #0]
   d6704:	07d0      	lsls	r0, r2, #31
   d6706:	bf5c      	itt	pl
   d6708:	2201      	movpl	r2, #1
   d670a:	601a      	strpl	r2, [r3, #0]
   d670c:	4b22      	ldr	r3, [pc, #136]	; (d6798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d670e:	681a      	ldr	r2, [r3, #0]
   d6710:	07d1      	lsls	r1, r2, #31
   d6712:	bf5c      	itt	pl
   d6714:	2201      	movpl	r2, #1
   d6716:	601a      	strpl	r2, [r3, #0]
   d6718:	4b20      	ldr	r3, [pc, #128]	; (d679c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d671a:	681a      	ldr	r2, [r3, #0]
   d671c:	07d2      	lsls	r2, r2, #31
   d671e:	bf5c      	itt	pl
   d6720:	2201      	movpl	r2, #1
   d6722:	601a      	strpl	r2, [r3, #0]
   d6724:	4b1e      	ldr	r3, [pc, #120]	; (d67a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6726:	681a      	ldr	r2, [r3, #0]
   d6728:	07d0      	lsls	r0, r2, #31
   d672a:	bf5c      	itt	pl
   d672c:	2201      	movpl	r2, #1
   d672e:	601a      	strpl	r2, [r3, #0]
   d6730:	4b1c      	ldr	r3, [pc, #112]	; (d67a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6732:	681a      	ldr	r2, [r3, #0]
   d6734:	07d1      	lsls	r1, r2, #31
   d6736:	bf5c      	itt	pl
   d6738:	2201      	movpl	r2, #1
   d673a:	601a      	strpl	r2, [r3, #0]
   d673c:	4b1a      	ldr	r3, [pc, #104]	; (d67a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d673e:	681a      	ldr	r2, [r3, #0]
   d6740:	07d2      	lsls	r2, r2, #31
   d6742:	bf5c      	itt	pl
   d6744:	2201      	movpl	r2, #1
   d6746:	601a      	strpl	r2, [r3, #0]
   d6748:	4b18      	ldr	r3, [pc, #96]	; (d67ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d674a:	681a      	ldr	r2, [r3, #0]
   d674c:	07d0      	lsls	r0, r2, #31
   d674e:	bf5c      	itt	pl
   d6750:	2201      	movpl	r2, #1
   d6752:	601a      	strpl	r2, [r3, #0]
   d6754:	4b16      	ldr	r3, [pc, #88]	; (d67b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6756:	681a      	ldr	r2, [r3, #0]
   d6758:	07d1      	lsls	r1, r2, #31
   d675a:	bf5c      	itt	pl
   d675c:	2201      	movpl	r2, #1
   d675e:	601a      	strpl	r2, [r3, #0]
   d6760:	4b14      	ldr	r3, [pc, #80]	; (d67b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6762:	681a      	ldr	r2, [r3, #0]
   d6764:	07d2      	lsls	r2, r2, #31
   d6766:	bf5c      	itt	pl
   d6768:	2201      	movpl	r2, #1
   d676a:	601a      	strpl	r2, [r3, #0]
   d676c:	4b12      	ldr	r3, [pc, #72]	; (d67b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d676e:	681a      	ldr	r2, [r3, #0]
   d6770:	07d0      	lsls	r0, r2, #31
   d6772:	bf5c      	itt	pl
   d6774:	2201      	movpl	r2, #1
   d6776:	601a      	strpl	r2, [r3, #0]
   d6778:	4b10      	ldr	r3, [pc, #64]	; (d67bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d677a:	681a      	ldr	r2, [r3, #0]
   d677c:	07d1      	lsls	r1, r2, #31
   d677e:	bf5c      	itt	pl
   d6780:	2201      	movpl	r2, #1
   d6782:	601a      	strpl	r2, [r3, #0]
   d6784:	4b0e      	ldr	r3, [pc, #56]	; (d67c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6786:	681a      	ldr	r2, [r3, #0]
   d6788:	07d2      	lsls	r2, r2, #31
   d678a:	bf5c      	itt	pl
   d678c:	2201      	movpl	r2, #1
   d678e:	601a      	strpl	r2, [r3, #0]
   d6790:	4770      	bx	lr
   d6792:	bf00      	nop
   d6794:	2003e79c 	.word	0x2003e79c
   d6798:	2003e798 	.word	0x2003e798
   d679c:	2003e794 	.word	0x2003e794
   d67a0:	2003e790 	.word	0x2003e790
   d67a4:	2003e78c 	.word	0x2003e78c
   d67a8:	2003e788 	.word	0x2003e788
   d67ac:	2003e784 	.word	0x2003e784
   d67b0:	2003e780 	.word	0x2003e780
   d67b4:	2003e77c 	.word	0x2003e77c
   d67b8:	2003e778 	.word	0x2003e778
   d67bc:	2003e774 	.word	0x2003e774
   d67c0:	2003e770 	.word	0x2003e770

000d67c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d67c4:	4b24      	ldr	r3, [pc, #144]	; (d6858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d67c6:	681a      	ldr	r2, [r3, #0]
   d67c8:	07d0      	lsls	r0, r2, #31
   d67ca:	bf5c      	itt	pl
   d67cc:	2201      	movpl	r2, #1
   d67ce:	601a      	strpl	r2, [r3, #0]
   d67d0:	4b22      	ldr	r3, [pc, #136]	; (d685c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d67d2:	681a      	ldr	r2, [r3, #0]
   d67d4:	07d1      	lsls	r1, r2, #31
   d67d6:	bf5c      	itt	pl
   d67d8:	2201      	movpl	r2, #1
   d67da:	601a      	strpl	r2, [r3, #0]
   d67dc:	4b20      	ldr	r3, [pc, #128]	; (d6860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d67de:	681a      	ldr	r2, [r3, #0]
   d67e0:	07d2      	lsls	r2, r2, #31
   d67e2:	bf5c      	itt	pl
   d67e4:	2201      	movpl	r2, #1
   d67e6:	601a      	strpl	r2, [r3, #0]
   d67e8:	4b1e      	ldr	r3, [pc, #120]	; (d6864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d67ea:	681a      	ldr	r2, [r3, #0]
   d67ec:	07d0      	lsls	r0, r2, #31
   d67ee:	bf5c      	itt	pl
   d67f0:	2201      	movpl	r2, #1
   d67f2:	601a      	strpl	r2, [r3, #0]
   d67f4:	4b1c      	ldr	r3, [pc, #112]	; (d6868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d67f6:	681a      	ldr	r2, [r3, #0]
   d67f8:	07d1      	lsls	r1, r2, #31
   d67fa:	bf5c      	itt	pl
   d67fc:	2201      	movpl	r2, #1
   d67fe:	601a      	strpl	r2, [r3, #0]
   d6800:	4b1a      	ldr	r3, [pc, #104]	; (d686c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6802:	681a      	ldr	r2, [r3, #0]
   d6804:	07d2      	lsls	r2, r2, #31
   d6806:	bf5c      	itt	pl
   d6808:	2201      	movpl	r2, #1
   d680a:	601a      	strpl	r2, [r3, #0]
   d680c:	4b18      	ldr	r3, [pc, #96]	; (d6870 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d680e:	681a      	ldr	r2, [r3, #0]
   d6810:	07d0      	lsls	r0, r2, #31
   d6812:	bf5c      	itt	pl
   d6814:	2201      	movpl	r2, #1
   d6816:	601a      	strpl	r2, [r3, #0]
   d6818:	4b16      	ldr	r3, [pc, #88]	; (d6874 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d681a:	681a      	ldr	r2, [r3, #0]
   d681c:	07d1      	lsls	r1, r2, #31
   d681e:	bf5c      	itt	pl
   d6820:	2201      	movpl	r2, #1
   d6822:	601a      	strpl	r2, [r3, #0]
   d6824:	4b14      	ldr	r3, [pc, #80]	; (d6878 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6826:	681a      	ldr	r2, [r3, #0]
   d6828:	07d2      	lsls	r2, r2, #31
   d682a:	bf5c      	itt	pl
   d682c:	2201      	movpl	r2, #1
   d682e:	601a      	strpl	r2, [r3, #0]
   d6830:	4b12      	ldr	r3, [pc, #72]	; (d687c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6832:	681a      	ldr	r2, [r3, #0]
   d6834:	07d0      	lsls	r0, r2, #31
   d6836:	bf5c      	itt	pl
   d6838:	2201      	movpl	r2, #1
   d683a:	601a      	strpl	r2, [r3, #0]
   d683c:	4b10      	ldr	r3, [pc, #64]	; (d6880 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d683e:	681a      	ldr	r2, [r3, #0]
   d6840:	07d1      	lsls	r1, r2, #31
   d6842:	bf5c      	itt	pl
   d6844:	2201      	movpl	r2, #1
   d6846:	601a      	strpl	r2, [r3, #0]
   d6848:	4b0e      	ldr	r3, [pc, #56]	; (d6884 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d684a:	681a      	ldr	r2, [r3, #0]
   d684c:	07d2      	lsls	r2, r2, #31
   d684e:	bf5c      	itt	pl
   d6850:	2201      	movpl	r2, #1
   d6852:	601a      	strpl	r2, [r3, #0]
   d6854:	4770      	bx	lr
   d6856:	bf00      	nop
   d6858:	2003e7cc 	.word	0x2003e7cc
   d685c:	2003e7c8 	.word	0x2003e7c8
   d6860:	2003e7c4 	.word	0x2003e7c4
   d6864:	2003e7c0 	.word	0x2003e7c0
   d6868:	2003e7bc 	.word	0x2003e7bc
   d686c:	2003e7b8 	.word	0x2003e7b8
   d6870:	2003e7b4 	.word	0x2003e7b4
   d6874:	2003e7b0 	.word	0x2003e7b0
   d6878:	2003e7ac 	.word	0x2003e7ac
   d687c:	2003e7a8 	.word	0x2003e7a8
   d6880:	2003e7a4 	.word	0x2003e7a4
   d6884:	2003e7a0 	.word	0x2003e7a0

000d6888 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6888:	4b18      	ldr	r3, [pc, #96]	; (d68ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d688a:	681a      	ldr	r2, [r3, #0]
   d688c:	07d1      	lsls	r1, r2, #31
   d688e:	bf5c      	itt	pl
   d6890:	2201      	movpl	r2, #1
   d6892:	601a      	strpl	r2, [r3, #0]
   d6894:	4b16      	ldr	r3, [pc, #88]	; (d68f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6896:	681a      	ldr	r2, [r3, #0]
   d6898:	07d2      	lsls	r2, r2, #31
   d689a:	bf5c      	itt	pl
   d689c:	2201      	movpl	r2, #1
   d689e:	601a      	strpl	r2, [r3, #0]
   d68a0:	4b14      	ldr	r3, [pc, #80]	; (d68f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d68a2:	681a      	ldr	r2, [r3, #0]
   d68a4:	07d0      	lsls	r0, r2, #31
   d68a6:	bf5c      	itt	pl
   d68a8:	2201      	movpl	r2, #1
   d68aa:	601a      	strpl	r2, [r3, #0]
   d68ac:	4b12      	ldr	r3, [pc, #72]	; (d68f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d68ae:	681a      	ldr	r2, [r3, #0]
   d68b0:	07d1      	lsls	r1, r2, #31
   d68b2:	bf5c      	itt	pl
   d68b4:	2201      	movpl	r2, #1
   d68b6:	601a      	strpl	r2, [r3, #0]
   d68b8:	4b10      	ldr	r3, [pc, #64]	; (d68fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d68ba:	681a      	ldr	r2, [r3, #0]
   d68bc:	07d2      	lsls	r2, r2, #31
   d68be:	bf5c      	itt	pl
   d68c0:	2201      	movpl	r2, #1
   d68c2:	601a      	strpl	r2, [r3, #0]
   d68c4:	4b0e      	ldr	r3, [pc, #56]	; (d6900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d68c6:	681a      	ldr	r2, [r3, #0]
   d68c8:	07d0      	lsls	r0, r2, #31
   d68ca:	bf5c      	itt	pl
   d68cc:	2201      	movpl	r2, #1
   d68ce:	601a      	strpl	r2, [r3, #0]
   d68d0:	4b0c      	ldr	r3, [pc, #48]	; (d6904 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d68d2:	681a      	ldr	r2, [r3, #0]
   d68d4:	07d1      	lsls	r1, r2, #31
   d68d6:	bf5c      	itt	pl
   d68d8:	2201      	movpl	r2, #1
   d68da:	601a      	strpl	r2, [r3, #0]
   d68dc:	4b0a      	ldr	r3, [pc, #40]	; (d6908 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d68de:	681a      	ldr	r2, [r3, #0]
   d68e0:	07d2      	lsls	r2, r2, #31
   d68e2:	bf5c      	itt	pl
   d68e4:	2201      	movpl	r2, #1
   d68e6:	601a      	strpl	r2, [r3, #0]
   d68e8:	4770      	bx	lr
   d68ea:	bf00      	nop
   d68ec:	2003e7ec 	.word	0x2003e7ec
   d68f0:	2003e7e8 	.word	0x2003e7e8
   d68f4:	2003e7e4 	.word	0x2003e7e4
   d68f8:	2003e7e0 	.word	0x2003e7e0
   d68fc:	2003e7dc 	.word	0x2003e7dc
   d6900:	2003e7d8 	.word	0x2003e7d8
   d6904:	2003e7d4 	.word	0x2003e7d4
   d6908:	2003e7d0 	.word	0x2003e7d0

000d690c <sqrt>:
   d690c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6910:	ed2d 8b02 	vpush	{d8}
   d6914:	b08b      	sub	sp, #44	; 0x2c
   d6916:	ec55 4b10 	vmov	r4, r5, d0
   d691a:	f000 f857 	bl	d69cc <__ieee754_sqrt>
   d691e:	4b29      	ldr	r3, [pc, #164]	; (d69c4 <sqrt+0xb8>)
   d6920:	eeb0 8a40 	vmov.f32	s16, s0
   d6924:	eef0 8a60 	vmov.f32	s17, s1
   d6928:	f993 6000 	ldrsb.w	r6, [r3]
   d692c:	1c73      	adds	r3, r6, #1
   d692e:	d012      	beq.n	d6956 <sqrt+0x4a>
   d6930:	4622      	mov	r2, r4
   d6932:	462b      	mov	r3, r5
   d6934:	4620      	mov	r0, r4
   d6936:	4629      	mov	r1, r5
   d6938:	f000 fd6c 	bl	d7414 <__aeabi_dcmpun>
   d693c:	4607      	mov	r7, r0
   d693e:	b950      	cbnz	r0, d6956 <sqrt+0x4a>
   d6940:	f04f 0800 	mov.w	r8, #0
   d6944:	f04f 0900 	mov.w	r9, #0
   d6948:	4620      	mov	r0, r4
   d694a:	4629      	mov	r1, r5
   d694c:	4642      	mov	r2, r8
   d694e:	464b      	mov	r3, r9
   d6950:	f000 fd38 	bl	d73c4 <__aeabi_dcmplt>
   d6954:	b940      	cbnz	r0, d6968 <sqrt+0x5c>
   d6956:	eeb0 0a48 	vmov.f32	s0, s16
   d695a:	eef0 0a68 	vmov.f32	s1, s17
   d695e:	b00b      	add	sp, #44	; 0x2c
   d6960:	ecbd 8b02 	vpop	{d8}
   d6964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6968:	4b17      	ldr	r3, [pc, #92]	; (d69c8 <sqrt+0xbc>)
   d696a:	9708      	str	r7, [sp, #32]
   d696c:	2201      	movs	r2, #1
   d696e:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d6972:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d6976:	e88d 000c 	stmia.w	sp, {r2, r3}
   d697a:	b1b6      	cbz	r6, d69aa <sqrt+0x9e>
   d697c:	4642      	mov	r2, r8
   d697e:	464b      	mov	r3, r9
   d6980:	4640      	mov	r0, r8
   d6982:	4649      	mov	r1, r9
   d6984:	f000 fbd6 	bl	d7134 <__aeabi_ddiv>
   d6988:	2e02      	cmp	r6, #2
   d698a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d698e:	d10e      	bne.n	d69ae <sqrt+0xa2>
   d6990:	f7fe f978 	bl	d4c84 <__errno>
   d6994:	2321      	movs	r3, #33	; 0x21
   d6996:	6003      	str	r3, [r0, #0]
   d6998:	9b08      	ldr	r3, [sp, #32]
   d699a:	b973      	cbnz	r3, d69ba <sqrt+0xae>
   d699c:	ed9d 0b06 	vldr	d0, [sp, #24]
   d69a0:	b00b      	add	sp, #44	; 0x2c
   d69a2:	ecbd 8b02 	vpop	{d8}
   d69a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d69aa:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d69ae:	4668      	mov	r0, sp
   d69b0:	f000 f8dc 	bl	d6b6c <matherr>
   d69b4:	2800      	cmp	r0, #0
   d69b6:	d1ef      	bne.n	d6998 <sqrt+0x8c>
   d69b8:	e7ea      	b.n	d6990 <sqrt+0x84>
   d69ba:	f7fe f963 	bl	d4c84 <__errno>
   d69be:	9b08      	ldr	r3, [sp, #32]
   d69c0:	6003      	str	r3, [r0, #0]
   d69c2:	e7eb      	b.n	d699c <sqrt+0x90>
   d69c4:	2003e244 	.word	0x2003e244
   d69c8:	000d7e10 	.word	0x000d7e10

000d69cc <__ieee754_sqrt>:
   d69cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d69d0:	4965      	ldr	r1, [pc, #404]	; (d6b68 <__ieee754_sqrt+0x19c>)
   d69d2:	ec55 4b10 	vmov	r4, r5, d0
   d69d6:	460e      	mov	r6, r1
   d69d8:	4029      	ands	r1, r5
   d69da:	42b1      	cmp	r1, r6
   d69dc:	f000 8097 	beq.w	d6b0e <__ieee754_sqrt+0x142>
   d69e0:	2d00      	cmp	r5, #0
   d69e2:	462b      	mov	r3, r5
   d69e4:	ee10 2a10 	vmov	r2, s0
   d69e8:	dd74      	ble.n	d6ad4 <__ieee754_sqrt+0x108>
   d69ea:	152f      	asrs	r7, r5, #20
   d69ec:	d07f      	beq.n	d6aee <__ieee754_sqrt+0x122>
   d69ee:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d69f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d69f6:	07f9      	lsls	r1, r7, #31
   d69f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d69fc:	d465      	bmi.n	d6aca <__ieee754_sqrt+0xfe>
   d69fe:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d6a02:	2600      	movs	r6, #0
   d6a04:	440b      	add	r3, r1
   d6a06:	107f      	asrs	r7, r7, #1
   d6a08:	0052      	lsls	r2, r2, #1
   d6a0a:	46b6      	mov	lr, r6
   d6a0c:	2016      	movs	r0, #22
   d6a0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d6a12:	eb0e 0401 	add.w	r4, lr, r1
   d6a16:	429c      	cmp	r4, r3
   d6a18:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d6a1c:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d6a20:	dc03      	bgt.n	d6a2a <__ieee754_sqrt+0x5e>
   d6a22:	1b1b      	subs	r3, r3, r4
   d6a24:	eb04 0e01 	add.w	lr, r4, r1
   d6a28:	440e      	add	r6, r1
   d6a2a:	3801      	subs	r0, #1
   d6a2c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d6a30:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d6a34:	d1ed      	bne.n	d6a12 <__ieee754_sqrt+0x46>
   d6a36:	4684      	mov	ip, r0
   d6a38:	2420      	movs	r4, #32
   d6a3a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d6a3e:	e009      	b.n	d6a54 <__ieee754_sqrt+0x88>
   d6a40:	d020      	beq.n	d6a84 <__ieee754_sqrt+0xb8>
   d6a42:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d6a46:	3c01      	subs	r4, #1
   d6a48:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d6a4c:	442b      	add	r3, r5
   d6a4e:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d6a52:	d020      	beq.n	d6a96 <__ieee754_sqrt+0xca>
   d6a54:	459e      	cmp	lr, r3
   d6a56:	eb01 050c 	add.w	r5, r1, ip
   d6a5a:	daf1      	bge.n	d6a40 <__ieee754_sqrt+0x74>
   d6a5c:	2d00      	cmp	r5, #0
   d6a5e:	eb05 0c01 	add.w	ip, r5, r1
   d6a62:	db09      	blt.n	d6a78 <__ieee754_sqrt+0xac>
   d6a64:	46f0      	mov	r8, lr
   d6a66:	4295      	cmp	r5, r2
   d6a68:	ebce 0303 	rsb	r3, lr, r3
   d6a6c:	d900      	bls.n	d6a70 <__ieee754_sqrt+0xa4>
   d6a6e:	3b01      	subs	r3, #1
   d6a70:	1b52      	subs	r2, r2, r5
   d6a72:	4408      	add	r0, r1
   d6a74:	46c6      	mov	lr, r8
   d6a76:	e7e4      	b.n	d6a42 <__ieee754_sqrt+0x76>
   d6a78:	f1bc 0f00 	cmp.w	ip, #0
   d6a7c:	dbf2      	blt.n	d6a64 <__ieee754_sqrt+0x98>
   d6a7e:	f10e 0801 	add.w	r8, lr, #1
   d6a82:	e7f0      	b.n	d6a66 <__ieee754_sqrt+0x9a>
   d6a84:	4295      	cmp	r5, r2
   d6a86:	d81e      	bhi.n	d6ac6 <__ieee754_sqrt+0xfa>
   d6a88:	2d00      	cmp	r5, #0
   d6a8a:	eb05 0c01 	add.w	ip, r5, r1
   d6a8e:	db50      	blt.n	d6b32 <__ieee754_sqrt+0x166>
   d6a90:	4698      	mov	r8, r3
   d6a92:	2300      	movs	r3, #0
   d6a94:	e7ec      	b.n	d6a70 <__ieee754_sqrt+0xa4>
   d6a96:	4313      	orrs	r3, r2
   d6a98:	d004      	beq.n	d6aa4 <__ieee754_sqrt+0xd8>
   d6a9a:	1c42      	adds	r2, r0, #1
   d6a9c:	d04d      	beq.n	d6b3a <__ieee754_sqrt+0x16e>
   d6a9e:	f000 0301 	and.w	r3, r0, #1
   d6aa2:	4418      	add	r0, r3
   d6aa4:	0840      	lsrs	r0, r0, #1
   d6aa6:	1071      	asrs	r1, r6, #1
   d6aa8:	07f3      	lsls	r3, r6, #31
   d6aaa:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d6aae:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d6ab2:	bf48      	it	mi
   d6ab4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d6ab8:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d6abc:	4602      	mov	r2, r0
   d6abe:	ec43 2b10 	vmov	d0, r2, r3
   d6ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6ac6:	4673      	mov	r3, lr
   d6ac8:	e7bb      	b.n	d6a42 <__ieee754_sqrt+0x76>
   d6aca:	005b      	lsls	r3, r3, #1
   d6acc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d6ad0:	0052      	lsls	r2, r2, #1
   d6ad2:	e794      	b.n	d69fe <__ieee754_sqrt+0x32>
   d6ad4:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d6ad8:	4321      	orrs	r1, r4
   d6ada:	d028      	beq.n	d6b2e <__ieee754_sqrt+0x162>
   d6adc:	bbad      	cbnz	r5, d6b4a <__ieee754_sqrt+0x17e>
   d6ade:	462f      	mov	r7, r5
   d6ae0:	0ad3      	lsrs	r3, r2, #11
   d6ae2:	3f15      	subs	r7, #21
   d6ae4:	0552      	lsls	r2, r2, #21
   d6ae6:	2b00      	cmp	r3, #0
   d6ae8:	d0fa      	beq.n	d6ae0 <__ieee754_sqrt+0x114>
   d6aea:	02dd      	lsls	r5, r3, #11
   d6aec:	d428      	bmi.n	d6b40 <__ieee754_sqrt+0x174>
   d6aee:	2100      	movs	r1, #0
   d6af0:	e000      	b.n	d6af4 <__ieee754_sqrt+0x128>
   d6af2:	4601      	mov	r1, r0
   d6af4:	005b      	lsls	r3, r3, #1
   d6af6:	02dc      	lsls	r4, r3, #11
   d6af8:	f101 0001 	add.w	r0, r1, #1
   d6afc:	d5f9      	bpl.n	d6af2 <__ieee754_sqrt+0x126>
   d6afe:	f1c0 0420 	rsb	r4, r0, #32
   d6b02:	fa22 f404 	lsr.w	r4, r2, r4
   d6b06:	4323      	orrs	r3, r4
   d6b08:	1a7f      	subs	r7, r7, r1
   d6b0a:	4082      	lsls	r2, r0
   d6b0c:	e76f      	b.n	d69ee <__ieee754_sqrt+0x22>
   d6b0e:	ee10 2a10 	vmov	r2, s0
   d6b12:	462b      	mov	r3, r5
   d6b14:	ee10 0a10 	vmov	r0, s0
   d6b18:	4629      	mov	r1, r5
   d6b1a:	f000 f9e1 	bl	d6ee0 <__aeabi_dmul>
   d6b1e:	4622      	mov	r2, r4
   d6b20:	462b      	mov	r3, r5
   d6b22:	f000 f82b 	bl	d6b7c <__adddf3>
   d6b26:	ec41 0b10 	vmov	d0, r0, r1
   d6b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6b32:	f1bc 0f00 	cmp.w	ip, #0
   d6b36:	daa2      	bge.n	d6a7e <__ieee754_sqrt+0xb2>
   d6b38:	e7aa      	b.n	d6a90 <__ieee754_sqrt+0xc4>
   d6b3a:	3601      	adds	r6, #1
   d6b3c:	4620      	mov	r0, r4
   d6b3e:	e7b2      	b.n	d6aa6 <__ieee754_sqrt+0xda>
   d6b40:	2420      	movs	r4, #32
   d6b42:	f04f 31ff 	mov.w	r1, #4294967295
   d6b46:	2000      	movs	r0, #0
   d6b48:	e7db      	b.n	d6b02 <__ieee754_sqrt+0x136>
   d6b4a:	ee10 2a10 	vmov	r2, s0
   d6b4e:	462b      	mov	r3, r5
   d6b50:	4620      	mov	r0, r4
   d6b52:	4629      	mov	r1, r5
   d6b54:	f000 f810 	bl	d6b78 <__aeabi_dsub>
   d6b58:	4602      	mov	r2, r0
   d6b5a:	460b      	mov	r3, r1
   d6b5c:	f000 faea 	bl	d7134 <__aeabi_ddiv>
   d6b60:	ec41 0b10 	vmov	d0, r0, r1
   d6b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6b68:	7ff00000 	.word	0x7ff00000

000d6b6c <matherr>:
   d6b6c:	2000      	movs	r0, #0
   d6b6e:	4770      	bx	lr

000d6b70 <__aeabi_drsub>:
   d6b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6b74:	e002      	b.n	d6b7c <__adddf3>
   d6b76:	bf00      	nop

000d6b78 <__aeabi_dsub>:
   d6b78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6b7c <__adddf3>:
   d6b7c:	b530      	push	{r4, r5, lr}
   d6b7e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6b82:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6b86:	ea94 0f05 	teq	r4, r5
   d6b8a:	bf08      	it	eq
   d6b8c:	ea90 0f02 	teqeq	r0, r2
   d6b90:	bf1f      	itttt	ne
   d6b92:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6b96:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6b9a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6b9e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6ba2:	f000 80e2 	beq.w	d6d6a <__adddf3+0x1ee>
   d6ba6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6baa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6bae:	bfb8      	it	lt
   d6bb0:	426d      	neglt	r5, r5
   d6bb2:	dd0c      	ble.n	d6bce <__adddf3+0x52>
   d6bb4:	442c      	add	r4, r5
   d6bb6:	ea80 0202 	eor.w	r2, r0, r2
   d6bba:	ea81 0303 	eor.w	r3, r1, r3
   d6bbe:	ea82 0000 	eor.w	r0, r2, r0
   d6bc2:	ea83 0101 	eor.w	r1, r3, r1
   d6bc6:	ea80 0202 	eor.w	r2, r0, r2
   d6bca:	ea81 0303 	eor.w	r3, r1, r3
   d6bce:	2d36      	cmp	r5, #54	; 0x36
   d6bd0:	bf88      	it	hi
   d6bd2:	bd30      	pophi	{r4, r5, pc}
   d6bd4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6bd8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6bdc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6be0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6be4:	d002      	beq.n	d6bec <__adddf3+0x70>
   d6be6:	4240      	negs	r0, r0
   d6be8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6bec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6bf0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6bf4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6bf8:	d002      	beq.n	d6c00 <__adddf3+0x84>
   d6bfa:	4252      	negs	r2, r2
   d6bfc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6c00:	ea94 0f05 	teq	r4, r5
   d6c04:	f000 80a7 	beq.w	d6d56 <__adddf3+0x1da>
   d6c08:	f1a4 0401 	sub.w	r4, r4, #1
   d6c0c:	f1d5 0e20 	rsbs	lr, r5, #32
   d6c10:	db0d      	blt.n	d6c2e <__adddf3+0xb2>
   d6c12:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6c16:	fa22 f205 	lsr.w	r2, r2, r5
   d6c1a:	1880      	adds	r0, r0, r2
   d6c1c:	f141 0100 	adc.w	r1, r1, #0
   d6c20:	fa03 f20e 	lsl.w	r2, r3, lr
   d6c24:	1880      	adds	r0, r0, r2
   d6c26:	fa43 f305 	asr.w	r3, r3, r5
   d6c2a:	4159      	adcs	r1, r3
   d6c2c:	e00e      	b.n	d6c4c <__adddf3+0xd0>
   d6c2e:	f1a5 0520 	sub.w	r5, r5, #32
   d6c32:	f10e 0e20 	add.w	lr, lr, #32
   d6c36:	2a01      	cmp	r2, #1
   d6c38:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6c3c:	bf28      	it	cs
   d6c3e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6c42:	fa43 f305 	asr.w	r3, r3, r5
   d6c46:	18c0      	adds	r0, r0, r3
   d6c48:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6c4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6c50:	d507      	bpl.n	d6c62 <__adddf3+0xe6>
   d6c52:	f04f 0e00 	mov.w	lr, #0
   d6c56:	f1dc 0c00 	rsbs	ip, ip, #0
   d6c5a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6c5e:	eb6e 0101 	sbc.w	r1, lr, r1
   d6c62:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6c66:	d31b      	bcc.n	d6ca0 <__adddf3+0x124>
   d6c68:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6c6c:	d30c      	bcc.n	d6c88 <__adddf3+0x10c>
   d6c6e:	0849      	lsrs	r1, r1, #1
   d6c70:	ea5f 0030 	movs.w	r0, r0, rrx
   d6c74:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6c78:	f104 0401 	add.w	r4, r4, #1
   d6c7c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6c80:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6c84:	f080 809a 	bcs.w	d6dbc <__adddf3+0x240>
   d6c88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6c8c:	bf08      	it	eq
   d6c8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6c92:	f150 0000 	adcs.w	r0, r0, #0
   d6c96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6c9a:	ea41 0105 	orr.w	r1, r1, r5
   d6c9e:	bd30      	pop	{r4, r5, pc}
   d6ca0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6ca4:	4140      	adcs	r0, r0
   d6ca6:	eb41 0101 	adc.w	r1, r1, r1
   d6caa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6cae:	f1a4 0401 	sub.w	r4, r4, #1
   d6cb2:	d1e9      	bne.n	d6c88 <__adddf3+0x10c>
   d6cb4:	f091 0f00 	teq	r1, #0
   d6cb8:	bf04      	itt	eq
   d6cba:	4601      	moveq	r1, r0
   d6cbc:	2000      	moveq	r0, #0
   d6cbe:	fab1 f381 	clz	r3, r1
   d6cc2:	bf08      	it	eq
   d6cc4:	3320      	addeq	r3, #32
   d6cc6:	f1a3 030b 	sub.w	r3, r3, #11
   d6cca:	f1b3 0220 	subs.w	r2, r3, #32
   d6cce:	da0c      	bge.n	d6cea <__adddf3+0x16e>
   d6cd0:	320c      	adds	r2, #12
   d6cd2:	dd08      	ble.n	d6ce6 <__adddf3+0x16a>
   d6cd4:	f102 0c14 	add.w	ip, r2, #20
   d6cd8:	f1c2 020c 	rsb	r2, r2, #12
   d6cdc:	fa01 f00c 	lsl.w	r0, r1, ip
   d6ce0:	fa21 f102 	lsr.w	r1, r1, r2
   d6ce4:	e00c      	b.n	d6d00 <__adddf3+0x184>
   d6ce6:	f102 0214 	add.w	r2, r2, #20
   d6cea:	bfd8      	it	le
   d6cec:	f1c2 0c20 	rsble	ip, r2, #32
   d6cf0:	fa01 f102 	lsl.w	r1, r1, r2
   d6cf4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6cf8:	bfdc      	itt	le
   d6cfa:	ea41 010c 	orrle.w	r1, r1, ip
   d6cfe:	4090      	lslle	r0, r2
   d6d00:	1ae4      	subs	r4, r4, r3
   d6d02:	bfa2      	ittt	ge
   d6d04:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6d08:	4329      	orrge	r1, r5
   d6d0a:	bd30      	popge	{r4, r5, pc}
   d6d0c:	ea6f 0404 	mvn.w	r4, r4
   d6d10:	3c1f      	subs	r4, #31
   d6d12:	da1c      	bge.n	d6d4e <__adddf3+0x1d2>
   d6d14:	340c      	adds	r4, #12
   d6d16:	dc0e      	bgt.n	d6d36 <__adddf3+0x1ba>
   d6d18:	f104 0414 	add.w	r4, r4, #20
   d6d1c:	f1c4 0220 	rsb	r2, r4, #32
   d6d20:	fa20 f004 	lsr.w	r0, r0, r4
   d6d24:	fa01 f302 	lsl.w	r3, r1, r2
   d6d28:	ea40 0003 	orr.w	r0, r0, r3
   d6d2c:	fa21 f304 	lsr.w	r3, r1, r4
   d6d30:	ea45 0103 	orr.w	r1, r5, r3
   d6d34:	bd30      	pop	{r4, r5, pc}
   d6d36:	f1c4 040c 	rsb	r4, r4, #12
   d6d3a:	f1c4 0220 	rsb	r2, r4, #32
   d6d3e:	fa20 f002 	lsr.w	r0, r0, r2
   d6d42:	fa01 f304 	lsl.w	r3, r1, r4
   d6d46:	ea40 0003 	orr.w	r0, r0, r3
   d6d4a:	4629      	mov	r1, r5
   d6d4c:	bd30      	pop	{r4, r5, pc}
   d6d4e:	fa21 f004 	lsr.w	r0, r1, r4
   d6d52:	4629      	mov	r1, r5
   d6d54:	bd30      	pop	{r4, r5, pc}
   d6d56:	f094 0f00 	teq	r4, #0
   d6d5a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6d5e:	bf06      	itte	eq
   d6d60:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6d64:	3401      	addeq	r4, #1
   d6d66:	3d01      	subne	r5, #1
   d6d68:	e74e      	b.n	d6c08 <__adddf3+0x8c>
   d6d6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6d6e:	bf18      	it	ne
   d6d70:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6d74:	d029      	beq.n	d6dca <__adddf3+0x24e>
   d6d76:	ea94 0f05 	teq	r4, r5
   d6d7a:	bf08      	it	eq
   d6d7c:	ea90 0f02 	teqeq	r0, r2
   d6d80:	d005      	beq.n	d6d8e <__adddf3+0x212>
   d6d82:	ea54 0c00 	orrs.w	ip, r4, r0
   d6d86:	bf04      	itt	eq
   d6d88:	4619      	moveq	r1, r3
   d6d8a:	4610      	moveq	r0, r2
   d6d8c:	bd30      	pop	{r4, r5, pc}
   d6d8e:	ea91 0f03 	teq	r1, r3
   d6d92:	bf1e      	ittt	ne
   d6d94:	2100      	movne	r1, #0
   d6d96:	2000      	movne	r0, #0
   d6d98:	bd30      	popne	{r4, r5, pc}
   d6d9a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6d9e:	d105      	bne.n	d6dac <__adddf3+0x230>
   d6da0:	0040      	lsls	r0, r0, #1
   d6da2:	4149      	adcs	r1, r1
   d6da4:	bf28      	it	cs
   d6da6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6daa:	bd30      	pop	{r4, r5, pc}
   d6dac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6db0:	bf3c      	itt	cc
   d6db2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6db6:	bd30      	popcc	{r4, r5, pc}
   d6db8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6dbc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6dc0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6dc4:	f04f 0000 	mov.w	r0, #0
   d6dc8:	bd30      	pop	{r4, r5, pc}
   d6dca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6dce:	bf1a      	itte	ne
   d6dd0:	4619      	movne	r1, r3
   d6dd2:	4610      	movne	r0, r2
   d6dd4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6dd8:	bf1c      	itt	ne
   d6dda:	460b      	movne	r3, r1
   d6ddc:	4602      	movne	r2, r0
   d6dde:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6de2:	bf06      	itte	eq
   d6de4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6de8:	ea91 0f03 	teqeq	r1, r3
   d6dec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6df0:	bd30      	pop	{r4, r5, pc}
   d6df2:	bf00      	nop

000d6df4 <__aeabi_ui2d>:
   d6df4:	f090 0f00 	teq	r0, #0
   d6df8:	bf04      	itt	eq
   d6dfa:	2100      	moveq	r1, #0
   d6dfc:	4770      	bxeq	lr
   d6dfe:	b530      	push	{r4, r5, lr}
   d6e00:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6e04:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6e08:	f04f 0500 	mov.w	r5, #0
   d6e0c:	f04f 0100 	mov.w	r1, #0
   d6e10:	e750      	b.n	d6cb4 <__adddf3+0x138>
   d6e12:	bf00      	nop

000d6e14 <__aeabi_i2d>:
   d6e14:	f090 0f00 	teq	r0, #0
   d6e18:	bf04      	itt	eq
   d6e1a:	2100      	moveq	r1, #0
   d6e1c:	4770      	bxeq	lr
   d6e1e:	b530      	push	{r4, r5, lr}
   d6e20:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6e24:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6e28:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6e2c:	bf48      	it	mi
   d6e2e:	4240      	negmi	r0, r0
   d6e30:	f04f 0100 	mov.w	r1, #0
   d6e34:	e73e      	b.n	d6cb4 <__adddf3+0x138>
   d6e36:	bf00      	nop

000d6e38 <__aeabi_f2d>:
   d6e38:	0042      	lsls	r2, r0, #1
   d6e3a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6e3e:	ea4f 0131 	mov.w	r1, r1, rrx
   d6e42:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6e46:	bf1f      	itttt	ne
   d6e48:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6e4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6e50:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6e54:	4770      	bxne	lr
   d6e56:	f092 0f00 	teq	r2, #0
   d6e5a:	bf14      	ite	ne
   d6e5c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6e60:	4770      	bxeq	lr
   d6e62:	b530      	push	{r4, r5, lr}
   d6e64:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6e68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6e6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6e70:	e720      	b.n	d6cb4 <__adddf3+0x138>
   d6e72:	bf00      	nop

000d6e74 <__aeabi_ul2d>:
   d6e74:	ea50 0201 	orrs.w	r2, r0, r1
   d6e78:	bf08      	it	eq
   d6e7a:	4770      	bxeq	lr
   d6e7c:	b530      	push	{r4, r5, lr}
   d6e7e:	f04f 0500 	mov.w	r5, #0
   d6e82:	e00a      	b.n	d6e9a <__aeabi_l2d+0x16>

000d6e84 <__aeabi_l2d>:
   d6e84:	ea50 0201 	orrs.w	r2, r0, r1
   d6e88:	bf08      	it	eq
   d6e8a:	4770      	bxeq	lr
   d6e8c:	b530      	push	{r4, r5, lr}
   d6e8e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6e92:	d502      	bpl.n	d6e9a <__aeabi_l2d+0x16>
   d6e94:	4240      	negs	r0, r0
   d6e96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6e9a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6e9e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6ea2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6ea6:	f43f aedc 	beq.w	d6c62 <__adddf3+0xe6>
   d6eaa:	f04f 0203 	mov.w	r2, #3
   d6eae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6eb2:	bf18      	it	ne
   d6eb4:	3203      	addne	r2, #3
   d6eb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6eba:	bf18      	it	ne
   d6ebc:	3203      	addne	r2, #3
   d6ebe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6ec2:	f1c2 0320 	rsb	r3, r2, #32
   d6ec6:	fa00 fc03 	lsl.w	ip, r0, r3
   d6eca:	fa20 f002 	lsr.w	r0, r0, r2
   d6ece:	fa01 fe03 	lsl.w	lr, r1, r3
   d6ed2:	ea40 000e 	orr.w	r0, r0, lr
   d6ed6:	fa21 f102 	lsr.w	r1, r1, r2
   d6eda:	4414      	add	r4, r2
   d6edc:	e6c1      	b.n	d6c62 <__adddf3+0xe6>
   d6ede:	bf00      	nop

000d6ee0 <__aeabi_dmul>:
   d6ee0:	b570      	push	{r4, r5, r6, lr}
   d6ee2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6ee6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6eea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6eee:	bf1d      	ittte	ne
   d6ef0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6ef4:	ea94 0f0c 	teqne	r4, ip
   d6ef8:	ea95 0f0c 	teqne	r5, ip
   d6efc:	f000 f8de 	bleq	d70bc <__aeabi_dmul+0x1dc>
   d6f00:	442c      	add	r4, r5
   d6f02:	ea81 0603 	eor.w	r6, r1, r3
   d6f06:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6f0a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6f0e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6f12:	bf18      	it	ne
   d6f14:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6f18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6f1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6f20:	d038      	beq.n	d6f94 <__aeabi_dmul+0xb4>
   d6f22:	fba0 ce02 	umull	ip, lr, r0, r2
   d6f26:	f04f 0500 	mov.w	r5, #0
   d6f2a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6f2e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6f32:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6f36:	f04f 0600 	mov.w	r6, #0
   d6f3a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6f3e:	f09c 0f00 	teq	ip, #0
   d6f42:	bf18      	it	ne
   d6f44:	f04e 0e01 	orrne.w	lr, lr, #1
   d6f48:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6f4c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6f50:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6f54:	d204      	bcs.n	d6f60 <__aeabi_dmul+0x80>
   d6f56:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6f5a:	416d      	adcs	r5, r5
   d6f5c:	eb46 0606 	adc.w	r6, r6, r6
   d6f60:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6f64:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6f68:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6f6c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6f70:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6f74:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6f78:	bf88      	it	hi
   d6f7a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6f7e:	d81e      	bhi.n	d6fbe <__aeabi_dmul+0xde>
   d6f80:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6f84:	bf08      	it	eq
   d6f86:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6f8a:	f150 0000 	adcs.w	r0, r0, #0
   d6f8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6f92:	bd70      	pop	{r4, r5, r6, pc}
   d6f94:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6f98:	ea46 0101 	orr.w	r1, r6, r1
   d6f9c:	ea40 0002 	orr.w	r0, r0, r2
   d6fa0:	ea81 0103 	eor.w	r1, r1, r3
   d6fa4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6fa8:	bfc2      	ittt	gt
   d6faa:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6fae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6fb2:	bd70      	popgt	{r4, r5, r6, pc}
   d6fb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6fb8:	f04f 0e00 	mov.w	lr, #0
   d6fbc:	3c01      	subs	r4, #1
   d6fbe:	f300 80ab 	bgt.w	d7118 <__aeabi_dmul+0x238>
   d6fc2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6fc6:	bfde      	ittt	le
   d6fc8:	2000      	movle	r0, #0
   d6fca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6fce:	bd70      	pople	{r4, r5, r6, pc}
   d6fd0:	f1c4 0400 	rsb	r4, r4, #0
   d6fd4:	3c20      	subs	r4, #32
   d6fd6:	da35      	bge.n	d7044 <__aeabi_dmul+0x164>
   d6fd8:	340c      	adds	r4, #12
   d6fda:	dc1b      	bgt.n	d7014 <__aeabi_dmul+0x134>
   d6fdc:	f104 0414 	add.w	r4, r4, #20
   d6fe0:	f1c4 0520 	rsb	r5, r4, #32
   d6fe4:	fa00 f305 	lsl.w	r3, r0, r5
   d6fe8:	fa20 f004 	lsr.w	r0, r0, r4
   d6fec:	fa01 f205 	lsl.w	r2, r1, r5
   d6ff0:	ea40 0002 	orr.w	r0, r0, r2
   d6ff4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6ff8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6ffc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7000:	fa21 f604 	lsr.w	r6, r1, r4
   d7004:	eb42 0106 	adc.w	r1, r2, r6
   d7008:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d700c:	bf08      	it	eq
   d700e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7012:	bd70      	pop	{r4, r5, r6, pc}
   d7014:	f1c4 040c 	rsb	r4, r4, #12
   d7018:	f1c4 0520 	rsb	r5, r4, #32
   d701c:	fa00 f304 	lsl.w	r3, r0, r4
   d7020:	fa20 f005 	lsr.w	r0, r0, r5
   d7024:	fa01 f204 	lsl.w	r2, r1, r4
   d7028:	ea40 0002 	orr.w	r0, r0, r2
   d702c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7030:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7034:	f141 0100 	adc.w	r1, r1, #0
   d7038:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d703c:	bf08      	it	eq
   d703e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7042:	bd70      	pop	{r4, r5, r6, pc}
   d7044:	f1c4 0520 	rsb	r5, r4, #32
   d7048:	fa00 f205 	lsl.w	r2, r0, r5
   d704c:	ea4e 0e02 	orr.w	lr, lr, r2
   d7050:	fa20 f304 	lsr.w	r3, r0, r4
   d7054:	fa01 f205 	lsl.w	r2, r1, r5
   d7058:	ea43 0302 	orr.w	r3, r3, r2
   d705c:	fa21 f004 	lsr.w	r0, r1, r4
   d7060:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7064:	fa21 f204 	lsr.w	r2, r1, r4
   d7068:	ea20 0002 	bic.w	r0, r0, r2
   d706c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7070:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7074:	bf08      	it	eq
   d7076:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d707a:	bd70      	pop	{r4, r5, r6, pc}
   d707c:	f094 0f00 	teq	r4, #0
   d7080:	d10f      	bne.n	d70a2 <__aeabi_dmul+0x1c2>
   d7082:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7086:	0040      	lsls	r0, r0, #1
   d7088:	eb41 0101 	adc.w	r1, r1, r1
   d708c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7090:	bf08      	it	eq
   d7092:	3c01      	subeq	r4, #1
   d7094:	d0f7      	beq.n	d7086 <__aeabi_dmul+0x1a6>
   d7096:	ea41 0106 	orr.w	r1, r1, r6
   d709a:	f095 0f00 	teq	r5, #0
   d709e:	bf18      	it	ne
   d70a0:	4770      	bxne	lr
   d70a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d70a6:	0052      	lsls	r2, r2, #1
   d70a8:	eb43 0303 	adc.w	r3, r3, r3
   d70ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d70b0:	bf08      	it	eq
   d70b2:	3d01      	subeq	r5, #1
   d70b4:	d0f7      	beq.n	d70a6 <__aeabi_dmul+0x1c6>
   d70b6:	ea43 0306 	orr.w	r3, r3, r6
   d70ba:	4770      	bx	lr
   d70bc:	ea94 0f0c 	teq	r4, ip
   d70c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d70c4:	bf18      	it	ne
   d70c6:	ea95 0f0c 	teqne	r5, ip
   d70ca:	d00c      	beq.n	d70e6 <__aeabi_dmul+0x206>
   d70cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d70d0:	bf18      	it	ne
   d70d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d70d6:	d1d1      	bne.n	d707c <__aeabi_dmul+0x19c>
   d70d8:	ea81 0103 	eor.w	r1, r1, r3
   d70dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d70e0:	f04f 0000 	mov.w	r0, #0
   d70e4:	bd70      	pop	{r4, r5, r6, pc}
   d70e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d70ea:	bf06      	itte	eq
   d70ec:	4610      	moveq	r0, r2
   d70ee:	4619      	moveq	r1, r3
   d70f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d70f4:	d019      	beq.n	d712a <__aeabi_dmul+0x24a>
   d70f6:	ea94 0f0c 	teq	r4, ip
   d70fa:	d102      	bne.n	d7102 <__aeabi_dmul+0x222>
   d70fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7100:	d113      	bne.n	d712a <__aeabi_dmul+0x24a>
   d7102:	ea95 0f0c 	teq	r5, ip
   d7106:	d105      	bne.n	d7114 <__aeabi_dmul+0x234>
   d7108:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d710c:	bf1c      	itt	ne
   d710e:	4610      	movne	r0, r2
   d7110:	4619      	movne	r1, r3
   d7112:	d10a      	bne.n	d712a <__aeabi_dmul+0x24a>
   d7114:	ea81 0103 	eor.w	r1, r1, r3
   d7118:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d711c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7120:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7124:	f04f 0000 	mov.w	r0, #0
   d7128:	bd70      	pop	{r4, r5, r6, pc}
   d712a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d712e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7132:	bd70      	pop	{r4, r5, r6, pc}

000d7134 <__aeabi_ddiv>:
   d7134:	b570      	push	{r4, r5, r6, lr}
   d7136:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d713a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d713e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7142:	bf1d      	ittte	ne
   d7144:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7148:	ea94 0f0c 	teqne	r4, ip
   d714c:	ea95 0f0c 	teqne	r5, ip
   d7150:	f000 f8a7 	bleq	d72a2 <__aeabi_ddiv+0x16e>
   d7154:	eba4 0405 	sub.w	r4, r4, r5
   d7158:	ea81 0e03 	eor.w	lr, r1, r3
   d715c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7160:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7164:	f000 8088 	beq.w	d7278 <__aeabi_ddiv+0x144>
   d7168:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d716c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7170:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7174:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7178:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d717c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7180:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7184:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7188:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d718c:	429d      	cmp	r5, r3
   d718e:	bf08      	it	eq
   d7190:	4296      	cmpeq	r6, r2
   d7192:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7196:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d719a:	d202      	bcs.n	d71a2 <__aeabi_ddiv+0x6e>
   d719c:	085b      	lsrs	r3, r3, #1
   d719e:	ea4f 0232 	mov.w	r2, r2, rrx
   d71a2:	1ab6      	subs	r6, r6, r2
   d71a4:	eb65 0503 	sbc.w	r5, r5, r3
   d71a8:	085b      	lsrs	r3, r3, #1
   d71aa:	ea4f 0232 	mov.w	r2, r2, rrx
   d71ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d71b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d71b6:	ebb6 0e02 	subs.w	lr, r6, r2
   d71ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   d71be:	bf22      	ittt	cs
   d71c0:	1ab6      	subcs	r6, r6, r2
   d71c2:	4675      	movcs	r5, lr
   d71c4:	ea40 000c 	orrcs.w	r0, r0, ip
   d71c8:	085b      	lsrs	r3, r3, #1
   d71ca:	ea4f 0232 	mov.w	r2, r2, rrx
   d71ce:	ebb6 0e02 	subs.w	lr, r6, r2
   d71d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d71d6:	bf22      	ittt	cs
   d71d8:	1ab6      	subcs	r6, r6, r2
   d71da:	4675      	movcs	r5, lr
   d71dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d71e0:	085b      	lsrs	r3, r3, #1
   d71e2:	ea4f 0232 	mov.w	r2, r2, rrx
   d71e6:	ebb6 0e02 	subs.w	lr, r6, r2
   d71ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   d71ee:	bf22      	ittt	cs
   d71f0:	1ab6      	subcs	r6, r6, r2
   d71f2:	4675      	movcs	r5, lr
   d71f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d71f8:	085b      	lsrs	r3, r3, #1
   d71fa:	ea4f 0232 	mov.w	r2, r2, rrx
   d71fe:	ebb6 0e02 	subs.w	lr, r6, r2
   d7202:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7206:	bf22      	ittt	cs
   d7208:	1ab6      	subcs	r6, r6, r2
   d720a:	4675      	movcs	r5, lr
   d720c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7210:	ea55 0e06 	orrs.w	lr, r5, r6
   d7214:	d018      	beq.n	d7248 <__aeabi_ddiv+0x114>
   d7216:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d721a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d721e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7222:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7226:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d722a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d722e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7232:	d1c0      	bne.n	d71b6 <__aeabi_ddiv+0x82>
   d7234:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7238:	d10b      	bne.n	d7252 <__aeabi_ddiv+0x11e>
   d723a:	ea41 0100 	orr.w	r1, r1, r0
   d723e:	f04f 0000 	mov.w	r0, #0
   d7242:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7246:	e7b6      	b.n	d71b6 <__aeabi_ddiv+0x82>
   d7248:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d724c:	bf04      	itt	eq
   d724e:	4301      	orreq	r1, r0
   d7250:	2000      	moveq	r0, #0
   d7252:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7256:	bf88      	it	hi
   d7258:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d725c:	f63f aeaf 	bhi.w	d6fbe <__aeabi_dmul+0xde>
   d7260:	ebb5 0c03 	subs.w	ip, r5, r3
   d7264:	bf04      	itt	eq
   d7266:	ebb6 0c02 	subseq.w	ip, r6, r2
   d726a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d726e:	f150 0000 	adcs.w	r0, r0, #0
   d7272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7276:	bd70      	pop	{r4, r5, r6, pc}
   d7278:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d727c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7280:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7284:	bfc2      	ittt	gt
   d7286:	ebd4 050c 	rsbsgt	r5, r4, ip
   d728a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d728e:	bd70      	popgt	{r4, r5, r6, pc}
   d7290:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7294:	f04f 0e00 	mov.w	lr, #0
   d7298:	3c01      	subs	r4, #1
   d729a:	e690      	b.n	d6fbe <__aeabi_dmul+0xde>
   d729c:	ea45 0e06 	orr.w	lr, r5, r6
   d72a0:	e68d      	b.n	d6fbe <__aeabi_dmul+0xde>
   d72a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d72a6:	ea94 0f0c 	teq	r4, ip
   d72aa:	bf08      	it	eq
   d72ac:	ea95 0f0c 	teqeq	r5, ip
   d72b0:	f43f af3b 	beq.w	d712a <__aeabi_dmul+0x24a>
   d72b4:	ea94 0f0c 	teq	r4, ip
   d72b8:	d10a      	bne.n	d72d0 <__aeabi_ddiv+0x19c>
   d72ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d72be:	f47f af34 	bne.w	d712a <__aeabi_dmul+0x24a>
   d72c2:	ea95 0f0c 	teq	r5, ip
   d72c6:	f47f af25 	bne.w	d7114 <__aeabi_dmul+0x234>
   d72ca:	4610      	mov	r0, r2
   d72cc:	4619      	mov	r1, r3
   d72ce:	e72c      	b.n	d712a <__aeabi_dmul+0x24a>
   d72d0:	ea95 0f0c 	teq	r5, ip
   d72d4:	d106      	bne.n	d72e4 <__aeabi_ddiv+0x1b0>
   d72d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d72da:	f43f aefd 	beq.w	d70d8 <__aeabi_dmul+0x1f8>
   d72de:	4610      	mov	r0, r2
   d72e0:	4619      	mov	r1, r3
   d72e2:	e722      	b.n	d712a <__aeabi_dmul+0x24a>
   d72e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d72e8:	bf18      	it	ne
   d72ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d72ee:	f47f aec5 	bne.w	d707c <__aeabi_dmul+0x19c>
   d72f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d72f6:	f47f af0d 	bne.w	d7114 <__aeabi_dmul+0x234>
   d72fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d72fe:	f47f aeeb 	bne.w	d70d8 <__aeabi_dmul+0x1f8>
   d7302:	e712      	b.n	d712a <__aeabi_dmul+0x24a>

000d7304 <__gedf2>:
   d7304:	f04f 3cff 	mov.w	ip, #4294967295
   d7308:	e006      	b.n	d7318 <__cmpdf2+0x4>
   d730a:	bf00      	nop

000d730c <__ledf2>:
   d730c:	f04f 0c01 	mov.w	ip, #1
   d7310:	e002      	b.n	d7318 <__cmpdf2+0x4>
   d7312:	bf00      	nop

000d7314 <__cmpdf2>:
   d7314:	f04f 0c01 	mov.w	ip, #1
   d7318:	f84d cd04 	str.w	ip, [sp, #-4]!
   d731c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7320:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7324:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7328:	bf18      	it	ne
   d732a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d732e:	d01b      	beq.n	d7368 <__cmpdf2+0x54>
   d7330:	b001      	add	sp, #4
   d7332:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7336:	bf0c      	ite	eq
   d7338:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d733c:	ea91 0f03 	teqne	r1, r3
   d7340:	bf02      	ittt	eq
   d7342:	ea90 0f02 	teqeq	r0, r2
   d7346:	2000      	moveq	r0, #0
   d7348:	4770      	bxeq	lr
   d734a:	f110 0f00 	cmn.w	r0, #0
   d734e:	ea91 0f03 	teq	r1, r3
   d7352:	bf58      	it	pl
   d7354:	4299      	cmppl	r1, r3
   d7356:	bf08      	it	eq
   d7358:	4290      	cmpeq	r0, r2
   d735a:	bf2c      	ite	cs
   d735c:	17d8      	asrcs	r0, r3, #31
   d735e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d7362:	f040 0001 	orr.w	r0, r0, #1
   d7366:	4770      	bx	lr
   d7368:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d736c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7370:	d102      	bne.n	d7378 <__cmpdf2+0x64>
   d7372:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7376:	d107      	bne.n	d7388 <__cmpdf2+0x74>
   d7378:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d737c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7380:	d1d6      	bne.n	d7330 <__cmpdf2+0x1c>
   d7382:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7386:	d0d3      	beq.n	d7330 <__cmpdf2+0x1c>
   d7388:	f85d 0b04 	ldr.w	r0, [sp], #4
   d738c:	4770      	bx	lr
   d738e:	bf00      	nop

000d7390 <__aeabi_cdrcmple>:
   d7390:	4684      	mov	ip, r0
   d7392:	4610      	mov	r0, r2
   d7394:	4662      	mov	r2, ip
   d7396:	468c      	mov	ip, r1
   d7398:	4619      	mov	r1, r3
   d739a:	4663      	mov	r3, ip
   d739c:	e000      	b.n	d73a0 <__aeabi_cdcmpeq>
   d739e:	bf00      	nop

000d73a0 <__aeabi_cdcmpeq>:
   d73a0:	b501      	push	{r0, lr}
   d73a2:	f7ff ffb7 	bl	d7314 <__cmpdf2>
   d73a6:	2800      	cmp	r0, #0
   d73a8:	bf48      	it	mi
   d73aa:	f110 0f00 	cmnmi.w	r0, #0
   d73ae:	bd01      	pop	{r0, pc}

000d73b0 <__aeabi_dcmpeq>:
   d73b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d73b4:	f7ff fff4 	bl	d73a0 <__aeabi_cdcmpeq>
   d73b8:	bf0c      	ite	eq
   d73ba:	2001      	moveq	r0, #1
   d73bc:	2000      	movne	r0, #0
   d73be:	f85d fb08 	ldr.w	pc, [sp], #8
   d73c2:	bf00      	nop

000d73c4 <__aeabi_dcmplt>:
   d73c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d73c8:	f7ff ffea 	bl	d73a0 <__aeabi_cdcmpeq>
   d73cc:	bf34      	ite	cc
   d73ce:	2001      	movcc	r0, #1
   d73d0:	2000      	movcs	r0, #0
   d73d2:	f85d fb08 	ldr.w	pc, [sp], #8
   d73d6:	bf00      	nop

000d73d8 <__aeabi_dcmple>:
   d73d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d73dc:	f7ff ffe0 	bl	d73a0 <__aeabi_cdcmpeq>
   d73e0:	bf94      	ite	ls
   d73e2:	2001      	movls	r0, #1
   d73e4:	2000      	movhi	r0, #0
   d73e6:	f85d fb08 	ldr.w	pc, [sp], #8
   d73ea:	bf00      	nop

000d73ec <__aeabi_dcmpge>:
   d73ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   d73f0:	f7ff ffce 	bl	d7390 <__aeabi_cdrcmple>
   d73f4:	bf94      	ite	ls
   d73f6:	2001      	movls	r0, #1
   d73f8:	2000      	movhi	r0, #0
   d73fa:	f85d fb08 	ldr.w	pc, [sp], #8
   d73fe:	bf00      	nop

000d7400 <__aeabi_dcmpgt>:
   d7400:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7404:	f7ff ffc4 	bl	d7390 <__aeabi_cdrcmple>
   d7408:	bf34      	ite	cc
   d740a:	2001      	movcc	r0, #1
   d740c:	2000      	movcs	r0, #0
   d740e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7412:	bf00      	nop

000d7414 <__aeabi_dcmpun>:
   d7414:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7418:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d741c:	d102      	bne.n	d7424 <__aeabi_dcmpun+0x10>
   d741e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7422:	d10a      	bne.n	d743a <__aeabi_dcmpun+0x26>
   d7424:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7428:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d742c:	d102      	bne.n	d7434 <__aeabi_dcmpun+0x20>
   d742e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7432:	d102      	bne.n	d743a <__aeabi_dcmpun+0x26>
   d7434:	f04f 0000 	mov.w	r0, #0
   d7438:	4770      	bx	lr
   d743a:	f04f 0001 	mov.w	r0, #1
   d743e:	4770      	bx	lr

000d7440 <__aeabi_d2iz>:
   d7440:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7444:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7448:	d215      	bcs.n	d7476 <__aeabi_d2iz+0x36>
   d744a:	d511      	bpl.n	d7470 <__aeabi_d2iz+0x30>
   d744c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7450:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7454:	d912      	bls.n	d747c <__aeabi_d2iz+0x3c>
   d7456:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d745a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d745e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7462:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7466:	fa23 f002 	lsr.w	r0, r3, r2
   d746a:	bf18      	it	ne
   d746c:	4240      	negne	r0, r0
   d746e:	4770      	bx	lr
   d7470:	f04f 0000 	mov.w	r0, #0
   d7474:	4770      	bx	lr
   d7476:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d747a:	d105      	bne.n	d7488 <__aeabi_d2iz+0x48>
   d747c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d7480:	bf08      	it	eq
   d7482:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7486:	4770      	bx	lr
   d7488:	f04f 0000 	mov.w	r0, #0
   d748c:	4770      	bx	lr
   d748e:	bf00      	nop

000d7490 <__aeabi_d2uiz>:
   d7490:	004a      	lsls	r2, r1, #1
   d7492:	d211      	bcs.n	d74b8 <__aeabi_d2uiz+0x28>
   d7494:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7498:	d211      	bcs.n	d74be <__aeabi_d2uiz+0x2e>
   d749a:	d50d      	bpl.n	d74b8 <__aeabi_d2uiz+0x28>
   d749c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d74a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d74a4:	d40e      	bmi.n	d74c4 <__aeabi_d2uiz+0x34>
   d74a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d74aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d74ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d74b2:	fa23 f002 	lsr.w	r0, r3, r2
   d74b6:	4770      	bx	lr
   d74b8:	f04f 0000 	mov.w	r0, #0
   d74bc:	4770      	bx	lr
   d74be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d74c2:	d102      	bne.n	d74ca <__aeabi_d2uiz+0x3a>
   d74c4:	f04f 30ff 	mov.w	r0, #4294967295
   d74c8:	4770      	bx	lr
   d74ca:	f04f 0000 	mov.w	r0, #0
   d74ce:	4770      	bx	lr

000d74d0 <__aeabi_uldivmod>:
   d74d0:	b953      	cbnz	r3, d74e8 <__aeabi_uldivmod+0x18>
   d74d2:	b94a      	cbnz	r2, d74e8 <__aeabi_uldivmod+0x18>
   d74d4:	2900      	cmp	r1, #0
   d74d6:	bf08      	it	eq
   d74d8:	2800      	cmpeq	r0, #0
   d74da:	bf1c      	itt	ne
   d74dc:	f04f 31ff 	movne.w	r1, #4294967295
   d74e0:	f04f 30ff 	movne.w	r0, #4294967295
   d74e4:	f000 b9a2 	b.w	d782c <__aeabi_idiv0>
   d74e8:	f1ad 0c08 	sub.w	ip, sp, #8
   d74ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d74f0:	f000 f82a 	bl	d7548 <__udivmoddi4>
   d74f4:	f8dd e004 	ldr.w	lr, [sp, #4]
   d74f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d74fc:	b004      	add	sp, #16
   d74fe:	4770      	bx	lr

000d7500 <__aeabi_d2ulz>:
   d7500:	b5d0      	push	{r4, r6, r7, lr}
   d7502:	2200      	movs	r2, #0
   d7504:	4b0e      	ldr	r3, [pc, #56]	; (d7540 <__aeabi_d2ulz+0x40>)
   d7506:	4606      	mov	r6, r0
   d7508:	460f      	mov	r7, r1
   d750a:	f7ff fce9 	bl	d6ee0 <__aeabi_dmul>
   d750e:	f7ff ffbf 	bl	d7490 <__aeabi_d2uiz>
   d7512:	4604      	mov	r4, r0
   d7514:	f7ff fc6e 	bl	d6df4 <__aeabi_ui2d>
   d7518:	2200      	movs	r2, #0
   d751a:	4b0a      	ldr	r3, [pc, #40]	; (d7544 <__aeabi_d2ulz+0x44>)
   d751c:	f7ff fce0 	bl	d6ee0 <__aeabi_dmul>
   d7520:	4602      	mov	r2, r0
   d7522:	460b      	mov	r3, r1
   d7524:	4630      	mov	r0, r6
   d7526:	4639      	mov	r1, r7
   d7528:	f7ff fb26 	bl	d6b78 <__aeabi_dsub>
   d752c:	f7ff ffb0 	bl	d7490 <__aeabi_d2uiz>
   d7530:	4623      	mov	r3, r4
   d7532:	2200      	movs	r2, #0
   d7534:	ea42 0200 	orr.w	r2, r2, r0
   d7538:	4610      	mov	r0, r2
   d753a:	4619      	mov	r1, r3
   d753c:	bdd0      	pop	{r4, r6, r7, pc}
   d753e:	bf00      	nop
   d7540:	3df00000 	.word	0x3df00000
   d7544:	41f00000 	.word	0x41f00000

000d7548 <__udivmoddi4>:
   d7548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d754c:	468c      	mov	ip, r1
   d754e:	460e      	mov	r6, r1
   d7550:	4604      	mov	r4, r0
   d7552:	9d08      	ldr	r5, [sp, #32]
   d7554:	2b00      	cmp	r3, #0
   d7556:	d150      	bne.n	d75fa <__udivmoddi4+0xb2>
   d7558:	428a      	cmp	r2, r1
   d755a:	4617      	mov	r7, r2
   d755c:	d96c      	bls.n	d7638 <__udivmoddi4+0xf0>
   d755e:	fab2 fe82 	clz	lr, r2
   d7562:	f1be 0f00 	cmp.w	lr, #0
   d7566:	d00b      	beq.n	d7580 <__udivmoddi4+0x38>
   d7568:	f1ce 0420 	rsb	r4, lr, #32
   d756c:	fa20 f404 	lsr.w	r4, r0, r4
   d7570:	fa01 f60e 	lsl.w	r6, r1, lr
   d7574:	ea44 0c06 	orr.w	ip, r4, r6
   d7578:	fa02 f70e 	lsl.w	r7, r2, lr
   d757c:	fa00 f40e 	lsl.w	r4, r0, lr
   d7580:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d7584:	0c22      	lsrs	r2, r4, #16
   d7586:	fbbc f0f9 	udiv	r0, ip, r9
   d758a:	fa1f f887 	uxth.w	r8, r7
   d758e:	fb09 c610 	mls	r6, r9, r0, ip
   d7592:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d7596:	fb00 f308 	mul.w	r3, r0, r8
   d759a:	42b3      	cmp	r3, r6
   d759c:	d909      	bls.n	d75b2 <__udivmoddi4+0x6a>
   d759e:	19f6      	adds	r6, r6, r7
   d75a0:	f100 32ff 	add.w	r2, r0, #4294967295
   d75a4:	f080 8122 	bcs.w	d77ec <__udivmoddi4+0x2a4>
   d75a8:	42b3      	cmp	r3, r6
   d75aa:	f240 811f 	bls.w	d77ec <__udivmoddi4+0x2a4>
   d75ae:	3802      	subs	r0, #2
   d75b0:	443e      	add	r6, r7
   d75b2:	1af6      	subs	r6, r6, r3
   d75b4:	b2a2      	uxth	r2, r4
   d75b6:	fbb6 f3f9 	udiv	r3, r6, r9
   d75ba:	fb09 6613 	mls	r6, r9, r3, r6
   d75be:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d75c2:	fb03 f808 	mul.w	r8, r3, r8
   d75c6:	45a0      	cmp	r8, r4
   d75c8:	d909      	bls.n	d75de <__udivmoddi4+0x96>
   d75ca:	19e4      	adds	r4, r4, r7
   d75cc:	f103 32ff 	add.w	r2, r3, #4294967295
   d75d0:	f080 810a 	bcs.w	d77e8 <__udivmoddi4+0x2a0>
   d75d4:	45a0      	cmp	r8, r4
   d75d6:	f240 8107 	bls.w	d77e8 <__udivmoddi4+0x2a0>
   d75da:	3b02      	subs	r3, #2
   d75dc:	443c      	add	r4, r7
   d75de:	ebc8 0404 	rsb	r4, r8, r4
   d75e2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d75e6:	2100      	movs	r1, #0
   d75e8:	2d00      	cmp	r5, #0
   d75ea:	d062      	beq.n	d76b2 <__udivmoddi4+0x16a>
   d75ec:	fa24 f40e 	lsr.w	r4, r4, lr
   d75f0:	2300      	movs	r3, #0
   d75f2:	602c      	str	r4, [r5, #0]
   d75f4:	606b      	str	r3, [r5, #4]
   d75f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d75fa:	428b      	cmp	r3, r1
   d75fc:	d907      	bls.n	d760e <__udivmoddi4+0xc6>
   d75fe:	2d00      	cmp	r5, #0
   d7600:	d055      	beq.n	d76ae <__udivmoddi4+0x166>
   d7602:	2100      	movs	r1, #0
   d7604:	e885 0041 	stmia.w	r5, {r0, r6}
   d7608:	4608      	mov	r0, r1
   d760a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d760e:	fab3 f183 	clz	r1, r3
   d7612:	2900      	cmp	r1, #0
   d7614:	f040 8090 	bne.w	d7738 <__udivmoddi4+0x1f0>
   d7618:	42b3      	cmp	r3, r6
   d761a:	d302      	bcc.n	d7622 <__udivmoddi4+0xda>
   d761c:	4282      	cmp	r2, r0
   d761e:	f200 80f8 	bhi.w	d7812 <__udivmoddi4+0x2ca>
   d7622:	1a84      	subs	r4, r0, r2
   d7624:	eb66 0603 	sbc.w	r6, r6, r3
   d7628:	2001      	movs	r0, #1
   d762a:	46b4      	mov	ip, r6
   d762c:	2d00      	cmp	r5, #0
   d762e:	d040      	beq.n	d76b2 <__udivmoddi4+0x16a>
   d7630:	e885 1010 	stmia.w	r5, {r4, ip}
   d7634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7638:	b912      	cbnz	r2, d7640 <__udivmoddi4+0xf8>
   d763a:	2701      	movs	r7, #1
   d763c:	fbb7 f7f2 	udiv	r7, r7, r2
   d7640:	fab7 fe87 	clz	lr, r7
   d7644:	f1be 0f00 	cmp.w	lr, #0
   d7648:	d135      	bne.n	d76b6 <__udivmoddi4+0x16e>
   d764a:	1bf3      	subs	r3, r6, r7
   d764c:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d7650:	fa1f fc87 	uxth.w	ip, r7
   d7654:	2101      	movs	r1, #1
   d7656:	fbb3 f0f8 	udiv	r0, r3, r8
   d765a:	0c22      	lsrs	r2, r4, #16
   d765c:	fb08 3610 	mls	r6, r8, r0, r3
   d7660:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d7664:	fb0c f300 	mul.w	r3, ip, r0
   d7668:	42b3      	cmp	r3, r6
   d766a:	d907      	bls.n	d767c <__udivmoddi4+0x134>
   d766c:	19f6      	adds	r6, r6, r7
   d766e:	f100 32ff 	add.w	r2, r0, #4294967295
   d7672:	d202      	bcs.n	d767a <__udivmoddi4+0x132>
   d7674:	42b3      	cmp	r3, r6
   d7676:	f200 80ce 	bhi.w	d7816 <__udivmoddi4+0x2ce>
   d767a:	4610      	mov	r0, r2
   d767c:	1af6      	subs	r6, r6, r3
   d767e:	b2a2      	uxth	r2, r4
   d7680:	fbb6 f3f8 	udiv	r3, r6, r8
   d7684:	fb08 6613 	mls	r6, r8, r3, r6
   d7688:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d768c:	fb0c fc03 	mul.w	ip, ip, r3
   d7690:	45a4      	cmp	ip, r4
   d7692:	d907      	bls.n	d76a4 <__udivmoddi4+0x15c>
   d7694:	19e4      	adds	r4, r4, r7
   d7696:	f103 32ff 	add.w	r2, r3, #4294967295
   d769a:	d202      	bcs.n	d76a2 <__udivmoddi4+0x15a>
   d769c:	45a4      	cmp	ip, r4
   d769e:	f200 80b5 	bhi.w	d780c <__udivmoddi4+0x2c4>
   d76a2:	4613      	mov	r3, r2
   d76a4:	ebcc 0404 	rsb	r4, ip, r4
   d76a8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d76ac:	e79c      	b.n	d75e8 <__udivmoddi4+0xa0>
   d76ae:	4629      	mov	r1, r5
   d76b0:	4628      	mov	r0, r5
   d76b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d76b6:	f1ce 0120 	rsb	r1, lr, #32
   d76ba:	fa06 f30e 	lsl.w	r3, r6, lr
   d76be:	fa07 f70e 	lsl.w	r7, r7, lr
   d76c2:	fa20 f901 	lsr.w	r9, r0, r1
   d76c6:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d76ca:	40ce      	lsrs	r6, r1
   d76cc:	ea49 0903 	orr.w	r9, r9, r3
   d76d0:	fbb6 faf8 	udiv	sl, r6, r8
   d76d4:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d76d8:	fb08 661a 	mls	r6, r8, sl, r6
   d76dc:	fa1f fc87 	uxth.w	ip, r7
   d76e0:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d76e4:	fb0a f20c 	mul.w	r2, sl, ip
   d76e8:	429a      	cmp	r2, r3
   d76ea:	fa00 f40e 	lsl.w	r4, r0, lr
   d76ee:	d90a      	bls.n	d7706 <__udivmoddi4+0x1be>
   d76f0:	19db      	adds	r3, r3, r7
   d76f2:	f10a 31ff 	add.w	r1, sl, #4294967295
   d76f6:	f080 8087 	bcs.w	d7808 <__udivmoddi4+0x2c0>
   d76fa:	429a      	cmp	r2, r3
   d76fc:	f240 8084 	bls.w	d7808 <__udivmoddi4+0x2c0>
   d7700:	f1aa 0a02 	sub.w	sl, sl, #2
   d7704:	443b      	add	r3, r7
   d7706:	1a9b      	subs	r3, r3, r2
   d7708:	fa1f f989 	uxth.w	r9, r9
   d770c:	fbb3 f1f8 	udiv	r1, r3, r8
   d7710:	fb08 3311 	mls	r3, r8, r1, r3
   d7714:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d7718:	fb01 f60c 	mul.w	r6, r1, ip
   d771c:	429e      	cmp	r6, r3
   d771e:	d907      	bls.n	d7730 <__udivmoddi4+0x1e8>
   d7720:	19db      	adds	r3, r3, r7
   d7722:	f101 32ff 	add.w	r2, r1, #4294967295
   d7726:	d26b      	bcs.n	d7800 <__udivmoddi4+0x2b8>
   d7728:	429e      	cmp	r6, r3
   d772a:	d969      	bls.n	d7800 <__udivmoddi4+0x2b8>
   d772c:	3902      	subs	r1, #2
   d772e:	443b      	add	r3, r7
   d7730:	1b9b      	subs	r3, r3, r6
   d7732:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d7736:	e78e      	b.n	d7656 <__udivmoddi4+0x10e>
   d7738:	f1c1 0e20 	rsb	lr, r1, #32
   d773c:	fa22 f40e 	lsr.w	r4, r2, lr
   d7740:	408b      	lsls	r3, r1
   d7742:	4323      	orrs	r3, r4
   d7744:	fa20 f70e 	lsr.w	r7, r0, lr
   d7748:	fa06 f401 	lsl.w	r4, r6, r1
   d774c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d7750:	fa26 f60e 	lsr.w	r6, r6, lr
   d7754:	433c      	orrs	r4, r7
   d7756:	fbb6 f9fc 	udiv	r9, r6, ip
   d775a:	0c27      	lsrs	r7, r4, #16
   d775c:	fb0c 6619 	mls	r6, ip, r9, r6
   d7760:	fa1f f883 	uxth.w	r8, r3
   d7764:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d7768:	fb09 f708 	mul.w	r7, r9, r8
   d776c:	42b7      	cmp	r7, r6
   d776e:	fa02 f201 	lsl.w	r2, r2, r1
   d7772:	fa00 fa01 	lsl.w	sl, r0, r1
   d7776:	d908      	bls.n	d778a <__udivmoddi4+0x242>
   d7778:	18f6      	adds	r6, r6, r3
   d777a:	f109 30ff 	add.w	r0, r9, #4294967295
   d777e:	d241      	bcs.n	d7804 <__udivmoddi4+0x2bc>
   d7780:	42b7      	cmp	r7, r6
   d7782:	d93f      	bls.n	d7804 <__udivmoddi4+0x2bc>
   d7784:	f1a9 0902 	sub.w	r9, r9, #2
   d7788:	441e      	add	r6, r3
   d778a:	1bf6      	subs	r6, r6, r7
   d778c:	b2a0      	uxth	r0, r4
   d778e:	fbb6 f4fc 	udiv	r4, r6, ip
   d7792:	fb0c 6614 	mls	r6, ip, r4, r6
   d7796:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d779a:	fb04 f808 	mul.w	r8, r4, r8
   d779e:	45b8      	cmp	r8, r7
   d77a0:	d907      	bls.n	d77b2 <__udivmoddi4+0x26a>
   d77a2:	18ff      	adds	r7, r7, r3
   d77a4:	f104 30ff 	add.w	r0, r4, #4294967295
   d77a8:	d228      	bcs.n	d77fc <__udivmoddi4+0x2b4>
   d77aa:	45b8      	cmp	r8, r7
   d77ac:	d926      	bls.n	d77fc <__udivmoddi4+0x2b4>
   d77ae:	3c02      	subs	r4, #2
   d77b0:	441f      	add	r7, r3
   d77b2:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d77b6:	ebc8 0707 	rsb	r7, r8, r7
   d77ba:	fba0 8902 	umull	r8, r9, r0, r2
   d77be:	454f      	cmp	r7, r9
   d77c0:	4644      	mov	r4, r8
   d77c2:	464e      	mov	r6, r9
   d77c4:	d314      	bcc.n	d77f0 <__udivmoddi4+0x2a8>
   d77c6:	d029      	beq.n	d781c <__udivmoddi4+0x2d4>
   d77c8:	b365      	cbz	r5, d7824 <__udivmoddi4+0x2dc>
   d77ca:	ebba 0304 	subs.w	r3, sl, r4
   d77ce:	eb67 0706 	sbc.w	r7, r7, r6
   d77d2:	fa07 fe0e 	lsl.w	lr, r7, lr
   d77d6:	40cb      	lsrs	r3, r1
   d77d8:	40cf      	lsrs	r7, r1
   d77da:	ea4e 0303 	orr.w	r3, lr, r3
   d77de:	e885 0088 	stmia.w	r5, {r3, r7}
   d77e2:	2100      	movs	r1, #0
   d77e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d77e8:	4613      	mov	r3, r2
   d77ea:	e6f8      	b.n	d75de <__udivmoddi4+0x96>
   d77ec:	4610      	mov	r0, r2
   d77ee:	e6e0      	b.n	d75b2 <__udivmoddi4+0x6a>
   d77f0:	ebb8 0402 	subs.w	r4, r8, r2
   d77f4:	eb69 0603 	sbc.w	r6, r9, r3
   d77f8:	3801      	subs	r0, #1
   d77fa:	e7e5      	b.n	d77c8 <__udivmoddi4+0x280>
   d77fc:	4604      	mov	r4, r0
   d77fe:	e7d8      	b.n	d77b2 <__udivmoddi4+0x26a>
   d7800:	4611      	mov	r1, r2
   d7802:	e795      	b.n	d7730 <__udivmoddi4+0x1e8>
   d7804:	4681      	mov	r9, r0
   d7806:	e7c0      	b.n	d778a <__udivmoddi4+0x242>
   d7808:	468a      	mov	sl, r1
   d780a:	e77c      	b.n	d7706 <__udivmoddi4+0x1be>
   d780c:	3b02      	subs	r3, #2
   d780e:	443c      	add	r4, r7
   d7810:	e748      	b.n	d76a4 <__udivmoddi4+0x15c>
   d7812:	4608      	mov	r0, r1
   d7814:	e70a      	b.n	d762c <__udivmoddi4+0xe4>
   d7816:	3802      	subs	r0, #2
   d7818:	443e      	add	r6, r7
   d781a:	e72f      	b.n	d767c <__udivmoddi4+0x134>
   d781c:	45c2      	cmp	sl, r8
   d781e:	d3e7      	bcc.n	d77f0 <__udivmoddi4+0x2a8>
   d7820:	463e      	mov	r6, r7
   d7822:	e7d1      	b.n	d77c8 <__udivmoddi4+0x280>
   d7824:	4629      	mov	r1, r5
   d7826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d782a:	bf00      	nop

000d782c <__aeabi_idiv0>:
   d782c:	4770      	bx	lr
   d782e:	bf00      	nop

000d7830 <atol>:
   d7830:	220a      	movs	r2, #10
   d7832:	2100      	movs	r1, #0
   d7834:	f000 b8fc 	b.w	d7a30 <strtol>

000d7838 <__cxa_atexit>:
   d7838:	b510      	push	{r4, lr}
   d783a:	4c05      	ldr	r4, [pc, #20]	; (d7850 <__cxa_atexit+0x18>)
   d783c:	4613      	mov	r3, r2
   d783e:	b12c      	cbz	r4, d784c <__cxa_atexit+0x14>
   d7840:	460a      	mov	r2, r1
   d7842:	4601      	mov	r1, r0
   d7844:	2002      	movs	r0, #2
   d7846:	f3af 8000 	nop.w
   d784a:	bd10      	pop	{r4, pc}
   d784c:	4620      	mov	r0, r4
   d784e:	bd10      	pop	{r4, pc}
   d7850:	00000000 	.word	0x00000000

000d7854 <memcpy>:
   d7854:	b510      	push	{r4, lr}
   d7856:	1e43      	subs	r3, r0, #1
   d7858:	440a      	add	r2, r1
   d785a:	4291      	cmp	r1, r2
   d785c:	d004      	beq.n	d7868 <memcpy+0x14>
   d785e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7862:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7866:	e7f8      	b.n	d785a <memcpy+0x6>
   d7868:	bd10      	pop	{r4, pc}

000d786a <memset>:
   d786a:	4402      	add	r2, r0
   d786c:	4603      	mov	r3, r0
   d786e:	4293      	cmp	r3, r2
   d7870:	d002      	beq.n	d7878 <memset+0xe>
   d7872:	f803 1b01 	strb.w	r1, [r3], #1
   d7876:	e7fa      	b.n	d786e <memset+0x4>
   d7878:	4770      	bx	lr
	...

000d787c <srand>:
   d787c:	b538      	push	{r3, r4, r5, lr}
   d787e:	4b12      	ldr	r3, [pc, #72]	; (d78c8 <srand+0x4c>)
   d7880:	681c      	ldr	r4, [r3, #0]
   d7882:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7884:	4605      	mov	r5, r0
   d7886:	b9d3      	cbnz	r3, d78be <srand+0x42>
   d7888:	2018      	movs	r0, #24
   d788a:	f7fd f9cb 	bl	d4c24 <malloc>
   d788e:	f243 330e 	movw	r3, #13070	; 0x330e
   d7892:	63a0      	str	r0, [r4, #56]	; 0x38
   d7894:	8003      	strh	r3, [r0, #0]
   d7896:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d789a:	8043      	strh	r3, [r0, #2]
   d789c:	f241 2334 	movw	r3, #4660	; 0x1234
   d78a0:	8083      	strh	r3, [r0, #4]
   d78a2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d78a6:	80c3      	strh	r3, [r0, #6]
   d78a8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d78ac:	8103      	strh	r3, [r0, #8]
   d78ae:	2305      	movs	r3, #5
   d78b0:	8143      	strh	r3, [r0, #10]
   d78b2:	230b      	movs	r3, #11
   d78b4:	8183      	strh	r3, [r0, #12]
   d78b6:	2201      	movs	r2, #1
   d78b8:	2300      	movs	r3, #0
   d78ba:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d78be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d78c0:	2200      	movs	r2, #0
   d78c2:	611d      	str	r5, [r3, #16]
   d78c4:	615a      	str	r2, [r3, #20]
   d78c6:	bd38      	pop	{r3, r4, r5, pc}
   d78c8:	2003e2ac 	.word	0x2003e2ac

000d78cc <strcpy>:
   d78cc:	4603      	mov	r3, r0
   d78ce:	f811 2b01 	ldrb.w	r2, [r1], #1
   d78d2:	f803 2b01 	strb.w	r2, [r3], #1
   d78d6:	2a00      	cmp	r2, #0
   d78d8:	d1f9      	bne.n	d78ce <strcpy+0x2>
   d78da:	4770      	bx	lr

000d78dc <strdup>:
   d78dc:	4b02      	ldr	r3, [pc, #8]	; (d78e8 <strdup+0xc>)
   d78de:	4601      	mov	r1, r0
   d78e0:	6818      	ldr	r0, [r3, #0]
   d78e2:	f000 b803 	b.w	d78ec <_strdup_r>
   d78e6:	bf00      	nop
   d78e8:	2003e2ac 	.word	0x2003e2ac

000d78ec <_strdup_r>:
   d78ec:	b570      	push	{r4, r5, r6, lr}
   d78ee:	4606      	mov	r6, r0
   d78f0:	4608      	mov	r0, r1
   d78f2:	460c      	mov	r4, r1
   d78f4:	f000 f80d 	bl	d7912 <strlen>
   d78f8:	1c45      	adds	r5, r0, #1
   d78fa:	4629      	mov	r1, r5
   d78fc:	4630      	mov	r0, r6
   d78fe:	f7fd f9b9 	bl	d4c74 <_malloc_r>
   d7902:	4606      	mov	r6, r0
   d7904:	b118      	cbz	r0, d790e <_strdup_r+0x22>
   d7906:	462a      	mov	r2, r5
   d7908:	4621      	mov	r1, r4
   d790a:	f7ff ffa3 	bl	d7854 <memcpy>
   d790e:	4630      	mov	r0, r6
   d7910:	bd70      	pop	{r4, r5, r6, pc}

000d7912 <strlen>:
   d7912:	4603      	mov	r3, r0
   d7914:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7918:	2a00      	cmp	r2, #0
   d791a:	d1fb      	bne.n	d7914 <strlen+0x2>
   d791c:	1a18      	subs	r0, r3, r0
   d791e:	3801      	subs	r0, #1
   d7920:	4770      	bx	lr
	...

000d7924 <_strtol_r>:
   d7924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7928:	4680      	mov	r8, r0
   d792a:	4840      	ldr	r0, [pc, #256]	; (d7a2c <_strtol_r+0x108>)
   d792c:	f8d0 9000 	ldr.w	r9, [r0]
   d7930:	460f      	mov	r7, r1
   d7932:	463d      	mov	r5, r7
   d7934:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7938:	eb09 0004 	add.w	r0, r9, r4
   d793c:	7840      	ldrb	r0, [r0, #1]
   d793e:	f000 0008 	and.w	r0, r0, #8
   d7942:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d7946:	b108      	cbz	r0, d794c <_strtol_r+0x28>
   d7948:	462f      	mov	r7, r5
   d794a:	e7f2      	b.n	d7932 <_strtol_r+0xe>
   d794c:	2c2d      	cmp	r4, #45	; 0x2d
   d794e:	d103      	bne.n	d7958 <_strtol_r+0x34>
   d7950:	1cbd      	adds	r5, r7, #2
   d7952:	787c      	ldrb	r4, [r7, #1]
   d7954:	2601      	movs	r6, #1
   d7956:	e003      	b.n	d7960 <_strtol_r+0x3c>
   d7958:	2c2b      	cmp	r4, #43	; 0x2b
   d795a:	bf04      	itt	eq
   d795c:	787c      	ldrbeq	r4, [r7, #1]
   d795e:	1cbd      	addeq	r5, r7, #2
   d7960:	b113      	cbz	r3, d7968 <_strtol_r+0x44>
   d7962:	2b10      	cmp	r3, #16
   d7964:	d10a      	bne.n	d797c <_strtol_r+0x58>
   d7966:	e05b      	b.n	d7a20 <_strtol_r+0xfc>
   d7968:	2c30      	cmp	r4, #48	; 0x30
   d796a:	d157      	bne.n	d7a1c <_strtol_r+0xf8>
   d796c:	7828      	ldrb	r0, [r5, #0]
   d796e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7972:	2858      	cmp	r0, #88	; 0x58
   d7974:	d14d      	bne.n	d7a12 <_strtol_r+0xee>
   d7976:	786c      	ldrb	r4, [r5, #1]
   d7978:	2310      	movs	r3, #16
   d797a:	3502      	adds	r5, #2
   d797c:	2e00      	cmp	r6, #0
   d797e:	bf14      	ite	ne
   d7980:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d7984:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d7988:	2700      	movs	r7, #0
   d798a:	fbbc faf3 	udiv	sl, ip, r3
   d798e:	4638      	mov	r0, r7
   d7990:	fb03 cc1a 	mls	ip, r3, sl, ip
   d7994:	eb09 0e04 	add.w	lr, r9, r4
   d7998:	f89e e001 	ldrb.w	lr, [lr, #1]
   d799c:	f01e 0f04 	tst.w	lr, #4
   d79a0:	d001      	beq.n	d79a6 <_strtol_r+0x82>
   d79a2:	3c30      	subs	r4, #48	; 0x30
   d79a4:	e00b      	b.n	d79be <_strtol_r+0x9a>
   d79a6:	f01e 0e03 	ands.w	lr, lr, #3
   d79aa:	d01b      	beq.n	d79e4 <_strtol_r+0xc0>
   d79ac:	f1be 0f01 	cmp.w	lr, #1
   d79b0:	bf0c      	ite	eq
   d79b2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d79b6:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d79ba:	ebce 0404 	rsb	r4, lr, r4
   d79be:	42a3      	cmp	r3, r4
   d79c0:	dd10      	ble.n	d79e4 <_strtol_r+0xc0>
   d79c2:	f1b7 3fff 	cmp.w	r7, #4294967295
   d79c6:	d00a      	beq.n	d79de <_strtol_r+0xba>
   d79c8:	4550      	cmp	r0, sl
   d79ca:	d806      	bhi.n	d79da <_strtol_r+0xb6>
   d79cc:	d101      	bne.n	d79d2 <_strtol_r+0xae>
   d79ce:	4564      	cmp	r4, ip
   d79d0:	dc03      	bgt.n	d79da <_strtol_r+0xb6>
   d79d2:	fb03 4000 	mla	r0, r3, r0, r4
   d79d6:	2701      	movs	r7, #1
   d79d8:	e001      	b.n	d79de <_strtol_r+0xba>
   d79da:	f04f 37ff 	mov.w	r7, #4294967295
   d79de:	f815 4b01 	ldrb.w	r4, [r5], #1
   d79e2:	e7d7      	b.n	d7994 <_strtol_r+0x70>
   d79e4:	1c7b      	adds	r3, r7, #1
   d79e6:	d10c      	bne.n	d7a02 <_strtol_r+0xde>
   d79e8:	2e00      	cmp	r6, #0
   d79ea:	f04f 0322 	mov.w	r3, #34	; 0x22
   d79ee:	bf14      	ite	ne
   d79f0:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d79f4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d79f8:	f8c8 3000 	str.w	r3, [r8]
   d79fc:	b92a      	cbnz	r2, d7a0a <_strtol_r+0xe6>
   d79fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7a02:	b106      	cbz	r6, d7a06 <_strtol_r+0xe2>
   d7a04:	4240      	negs	r0, r0
   d7a06:	b172      	cbz	r2, d7a26 <_strtol_r+0x102>
   d7a08:	b107      	cbz	r7, d7a0c <_strtol_r+0xe8>
   d7a0a:	1e69      	subs	r1, r5, #1
   d7a0c:	6011      	str	r1, [r2, #0]
   d7a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7a12:	2430      	movs	r4, #48	; 0x30
   d7a14:	2b00      	cmp	r3, #0
   d7a16:	d1b1      	bne.n	d797c <_strtol_r+0x58>
   d7a18:	2308      	movs	r3, #8
   d7a1a:	e7af      	b.n	d797c <_strtol_r+0x58>
   d7a1c:	230a      	movs	r3, #10
   d7a1e:	e7ad      	b.n	d797c <_strtol_r+0x58>
   d7a20:	2c30      	cmp	r4, #48	; 0x30
   d7a22:	d0a3      	beq.n	d796c <_strtol_r+0x48>
   d7a24:	e7aa      	b.n	d797c <_strtol_r+0x58>
   d7a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7a2a:	bf00      	nop
   d7a2c:	2003e248 	.word	0x2003e248

000d7a30 <strtol>:
   d7a30:	4613      	mov	r3, r2
   d7a32:	460a      	mov	r2, r1
   d7a34:	4601      	mov	r1, r0
   d7a36:	4802      	ldr	r0, [pc, #8]	; (d7a40 <strtol+0x10>)
   d7a38:	6800      	ldr	r0, [r0, #0]
   d7a3a:	f7ff bf73 	b.w	d7924 <_strtol_r>
   d7a3e:	bf00      	nop
   d7a40:	2003e2ac 	.word	0x2003e2ac

000d7a44 <dynalib_user>:
   d7a44:	000d4021 000d405d 000d4089 000d408d     !@..]@...@...@..
   d7a54:	00000000 41206e49 6d72616c 616c4100     ....In Alarm.Ala
   d7a64:	52206d72 74657365 61562000 3a65756c     rm Reset. Value:
   d7a74:	72490020 3020736d 4400203a 72657972      .Irms 0: .Dryer
   d7a84:	616c415f 005f6d72 65736552 72445f74     _Alarm_.Reset_Dr
   d7a94:	00726579 6e676953 535f6c61 6e657274     yer.Signal_Stren
   d7aa4:	00687467 6e676953 515f6c61 696c6175     gth.Signal_Quali
   d7ab4:	50007974 7265776f 706d4100 00300073     ty.Power.Amps.0.

000d7ac4 <_ZL5ALARM>:
   d7ac4:	08060504                                ....

000d7ac8 <_ZL5rPins>:
   d7ac8:	00020003 00000001                       ........

000d7ad0 <_ZTVN8particle13__SPISettingsE>:
	...
   d7ad8:	000d45d5 61666564 20746c75 42534d00     .E..default .MSB
   d7ae8:	42534c00 50533c00 74655349 676e6974     .LSB.<SPISetting
   d7af8:	65642073 6c756166 3c003e74 53495053     s default>.<SPIS
   d7b08:	69747465 2073676e 6c257325 73252075     ettings %s%lu %s
   d7b18:	444f4d20 3e642545 00000000               MODE%d>....

000d7b24 <_ZTVN5spark13EthernetClassE>:
	...
   d7b2c:	000d4cf3 000d4ce9 000d4cdf 000d4cd5     .L...L...L...L..
   d7b3c:	000d4cc9 000d4cbd 000d4cb1 000d4ca9     .L...L...L...L..
   d7b4c:	000d4c9f 000d4c95 000d6441              .L...L..Ad..

000d7b58 <_ZTV8SPIClass>:
	...
   d7b60:	000d4d11 000d4d13                       .M...M..

000d7b68 <_ZL14clock_divisors>:
   d7b68:	18100800 38302820 006e616e 0066766f     .... (08nan.ovf.
   d7b78:	6e69002e 61620066 53006475 61697265     ..inf.baud.Seria
   d7b88:	6553006c 6c616972 79740031 70006570     l.Serial1.type.p
   d7b98:	6d617261 646d6300 00646900 00646e68     aram.cmd.id.hnd.
   d7ba8:	6d727473 6c696600 766c0074 6461006c     strm.filt.lvl.ad
   d7bb8:	6e614864 72656c64 6d657200 4865766f     dHandler.removeH
   d7bc8:	6c646e61 65007265 486d756e 6c646e61     andler.enumHandl
   d7bd8:	00737265 4e4f534a 65727453 6f4c6d61     ers.JSONStreamLo
   d7be8:	6e614867 72656c64 70706100 31302500     gHandler.app.%01
   d7bf8:	00207530 2500205d 202c0064 3a292800     0u .] .%d., .():
   d7c08:	5b200020 646f6300 203d2065 00692500      . [.code = .%i.
   d7c18:	61746564 20736c69 0d00203d 6e6c000a     details = ....ln
   d7c28:	006e6600 65646f63 74656400 006c6961     .fn.code.detail.
   d7c38:	656e6f6e 61727400 69006563 006f666e     none.trace.info.
   d7c48:	6e726177 72726500 7000726f 63696e61     warn.error.panic
   d7c58:	6c6c6100 25005a00 6433302b 3230253a     .all.Z.%+03d:%02
   d7c68:	59250075 2d6d252d 25546425 4d253a48     u.%Y-%m-%dT%H:%M
   d7c78:	2553253a 7361007a 6d697463 00000065     :%S%z.asctime...

000d7c88 <_ZTV14CellularSignal>:
	...
   d7c90:	000d55f1 000d5683 000d55f3 000d56c5     .U...V...U...V..
   d7ca0:	000d55f9 000d5691 000d5625 000d5651     .U...V..%V..QV..
   d7cb0:	fffffffc 00000000 000d567b              ........{V..

000d7cbc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7cc4:	000d57e5 000d57eb 000d582f 000d57f9     .W...W../X...W..
   d7cd4:	000d57e7                                .W..

000d7cd8 <_ZTV9IPAddress>:
	...
   d7ce0:	000d5dd5 000d5dc5 000d5dc7              .]...]...]..

000d7cec <_ZTV9USBSerial>:
	...
   d7cf4:	000d5ead 000d5efd 000d5f0b 000d5261     .^...^..._..aR..
   d7d04:	000d5ee9 000d5eaf 000d5ec5 000d5ef7     .^...^...^...^..
   d7d14:	000d5edb 000d5ea9                       .^...^..

000d7d1c <_ZTVN5spark13CellularClassE>:
	...
   d7d24:	000d6017 000d600d 000d6003 000d5fb9     .`...`...`..._..
   d7d34:	000d5ff7 000d5feb 000d5fdf 000d5fd7     ._..._..._..._..
   d7d44:	000d5fcd 000d5fc3 000d6441              ._..._..Ad..

000d7d50 <_ZTV11USARTSerial>:
	...
   d7d58:	000d60c5 000d6115 000d6123 000d5261     .`...a..#a..aR..
   d7d68:	000d60d9 000d60fb 000d60e7 000d610f     .`...`...`...a..
   d7d78:	000d60c7 000d60cb                       .`...`..

000d7d80 <_ZTV7TwoWire>:
	...
   d7d88:	000d61f1 000d623b 000d6213 000d61f3     .a..;b...b...a..
   d7d98:	000d621b 000d6223 000d622b 000d6233     .b..#b..+b..3b..

000d7da8 <_ZTVN5spark9MeshClassE>:
	...
   d7db0:	000d62d3 000d62c9 000d62bf 000d62b5     .b...b...b...b..
   d7dc0:	000d62a9 000d629d 000d6291 000d6289     .b...b...b...b..
   d7dd0:	000d627f 000d6275 000d6441              .b..ub..Ad..

000d7ddc <_ZTVN5spark12NetworkClassE>:
	...
   d7de4:	000d63d9 000d63e3 000d63ed 000d63f7     .c...c...c...c..
   d7df4:	000d6401 000d640d 000d6419 000d6425     .d...d...d..%d..
   d7e04:	000d642d 000d6437 000d6441 74727173     -d..7d..Ad..sqrt
   d7e14:	00000000                                ....

000d7e18 <_ctype_>:
   d7e18:	20202000 20202020 28282020 20282828     .         ((((( 
   d7e28:	20202020 20202020 20202020 20202020                     
   d7e38:	10108820 10101010 10101010 10101010      ...............
   d7e48:	04040410 04040404 10040404 10101010     ................
   d7e58:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d7e68:	01010101 01010101 01010101 10101010     ................
   d7e78:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d7e88:	02020202 02020202 02020202 10101010     ................
   d7e98:	00000020 00000000 00000000 00000000      ...............
	...

000d7f1c <__sf_fake_stdin>:
	...

000d7f3c <__sf_fake_stdout>:
	...

000d7f5c <__sf_fake_stderr>:
	...
   d7f7c:	00000043                                         C.

000d7f7e <link_const_variable_data_end>:
	...

000d7f80 <link_constructors_location>:
   d7f80:	000d44f9 	.word	0x000d44f9
   d7f84:	000d46b5 	.word	0x000d46b5
   d7f88:	000d46b9 	.word	0x000d46b9
   d7f8c:	000d46bd 	.word	0x000d46bd
   d7f90:	000d47e9 	.word	0x000d47e9
   d7f94:	000d4cfd 	.word	0x000d4cfd
   d7f98:	000d4e79 	.word	0x000d4e79
   d7f9c:	000d5251 	.word	0x000d5251
   d7fa0:	000d556d 	.word	0x000d556d
   d7fa4:	000d557d 	.word	0x000d557d
   d7fa8:	000d55d5 	.word	0x000d55d5
   d7fac:	000d6095 	.word	0x000d6095
   d7fb0:	000d6389 	.word	0x000d6389
   d7fb4:	000d650d 	.word	0x000d650d
   d7fb8:	000d65e5 	.word	0x000d65e5
   d7fbc:	000d667d 	.word	0x000d667d
   d7fc0:	000d6701 	.word	0x000d6701
   d7fc4:	000d67c5 	.word	0x000d67c5
   d7fc8:	000d6889 	.word	0x000d6889

000d7fcc <link_constructors_end>:
   d7fcc:	00000000 	.word	0x00000000
